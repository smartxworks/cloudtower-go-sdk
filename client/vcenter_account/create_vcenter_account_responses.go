// Code generated by go-swagger; DO NOT EDIT.

package vcenter_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateVcenterAccountReader is a Reader for the CreateVcenterAccount structure.
type CreateVcenterAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVcenterAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVcenterAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateVcenterAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateVcenterAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateVcenterAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVcenterAccountOK creates a CreateVcenterAccountOK with default headers values
func NewCreateVcenterAccountOK() *CreateVcenterAccountOK {
	return &CreateVcenterAccountOK{}
}

/* CreateVcenterAccountOK describes a response with status code 200, with default header values.

CreateVcenterAccountOK create vcenter account o k
*/
type CreateVcenterAccountOK struct {
	XTowerRequestID string

	Payload *models.WithTaskVcenterAccount
}

func (o *CreateVcenterAccountOK) Error() string {
	return fmt.Sprintf("[POST /create-vcenter-account][%d] createVcenterAccountOK  %+v", 200, o.Payload)
}
func (o *CreateVcenterAccountOK) GetPayload() *models.WithTaskVcenterAccount {
	return o.Payload
}

func (o *CreateVcenterAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskVcenterAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVcenterAccountBadRequest creates a CreateVcenterAccountBadRequest with default headers values
func NewCreateVcenterAccountBadRequest() *CreateVcenterAccountBadRequest {
	return &CreateVcenterAccountBadRequest{}
}

/* CreateVcenterAccountBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateVcenterAccountBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVcenterAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-vcenter-account][%d] createVcenterAccountBadRequest  %+v", 400, o.Payload)
}
func (o *CreateVcenterAccountBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVcenterAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVcenterAccountNotFound creates a CreateVcenterAccountNotFound with default headers values
func NewCreateVcenterAccountNotFound() *CreateVcenterAccountNotFound {
	return &CreateVcenterAccountNotFound{}
}

/* CreateVcenterAccountNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateVcenterAccountNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVcenterAccountNotFound) Error() string {
	return fmt.Sprintf("[POST /create-vcenter-account][%d] createVcenterAccountNotFound  %+v", 404, o.Payload)
}
func (o *CreateVcenterAccountNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVcenterAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVcenterAccountInternalServerError creates a CreateVcenterAccountInternalServerError with default headers values
func NewCreateVcenterAccountInternalServerError() *CreateVcenterAccountInternalServerError {
	return &CreateVcenterAccountInternalServerError{}
}

/* CreateVcenterAccountInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateVcenterAccountInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVcenterAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-vcenter-account][%d] createVcenterAccountInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateVcenterAccountInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVcenterAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
