// Code generated by go-swagger; DO NOT EDIT.

package vcenter_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVcenterAccountReader is a Reader for the UpdateVcenterAccount structure.
type UpdateVcenterAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVcenterAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVcenterAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateVcenterAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVcenterAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVcenterAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVcenterAccountOK creates a UpdateVcenterAccountOK with default headers values
func NewUpdateVcenterAccountOK() *UpdateVcenterAccountOK {
	return &UpdateVcenterAccountOK{}
}

/* UpdateVcenterAccountOK describes a response with status code 200, with default header values.

UpdateVcenterAccountOK update vcenter account o k
*/
type UpdateVcenterAccountOK struct {
	XTowerRequestID string

	Payload *models.WithTaskVcenterAccount
}

func (o *UpdateVcenterAccountOK) Error() string {
	return fmt.Sprintf("[POST /update-vcenter-account][%d] updateVcenterAccountOK  %+v", 200, o.Payload)
}
func (o *UpdateVcenterAccountOK) GetPayload() *models.WithTaskVcenterAccount {
	return o.Payload
}

func (o *UpdateVcenterAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskVcenterAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcenterAccountBadRequest creates a UpdateVcenterAccountBadRequest with default headers values
func NewUpdateVcenterAccountBadRequest() *UpdateVcenterAccountBadRequest {
	return &UpdateVcenterAccountBadRequest{}
}

/* UpdateVcenterAccountBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVcenterAccountBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVcenterAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-vcenter-account][%d] updateVcenterAccountBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVcenterAccountBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVcenterAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcenterAccountNotFound creates a UpdateVcenterAccountNotFound with default headers values
func NewUpdateVcenterAccountNotFound() *UpdateVcenterAccountNotFound {
	return &UpdateVcenterAccountNotFound{}
}

/* UpdateVcenterAccountNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVcenterAccountNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVcenterAccountNotFound) Error() string {
	return fmt.Sprintf("[POST /update-vcenter-account][%d] updateVcenterAccountNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVcenterAccountNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVcenterAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVcenterAccountInternalServerError creates a UpdateVcenterAccountInternalServerError with default headers values
func NewUpdateVcenterAccountInternalServerError() *UpdateVcenterAccountInternalServerError {
	return &UpdateVcenterAccountInternalServerError{}
}

/* UpdateVcenterAccountInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVcenterAccountInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVcenterAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-vcenter-account][%d] updateVcenterAccountInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVcenterAccountInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVcenterAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
