// Code generated by go-swagger; DO NOT EDIT.

package vcenter_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVcenterAccountsReader is a Reader for the GetVcenterAccounts structure.
type GetVcenterAccountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVcenterAccountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVcenterAccountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVcenterAccountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVcenterAccountsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVcenterAccountsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVcenterAccountsOK creates a GetVcenterAccountsOK with default headers values
func NewGetVcenterAccountsOK() *GetVcenterAccountsOK {
	return &GetVcenterAccountsOK{}
}

/* GetVcenterAccountsOK describes a response with status code 200, with default header values.

GetVcenterAccountsOK get vcenter accounts o k
*/
type GetVcenterAccountsOK struct {
	XTowerRequestID string

	Payload []*models.VcenterAccount
}

func (o *GetVcenterAccountsOK) Error() string {
	return fmt.Sprintf("[POST /get-vcenter-accounts][%d] getVcenterAccountsOK  %+v", 200, o.Payload)
}
func (o *GetVcenterAccountsOK) GetPayload() []*models.VcenterAccount {
	return o.Payload
}

func (o *GetVcenterAccountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcenterAccountsBadRequest creates a GetVcenterAccountsBadRequest with default headers values
func NewGetVcenterAccountsBadRequest() *GetVcenterAccountsBadRequest {
	return &GetVcenterAccountsBadRequest{}
}

/* GetVcenterAccountsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVcenterAccountsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVcenterAccountsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vcenter-accounts][%d] getVcenterAccountsBadRequest  %+v", 400, o.Payload)
}
func (o *GetVcenterAccountsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVcenterAccountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcenterAccountsNotFound creates a GetVcenterAccountsNotFound with default headers values
func NewGetVcenterAccountsNotFound() *GetVcenterAccountsNotFound {
	return &GetVcenterAccountsNotFound{}
}

/* GetVcenterAccountsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVcenterAccountsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVcenterAccountsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vcenter-accounts][%d] getVcenterAccountsNotFound  %+v", 404, o.Payload)
}
func (o *GetVcenterAccountsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVcenterAccountsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVcenterAccountsInternalServerError creates a GetVcenterAccountsInternalServerError with default headers values
func NewGetVcenterAccountsInternalServerError() *GetVcenterAccountsInternalServerError {
	return &GetVcenterAccountsInternalServerError{}
}

/* GetVcenterAccountsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVcenterAccountsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVcenterAccountsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vcenter-accounts][%d] getVcenterAccountsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVcenterAccountsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVcenterAccountsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
