// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVirtualPrivateCloudFloatingIpsConnectionReader is a Reader for the GetVirtualPrivateCloudFloatingIpsConnection structure.
type GetVirtualPrivateCloudFloatingIpsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualPrivateCloudFloatingIpsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualPrivateCloudFloatingIpsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVirtualPrivateCloudFloatingIpsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVirtualPrivateCloudFloatingIpsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVirtualPrivateCloudFloatingIpsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualPrivateCloudFloatingIpsConnectionOK creates a GetVirtualPrivateCloudFloatingIpsConnectionOK with default headers values
func NewGetVirtualPrivateCloudFloatingIpsConnectionOK() *GetVirtualPrivateCloudFloatingIpsConnectionOK {
	return &GetVirtualPrivateCloudFloatingIpsConnectionOK{}
}

/* GetVirtualPrivateCloudFloatingIpsConnectionOK describes a response with status code 200, with default header values.

GetVirtualPrivateCloudFloatingIpsConnectionOK get virtual private cloud floating ips connection o k
*/
type GetVirtualPrivateCloudFloatingIpsConnectionOK struct {
	XTowerRequestID string

	Payload *models.VirtualPrivateCloudFloatingIPConnection
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-floating-ips-connection][%d] getVirtualPrivateCloudFloatingIpsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVirtualPrivateCloudFloatingIpsConnectionOK) GetPayload() *models.VirtualPrivateCloudFloatingIPConnection {
	return o.Payload
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VirtualPrivateCloudFloatingIPConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudFloatingIpsConnectionBadRequest creates a GetVirtualPrivateCloudFloatingIpsConnectionBadRequest with default headers values
func NewGetVirtualPrivateCloudFloatingIpsConnectionBadRequest() *GetVirtualPrivateCloudFloatingIpsConnectionBadRequest {
	return &GetVirtualPrivateCloudFloatingIpsConnectionBadRequest{}
}

/* GetVirtualPrivateCloudFloatingIpsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVirtualPrivateCloudFloatingIpsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-floating-ips-connection][%d] getVirtualPrivateCloudFloatingIpsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVirtualPrivateCloudFloatingIpsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudFloatingIpsConnectionNotFound creates a GetVirtualPrivateCloudFloatingIpsConnectionNotFound with default headers values
func NewGetVirtualPrivateCloudFloatingIpsConnectionNotFound() *GetVirtualPrivateCloudFloatingIpsConnectionNotFound {
	return &GetVirtualPrivateCloudFloatingIpsConnectionNotFound{}
}

/* GetVirtualPrivateCloudFloatingIpsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVirtualPrivateCloudFloatingIpsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-floating-ips-connection][%d] getVirtualPrivateCloudFloatingIpsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVirtualPrivateCloudFloatingIpsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudFloatingIpsConnectionInternalServerError creates a GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError with default headers values
func NewGetVirtualPrivateCloudFloatingIpsConnectionInternalServerError() *GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError {
	return &GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError{}
}

/* GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-floating-ips-connection][%d] getVirtualPrivateCloudFloatingIpsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudFloatingIpsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
