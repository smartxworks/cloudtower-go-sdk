// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_floating_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual private cloud floating ip API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual private cloud floating ip API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BatchCreateVirtualPrivateCloudFloatingIps(params *BatchCreateVirtualPrivateCloudFloatingIpsParams, opts ...ClientOption) (*BatchCreateVirtualPrivateCloudFloatingIpsOK, error)

	CreateVirtualPrivateCloudFloatingIP(params *CreateVirtualPrivateCloudFloatingIPParams, opts ...ClientOption) (*CreateVirtualPrivateCloudFloatingIPOK, error)

	DeleteVirtualPrivateCloudFloatingIP(params *DeleteVirtualPrivateCloudFloatingIPParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudFloatingIPOK, error)

	GetVirtualPrivateCloudFloatingIps(params *GetVirtualPrivateCloudFloatingIpsParams, opts ...ClientOption) (*GetVirtualPrivateCloudFloatingIpsOK, error)

	GetVirtualPrivateCloudFloatingIpsConnection(params *GetVirtualPrivateCloudFloatingIpsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudFloatingIpsConnectionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BatchCreateVirtualPrivateCloudFloatingIps batch create virtual private cloud floating ips API
*/
func (a *Client) BatchCreateVirtualPrivateCloudFloatingIps(params *BatchCreateVirtualPrivateCloudFloatingIpsParams, opts ...ClientOption) (*BatchCreateVirtualPrivateCloudFloatingIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchCreateVirtualPrivateCloudFloatingIpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BatchCreateVirtualPrivateCloudFloatingIps",
		Method:             "POST",
		PathPattern:        "/batch-create-virtual-private-cloud-floating-ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BatchCreateVirtualPrivateCloudFloatingIpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BatchCreateVirtualPrivateCloudFloatingIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BatchCreateVirtualPrivateCloudFloatingIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVirtualPrivateCloudFloatingIP create virtual private cloud floating Ip API
*/
func (a *Client) CreateVirtualPrivateCloudFloatingIP(params *CreateVirtualPrivateCloudFloatingIPParams, opts ...ClientOption) (*CreateVirtualPrivateCloudFloatingIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVirtualPrivateCloudFloatingIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVirtualPrivateCloudFloatingIp",
		Method:             "POST",
		PathPattern:        "/create-virtual-private-cloud-floating-ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVirtualPrivateCloudFloatingIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVirtualPrivateCloudFloatingIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVirtualPrivateCloudFloatingIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVirtualPrivateCloudFloatingIP delete virtual private cloud floating Ip API
*/
func (a *Client) DeleteVirtualPrivateCloudFloatingIP(params *DeleteVirtualPrivateCloudFloatingIPParams, opts ...ClientOption) (*DeleteVirtualPrivateCloudFloatingIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVirtualPrivateCloudFloatingIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVirtualPrivateCloudFloatingIp",
		Method:             "POST",
		PathPattern:        "/delete-virtual-private-cloud-floating-ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVirtualPrivateCloudFloatingIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVirtualPrivateCloudFloatingIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVirtualPrivateCloudFloatingIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudFloatingIps get virtual private cloud floating ips API
*/
func (a *Client) GetVirtualPrivateCloudFloatingIps(params *GetVirtualPrivateCloudFloatingIpsParams, opts ...ClientOption) (*GetVirtualPrivateCloudFloatingIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudFloatingIpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudFloatingIps",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-floating-ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudFloatingIpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudFloatingIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudFloatingIps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVirtualPrivateCloudFloatingIpsConnection get virtual private cloud floating ips connection API
*/
func (a *Client) GetVirtualPrivateCloudFloatingIpsConnection(params *GetVirtualPrivateCloudFloatingIpsConnectionParams, opts ...ClientOption) (*GetVirtualPrivateCloudFloatingIpsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualPrivateCloudFloatingIpsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVirtualPrivateCloudFloatingIpsConnection",
		Method:             "POST",
		PathPattern:        "/get-virtual-private-cloud-floating-ips-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualPrivateCloudFloatingIpsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVirtualPrivateCloudFloatingIpsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVirtualPrivateCloudFloatingIpsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
