// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateNicReader is a Reader for the UpdateNic structure.
type UpdateNicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateNicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateNicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateNicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNicOK creates a UpdateNicOK with default headers values
func NewUpdateNicOK() *UpdateNicOK {
	return &UpdateNicOK{}
}

/* UpdateNicOK describes a response with status code 200, with default header values.

UpdateNicOK update nic o k
*/
type UpdateNicOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskNic
}

func (o *UpdateNicOK) Error() string {
	return fmt.Sprintf("[POST /update-nic][%d] updateNicOK  %+v", 200, o.Payload)
}
func (o *UpdateNicOK) GetPayload() []*models.WithTaskNic {
	return o.Payload
}

func (o *UpdateNicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNicBadRequest creates a UpdateNicBadRequest with default headers values
func NewUpdateNicBadRequest() *UpdateNicBadRequest {
	return &UpdateNicBadRequest{}
}

/* UpdateNicBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateNicBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNicBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-nic][%d] updateNicBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateNicBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNicNotFound creates a UpdateNicNotFound with default headers values
func NewUpdateNicNotFound() *UpdateNicNotFound {
	return &UpdateNicNotFound{}
}

/* UpdateNicNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateNicNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNicNotFound) Error() string {
	return fmt.Sprintf("[POST /update-nic][%d] updateNicNotFound  %+v", 404, o.Payload)
}
func (o *UpdateNicNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNicInternalServerError creates a UpdateNicInternalServerError with default headers values
func NewUpdateNicInternalServerError() *UpdateNicInternalServerError {
	return &UpdateNicInternalServerError{}
}

/* UpdateNicInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateNicInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNicInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-nic][%d] updateNicInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateNicInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
