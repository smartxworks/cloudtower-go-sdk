// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNicsReader is a Reader for the GetNics structure.
type GetNicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetNicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetNicsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetNicsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNicsOK creates a GetNicsOK with default headers values
func NewGetNicsOK() *GetNicsOK {
	return &GetNicsOK{}
}

/* GetNicsOK describes a response with status code 200, with default header values.

GetNicsOK get nics o k
*/
type GetNicsOK struct {
	XTowerRequestID string

	Payload []*models.Nic
}

func (o *GetNicsOK) Error() string {
	return fmt.Sprintf("[POST /get-nics][%d] getNicsOK  %+v", 200, o.Payload)
}
func (o *GetNicsOK) GetPayload() []*models.Nic {
	return o.Payload
}

func (o *GetNicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsBadRequest creates a GetNicsBadRequest with default headers values
func NewGetNicsBadRequest() *GetNicsBadRequest {
	return &GetNicsBadRequest{}
}

/* GetNicsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNicsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-nics][%d] getNicsBadRequest  %+v", 400, o.Payload)
}
func (o *GetNicsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsNotFound creates a GetNicsNotFound with default headers values
func NewGetNicsNotFound() *GetNicsNotFound {
	return &GetNicsNotFound{}
}

/* GetNicsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNicsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-nics][%d] getNicsNotFound  %+v", 404, o.Payload)
}
func (o *GetNicsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsInternalServerError creates a GetNicsInternalServerError with default headers values
func NewGetNicsInternalServerError() *GetNicsInternalServerError {
	return &GetNicsInternalServerError{}
}

/* GetNicsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNicsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-nics][%d] getNicsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNicsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
