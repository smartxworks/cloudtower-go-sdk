// Code generated by go-swagger; DO NOT EDIT.

package nic

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNicsConnectionReader is a Reader for the GetNicsConnection structure.
type GetNicsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNicsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNicsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetNicsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetNicsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetNicsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNicsConnectionOK creates a GetNicsConnectionOK with default headers values
func NewGetNicsConnectionOK() *GetNicsConnectionOK {
	return &GetNicsConnectionOK{}
}

/* GetNicsConnectionOK describes a response with status code 200, with default header values.

GetNicsConnectionOK get nics connection o k
*/
type GetNicsConnectionOK struct {
	XTowerRequestID string

	Payload *models.NicConnection
}

func (o *GetNicsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-nics-connection][%d] getNicsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetNicsConnectionOK) GetPayload() *models.NicConnection {
	return o.Payload
}

func (o *GetNicsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.NicConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsConnectionBadRequest creates a GetNicsConnectionBadRequest with default headers values
func NewGetNicsConnectionBadRequest() *GetNicsConnectionBadRequest {
	return &GetNicsConnectionBadRequest{}
}

/* GetNicsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNicsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-nics-connection][%d] getNicsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetNicsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsConnectionNotFound creates a GetNicsConnectionNotFound with default headers values
func NewGetNicsConnectionNotFound() *GetNicsConnectionNotFound {
	return &GetNicsConnectionNotFound{}
}

/* GetNicsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNicsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-nics-connection][%d] getNicsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetNicsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNicsConnectionInternalServerError creates a GetNicsConnectionInternalServerError with default headers values
func NewGetNicsConnectionInternalServerError() *GetNicsConnectionInternalServerError {
	return &GetNicsConnectionInternalServerError{}
}

/* GetNicsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNicsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNicsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-nics-connection][%d] getNicsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNicsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNicsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
