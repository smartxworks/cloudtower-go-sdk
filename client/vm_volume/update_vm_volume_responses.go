// Code generated by go-swagger; DO NOT EDIT.

package vm_volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVMVolumeReader is a Reader for the UpdateVMVolume structure.
type UpdateVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 304:
		result := NewUpdateVMVolumeNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 400:
		result := NewUpdateVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVMVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVMVolumeOK creates a UpdateVMVolumeOK with default headers values
func NewUpdateVMVolumeOK() *UpdateVMVolumeOK {
	return &UpdateVMVolumeOK{}
}

/* UpdateVMVolumeOK describes a response with status code 200, with default header values.

UpdateVMVolumeOK update Vm volume o k
*/
type UpdateVMVolumeOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMVolume
}

func (o *UpdateVMVolumeOK) Error() string {
	return fmt.Sprintf("[POST /update-vm-volume][%d] updateVmVolumeOK  %+v", 200, o.Payload)
}
func (o *UpdateVMVolumeOK) GetPayload() []*models.WithTaskVMVolume {
	return o.Payload
}

func (o *UpdateVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMVolumeNotModified creates a UpdateVMVolumeNotModified with default headers values
func NewUpdateVMVolumeNotModified() *UpdateVMVolumeNotModified {
	return &UpdateVMVolumeNotModified{}
}

/* UpdateVMVolumeNotModified describes a response with status code 304, with default header values.

Not modified
*/
type UpdateVMVolumeNotModified struct {
}

func (o *UpdateVMVolumeNotModified) Error() string {
	return fmt.Sprintf("[POST /update-vm-volume][%d] updateVmVolumeNotModified ", 304)
}

func (o *UpdateVMVolumeNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVMVolumeBadRequest creates a UpdateVMVolumeBadRequest with default headers values
func NewUpdateVMVolumeBadRequest() *UpdateVMVolumeBadRequest {
	return &UpdateVMVolumeBadRequest{}
}

/* UpdateVMVolumeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVMVolumeBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-vm-volume][%d] updateVmVolumeBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVMVolumeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMVolumeNotFound creates a UpdateVMVolumeNotFound with default headers values
func NewUpdateVMVolumeNotFound() *UpdateVMVolumeNotFound {
	return &UpdateVMVolumeNotFound{}
}

/* UpdateVMVolumeNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVMVolumeNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /update-vm-volume][%d] updateVmVolumeNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVMVolumeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMVolumeInternalServerError creates a UpdateVMVolumeInternalServerError with default headers values
func NewUpdateVMVolumeInternalServerError() *UpdateVMVolumeInternalServerError {
	return &UpdateVMVolumeInternalServerError{}
}

/* UpdateVMVolumeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVMVolumeInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-vm-volume][%d] updateVmVolumeInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVMVolumeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
