// Code generated by go-swagger; DO NOT EDIT.

package vm_volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ImportVMVolumeReader is a Reader for the ImportVMVolume structure.
type ImportVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewImportVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewImportVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewImportVMVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewImportVMVolumeOK creates a ImportVMVolumeOK with default headers values
func NewImportVMVolumeOK() *ImportVMVolumeOK {
	return &ImportVMVolumeOK{}
}

/* ImportVMVolumeOK describes a response with status code 200, with default header values.

ImportVMVolumeOK import Vm volume o k
*/
type ImportVMVolumeOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMVolume
}

func (o *ImportVMVolumeOK) Error() string {
	return fmt.Sprintf("[POST /import-vm-volume][%d] importVmVolumeOK  %+v", 200, o.Payload)
}
func (o *ImportVMVolumeOK) GetPayload() []*models.WithTaskVMVolume {
	return o.Payload
}

func (o *ImportVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportVMVolumeBadRequest creates a ImportVMVolumeBadRequest with default headers values
func NewImportVMVolumeBadRequest() *ImportVMVolumeBadRequest {
	return &ImportVMVolumeBadRequest{}
}

/* ImportVMVolumeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportVMVolumeBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ImportVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /import-vm-volume][%d] importVmVolumeBadRequest  %+v", 400, o.Payload)
}
func (o *ImportVMVolumeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ImportVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportVMVolumeNotFound creates a ImportVMVolumeNotFound with default headers values
func NewImportVMVolumeNotFound() *ImportVMVolumeNotFound {
	return &ImportVMVolumeNotFound{}
}

/* ImportVMVolumeNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportVMVolumeNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ImportVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /import-vm-volume][%d] importVmVolumeNotFound  %+v", 404, o.Payload)
}
func (o *ImportVMVolumeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ImportVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportVMVolumeInternalServerError creates a ImportVMVolumeInternalServerError with default headers values
func NewImportVMVolumeInternalServerError() *ImportVMVolumeInternalServerError {
	return &ImportVMVolumeInternalServerError{}
}

/* ImportVMVolumeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ImportVMVolumeInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ImportVMVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /import-vm-volume][%d] importVmVolumeInternalServerError  %+v", 500, o.Payload)
}
func (o *ImportVMVolumeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ImportVMVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
