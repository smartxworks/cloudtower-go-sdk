// Code generated by go-swagger; DO NOT EDIT.

package vm_volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMVolumesReader is a Reader for the GetVMVolumes structure.
type GetVMVolumesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMVolumesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMVolumesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMVolumesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMVolumesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMVolumesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMVolumesOK creates a GetVMVolumesOK with default headers values
func NewGetVMVolumesOK() *GetVMVolumesOK {
	return &GetVMVolumesOK{}
}

/* GetVMVolumesOK describes a response with status code 200, with default header values.

GetVMVolumesOK get Vm volumes o k
*/
type GetVMVolumesOK struct {
	XTowerRequestID string

	Payload []*models.VMVolume
}

func (o *GetVMVolumesOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-volumes][%d] getVmVolumesOK  %+v", 200, o.Payload)
}
func (o *GetVMVolumesOK) GetPayload() []*models.VMVolume {
	return o.Payload
}

func (o *GetVMVolumesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumesBadRequest creates a GetVMVolumesBadRequest with default headers values
func NewGetVMVolumesBadRequest() *GetVMVolumesBadRequest {
	return &GetVMVolumesBadRequest{}
}

/* GetVMVolumesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMVolumesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-volumes][%d] getVmVolumesBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMVolumesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumesNotFound creates a GetVMVolumesNotFound with default headers values
func NewGetVMVolumesNotFound() *GetVMVolumesNotFound {
	return &GetVMVolumesNotFound{}
}

/* GetVMVolumesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMVolumesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-volumes][%d] getVmVolumesNotFound  %+v", 404, o.Payload)
}
func (o *GetVMVolumesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumesInternalServerError creates a GetVMVolumesInternalServerError with default headers values
func NewGetVMVolumesInternalServerError() *GetVMVolumesInternalServerError {
	return &GetVMVolumesInternalServerError{}
}

/* GetVMVolumesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMVolumesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-volumes][%d] getVmVolumesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMVolumesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
