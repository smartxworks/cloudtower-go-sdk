// Code generated by go-swagger; DO NOT EDIT.

package vm_volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ExportVMVolumeReader is a Reader for the ExportVMVolume structure.
type ExportVMVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportVMVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportVMVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewExportVMVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewExportVMVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewExportVMVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportVMVolumeOK creates a ExportVMVolumeOK with default headers values
func NewExportVMVolumeOK() *ExportVMVolumeOK {
	return &ExportVMVolumeOK{}
}

/* ExportVMVolumeOK describes a response with status code 200, with default header values.

ExportVMVolumeOK export Vm volume o k
*/
type ExportVMVolumeOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMExportFile
}

func (o *ExportVMVolumeOK) Error() string {
	return fmt.Sprintf("[POST /export-vm-volume][%d] exportVmVolumeOK  %+v", 200, o.Payload)
}
func (o *ExportVMVolumeOK) GetPayload() []*models.WithTaskVMExportFile {
	return o.Payload
}

func (o *ExportVMVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMVolumeBadRequest creates a ExportVMVolumeBadRequest with default headers values
func NewExportVMVolumeBadRequest() *ExportVMVolumeBadRequest {
	return &ExportVMVolumeBadRequest{}
}

/* ExportVMVolumeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ExportVMVolumeBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /export-vm-volume][%d] exportVmVolumeBadRequest  %+v", 400, o.Payload)
}
func (o *ExportVMVolumeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMVolumeNotFound creates a ExportVMVolumeNotFound with default headers values
func NewExportVMVolumeNotFound() *ExportVMVolumeNotFound {
	return &ExportVMVolumeNotFound{}
}

/* ExportVMVolumeNotFound describes a response with status code 404, with default header values.

Not found
*/
type ExportVMVolumeNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /export-vm-volume][%d] exportVmVolumeNotFound  %+v", 404, o.Payload)
}
func (o *ExportVMVolumeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMVolumeInternalServerError creates a ExportVMVolumeInternalServerError with default headers values
func NewExportVMVolumeInternalServerError() *ExportVMVolumeInternalServerError {
	return &ExportVMVolumeInternalServerError{}
}

/* ExportVMVolumeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ExportVMVolumeInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /export-vm-volume][%d] exportVmVolumeInternalServerError  %+v", 500, o.Payload)
}
func (o *ExportVMVolumeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
