// Code generated by go-swagger; DO NOT EDIT.

package alert_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetAlertRulesReader is a Reader for the GetAlertRules structure.
type GetAlertRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAlertRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAlertRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetAlertRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetAlertRulesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetAlertRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAlertRulesOK creates a GetAlertRulesOK with default headers values
func NewGetAlertRulesOK() *GetAlertRulesOK {
	return &GetAlertRulesOK{}
}

/* GetAlertRulesOK describes a response with status code 200, with default header values.

GetAlertRulesOK get alert rules o k
*/
type GetAlertRulesOK struct {
	XTowerRequestID string

	Payload []*models.AlertRule
}

func (o *GetAlertRulesOK) Error() string {
	return fmt.Sprintf("[POST /get-alert-rules][%d] getAlertRulesOK  %+v", 200, o.Payload)
}
func (o *GetAlertRulesOK) GetPayload() []*models.AlertRule {
	return o.Payload
}

func (o *GetAlertRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertRulesBadRequest creates a GetAlertRulesBadRequest with default headers values
func NewGetAlertRulesBadRequest() *GetAlertRulesBadRequest {
	return &GetAlertRulesBadRequest{}
}

/* GetAlertRulesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetAlertRulesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetAlertRulesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-alert-rules][%d] getAlertRulesBadRequest  %+v", 400, o.Payload)
}
func (o *GetAlertRulesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAlertRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertRulesNotFound creates a GetAlertRulesNotFound with default headers values
func NewGetAlertRulesNotFound() *GetAlertRulesNotFound {
	return &GetAlertRulesNotFound{}
}

/* GetAlertRulesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetAlertRulesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetAlertRulesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-alert-rules][%d] getAlertRulesNotFound  %+v", 404, o.Payload)
}
func (o *GetAlertRulesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAlertRulesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertRulesInternalServerError creates a GetAlertRulesInternalServerError with default headers values
func NewGetAlertRulesInternalServerError() *GetAlertRulesInternalServerError {
	return &GetAlertRulesInternalServerError{}
}

/* GetAlertRulesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetAlertRulesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetAlertRulesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-alert-rules][%d] getAlertRulesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAlertRulesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetAlertRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
