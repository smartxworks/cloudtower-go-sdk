// Code generated by go-swagger; DO NOT EDIT.

package backup_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ExecuteBackupPlanReader is a Reader for the ExecuteBackupPlan structure.
type ExecuteBackupPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteBackupPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteBackupPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewExecuteBackupPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewExecuteBackupPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewExecuteBackupPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExecuteBackupPlanOK creates a ExecuteBackupPlanOK with default headers values
func NewExecuteBackupPlanOK() *ExecuteBackupPlanOK {
	return &ExecuteBackupPlanOK{}
}

/* ExecuteBackupPlanOK describes a response with status code 200, with default header values.

ExecuteBackupPlanOK execute backup plan o k
*/
type ExecuteBackupPlanOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskBackupPlanExecution
}

func (o *ExecuteBackupPlanOK) Error() string {
	return fmt.Sprintf("[POST /execute-backup-plan][%d] executeBackupPlanOK  %+v", 200, o.Payload)
}
func (o *ExecuteBackupPlanOK) GetPayload() []*models.WithTaskBackupPlanExecution {
	return o.Payload
}

func (o *ExecuteBackupPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteBackupPlanBadRequest creates a ExecuteBackupPlanBadRequest with default headers values
func NewExecuteBackupPlanBadRequest() *ExecuteBackupPlanBadRequest {
	return &ExecuteBackupPlanBadRequest{}
}

/* ExecuteBackupPlanBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ExecuteBackupPlanBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExecuteBackupPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /execute-backup-plan][%d] executeBackupPlanBadRequest  %+v", 400, o.Payload)
}
func (o *ExecuteBackupPlanBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExecuteBackupPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteBackupPlanNotFound creates a ExecuteBackupPlanNotFound with default headers values
func NewExecuteBackupPlanNotFound() *ExecuteBackupPlanNotFound {
	return &ExecuteBackupPlanNotFound{}
}

/* ExecuteBackupPlanNotFound describes a response with status code 404, with default header values.

Not found
*/
type ExecuteBackupPlanNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExecuteBackupPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /execute-backup-plan][%d] executeBackupPlanNotFound  %+v", 404, o.Payload)
}
func (o *ExecuteBackupPlanNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExecuteBackupPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteBackupPlanInternalServerError creates a ExecuteBackupPlanInternalServerError with default headers values
func NewExecuteBackupPlanInternalServerError() *ExecuteBackupPlanInternalServerError {
	return &ExecuteBackupPlanInternalServerError{}
}

/* ExecuteBackupPlanInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ExecuteBackupPlanInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExecuteBackupPlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /execute-backup-plan][%d] executeBackupPlanInternalServerError  %+v", 500, o.Payload)
}
func (o *ExecuteBackupPlanInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExecuteBackupPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
