// Code generated by go-swagger; DO NOT EDIT.

package backup_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// BackupRebuildVMReader is a Reader for the BackupRebuildVM structure.
type BackupRebuildVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackupRebuildVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBackupRebuildVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewBackupRebuildVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewBackupRebuildVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewBackupRebuildVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBackupRebuildVMOK creates a BackupRebuildVMOK with default headers values
func NewBackupRebuildVMOK() *BackupRebuildVMOK {
	return &BackupRebuildVMOK{}
}

/* BackupRebuildVMOK describes a response with status code 200, with default header values.

BackupRebuildVMOK backup rebuild Vm o k
*/
type BackupRebuildVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskBackupRestoreExecution
}

func (o *BackupRebuildVMOK) Error() string {
	return fmt.Sprintf("[POST /backup-rebuild-vm][%d] backupRebuildVmOK  %+v", 200, o.Payload)
}
func (o *BackupRebuildVMOK) GetPayload() []*models.WithTaskBackupRestoreExecution {
	return o.Payload
}

func (o *BackupRebuildVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupRebuildVMBadRequest creates a BackupRebuildVMBadRequest with default headers values
func NewBackupRebuildVMBadRequest() *BackupRebuildVMBadRequest {
	return &BackupRebuildVMBadRequest{}
}

/* BackupRebuildVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type BackupRebuildVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *BackupRebuildVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /backup-rebuild-vm][%d] backupRebuildVmBadRequest  %+v", 400, o.Payload)
}
func (o *BackupRebuildVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *BackupRebuildVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupRebuildVMNotFound creates a BackupRebuildVMNotFound with default headers values
func NewBackupRebuildVMNotFound() *BackupRebuildVMNotFound {
	return &BackupRebuildVMNotFound{}
}

/* BackupRebuildVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type BackupRebuildVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *BackupRebuildVMNotFound) Error() string {
	return fmt.Sprintf("[POST /backup-rebuild-vm][%d] backupRebuildVmNotFound  %+v", 404, o.Payload)
}
func (o *BackupRebuildVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *BackupRebuildVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupRebuildVMInternalServerError creates a BackupRebuildVMInternalServerError with default headers values
func NewBackupRebuildVMInternalServerError() *BackupRebuildVMInternalServerError {
	return &BackupRebuildVMInternalServerError{}
}

/* BackupRebuildVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type BackupRebuildVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *BackupRebuildVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /backup-rebuild-vm][%d] backupRebuildVmInternalServerError  %+v", 500, o.Payload)
}
func (o *BackupRebuildVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *BackupRebuildVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
