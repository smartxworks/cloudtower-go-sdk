// Code generated by go-swagger; DO NOT EDIT.

package backup_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateBackupPlanReader is a Reader for the UpdateBackupPlan structure.
type UpdateBackupPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBackupPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBackupPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateBackupPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateBackupPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateBackupPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateBackupPlanOK creates a UpdateBackupPlanOK with default headers values
func NewUpdateBackupPlanOK() *UpdateBackupPlanOK {
	return &UpdateBackupPlanOK{}
}

/* UpdateBackupPlanOK describes a response with status code 200, with default header values.

UpdateBackupPlanOK update backup plan o k
*/
type UpdateBackupPlanOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskBackupPlan
}

func (o *UpdateBackupPlanOK) Error() string {
	return fmt.Sprintf("[POST /update-backup-plan][%d] updateBackupPlanOK  %+v", 200, o.Payload)
}
func (o *UpdateBackupPlanOK) GetPayload() []*models.WithTaskBackupPlan {
	return o.Payload
}

func (o *UpdateBackupPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBackupPlanBadRequest creates a UpdateBackupPlanBadRequest with default headers values
func NewUpdateBackupPlanBadRequest() *UpdateBackupPlanBadRequest {
	return &UpdateBackupPlanBadRequest{}
}

/* UpdateBackupPlanBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateBackupPlanBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBackupPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-backup-plan][%d] updateBackupPlanBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateBackupPlanBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBackupPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBackupPlanNotFound creates a UpdateBackupPlanNotFound with default headers values
func NewUpdateBackupPlanNotFound() *UpdateBackupPlanNotFound {
	return &UpdateBackupPlanNotFound{}
}

/* UpdateBackupPlanNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateBackupPlanNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBackupPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /update-backup-plan][%d] updateBackupPlanNotFound  %+v", 404, o.Payload)
}
func (o *UpdateBackupPlanNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBackupPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBackupPlanInternalServerError creates a UpdateBackupPlanInternalServerError with default headers values
func NewUpdateBackupPlanInternalServerError() *UpdateBackupPlanInternalServerError {
	return &UpdateBackupPlanInternalServerError{}
}

/* UpdateBackupPlanInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateBackupPlanInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBackupPlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-backup-plan][%d] updateBackupPlanInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateBackupPlanInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBackupPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
