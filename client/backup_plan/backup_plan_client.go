// Code generated by go-swagger; DO NOT EDIT.

package backup_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup plan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup plan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BackupRebuildVM(params *BackupRebuildVMParams, opts ...ClientOption) (*BackupRebuildVMOK, error)

	BackupRestoreVMInPlace(params *BackupRestoreVMInPlaceParams, opts ...ClientOption) (*BackupRestoreVMInPlaceOK, error)

	CreateBackupPlan(params *CreateBackupPlanParams, opts ...ClientOption) (*CreateBackupPlanOK, error)

	DeleteBackupPlan(params *DeleteBackupPlanParams, opts ...ClientOption) (*DeleteBackupPlanOK, error)

	DeleteBackupRestorePoint(params *DeleteBackupRestorePointParams, opts ...ClientOption) (*DeleteBackupRestorePointOK, error)

	ExecuteBackupPlan(params *ExecuteBackupPlanParams, opts ...ClientOption) (*ExecuteBackupPlanOK, error)

	GetBackupPlans(params *GetBackupPlansParams, opts ...ClientOption) (*GetBackupPlansOK, error)

	GetBackupPlansConnection(params *GetBackupPlansConnectionParams, opts ...ClientOption) (*GetBackupPlansConnectionOK, error)

	GetBackupRestorePointMetadata(params *GetBackupRestorePointMetadataParams, opts ...ClientOption) (*GetBackupRestorePointMetadataOK, error)

	ResumeBackupPlan(params *ResumeBackupPlanParams, opts ...ClientOption) (*ResumeBackupPlanOK, error)

	SuspendBackupPlan(params *SuspendBackupPlanParams, opts ...ClientOption) (*SuspendBackupPlanOK, error)

	UpdateBackupPlan(params *UpdateBackupPlanParams, opts ...ClientOption) (*UpdateBackupPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BackupRebuildVM backup rebuild Vm API
*/
func (a *Client) BackupRebuildVM(params *BackupRebuildVMParams, opts ...ClientOption) (*BackupRebuildVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRebuildVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRebuildVm",
		Method:             "POST",
		PathPattern:        "/backup-rebuild-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BackupRebuildVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRebuildVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BackupRebuildVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BackupRestoreVMInPlace backup restore Vm in place API
*/
func (a *Client) BackupRestoreVMInPlace(params *BackupRestoreVMInPlaceParams, opts ...ClientOption) (*BackupRestoreVMInPlaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRestoreVMInPlaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRestoreVmInPlace",
		Method:             "POST",
		PathPattern:        "/backup-restore-vm-in-place",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BackupRestoreVMInPlaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRestoreVMInPlaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BackupRestoreVmInPlace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBackupPlan create backup plan API
*/
func (a *Client) CreateBackupPlan(params *CreateBackupPlanParams, opts ...ClientOption) (*CreateBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBackupPlan",
		Method:             "POST",
		PathPattern:        "/create-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBackupPlan delete backup plan API
*/
func (a *Client) DeleteBackupPlan(params *DeleteBackupPlanParams, opts ...ClientOption) (*DeleteBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBackupPlan",
		Method:             "POST",
		PathPattern:        "/delete-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBackupRestorePoint delete backup restore point API
*/
func (a *Client) DeleteBackupRestorePoint(params *DeleteBackupRestorePointParams, opts ...ClientOption) (*DeleteBackupRestorePointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupRestorePointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBackupRestorePoint",
		Method:             "POST",
		PathPattern:        "/delete-backup-restore-point",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBackupRestorePointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupRestorePointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBackupRestorePoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteBackupPlan execute backup plan API
*/
func (a *Client) ExecuteBackupPlan(params *ExecuteBackupPlanParams, opts ...ClientOption) (*ExecuteBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteBackupPlan",
		Method:             "POST",
		PathPattern:        "/execute-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExecuteBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBackupPlans get backup plans API
*/
func (a *Client) GetBackupPlans(params *GetBackupPlansParams, opts ...ClientOption) (*GetBackupPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupPlans",
		Method:             "POST",
		PathPattern:        "/get-backup-plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBackupPlansConnection get backup plans connection API
*/
func (a *Client) GetBackupPlansConnection(params *GetBackupPlansConnectionParams, opts ...ClientOption) (*GetBackupPlansConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupPlansConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupPlansConnection",
		Method:             "POST",
		PathPattern:        "/get-backup-plans-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupPlansConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupPlansConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupPlansConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBackupRestorePointMetadata get backup restore point metadata API
*/
func (a *Client) GetBackupRestorePointMetadata(params *GetBackupRestorePointMetadataParams, opts ...ClientOption) (*GetBackupRestorePointMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupRestorePointMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupRestorePointMetadata",
		Method:             "POST",
		PathPattern:        "/get-backup-restore-point-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupRestorePointMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupRestorePointMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupRestorePointMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeBackupPlan resume backup plan API
*/
func (a *Client) ResumeBackupPlan(params *ResumeBackupPlanParams, opts ...ClientOption) (*ResumeBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResumeBackupPlan",
		Method:             "POST",
		PathPattern:        "/resume-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuspendBackupPlan suspend backup plan API
*/
func (a *Client) SuspendBackupPlan(params *SuspendBackupPlanParams, opts ...ClientOption) (*SuspendBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuspendBackupPlan",
		Method:             "POST",
		PathPattern:        "/suspend-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuspendBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuspendBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuspendBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBackupPlan update backup plan API
*/
func (a *Client) UpdateBackupPlan(params *UpdateBackupPlanParams, opts ...ClientOption) (*UpdateBackupPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBackupPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBackupPlan",
		Method:             "POST",
		PathPattern:        "/update-backup-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBackupPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBackupPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBackupPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
