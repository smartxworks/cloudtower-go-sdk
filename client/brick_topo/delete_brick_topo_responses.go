// Code generated by go-swagger; DO NOT EDIT.

package brick_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteBrickTopoReader is a Reader for the DeleteBrickTopo structure.
type DeleteBrickTopoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBrickTopoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBrickTopoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteBrickTopoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteBrickTopoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteBrickTopoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteBrickTopoOK creates a DeleteBrickTopoOK with default headers values
func NewDeleteBrickTopoOK() *DeleteBrickTopoOK {
	return &DeleteBrickTopoOK{}
}

/* DeleteBrickTopoOK describes a response with status code 200, with default header values.

DeleteBrickTopoOK delete brick topo o k
*/
type DeleteBrickTopoOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteBrickTopo
}

func (o *DeleteBrickTopoOK) Error() string {
	return fmt.Sprintf("[POST /delete-brick-topo][%d] deleteBrickTopoOK  %+v", 200, o.Payload)
}
func (o *DeleteBrickTopoOK) GetPayload() []*models.WithTaskDeleteBrickTopo {
	return o.Payload
}

func (o *DeleteBrickTopoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBrickTopoBadRequest creates a DeleteBrickTopoBadRequest with default headers values
func NewDeleteBrickTopoBadRequest() *DeleteBrickTopoBadRequest {
	return &DeleteBrickTopoBadRequest{}
}

/* DeleteBrickTopoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteBrickTopoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteBrickTopoBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-brick-topo][%d] deleteBrickTopoBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteBrickTopoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteBrickTopoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBrickTopoNotFound creates a DeleteBrickTopoNotFound with default headers values
func NewDeleteBrickTopoNotFound() *DeleteBrickTopoNotFound {
	return &DeleteBrickTopoNotFound{}
}

/* DeleteBrickTopoNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteBrickTopoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteBrickTopoNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-brick-topo][%d] deleteBrickTopoNotFound  %+v", 404, o.Payload)
}
func (o *DeleteBrickTopoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteBrickTopoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBrickTopoInternalServerError creates a DeleteBrickTopoInternalServerError with default headers values
func NewDeleteBrickTopoInternalServerError() *DeleteBrickTopoInternalServerError {
	return &DeleteBrickTopoInternalServerError{}
}

/* DeleteBrickTopoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteBrickTopoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteBrickTopoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-brick-topo][%d] deleteBrickTopoInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteBrickTopoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteBrickTopoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
