// Code generated by go-swagger; DO NOT EDIT.

package brick_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetBrickTopoesReader is a Reader for the GetBrickTopoes structure.
type GetBrickTopoesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBrickTopoesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBrickTopoesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetBrickTopoesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetBrickTopoesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetBrickTopoesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBrickTopoesOK creates a GetBrickTopoesOK with default headers values
func NewGetBrickTopoesOK() *GetBrickTopoesOK {
	return &GetBrickTopoesOK{}
}

/* GetBrickTopoesOK describes a response with status code 200, with default header values.

GetBrickTopoesOK get brick topoes o k
*/
type GetBrickTopoesOK struct {
	XTowerRequestID string

	Payload []*models.BrickTopo
}

func (o *GetBrickTopoesOK) Error() string {
	return fmt.Sprintf("[POST /get-brick-topoes][%d] getBrickTopoesOK  %+v", 200, o.Payload)
}
func (o *GetBrickTopoesOK) GetPayload() []*models.BrickTopo {
	return o.Payload
}

func (o *GetBrickTopoesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBrickTopoesBadRequest creates a GetBrickTopoesBadRequest with default headers values
func NewGetBrickTopoesBadRequest() *GetBrickTopoesBadRequest {
	return &GetBrickTopoesBadRequest{}
}

/* GetBrickTopoesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetBrickTopoesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetBrickTopoesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-brick-topoes][%d] getBrickTopoesBadRequest  %+v", 400, o.Payload)
}
func (o *GetBrickTopoesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetBrickTopoesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBrickTopoesNotFound creates a GetBrickTopoesNotFound with default headers values
func NewGetBrickTopoesNotFound() *GetBrickTopoesNotFound {
	return &GetBrickTopoesNotFound{}
}

/* GetBrickTopoesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetBrickTopoesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetBrickTopoesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-brick-topoes][%d] getBrickTopoesNotFound  %+v", 404, o.Payload)
}
func (o *GetBrickTopoesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetBrickTopoesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBrickTopoesInternalServerError creates a GetBrickTopoesInternalServerError with default headers values
func NewGetBrickTopoesInternalServerError() *GetBrickTopoesInternalServerError {
	return &GetBrickTopoesInternalServerError{}
}

/* GetBrickTopoesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetBrickTopoesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetBrickTopoesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-brick-topoes][%d] getBrickTopoesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetBrickTopoesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetBrickTopoesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
