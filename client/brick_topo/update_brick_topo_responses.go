// Code generated by go-swagger; DO NOT EDIT.

package brick_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateBrickTopoReader is a Reader for the UpdateBrickTopo structure.
type UpdateBrickTopoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBrickTopoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBrickTopoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateBrickTopoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateBrickTopoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateBrickTopoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateBrickTopoOK creates a UpdateBrickTopoOK with default headers values
func NewUpdateBrickTopoOK() *UpdateBrickTopoOK {
	return &UpdateBrickTopoOK{}
}

/* UpdateBrickTopoOK describes a response with status code 200, with default header values.

UpdateBrickTopoOK update brick topo o k
*/
type UpdateBrickTopoOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskBrickTopo
}

func (o *UpdateBrickTopoOK) Error() string {
	return fmt.Sprintf("[POST /update-brick-topo][%d] updateBrickTopoOK  %+v", 200, o.Payload)
}
func (o *UpdateBrickTopoOK) GetPayload() []*models.WithTaskBrickTopo {
	return o.Payload
}

func (o *UpdateBrickTopoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBrickTopoBadRequest creates a UpdateBrickTopoBadRequest with default headers values
func NewUpdateBrickTopoBadRequest() *UpdateBrickTopoBadRequest {
	return &UpdateBrickTopoBadRequest{}
}

/* UpdateBrickTopoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateBrickTopoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBrickTopoBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-brick-topo][%d] updateBrickTopoBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateBrickTopoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBrickTopoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBrickTopoNotFound creates a UpdateBrickTopoNotFound with default headers values
func NewUpdateBrickTopoNotFound() *UpdateBrickTopoNotFound {
	return &UpdateBrickTopoNotFound{}
}

/* UpdateBrickTopoNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateBrickTopoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBrickTopoNotFound) Error() string {
	return fmt.Sprintf("[POST /update-brick-topo][%d] updateBrickTopoNotFound  %+v", 404, o.Payload)
}
func (o *UpdateBrickTopoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBrickTopoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBrickTopoInternalServerError creates a UpdateBrickTopoInternalServerError with default headers values
func NewUpdateBrickTopoInternalServerError() *UpdateBrickTopoInternalServerError {
	return &UpdateBrickTopoInternalServerError{}
}

/* UpdateBrickTopoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateBrickTopoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateBrickTopoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-brick-topo][%d] updateBrickTopoInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateBrickTopoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateBrickTopoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
