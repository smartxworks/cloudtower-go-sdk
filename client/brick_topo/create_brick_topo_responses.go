// Code generated by go-swagger; DO NOT EDIT.

package brick_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateBrickTopoReader is a Reader for the CreateBrickTopo structure.
type CreateBrickTopoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateBrickTopoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateBrickTopoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateBrickTopoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateBrickTopoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateBrickTopoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateBrickTopoOK creates a CreateBrickTopoOK with default headers values
func NewCreateBrickTopoOK() *CreateBrickTopoOK {
	return &CreateBrickTopoOK{}
}

/* CreateBrickTopoOK describes a response with status code 200, with default header values.

CreateBrickTopoOK create brick topo o k
*/
type CreateBrickTopoOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskBrickTopo
}

func (o *CreateBrickTopoOK) Error() string {
	return fmt.Sprintf("[POST /create-brick-topo][%d] createBrickTopoOK  %+v", 200, o.Payload)
}
func (o *CreateBrickTopoOK) GetPayload() []*models.WithTaskBrickTopo {
	return o.Payload
}

func (o *CreateBrickTopoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBrickTopoBadRequest creates a CreateBrickTopoBadRequest with default headers values
func NewCreateBrickTopoBadRequest() *CreateBrickTopoBadRequest {
	return &CreateBrickTopoBadRequest{}
}

/* CreateBrickTopoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateBrickTopoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateBrickTopoBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-brick-topo][%d] createBrickTopoBadRequest  %+v", 400, o.Payload)
}
func (o *CreateBrickTopoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateBrickTopoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBrickTopoNotFound creates a CreateBrickTopoNotFound with default headers values
func NewCreateBrickTopoNotFound() *CreateBrickTopoNotFound {
	return &CreateBrickTopoNotFound{}
}

/* CreateBrickTopoNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateBrickTopoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateBrickTopoNotFound) Error() string {
	return fmt.Sprintf("[POST /create-brick-topo][%d] createBrickTopoNotFound  %+v", 404, o.Payload)
}
func (o *CreateBrickTopoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateBrickTopoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBrickTopoInternalServerError creates a CreateBrickTopoInternalServerError with default headers values
func NewCreateBrickTopoInternalServerError() *CreateBrickTopoInternalServerError {
	return &CreateBrickTopoInternalServerError{}
}

/* CreateBrickTopoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateBrickTopoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateBrickTopoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-brick-topo][%d] createBrickTopoInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateBrickTopoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateBrickTopoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
