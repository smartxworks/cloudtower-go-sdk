// Code generated by go-swagger; DO NOT EDIT.

package isolation_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetIsolationPoliciesReader is a Reader for the GetIsolationPolicies structure.
type GetIsolationPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIsolationPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIsolationPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetIsolationPoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetIsolationPoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetIsolationPoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetIsolationPoliciesOK creates a GetIsolationPoliciesOK with default headers values
func NewGetIsolationPoliciesOK() *GetIsolationPoliciesOK {
	return &GetIsolationPoliciesOK{}
}

/* GetIsolationPoliciesOK describes a response with status code 200, with default header values.

GetIsolationPoliciesOK get isolation policies o k
*/
type GetIsolationPoliciesOK struct {
	XTowerRequestID string

	Payload []*models.IsolationPolicy
}

func (o *GetIsolationPoliciesOK) Error() string {
	return fmt.Sprintf("[POST /get-isolation-policies][%d] getIsolationPoliciesOK  %+v", 200, o.Payload)
}
func (o *GetIsolationPoliciesOK) GetPayload() []*models.IsolationPolicy {
	return o.Payload
}

func (o *GetIsolationPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsolationPoliciesBadRequest creates a GetIsolationPoliciesBadRequest with default headers values
func NewGetIsolationPoliciesBadRequest() *GetIsolationPoliciesBadRequest {
	return &GetIsolationPoliciesBadRequest{}
}

/* GetIsolationPoliciesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetIsolationPoliciesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIsolationPoliciesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-isolation-policies][%d] getIsolationPoliciesBadRequest  %+v", 400, o.Payload)
}
func (o *GetIsolationPoliciesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIsolationPoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsolationPoliciesNotFound creates a GetIsolationPoliciesNotFound with default headers values
func NewGetIsolationPoliciesNotFound() *GetIsolationPoliciesNotFound {
	return &GetIsolationPoliciesNotFound{}
}

/* GetIsolationPoliciesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetIsolationPoliciesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIsolationPoliciesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-isolation-policies][%d] getIsolationPoliciesNotFound  %+v", 404, o.Payload)
}
func (o *GetIsolationPoliciesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIsolationPoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIsolationPoliciesInternalServerError creates a GetIsolationPoliciesInternalServerError with default headers values
func NewGetIsolationPoliciesInternalServerError() *GetIsolationPoliciesInternalServerError {
	return &GetIsolationPoliciesInternalServerError{}
}

/* GetIsolationPoliciesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetIsolationPoliciesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIsolationPoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-isolation-policies][%d] getIsolationPoliciesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetIsolationPoliciesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIsolationPoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
