// Code generated by go-swagger; DO NOT EDIT.

package isolation_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateIsolationPolicyReader is a Reader for the UpdateIsolationPolicy structure.
type UpdateIsolationPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIsolationPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIsolationPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIsolationPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateIsolationPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateIsolationPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateIsolationPolicyOK creates a UpdateIsolationPolicyOK with default headers values
func NewUpdateIsolationPolicyOK() *UpdateIsolationPolicyOK {
	return &UpdateIsolationPolicyOK{}
}

/* UpdateIsolationPolicyOK describes a response with status code 200, with default header values.

UpdateIsolationPolicyOK update isolation policy o k
*/
type UpdateIsolationPolicyOK struct {
	XTowerRequestID string

	Payload []*models.IsolationPolicy
}

func (o *UpdateIsolationPolicyOK) Error() string {
	return fmt.Sprintf("[POST /update-isolation-policy][%d] updateIsolationPolicyOK  %+v", 200, o.Payload)
}
func (o *UpdateIsolationPolicyOK) GetPayload() []*models.IsolationPolicy {
	return o.Payload
}

func (o *UpdateIsolationPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIsolationPolicyBadRequest creates a UpdateIsolationPolicyBadRequest with default headers values
func NewUpdateIsolationPolicyBadRequest() *UpdateIsolationPolicyBadRequest {
	return &UpdateIsolationPolicyBadRequest{}
}

/* UpdateIsolationPolicyBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateIsolationPolicyBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIsolationPolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-isolation-policy][%d] updateIsolationPolicyBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateIsolationPolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIsolationPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIsolationPolicyNotFound creates a UpdateIsolationPolicyNotFound with default headers values
func NewUpdateIsolationPolicyNotFound() *UpdateIsolationPolicyNotFound {
	return &UpdateIsolationPolicyNotFound{}
}

/* UpdateIsolationPolicyNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateIsolationPolicyNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIsolationPolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /update-isolation-policy][%d] updateIsolationPolicyNotFound  %+v", 404, o.Payload)
}
func (o *UpdateIsolationPolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIsolationPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIsolationPolicyInternalServerError creates a UpdateIsolationPolicyInternalServerError with default headers values
func NewUpdateIsolationPolicyInternalServerError() *UpdateIsolationPolicyInternalServerError {
	return &UpdateIsolationPolicyInternalServerError{}
}

/* UpdateIsolationPolicyInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateIsolationPolicyInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIsolationPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-isolation-policy][%d] updateIsolationPolicyInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateIsolationPolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIsolationPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
