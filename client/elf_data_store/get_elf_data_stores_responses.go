// Code generated by go-swagger; DO NOT EDIT.

package elf_data_store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetElfDataStoresReader is a Reader for the GetElfDataStores structure.
type GetElfDataStoresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetElfDataStoresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetElfDataStoresOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetElfDataStoresBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetElfDataStoresNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetElfDataStoresInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetElfDataStoresOK creates a GetElfDataStoresOK with default headers values
func NewGetElfDataStoresOK() *GetElfDataStoresOK {
	return &GetElfDataStoresOK{}
}

/* GetElfDataStoresOK describes a response with status code 200, with default header values.

GetElfDataStoresOK get elf data stores o k
*/
type GetElfDataStoresOK struct {
	XTowerRequestID string

	Payload []*models.ElfDataStore
}

func (o *GetElfDataStoresOK) Error() string {
	return fmt.Sprintf("[POST /get-elf-data-stores][%d] getElfDataStoresOK  %+v", 200, o.Payload)
}
func (o *GetElfDataStoresOK) GetPayload() []*models.ElfDataStore {
	return o.Payload
}

func (o *GetElfDataStoresOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfDataStoresBadRequest creates a GetElfDataStoresBadRequest with default headers values
func NewGetElfDataStoresBadRequest() *GetElfDataStoresBadRequest {
	return &GetElfDataStoresBadRequest{}
}

/* GetElfDataStoresBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetElfDataStoresBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfDataStoresBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-elf-data-stores][%d] getElfDataStoresBadRequest  %+v", 400, o.Payload)
}
func (o *GetElfDataStoresBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfDataStoresBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfDataStoresNotFound creates a GetElfDataStoresNotFound with default headers values
func NewGetElfDataStoresNotFound() *GetElfDataStoresNotFound {
	return &GetElfDataStoresNotFound{}
}

/* GetElfDataStoresNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetElfDataStoresNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfDataStoresNotFound) Error() string {
	return fmt.Sprintf("[POST /get-elf-data-stores][%d] getElfDataStoresNotFound  %+v", 404, o.Payload)
}
func (o *GetElfDataStoresNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfDataStoresNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfDataStoresInternalServerError creates a GetElfDataStoresInternalServerError with default headers values
func NewGetElfDataStoresInternalServerError() *GetElfDataStoresInternalServerError {
	return &GetElfDataStoresInternalServerError{}
}

/* GetElfDataStoresInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetElfDataStoresInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfDataStoresInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-elf-data-stores][%d] getElfDataStoresInternalServerError  %+v", 500, o.Payload)
}
func (o *GetElfDataStoresInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfDataStoresInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
