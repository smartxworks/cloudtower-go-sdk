// Code generated by go-swagger; DO NOT EDIT.

package gpu_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetGpuDevicesReader is a Reader for the GetGpuDevices structure.
type GetGpuDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGpuDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGpuDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetGpuDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetGpuDevicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetGpuDevicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGpuDevicesOK creates a GetGpuDevicesOK with default headers values
func NewGetGpuDevicesOK() *GetGpuDevicesOK {
	return &GetGpuDevicesOK{}
}

/* GetGpuDevicesOK describes a response with status code 200, with default header values.

GetGpuDevicesOK get gpu devices o k
*/
type GetGpuDevicesOK struct {
	XTowerRequestID string

	Payload []*models.GpuDevice
}

func (o *GetGpuDevicesOK) Error() string {
	return fmt.Sprintf("[POST /get-gpu-devices][%d] getGpuDevicesOK  %+v", 200, o.Payload)
}
func (o *GetGpuDevicesOK) GetPayload() []*models.GpuDevice {
	return o.Payload
}

func (o *GetGpuDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGpuDevicesBadRequest creates a GetGpuDevicesBadRequest with default headers values
func NewGetGpuDevicesBadRequest() *GetGpuDevicesBadRequest {
	return &GetGpuDevicesBadRequest{}
}

/* GetGpuDevicesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGpuDevicesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGpuDevicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-gpu-devices][%d] getGpuDevicesBadRequest  %+v", 400, o.Payload)
}
func (o *GetGpuDevicesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGpuDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGpuDevicesNotFound creates a GetGpuDevicesNotFound with default headers values
func NewGetGpuDevicesNotFound() *GetGpuDevicesNotFound {
	return &GetGpuDevicesNotFound{}
}

/* GetGpuDevicesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGpuDevicesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGpuDevicesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-gpu-devices][%d] getGpuDevicesNotFound  %+v", 404, o.Payload)
}
func (o *GetGpuDevicesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGpuDevicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGpuDevicesInternalServerError creates a GetGpuDevicesInternalServerError with default headers values
func NewGetGpuDevicesInternalServerError() *GetGpuDevicesInternalServerError {
	return &GetGpuDevicesInternalServerError{}
}

/* GetGpuDevicesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetGpuDevicesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGpuDevicesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-gpu-devices][%d] getGpuDevicesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGpuDevicesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGpuDevicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
