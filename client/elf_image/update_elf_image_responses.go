// Code generated by go-swagger; DO NOT EDIT.

package elf_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateElfImageReader is a Reader for the UpdateElfImage structure.
type UpdateElfImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateElfImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateElfImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateElfImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateElfImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateElfImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateElfImageOK creates a UpdateElfImageOK with default headers values
func NewUpdateElfImageOK() *UpdateElfImageOK {
	return &UpdateElfImageOK{}
}

/* UpdateElfImageOK describes a response with status code 200, with default header values.

UpdateElfImageOK update elf image o k
*/
type UpdateElfImageOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskElfImage
}

func (o *UpdateElfImageOK) Error() string {
	return fmt.Sprintf("[POST /update-elf-image][%d] updateElfImageOK  %+v", 200, o.Payload)
}
func (o *UpdateElfImageOK) GetPayload() []*models.WithTaskElfImage {
	return o.Payload
}

func (o *UpdateElfImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateElfImageBadRequest creates a UpdateElfImageBadRequest with default headers values
func NewUpdateElfImageBadRequest() *UpdateElfImageBadRequest {
	return &UpdateElfImageBadRequest{}
}

/* UpdateElfImageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateElfImageBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateElfImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-elf-image][%d] updateElfImageBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateElfImageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateElfImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateElfImageNotFound creates a UpdateElfImageNotFound with default headers values
func NewUpdateElfImageNotFound() *UpdateElfImageNotFound {
	return &UpdateElfImageNotFound{}
}

/* UpdateElfImageNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateElfImageNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateElfImageNotFound) Error() string {
	return fmt.Sprintf("[POST /update-elf-image][%d] updateElfImageNotFound  %+v", 404, o.Payload)
}
func (o *UpdateElfImageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateElfImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateElfImageInternalServerError creates a UpdateElfImageInternalServerError with default headers values
func NewUpdateElfImageInternalServerError() *UpdateElfImageInternalServerError {
	return &UpdateElfImageInternalServerError{}
}

/* UpdateElfImageInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateElfImageInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateElfImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-elf-image][%d] updateElfImageInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateElfImageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateElfImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
