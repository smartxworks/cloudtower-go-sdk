// Code generated by go-swagger; DO NOT EDIT.

package elf_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteElfImageReader is a Reader for the DeleteElfImage structure.
type DeleteElfImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteElfImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteElfImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteElfImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteElfImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteElfImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteElfImageOK creates a DeleteElfImageOK with default headers values
func NewDeleteElfImageOK() *DeleteElfImageOK {
	return &DeleteElfImageOK{}
}

/* DeleteElfImageOK describes a response with status code 200, with default header values.

DeleteElfImageOK delete elf image o k
*/
type DeleteElfImageOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteElfImage
}

func (o *DeleteElfImageOK) Error() string {
	return fmt.Sprintf("[POST /delete-elf-image][%d] deleteElfImageOK  %+v", 200, o.Payload)
}
func (o *DeleteElfImageOK) GetPayload() []*models.WithTaskDeleteElfImage {
	return o.Payload
}

func (o *DeleteElfImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteElfImageBadRequest creates a DeleteElfImageBadRequest with default headers values
func NewDeleteElfImageBadRequest() *DeleteElfImageBadRequest {
	return &DeleteElfImageBadRequest{}
}

/* DeleteElfImageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteElfImageBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteElfImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-elf-image][%d] deleteElfImageBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteElfImageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteElfImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteElfImageNotFound creates a DeleteElfImageNotFound with default headers values
func NewDeleteElfImageNotFound() *DeleteElfImageNotFound {
	return &DeleteElfImageNotFound{}
}

/* DeleteElfImageNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteElfImageNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteElfImageNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-elf-image][%d] deleteElfImageNotFound  %+v", 404, o.Payload)
}
func (o *DeleteElfImageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteElfImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteElfImageInternalServerError creates a DeleteElfImageInternalServerError with default headers values
func NewDeleteElfImageInternalServerError() *DeleteElfImageInternalServerError {
	return &DeleteElfImageInternalServerError{}
}

/* DeleteElfImageInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteElfImageInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteElfImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-elf-image][%d] deleteElfImageInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteElfImageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteElfImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
