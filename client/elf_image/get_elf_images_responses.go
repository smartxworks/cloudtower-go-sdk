// Code generated by go-swagger; DO NOT EDIT.

package elf_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetElfImagesReader is a Reader for the GetElfImages structure.
type GetElfImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetElfImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetElfImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetElfImagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetElfImagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetElfImagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetElfImagesOK creates a GetElfImagesOK with default headers values
func NewGetElfImagesOK() *GetElfImagesOK {
	return &GetElfImagesOK{}
}

/* GetElfImagesOK describes a response with status code 200, with default header values.

GetElfImagesOK get elf images o k
*/
type GetElfImagesOK struct {
	XTowerRequestID string

	Payload []*models.ElfImage
}

func (o *GetElfImagesOK) Error() string {
	return fmt.Sprintf("[POST /get-elf-images][%d] getElfImagesOK  %+v", 200, o.Payload)
}
func (o *GetElfImagesOK) GetPayload() []*models.ElfImage {
	return o.Payload
}

func (o *GetElfImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfImagesBadRequest creates a GetElfImagesBadRequest with default headers values
func NewGetElfImagesBadRequest() *GetElfImagesBadRequest {
	return &GetElfImagesBadRequest{}
}

/* GetElfImagesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetElfImagesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfImagesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-elf-images][%d] getElfImagesBadRequest  %+v", 400, o.Payload)
}
func (o *GetElfImagesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfImagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfImagesNotFound creates a GetElfImagesNotFound with default headers values
func NewGetElfImagesNotFound() *GetElfImagesNotFound {
	return &GetElfImagesNotFound{}
}

/* GetElfImagesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetElfImagesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfImagesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-elf-images][%d] getElfImagesNotFound  %+v", 404, o.Payload)
}
func (o *GetElfImagesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfImagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetElfImagesInternalServerError creates a GetElfImagesInternalServerError with default headers values
func NewGetElfImagesInternalServerError() *GetElfImagesInternalServerError {
	return &GetElfImagesInternalServerError{}
}

/* GetElfImagesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetElfImagesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetElfImagesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-elf-images][%d] getElfImagesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetElfImagesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetElfImagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
