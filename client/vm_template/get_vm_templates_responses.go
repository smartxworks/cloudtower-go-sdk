// Code generated by go-swagger; DO NOT EDIT.

package vm_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMTemplatesReader is a Reader for the GetVMTemplates structure.
type GetVMTemplatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMTemplatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMTemplatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMTemplatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMTemplatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMTemplatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMTemplatesOK creates a GetVMTemplatesOK with default headers values
func NewGetVMTemplatesOK() *GetVMTemplatesOK {
	return &GetVMTemplatesOK{}
}

/* GetVMTemplatesOK describes a response with status code 200, with default header values.

GetVMTemplatesOK get Vm templates o k
*/
type GetVMTemplatesOK struct {
	XTowerRequestID string

	Payload []*models.VMTemplate
}

func (o *GetVMTemplatesOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-templates][%d] getVmTemplatesOK  %+v", 200, o.Payload)
}
func (o *GetVMTemplatesOK) GetPayload() []*models.VMTemplate {
	return o.Payload
}

func (o *GetVMTemplatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMTemplatesBadRequest creates a GetVMTemplatesBadRequest with default headers values
func NewGetVMTemplatesBadRequest() *GetVMTemplatesBadRequest {
	return &GetVMTemplatesBadRequest{}
}

/* GetVMTemplatesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMTemplatesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMTemplatesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-templates][%d] getVmTemplatesBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMTemplatesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMTemplatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMTemplatesNotFound creates a GetVMTemplatesNotFound with default headers values
func NewGetVMTemplatesNotFound() *GetVMTemplatesNotFound {
	return &GetVMTemplatesNotFound{}
}

/* GetVMTemplatesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMTemplatesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMTemplatesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-templates][%d] getVmTemplatesNotFound  %+v", 404, o.Payload)
}
func (o *GetVMTemplatesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMTemplatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMTemplatesInternalServerError creates a GetVMTemplatesInternalServerError with default headers values
func NewGetVMTemplatesInternalServerError() *GetVMTemplatesInternalServerError {
	return &GetVMTemplatesInternalServerError{}
}

/* GetVMTemplatesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMTemplatesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMTemplatesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-templates][%d] getVmTemplatesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMTemplatesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMTemplatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
