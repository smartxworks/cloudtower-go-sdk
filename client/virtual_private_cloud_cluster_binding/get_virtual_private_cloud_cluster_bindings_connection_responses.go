// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_cluster_binding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVirtualPrivateCloudClusterBindingsConnectionReader is a Reader for the GetVirtualPrivateCloudClusterBindingsConnection structure.
type GetVirtualPrivateCloudClusterBindingsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualPrivateCloudClusterBindingsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualPrivateCloudClusterBindingsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVirtualPrivateCloudClusterBindingsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVirtualPrivateCloudClusterBindingsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVirtualPrivateCloudClusterBindingsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualPrivateCloudClusterBindingsConnectionOK creates a GetVirtualPrivateCloudClusterBindingsConnectionOK with default headers values
func NewGetVirtualPrivateCloudClusterBindingsConnectionOK() *GetVirtualPrivateCloudClusterBindingsConnectionOK {
	return &GetVirtualPrivateCloudClusterBindingsConnectionOK{}
}

/* GetVirtualPrivateCloudClusterBindingsConnectionOK describes a response with status code 200, with default header values.

GetVirtualPrivateCloudClusterBindingsConnectionOK get virtual private cloud cluster bindings connection o k
*/
type GetVirtualPrivateCloudClusterBindingsConnectionOK struct {
	XTowerRequestID string

	Payload *models.VirtualPrivateCloudClusterBindingConnection
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-cluster-bindings-connection][%d] getVirtualPrivateCloudClusterBindingsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVirtualPrivateCloudClusterBindingsConnectionOK) GetPayload() *models.VirtualPrivateCloudClusterBindingConnection {
	return o.Payload
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VirtualPrivateCloudClusterBindingConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudClusterBindingsConnectionBadRequest creates a GetVirtualPrivateCloudClusterBindingsConnectionBadRequest with default headers values
func NewGetVirtualPrivateCloudClusterBindingsConnectionBadRequest() *GetVirtualPrivateCloudClusterBindingsConnectionBadRequest {
	return &GetVirtualPrivateCloudClusterBindingsConnectionBadRequest{}
}

/* GetVirtualPrivateCloudClusterBindingsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVirtualPrivateCloudClusterBindingsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-cluster-bindings-connection][%d] getVirtualPrivateCloudClusterBindingsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVirtualPrivateCloudClusterBindingsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudClusterBindingsConnectionNotFound creates a GetVirtualPrivateCloudClusterBindingsConnectionNotFound with default headers values
func NewGetVirtualPrivateCloudClusterBindingsConnectionNotFound() *GetVirtualPrivateCloudClusterBindingsConnectionNotFound {
	return &GetVirtualPrivateCloudClusterBindingsConnectionNotFound{}
}

/* GetVirtualPrivateCloudClusterBindingsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVirtualPrivateCloudClusterBindingsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-cluster-bindings-connection][%d] getVirtualPrivateCloudClusterBindingsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVirtualPrivateCloudClusterBindingsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudClusterBindingsConnectionInternalServerError creates a GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError with default headers values
func NewGetVirtualPrivateCloudClusterBindingsConnectionInternalServerError() *GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError {
	return &GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError{}
}

/* GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-cluster-bindings-connection][%d] getVirtualPrivateCloudClusterBindingsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudClusterBindingsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
