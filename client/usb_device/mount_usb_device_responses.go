// Code generated by go-swagger; DO NOT EDIT.

package usb_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// MountUsbDeviceReader is a Reader for the MountUsbDevice structure.
type MountUsbDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MountUsbDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMountUsbDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewMountUsbDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewMountUsbDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewMountUsbDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMountUsbDeviceOK creates a MountUsbDeviceOK with default headers values
func NewMountUsbDeviceOK() *MountUsbDeviceOK {
	return &MountUsbDeviceOK{}
}

/* MountUsbDeviceOK describes a response with status code 200, with default header values.

MountUsbDeviceOK mount usb device o k
*/
type MountUsbDeviceOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskUsbDevice
}

func (o *MountUsbDeviceOK) Error() string {
	return fmt.Sprintf("[POST /mount-usb-device][%d] mountUsbDeviceOK  %+v", 200, o.Payload)
}
func (o *MountUsbDeviceOK) GetPayload() []*models.WithTaskUsbDevice {
	return o.Payload
}

func (o *MountUsbDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMountUsbDeviceBadRequest creates a MountUsbDeviceBadRequest with default headers values
func NewMountUsbDeviceBadRequest() *MountUsbDeviceBadRequest {
	return &MountUsbDeviceBadRequest{}
}

/* MountUsbDeviceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type MountUsbDeviceBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MountUsbDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /mount-usb-device][%d] mountUsbDeviceBadRequest  %+v", 400, o.Payload)
}
func (o *MountUsbDeviceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MountUsbDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMountUsbDeviceNotFound creates a MountUsbDeviceNotFound with default headers values
func NewMountUsbDeviceNotFound() *MountUsbDeviceNotFound {
	return &MountUsbDeviceNotFound{}
}

/* MountUsbDeviceNotFound describes a response with status code 404, with default header values.

Not found
*/
type MountUsbDeviceNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MountUsbDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /mount-usb-device][%d] mountUsbDeviceNotFound  %+v", 404, o.Payload)
}
func (o *MountUsbDeviceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MountUsbDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMountUsbDeviceInternalServerError creates a MountUsbDeviceInternalServerError with default headers values
func NewMountUsbDeviceInternalServerError() *MountUsbDeviceInternalServerError {
	return &MountUsbDeviceInternalServerError{}
}

/* MountUsbDeviceInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type MountUsbDeviceInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MountUsbDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /mount-usb-device][%d] mountUsbDeviceInternalServerError  %+v", 500, o.Payload)
}
func (o *MountUsbDeviceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MountUsbDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
