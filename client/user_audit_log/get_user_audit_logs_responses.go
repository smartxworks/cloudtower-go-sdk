// Code generated by go-swagger; DO NOT EDIT.

package user_audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetUserAuditLogsReader is a Reader for the GetUserAuditLogs structure.
type GetUserAuditLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserAuditLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserAuditLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetUserAuditLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetUserAuditLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetUserAuditLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserAuditLogsOK creates a GetUserAuditLogsOK with default headers values
func NewGetUserAuditLogsOK() *GetUserAuditLogsOK {
	return &GetUserAuditLogsOK{}
}

/* GetUserAuditLogsOK describes a response with status code 200, with default header values.

GetUserAuditLogsOK get user audit logs o k
*/
type GetUserAuditLogsOK struct {
	XTowerRequestID string

	Payload []*models.UserAuditLog
}

func (o *GetUserAuditLogsOK) Error() string {
	return fmt.Sprintf("[POST /get-user-audit-logs][%d] getUserAuditLogsOK  %+v", 200, o.Payload)
}
func (o *GetUserAuditLogsOK) GetPayload() []*models.UserAuditLog {
	return o.Payload
}

func (o *GetUserAuditLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuditLogsBadRequest creates a GetUserAuditLogsBadRequest with default headers values
func NewGetUserAuditLogsBadRequest() *GetUserAuditLogsBadRequest {
	return &GetUserAuditLogsBadRequest{}
}

/* GetUserAuditLogsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetUserAuditLogsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUserAuditLogsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-user-audit-logs][%d] getUserAuditLogsBadRequest  %+v", 400, o.Payload)
}
func (o *GetUserAuditLogsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserAuditLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuditLogsNotFound creates a GetUserAuditLogsNotFound with default headers values
func NewGetUserAuditLogsNotFound() *GetUserAuditLogsNotFound {
	return &GetUserAuditLogsNotFound{}
}

/* GetUserAuditLogsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetUserAuditLogsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUserAuditLogsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-user-audit-logs][%d] getUserAuditLogsNotFound  %+v", 404, o.Payload)
}
func (o *GetUserAuditLogsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserAuditLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuditLogsInternalServerError creates a GetUserAuditLogsInternalServerError with default headers values
func NewGetUserAuditLogsInternalServerError() *GetUserAuditLogsInternalServerError {
	return &GetUserAuditLogsInternalServerError{}
}

/* GetUserAuditLogsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetUserAuditLogsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUserAuditLogsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-user-audit-logs][%d] getUserAuditLogsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUserAuditLogsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUserAuditLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
