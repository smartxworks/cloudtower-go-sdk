// Code generated by go-swagger; DO NOT EDIT.

package user_audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateUserAuditLogReader is a Reader for the CreateUserAuditLog structure.
type CreateUserAuditLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserAuditLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateUserAuditLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateUserAuditLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateUserAuditLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateUserAuditLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateUserAuditLogOK creates a CreateUserAuditLogOK with default headers values
func NewCreateUserAuditLogOK() *CreateUserAuditLogOK {
	return &CreateUserAuditLogOK{}
}

/* CreateUserAuditLogOK describes a response with status code 200, with default header values.

CreateUserAuditLogOK create user audit log o k
*/
type CreateUserAuditLogOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskUserAuditLog
}

func (o *CreateUserAuditLogOK) Error() string {
	return fmt.Sprintf("[POST /create-user-audit-log][%d] createUserAuditLogOK  %+v", 200, o.Payload)
}
func (o *CreateUserAuditLogOK) GetPayload() []*models.WithTaskUserAuditLog {
	return o.Payload
}

func (o *CreateUserAuditLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserAuditLogBadRequest creates a CreateUserAuditLogBadRequest with default headers values
func NewCreateUserAuditLogBadRequest() *CreateUserAuditLogBadRequest {
	return &CreateUserAuditLogBadRequest{}
}

/* CreateUserAuditLogBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateUserAuditLogBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateUserAuditLogBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-user-audit-log][%d] createUserAuditLogBadRequest  %+v", 400, o.Payload)
}
func (o *CreateUserAuditLogBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateUserAuditLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserAuditLogNotFound creates a CreateUserAuditLogNotFound with default headers values
func NewCreateUserAuditLogNotFound() *CreateUserAuditLogNotFound {
	return &CreateUserAuditLogNotFound{}
}

/* CreateUserAuditLogNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateUserAuditLogNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateUserAuditLogNotFound) Error() string {
	return fmt.Sprintf("[POST /create-user-audit-log][%d] createUserAuditLogNotFound  %+v", 404, o.Payload)
}
func (o *CreateUserAuditLogNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateUserAuditLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserAuditLogInternalServerError creates a CreateUserAuditLogInternalServerError with default headers values
func NewCreateUserAuditLogInternalServerError() *CreateUserAuditLogInternalServerError {
	return &CreateUserAuditLogInternalServerError{}
}

/* CreateUserAuditLogInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateUserAuditLogInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateUserAuditLogInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-user-audit-log][%d] createUserAuditLogInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateUserAuditLogInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateUserAuditLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
