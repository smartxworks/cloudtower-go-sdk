// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMMetricsReader is a Reader for the GetVMMetrics structure.
type GetVMMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMMetricsOK creates a GetVMMetricsOK with default headers values
func NewGetVMMetricsOK() *GetVMMetricsOK {
	return &GetVMMetricsOK{}
}

/* GetVMMetricsOK describes a response with status code 200, with default header values.

GetVMMetricsOK get Vm metrics o k
*/
type GetVMMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetVMMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-metrics][%d] getVmMetricsOK  %+v", 200, o.Payload)
}
func (o *GetVMMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetVMMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMMetricsBadRequest creates a GetVMMetricsBadRequest with default headers values
func NewGetVMMetricsBadRequest() *GetVMMetricsBadRequest {
	return &GetVMMetricsBadRequest{}
}

/* GetVMMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-metrics][%d] getVmMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMMetricsNotFound creates a GetVMMetricsNotFound with default headers values
func NewGetVMMetricsNotFound() *GetVMMetricsNotFound {
	return &GetVMMetricsNotFound{}
}

/* GetVMMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-metrics][%d] getVmMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetVMMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMMetricsInternalServerError creates a GetVMMetricsInternalServerError with default headers values
func NewGetVMMetricsInternalServerError() *GetVMMetricsInternalServerError {
	return &GetVMMetricsInternalServerError{}
}

/* GetVMMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-metrics][%d] getVmMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
