// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetSCVMMetricsReader is a Reader for the GetSCVMMetrics structure.
type GetSCVMMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSCVMMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSCVMMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetSCVMMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetSCVMMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetSCVMMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSCVMMetricsOK creates a GetSCVMMetricsOK with default headers values
func NewGetSCVMMetricsOK() *GetSCVMMetricsOK {
	return &GetSCVMMetricsOK{}
}

/* GetSCVMMetricsOK describes a response with status code 200, with default header values.

GetSCVMMetricsOK get s c Vm metrics o k
*/
type GetSCVMMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetSCVMMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-scvm-metrics][%d] getSCVmMetricsOK  %+v", 200, o.Payload)
}
func (o *GetSCVMMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetSCVMMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSCVMMetricsBadRequest creates a GetSCVMMetricsBadRequest with default headers values
func NewGetSCVMMetricsBadRequest() *GetSCVMMetricsBadRequest {
	return &GetSCVMMetricsBadRequest{}
}

/* GetSCVMMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSCVMMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSCVMMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-scvm-metrics][%d] getSCVmMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetSCVMMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSCVMMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSCVMMetricsNotFound creates a GetSCVMMetricsNotFound with default headers values
func NewGetSCVMMetricsNotFound() *GetSCVMMetricsNotFound {
	return &GetSCVMMetricsNotFound{}
}

/* GetSCVMMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetSCVMMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSCVMMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-scvm-metrics][%d] getSCVmMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetSCVMMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSCVMMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSCVMMetricsInternalServerError creates a GetSCVMMetricsInternalServerError with default headers values
func NewGetSCVMMetricsInternalServerError() *GetSCVMMetricsInternalServerError {
	return &GetSCVMMetricsInternalServerError{}
}

/* GetSCVMMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetSCVMMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSCVMMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-scvm-metrics][%d] getSCVmMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSCVMMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSCVMMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
