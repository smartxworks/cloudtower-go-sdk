// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetHostMetricsReader is a Reader for the GetHostMetrics structure.
type GetHostMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHostMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetHostMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetHostMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetHostMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHostMetricsOK creates a GetHostMetricsOK with default headers values
func NewGetHostMetricsOK() *GetHostMetricsOK {
	return &GetHostMetricsOK{}
}

/* GetHostMetricsOK describes a response with status code 200, with default header values.

GetHostMetricsOK get host metrics o k
*/
type GetHostMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetHostMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-host-metrics][%d] getHostMetricsOK  %+v", 200, o.Payload)
}
func (o *GetHostMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetHostMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostMetricsBadRequest creates a GetHostMetricsBadRequest with default headers values
func NewGetHostMetricsBadRequest() *GetHostMetricsBadRequest {
	return &GetHostMetricsBadRequest{}
}

/* GetHostMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetHostMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-host-metrics][%d] getHostMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetHostMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostMetricsNotFound creates a GetHostMetricsNotFound with default headers values
func NewGetHostMetricsNotFound() *GetHostMetricsNotFound {
	return &GetHostMetricsNotFound{}
}

/* GetHostMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetHostMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-host-metrics][%d] getHostMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetHostMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostMetricsInternalServerError creates a GetHostMetricsInternalServerError with default headers values
func NewGetHostMetricsInternalServerError() *GetHostMetricsInternalServerError {
	return &GetHostMetricsInternalServerError{}
}

/* GetHostMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetHostMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-host-metrics][%d] getHostMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetHostMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
