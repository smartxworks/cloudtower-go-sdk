// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMVolumeMetricsReader is a Reader for the GetVMVolumeMetrics structure.
type GetVMVolumeMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMVolumeMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMVolumeMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMVolumeMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMVolumeMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMVolumeMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMVolumeMetricsOK creates a GetVMVolumeMetricsOK with default headers values
func NewGetVMVolumeMetricsOK() *GetVMVolumeMetricsOK {
	return &GetVMVolumeMetricsOK{}
}

/* GetVMVolumeMetricsOK describes a response with status code 200, with default header values.

GetVMVolumeMetricsOK get Vm volume metrics o k
*/
type GetVMVolumeMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetVMVolumeMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-volume-metrics][%d] getVmVolumeMetricsOK  %+v", 200, o.Payload)
}
func (o *GetVMVolumeMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetVMVolumeMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumeMetricsBadRequest creates a GetVMVolumeMetricsBadRequest with default headers values
func NewGetVMVolumeMetricsBadRequest() *GetVMVolumeMetricsBadRequest {
	return &GetVMVolumeMetricsBadRequest{}
}

/* GetVMVolumeMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMVolumeMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumeMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-volume-metrics][%d] getVmVolumeMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMVolumeMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumeMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumeMetricsNotFound creates a GetVMVolumeMetricsNotFound with default headers values
func NewGetVMVolumeMetricsNotFound() *GetVMVolumeMetricsNotFound {
	return &GetVMVolumeMetricsNotFound{}
}

/* GetVMVolumeMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMVolumeMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumeMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-volume-metrics][%d] getVmVolumeMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetVMVolumeMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumeMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVolumeMetricsInternalServerError creates a GetVMVolumeMetricsInternalServerError with default headers values
func NewGetVMVolumeMetricsInternalServerError() *GetVMVolumeMetricsInternalServerError {
	return &GetVMVolumeMetricsInternalServerError{}
}

/* GetVMVolumeMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMVolumeMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVolumeMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-volume-metrics][%d] getVmVolumeMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMVolumeMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVolumeMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
