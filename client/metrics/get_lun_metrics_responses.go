// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetLunMetricsReader is a Reader for the GetLunMetrics structure.
type GetLunMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLunMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLunMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetLunMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetLunMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetLunMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLunMetricsOK creates a GetLunMetricsOK with default headers values
func NewGetLunMetricsOK() *GetLunMetricsOK {
	return &GetLunMetricsOK{}
}

/* GetLunMetricsOK describes a response with status code 200, with default header values.

GetLunMetricsOK get lun metrics o k
*/
type GetLunMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetLunMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-lun-metrics][%d] getLunMetricsOK  %+v", 200, o.Payload)
}
func (o *GetLunMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetLunMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLunMetricsBadRequest creates a GetLunMetricsBadRequest with default headers values
func NewGetLunMetricsBadRequest() *GetLunMetricsBadRequest {
	return &GetLunMetricsBadRequest{}
}

/* GetLunMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetLunMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLunMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-lun-metrics][%d] getLunMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetLunMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLunMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLunMetricsNotFound creates a GetLunMetricsNotFound with default headers values
func NewGetLunMetricsNotFound() *GetLunMetricsNotFound {
	return &GetLunMetricsNotFound{}
}

/* GetLunMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetLunMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLunMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-lun-metrics][%d] getLunMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetLunMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLunMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLunMetricsInternalServerError creates a GetLunMetricsInternalServerError with default headers values
func NewGetLunMetricsInternalServerError() *GetLunMetricsInternalServerError {
	return &GetLunMetricsInternalServerError{}
}

/* GetLunMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetLunMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLunMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-lun-metrics][%d] getLunMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetLunMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLunMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
