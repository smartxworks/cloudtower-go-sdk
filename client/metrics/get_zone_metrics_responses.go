// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetZoneMetricsReader is a Reader for the GetZoneMetrics structure.
type GetZoneMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetZoneMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetZoneMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetZoneMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetZoneMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetZoneMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetZoneMetricsOK creates a GetZoneMetricsOK with default headers values
func NewGetZoneMetricsOK() *GetZoneMetricsOK {
	return &GetZoneMetricsOK{}
}

/* GetZoneMetricsOK describes a response with status code 200, with default header values.

GetZoneMetricsOK get zone metrics o k
*/
type GetZoneMetricsOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskMetric
}

func (o *GetZoneMetricsOK) Error() string {
	return fmt.Sprintf("[POST /get-zone-metrics][%d] getZoneMetricsOK  %+v", 200, o.Payload)
}
func (o *GetZoneMetricsOK) GetPayload() []*models.WithTaskMetric {
	return o.Payload
}

func (o *GetZoneMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneMetricsBadRequest creates a GetZoneMetricsBadRequest with default headers values
func NewGetZoneMetricsBadRequest() *GetZoneMetricsBadRequest {
	return &GetZoneMetricsBadRequest{}
}

/* GetZoneMetricsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetZoneMetricsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetZoneMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-zone-metrics][%d] getZoneMetricsBadRequest  %+v", 400, o.Payload)
}
func (o *GetZoneMetricsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetZoneMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneMetricsNotFound creates a GetZoneMetricsNotFound with default headers values
func NewGetZoneMetricsNotFound() *GetZoneMetricsNotFound {
	return &GetZoneMetricsNotFound{}
}

/* GetZoneMetricsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetZoneMetricsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetZoneMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-zone-metrics][%d] getZoneMetricsNotFound  %+v", 404, o.Payload)
}
func (o *GetZoneMetricsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetZoneMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneMetricsInternalServerError creates a GetZoneMetricsInternalServerError with default headers values
func NewGetZoneMetricsInternalServerError() *GetZoneMetricsInternalServerError {
	return &GetZoneMetricsInternalServerError{}
}

/* GetZoneMetricsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetZoneMetricsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetZoneMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-zone-metrics][%d] getZoneMetricsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetZoneMetricsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetZoneMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
