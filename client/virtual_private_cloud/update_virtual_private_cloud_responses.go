// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVirtualPrivateCloudReader is a Reader for the UpdateVirtualPrivateCloud structure.
type UpdateVirtualPrivateCloudReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVirtualPrivateCloudReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVirtualPrivateCloudOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateVirtualPrivateCloudBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVirtualPrivateCloudNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVirtualPrivateCloudInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVirtualPrivateCloudOK creates a UpdateVirtualPrivateCloudOK with default headers values
func NewUpdateVirtualPrivateCloudOK() *UpdateVirtualPrivateCloudOK {
	return &UpdateVirtualPrivateCloudOK{}
}

/* UpdateVirtualPrivateCloudOK describes a response with status code 200, with default header values.

UpdateVirtualPrivateCloudOK update virtual private cloud o k
*/
type UpdateVirtualPrivateCloudOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVirtualPrivateCloud
}

func (o *UpdateVirtualPrivateCloudOK) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud][%d] updateVirtualPrivateCloudOK  %+v", 200, o.Payload)
}
func (o *UpdateVirtualPrivateCloudOK) GetPayload() []*models.WithTaskVirtualPrivateCloud {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudBadRequest creates a UpdateVirtualPrivateCloudBadRequest with default headers values
func NewUpdateVirtualPrivateCloudBadRequest() *UpdateVirtualPrivateCloudBadRequest {
	return &UpdateVirtualPrivateCloudBadRequest{}
}

/* UpdateVirtualPrivateCloudBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVirtualPrivateCloudBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud][%d] updateVirtualPrivateCloudBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVirtualPrivateCloudBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudNotFound creates a UpdateVirtualPrivateCloudNotFound with default headers values
func NewUpdateVirtualPrivateCloudNotFound() *UpdateVirtualPrivateCloudNotFound {
	return &UpdateVirtualPrivateCloudNotFound{}
}

/* UpdateVirtualPrivateCloudNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVirtualPrivateCloudNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudNotFound) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud][%d] updateVirtualPrivateCloudNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVirtualPrivateCloudNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudInternalServerError creates a UpdateVirtualPrivateCloudInternalServerError with default headers values
func NewUpdateVirtualPrivateCloudInternalServerError() *UpdateVirtualPrivateCloudInternalServerError {
	return &UpdateVirtualPrivateCloudInternalServerError{}
}

/* UpdateVirtualPrivateCloudInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVirtualPrivateCloudInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud][%d] updateVirtualPrivateCloudInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVirtualPrivateCloudInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
