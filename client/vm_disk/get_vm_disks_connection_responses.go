// Code generated by go-swagger; DO NOT EDIT.

package vm_disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMDisksConnectionReader is a Reader for the GetVMDisksConnection structure.
type GetVMDisksConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMDisksConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMDisksConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMDisksConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMDisksConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMDisksConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMDisksConnectionOK creates a GetVMDisksConnectionOK with default headers values
func NewGetVMDisksConnectionOK() *GetVMDisksConnectionOK {
	return &GetVMDisksConnectionOK{}
}

/* GetVMDisksConnectionOK describes a response with status code 200, with default header values.

GetVMDisksConnectionOK get Vm disks connection o k
*/
type GetVMDisksConnectionOK struct {
	XTowerRequestID string

	Payload *models.VMDiskConnection
}

func (o *GetVMDisksConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-disks-connection][%d] getVmDisksConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVMDisksConnectionOK) GetPayload() *models.VMDiskConnection {
	return o.Payload
}

func (o *GetVMDisksConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VMDiskConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMDisksConnectionBadRequest creates a GetVMDisksConnectionBadRequest with default headers values
func NewGetVMDisksConnectionBadRequest() *GetVMDisksConnectionBadRequest {
	return &GetVMDisksConnectionBadRequest{}
}

/* GetVMDisksConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMDisksConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMDisksConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-disks-connection][%d] getVmDisksConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMDisksConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMDisksConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMDisksConnectionNotFound creates a GetVMDisksConnectionNotFound with default headers values
func NewGetVMDisksConnectionNotFound() *GetVMDisksConnectionNotFound {
	return &GetVMDisksConnectionNotFound{}
}

/* GetVMDisksConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMDisksConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMDisksConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-disks-connection][%d] getVmDisksConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVMDisksConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMDisksConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMDisksConnectionInternalServerError creates a GetVMDisksConnectionInternalServerError with default headers values
func NewGetVMDisksConnectionInternalServerError() *GetVMDisksConnectionInternalServerError {
	return &GetVMDisksConnectionInternalServerError{}
}

/* GetVMDisksConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMDisksConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMDisksConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-disks-connection][%d] getVmDisksConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMDisksConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMDisksConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
