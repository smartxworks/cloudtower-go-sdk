// Code generated by go-swagger; DO NOT EDIT.

package table_reporter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ExportCSVReader is a Reader for the ExportCSV structure.
type ExportCSVReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportCSVReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportCSVOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewExportCSVBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewExportCSVNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewExportCSVInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportCSVOK creates a ExportCSVOK with default headers values
func NewExportCSVOK() *ExportCSVOK {
	return &ExportCSVOK{}
}

/* ExportCSVOK describes a response with status code 200, with default header values.

ExportCSVOK export c s v o k
*/
type ExportCSVOK struct {
	XTowerRequestID string

	Payload strfmt.Base64
}

func (o *ExportCSVOK) Error() string {
	return fmt.Sprintf("[POST /export-csv][%d] exportCSVOK  %+v", 200, o.Payload)
}
func (o *ExportCSVOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *ExportCSVOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportCSVBadRequest creates a ExportCSVBadRequest with default headers values
func NewExportCSVBadRequest() *ExportCSVBadRequest {
	return &ExportCSVBadRequest{}
}

/* ExportCSVBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ExportCSVBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportCSVBadRequest) Error() string {
	return fmt.Sprintf("[POST /export-csv][%d] exportCSVBadRequest  %+v", 400, o.Payload)
}
func (o *ExportCSVBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportCSVBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportCSVNotFound creates a ExportCSVNotFound with default headers values
func NewExportCSVNotFound() *ExportCSVNotFound {
	return &ExportCSVNotFound{}
}

/* ExportCSVNotFound describes a response with status code 404, with default header values.

Not found
*/
type ExportCSVNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportCSVNotFound) Error() string {
	return fmt.Sprintf("[POST /export-csv][%d] exportCSVNotFound  %+v", 404, o.Payload)
}
func (o *ExportCSVNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportCSVNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportCSVInternalServerError creates a ExportCSVInternalServerError with default headers values
func NewExportCSVInternalServerError() *ExportCSVInternalServerError {
	return &ExportCSVInternalServerError{}
}

/* ExportCSVInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ExportCSVInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportCSVInternalServerError) Error() string {
	return fmt.Sprintf("[POST /export-csv][%d] exportCSVInternalServerError  %+v", 500, o.Payload)
}
func (o *ExportCSVInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportCSVInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
