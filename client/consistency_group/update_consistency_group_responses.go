// Code generated by go-swagger; DO NOT EDIT.

package consistency_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateConsistencyGroupReader is a Reader for the UpdateConsistencyGroup structure.
type UpdateConsistencyGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConsistencyGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConsistencyGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateConsistencyGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateConsistencyGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateConsistencyGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateConsistencyGroupOK creates a UpdateConsistencyGroupOK with default headers values
func NewUpdateConsistencyGroupOK() *UpdateConsistencyGroupOK {
	return &UpdateConsistencyGroupOK{}
}

/* UpdateConsistencyGroupOK describes a response with status code 200, with default header values.

UpdateConsistencyGroupOK update consistency group o k
*/
type UpdateConsistencyGroupOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskConsistencyGroup
}

func (o *UpdateConsistencyGroupOK) Error() string {
	return fmt.Sprintf("[POST /update-consistency-group][%d] updateConsistencyGroupOK  %+v", 200, o.Payload)
}
func (o *UpdateConsistencyGroupOK) GetPayload() []*models.WithTaskConsistencyGroup {
	return o.Payload
}

func (o *UpdateConsistencyGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsistencyGroupBadRequest creates a UpdateConsistencyGroupBadRequest with default headers values
func NewUpdateConsistencyGroupBadRequest() *UpdateConsistencyGroupBadRequest {
	return &UpdateConsistencyGroupBadRequest{}
}

/* UpdateConsistencyGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateConsistencyGroupBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateConsistencyGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-consistency-group][%d] updateConsistencyGroupBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateConsistencyGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateConsistencyGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsistencyGroupNotFound creates a UpdateConsistencyGroupNotFound with default headers values
func NewUpdateConsistencyGroupNotFound() *UpdateConsistencyGroupNotFound {
	return &UpdateConsistencyGroupNotFound{}
}

/* UpdateConsistencyGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateConsistencyGroupNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateConsistencyGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /update-consistency-group][%d] updateConsistencyGroupNotFound  %+v", 404, o.Payload)
}
func (o *UpdateConsistencyGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateConsistencyGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsistencyGroupInternalServerError creates a UpdateConsistencyGroupInternalServerError with default headers values
func NewUpdateConsistencyGroupInternalServerError() *UpdateConsistencyGroupInternalServerError {
	return &UpdateConsistencyGroupInternalServerError{}
}

/* UpdateConsistencyGroupInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateConsistencyGroupInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateConsistencyGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-consistency-group][%d] updateConsistencyGroupInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateConsistencyGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateConsistencyGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
