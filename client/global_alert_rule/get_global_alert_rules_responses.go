// Code generated by go-swagger; DO NOT EDIT.

package global_alert_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetGlobalAlertRulesReader is a Reader for the GetGlobalAlertRules structure.
type GetGlobalAlertRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGlobalAlertRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGlobalAlertRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetGlobalAlertRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetGlobalAlertRulesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetGlobalAlertRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGlobalAlertRulesOK creates a GetGlobalAlertRulesOK with default headers values
func NewGetGlobalAlertRulesOK() *GetGlobalAlertRulesOK {
	return &GetGlobalAlertRulesOK{}
}

/* GetGlobalAlertRulesOK describes a response with status code 200, with default header values.

GetGlobalAlertRulesOK get global alert rules o k
*/
type GetGlobalAlertRulesOK struct {
	XTowerRequestID string

	Payload []*models.GlobalAlertRule
}

func (o *GetGlobalAlertRulesOK) Error() string {
	return fmt.Sprintf("[POST /get-global-alert-rules][%d] getGlobalAlertRulesOK  %+v", 200, o.Payload)
}
func (o *GetGlobalAlertRulesOK) GetPayload() []*models.GlobalAlertRule {
	return o.Payload
}

func (o *GetGlobalAlertRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalAlertRulesBadRequest creates a GetGlobalAlertRulesBadRequest with default headers values
func NewGetGlobalAlertRulesBadRequest() *GetGlobalAlertRulesBadRequest {
	return &GetGlobalAlertRulesBadRequest{}
}

/* GetGlobalAlertRulesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGlobalAlertRulesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalAlertRulesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-global-alert-rules][%d] getGlobalAlertRulesBadRequest  %+v", 400, o.Payload)
}
func (o *GetGlobalAlertRulesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalAlertRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalAlertRulesNotFound creates a GetGlobalAlertRulesNotFound with default headers values
func NewGetGlobalAlertRulesNotFound() *GetGlobalAlertRulesNotFound {
	return &GetGlobalAlertRulesNotFound{}
}

/* GetGlobalAlertRulesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGlobalAlertRulesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalAlertRulesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-global-alert-rules][%d] getGlobalAlertRulesNotFound  %+v", 404, o.Payload)
}
func (o *GetGlobalAlertRulesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalAlertRulesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalAlertRulesInternalServerError creates a GetGlobalAlertRulesInternalServerError with default headers values
func NewGetGlobalAlertRulesInternalServerError() *GetGlobalAlertRulesInternalServerError {
	return &GetGlobalAlertRulesInternalServerError{}
}

/* GetGlobalAlertRulesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetGlobalAlertRulesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalAlertRulesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-global-alert-rules][%d] getGlobalAlertRulesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGlobalAlertRulesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalAlertRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
