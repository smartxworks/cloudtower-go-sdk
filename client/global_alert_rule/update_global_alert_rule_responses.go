// Code generated by go-swagger; DO NOT EDIT.

package global_alert_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateGlobalAlertRuleReader is a Reader for the UpdateGlobalAlertRule structure.
type UpdateGlobalAlertRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGlobalAlertRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGlobalAlertRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateGlobalAlertRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateGlobalAlertRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateGlobalAlertRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGlobalAlertRuleOK creates a UpdateGlobalAlertRuleOK with default headers values
func NewUpdateGlobalAlertRuleOK() *UpdateGlobalAlertRuleOK {
	return &UpdateGlobalAlertRuleOK{}
}

/* UpdateGlobalAlertRuleOK describes a response with status code 200, with default header values.

UpdateGlobalAlertRuleOK update global alert rule o k
*/
type UpdateGlobalAlertRuleOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskGlobalAlertRule
}

func (o *UpdateGlobalAlertRuleOK) Error() string {
	return fmt.Sprintf("[POST /update-global-alert-rule][%d] updateGlobalAlertRuleOK  %+v", 200, o.Payload)
}
func (o *UpdateGlobalAlertRuleOK) GetPayload() []*models.WithTaskGlobalAlertRule {
	return o.Payload
}

func (o *UpdateGlobalAlertRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGlobalAlertRuleBadRequest creates a UpdateGlobalAlertRuleBadRequest with default headers values
func NewUpdateGlobalAlertRuleBadRequest() *UpdateGlobalAlertRuleBadRequest {
	return &UpdateGlobalAlertRuleBadRequest{}
}

/* UpdateGlobalAlertRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateGlobalAlertRuleBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateGlobalAlertRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-global-alert-rule][%d] updateGlobalAlertRuleBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateGlobalAlertRuleBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateGlobalAlertRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGlobalAlertRuleNotFound creates a UpdateGlobalAlertRuleNotFound with default headers values
func NewUpdateGlobalAlertRuleNotFound() *UpdateGlobalAlertRuleNotFound {
	return &UpdateGlobalAlertRuleNotFound{}
}

/* UpdateGlobalAlertRuleNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateGlobalAlertRuleNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateGlobalAlertRuleNotFound) Error() string {
	return fmt.Sprintf("[POST /update-global-alert-rule][%d] updateGlobalAlertRuleNotFound  %+v", 404, o.Payload)
}
func (o *UpdateGlobalAlertRuleNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateGlobalAlertRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGlobalAlertRuleInternalServerError creates a UpdateGlobalAlertRuleInternalServerError with default headers values
func NewUpdateGlobalAlertRuleInternalServerError() *UpdateGlobalAlertRuleInternalServerError {
	return &UpdateGlobalAlertRuleInternalServerError{}
}

/* UpdateGlobalAlertRuleInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateGlobalAlertRuleInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateGlobalAlertRuleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-global-alert-rule][%d] updateGlobalAlertRuleInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateGlobalAlertRuleInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateGlobalAlertRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
