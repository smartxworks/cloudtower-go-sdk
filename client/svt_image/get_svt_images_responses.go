// Code generated by go-swagger; DO NOT EDIT.

package svt_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetSvtImagesReader is a Reader for the GetSvtImages structure.
type GetSvtImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSvtImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSvtImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetSvtImagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetSvtImagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetSvtImagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSvtImagesOK creates a GetSvtImagesOK with default headers values
func NewGetSvtImagesOK() *GetSvtImagesOK {
	return &GetSvtImagesOK{}
}

/* GetSvtImagesOK describes a response with status code 200, with default header values.

GetSvtImagesOK get svt images o k
*/
type GetSvtImagesOK struct {
	XTowerRequestID string

	Payload []*models.SvtImage
}

func (o *GetSvtImagesOK) Error() string {
	return fmt.Sprintf("[POST /get-svt-images][%d] getSvtImagesOK  %+v", 200, o.Payload)
}
func (o *GetSvtImagesOK) GetPayload() []*models.SvtImage {
	return o.Payload
}

func (o *GetSvtImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSvtImagesBadRequest creates a GetSvtImagesBadRequest with default headers values
func NewGetSvtImagesBadRequest() *GetSvtImagesBadRequest {
	return &GetSvtImagesBadRequest{}
}

/* GetSvtImagesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSvtImagesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSvtImagesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-svt-images][%d] getSvtImagesBadRequest  %+v", 400, o.Payload)
}
func (o *GetSvtImagesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSvtImagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSvtImagesNotFound creates a GetSvtImagesNotFound with default headers values
func NewGetSvtImagesNotFound() *GetSvtImagesNotFound {
	return &GetSvtImagesNotFound{}
}

/* GetSvtImagesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetSvtImagesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSvtImagesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-svt-images][%d] getSvtImagesNotFound  %+v", 404, o.Payload)
}
func (o *GetSvtImagesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSvtImagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSvtImagesInternalServerError creates a GetSvtImagesInternalServerError with default headers values
func NewGetSvtImagesInternalServerError() *GetSvtImagesInternalServerError {
	return &GetSvtImagesInternalServerError{}
}

/* GetSvtImagesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetSvtImagesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSvtImagesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-svt-images][%d] getSvtImagesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSvtImagesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSvtImagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
