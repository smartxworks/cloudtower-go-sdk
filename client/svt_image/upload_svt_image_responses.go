// Code generated by go-swagger; DO NOT EDIT.

package svt_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UploadSvtImageReader is a Reader for the UploadSvtImage structure.
type UploadSvtImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadSvtImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadSvtImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUploadSvtImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUploadSvtImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUploadSvtImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadSvtImageOK creates a UploadSvtImageOK with default headers values
func NewUploadSvtImageOK() *UploadSvtImageOK {
	return &UploadSvtImageOK{}
}

/* UploadSvtImageOK describes a response with status code 200, with default header values.

UploadSvtImageOK upload svt image o k
*/
type UploadSvtImageOK struct {
	XTowerRequestID string

	Payload []*models.UploadTask
}

func (o *UploadSvtImageOK) Error() string {
	return fmt.Sprintf("[POST /upload-svt-image][%d] uploadSvtImageOK  %+v", 200, o.Payload)
}
func (o *UploadSvtImageOK) GetPayload() []*models.UploadTask {
	return o.Payload
}

func (o *UploadSvtImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadSvtImageBadRequest creates a UploadSvtImageBadRequest with default headers values
func NewUploadSvtImageBadRequest() *UploadSvtImageBadRequest {
	return &UploadSvtImageBadRequest{}
}

/* UploadSvtImageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UploadSvtImageBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadSvtImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /upload-svt-image][%d] uploadSvtImageBadRequest  %+v", 400, o.Payload)
}
func (o *UploadSvtImageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadSvtImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadSvtImageNotFound creates a UploadSvtImageNotFound with default headers values
func NewUploadSvtImageNotFound() *UploadSvtImageNotFound {
	return &UploadSvtImageNotFound{}
}

/* UploadSvtImageNotFound describes a response with status code 404, with default header values.

Not found
*/
type UploadSvtImageNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadSvtImageNotFound) Error() string {
	return fmt.Sprintf("[POST /upload-svt-image][%d] uploadSvtImageNotFound  %+v", 404, o.Payload)
}
func (o *UploadSvtImageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadSvtImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadSvtImageInternalServerError creates a UploadSvtImageInternalServerError with default headers values
func NewUploadSvtImageInternalServerError() *UploadSvtImageInternalServerError {
	return &UploadSvtImageInternalServerError{}
}

/* UploadSvtImageInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UploadSvtImageInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadSvtImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /upload-svt-image][%d] uploadSvtImageInternalServerError  %+v", 500, o.Payload)
}
func (o *UploadSvtImageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadSvtImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
