// Code generated by go-swagger; DO NOT EDIT.

package cloud_tower_application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UploadCloudTowerApplicationPackageReader is a Reader for the UploadCloudTowerApplicationPackage structure.
type UploadCloudTowerApplicationPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadCloudTowerApplicationPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadCloudTowerApplicationPackageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUploadCloudTowerApplicationPackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUploadCloudTowerApplicationPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUploadCloudTowerApplicationPackageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadCloudTowerApplicationPackageOK creates a UploadCloudTowerApplicationPackageOK with default headers values
func NewUploadCloudTowerApplicationPackageOK() *UploadCloudTowerApplicationPackageOK {
	return &UploadCloudTowerApplicationPackageOK{}
}

/* UploadCloudTowerApplicationPackageOK describes a response with status code 200, with default header values.

UploadCloudTowerApplicationPackageOK upload cloud tower application package o k
*/
type UploadCloudTowerApplicationPackageOK struct {
	XTowerRequestID string

	Payload []*models.UploadTask
}

func (o *UploadCloudTowerApplicationPackageOK) Error() string {
	return fmt.Sprintf("[POST /upload-cloudtower-application-package][%d] uploadCloudTowerApplicationPackageOK  %+v", 200, o.Payload)
}
func (o *UploadCloudTowerApplicationPackageOK) GetPayload() []*models.UploadTask {
	return o.Payload
}

func (o *UploadCloudTowerApplicationPackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCloudTowerApplicationPackageBadRequest creates a UploadCloudTowerApplicationPackageBadRequest with default headers values
func NewUploadCloudTowerApplicationPackageBadRequest() *UploadCloudTowerApplicationPackageBadRequest {
	return &UploadCloudTowerApplicationPackageBadRequest{}
}

/* UploadCloudTowerApplicationPackageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UploadCloudTowerApplicationPackageBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadCloudTowerApplicationPackageBadRequest) Error() string {
	return fmt.Sprintf("[POST /upload-cloudtower-application-package][%d] uploadCloudTowerApplicationPackageBadRequest  %+v", 400, o.Payload)
}
func (o *UploadCloudTowerApplicationPackageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadCloudTowerApplicationPackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCloudTowerApplicationPackageNotFound creates a UploadCloudTowerApplicationPackageNotFound with default headers values
func NewUploadCloudTowerApplicationPackageNotFound() *UploadCloudTowerApplicationPackageNotFound {
	return &UploadCloudTowerApplicationPackageNotFound{}
}

/* UploadCloudTowerApplicationPackageNotFound describes a response with status code 404, with default header values.

Not found
*/
type UploadCloudTowerApplicationPackageNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadCloudTowerApplicationPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /upload-cloudtower-application-package][%d] uploadCloudTowerApplicationPackageNotFound  %+v", 404, o.Payload)
}
func (o *UploadCloudTowerApplicationPackageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadCloudTowerApplicationPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadCloudTowerApplicationPackageInternalServerError creates a UploadCloudTowerApplicationPackageInternalServerError with default headers values
func NewUploadCloudTowerApplicationPackageInternalServerError() *UploadCloudTowerApplicationPackageInternalServerError {
	return &UploadCloudTowerApplicationPackageInternalServerError{}
}

/* UploadCloudTowerApplicationPackageInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UploadCloudTowerApplicationPackageInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadCloudTowerApplicationPackageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /upload-cloudtower-application-package][%d] uploadCloudTowerApplicationPackageInternalServerError  %+v", 500, o.Payload)
}
func (o *UploadCloudTowerApplicationPackageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadCloudTowerApplicationPackageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
