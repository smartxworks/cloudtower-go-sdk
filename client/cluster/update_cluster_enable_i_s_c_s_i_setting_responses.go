// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateClusterEnableISCSISettingReader is a Reader for the UpdateClusterEnableISCSISetting structure.
type UpdateClusterEnableISCSISettingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClusterEnableISCSISettingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClusterEnableISCSISettingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateClusterEnableISCSISettingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateClusterEnableISCSISettingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateClusterEnableISCSISettingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateClusterEnableISCSISettingOK creates a UpdateClusterEnableISCSISettingOK with default headers values
func NewUpdateClusterEnableISCSISettingOK() *UpdateClusterEnableISCSISettingOK {
	return &UpdateClusterEnableISCSISettingOK{}
}

/* UpdateClusterEnableISCSISettingOK describes a response with status code 200, with default header values.

UpdateClusterEnableISCSISettingOK update cluster enable i s c s i setting o k
*/
type UpdateClusterEnableISCSISettingOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskClusterSettings
}

func (o *UpdateClusterEnableISCSISettingOK) Error() string {
	return fmt.Sprintf("[POST /update-cluster-enable-iscsi-setting][%d] updateClusterEnableISCSISettingOK  %+v", 200, o.Payload)
}
func (o *UpdateClusterEnableISCSISettingOK) GetPayload() []*models.WithTaskClusterSettings {
	return o.Payload
}

func (o *UpdateClusterEnableISCSISettingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterEnableISCSISettingBadRequest creates a UpdateClusterEnableISCSISettingBadRequest with default headers values
func NewUpdateClusterEnableISCSISettingBadRequest() *UpdateClusterEnableISCSISettingBadRequest {
	return &UpdateClusterEnableISCSISettingBadRequest{}
}

/* UpdateClusterEnableISCSISettingBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateClusterEnableISCSISettingBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateClusterEnableISCSISettingBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-cluster-enable-iscsi-setting][%d] updateClusterEnableISCSISettingBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateClusterEnableISCSISettingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateClusterEnableISCSISettingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterEnableISCSISettingNotFound creates a UpdateClusterEnableISCSISettingNotFound with default headers values
func NewUpdateClusterEnableISCSISettingNotFound() *UpdateClusterEnableISCSISettingNotFound {
	return &UpdateClusterEnableISCSISettingNotFound{}
}

/* UpdateClusterEnableISCSISettingNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateClusterEnableISCSISettingNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateClusterEnableISCSISettingNotFound) Error() string {
	return fmt.Sprintf("[POST /update-cluster-enable-iscsi-setting][%d] updateClusterEnableISCSISettingNotFound  %+v", 404, o.Payload)
}
func (o *UpdateClusterEnableISCSISettingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateClusterEnableISCSISettingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterEnableISCSISettingInternalServerError creates a UpdateClusterEnableISCSISettingInternalServerError with default headers values
func NewUpdateClusterEnableISCSISettingInternalServerError() *UpdateClusterEnableISCSISettingInternalServerError {
	return &UpdateClusterEnableISCSISettingInternalServerError{}
}

/* UpdateClusterEnableISCSISettingInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateClusterEnableISCSISettingInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateClusterEnableISCSISettingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-cluster-enable-iscsi-setting][%d] updateClusterEnableISCSISettingInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateClusterEnableISCSISettingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateClusterEnableISCSISettingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
