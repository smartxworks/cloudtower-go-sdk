// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetClusterStorageInfoReader is a Reader for the GetClusterStorageInfo structure.
type GetClusterStorageInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClusterStorageInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClusterStorageInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetClusterStorageInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetClusterStorageInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetClusterStorageInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetClusterStorageInfoOK creates a GetClusterStorageInfoOK with default headers values
func NewGetClusterStorageInfoOK() *GetClusterStorageInfoOK {
	return &GetClusterStorageInfoOK{}
}

/* GetClusterStorageInfoOK describes a response with status code 200, with default header values.

GetClusterStorageInfoOK get cluster storage info o k
*/
type GetClusterStorageInfoOK struct {
	XTowerRequestID string

	Payload []*models.ClusterStorageInfo
}

func (o *GetClusterStorageInfoOK) Error() string {
	return fmt.Sprintf("[POST /get-cluster-storage-info][%d] getClusterStorageInfoOK  %+v", 200, o.Payload)
}
func (o *GetClusterStorageInfoOK) GetPayload() []*models.ClusterStorageInfo {
	return o.Payload
}

func (o *GetClusterStorageInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterStorageInfoBadRequest creates a GetClusterStorageInfoBadRequest with default headers values
func NewGetClusterStorageInfoBadRequest() *GetClusterStorageInfoBadRequest {
	return &GetClusterStorageInfoBadRequest{}
}

/* GetClusterStorageInfoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetClusterStorageInfoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetClusterStorageInfoBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-cluster-storage-info][%d] getClusterStorageInfoBadRequest  %+v", 400, o.Payload)
}
func (o *GetClusterStorageInfoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetClusterStorageInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterStorageInfoNotFound creates a GetClusterStorageInfoNotFound with default headers values
func NewGetClusterStorageInfoNotFound() *GetClusterStorageInfoNotFound {
	return &GetClusterStorageInfoNotFound{}
}

/* GetClusterStorageInfoNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetClusterStorageInfoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetClusterStorageInfoNotFound) Error() string {
	return fmt.Sprintf("[POST /get-cluster-storage-info][%d] getClusterStorageInfoNotFound  %+v", 404, o.Payload)
}
func (o *GetClusterStorageInfoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetClusterStorageInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterStorageInfoInternalServerError creates a GetClusterStorageInfoInternalServerError with default headers values
func NewGetClusterStorageInfoInternalServerError() *GetClusterStorageInfoInternalServerError {
	return &GetClusterStorageInfoInternalServerError{}
}

/* GetClusterStorageInfoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetClusterStorageInfoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetClusterStorageInfoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-cluster-storage-info][%d] getClusterStorageInfoInternalServerError  %+v", 500, o.Payload)
}
func (o *GetClusterStorageInfoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetClusterStorageInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
