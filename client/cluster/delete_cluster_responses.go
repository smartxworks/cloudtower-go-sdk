// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteClusterReader is a Reader for the DeleteCluster structure.
type DeleteClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteClusterOK creates a DeleteClusterOK with default headers values
func NewDeleteClusterOK() *DeleteClusterOK {
	return &DeleteClusterOK{}
}

/* DeleteClusterOK describes a response with status code 200, with default header values.

DeleteClusterOK delete cluster o k
*/
type DeleteClusterOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteCluster
}

func (o *DeleteClusterOK) Error() string {
	return fmt.Sprintf("[POST /delete-cluster][%d] deleteClusterOK  %+v", 200, o.Payload)
}
func (o *DeleteClusterOK) GetPayload() []*models.WithTaskDeleteCluster {
	return o.Payload
}

func (o *DeleteClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterBadRequest creates a DeleteClusterBadRequest with default headers values
func NewDeleteClusterBadRequest() *DeleteClusterBadRequest {
	return &DeleteClusterBadRequest{}
}

/* DeleteClusterBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteClusterBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteClusterBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-cluster][%d] deleteClusterBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteClusterBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterNotFound creates a DeleteClusterNotFound with default headers values
func NewDeleteClusterNotFound() *DeleteClusterNotFound {
	return &DeleteClusterNotFound{}
}

/* DeleteClusterNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteClusterNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteClusterNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-cluster][%d] deleteClusterNotFound  %+v", 404, o.Payload)
}
func (o *DeleteClusterNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteClusterInternalServerError creates a DeleteClusterInternalServerError with default headers values
func NewDeleteClusterInternalServerError() *DeleteClusterInternalServerError {
	return &DeleteClusterInternalServerError{}
}

/* DeleteClusterInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteClusterInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteClusterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-cluster][%d] deleteClusterInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteClusterInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
