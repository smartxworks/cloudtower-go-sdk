// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetMetaLeaderReader is a Reader for the GetMetaLeader structure.
type GetMetaLeaderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMetaLeaderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMetaLeaderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetMetaLeaderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetMetaLeaderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetMetaLeaderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMetaLeaderOK creates a GetMetaLeaderOK with default headers values
func NewGetMetaLeaderOK() *GetMetaLeaderOK {
	return &GetMetaLeaderOK{}
}

/* GetMetaLeaderOK describes a response with status code 200, with default header values.

GetMetaLeaderOK get meta leader o k
*/
type GetMetaLeaderOK struct {
	XTowerRequestID string

	Payload []*models.MetaLeader
}

func (o *GetMetaLeaderOK) Error() string {
	return fmt.Sprintf("[POST /get-meta-leader][%d] getMetaLeaderOK  %+v", 200, o.Payload)
}
func (o *GetMetaLeaderOK) GetPayload() []*models.MetaLeader {
	return o.Payload
}

func (o *GetMetaLeaderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaLeaderBadRequest creates a GetMetaLeaderBadRequest with default headers values
func NewGetMetaLeaderBadRequest() *GetMetaLeaderBadRequest {
	return &GetMetaLeaderBadRequest{}
}

/* GetMetaLeaderBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetMetaLeaderBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetMetaLeaderBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-meta-leader][%d] getMetaLeaderBadRequest  %+v", 400, o.Payload)
}
func (o *GetMetaLeaderBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMetaLeaderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaLeaderNotFound creates a GetMetaLeaderNotFound with default headers values
func NewGetMetaLeaderNotFound() *GetMetaLeaderNotFound {
	return &GetMetaLeaderNotFound{}
}

/* GetMetaLeaderNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetMetaLeaderNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetMetaLeaderNotFound) Error() string {
	return fmt.Sprintf("[POST /get-meta-leader][%d] getMetaLeaderNotFound  %+v", 404, o.Payload)
}
func (o *GetMetaLeaderNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMetaLeaderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMetaLeaderInternalServerError creates a GetMetaLeaderInternalServerError with default headers values
func NewGetMetaLeaderInternalServerError() *GetMetaLeaderInternalServerError {
	return &GetMetaLeaderInternalServerError{}
}

/* GetMetaLeaderInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetMetaLeaderInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetMetaLeaderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-meta-leader][%d] getMetaLeaderInternalServerError  %+v", 500, o.Payload)
}
func (o *GetMetaLeaderInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMetaLeaderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
