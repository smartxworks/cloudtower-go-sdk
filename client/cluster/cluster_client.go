// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConnectCluster(params *ConnectClusterParams, opts ...ClientOption) (*ConnectClusterOK, error)

	DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error)

	GetClusterStorageInfo(params *GetClusterStorageInfoParams, opts ...ClientOption) (*GetClusterStorageInfoOK, error)

	GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error)

	GetClustersConnection(params *GetClustersConnectionParams, opts ...ClientOption) (*GetClustersConnectionOK, error)

	GetMetaLeader(params *GetMetaLeaderParams, opts ...ClientOption) (*GetMetaLeaderOK, error)

	UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, error)

	UpdateClusterEnableISCSISetting(params *UpdateClusterEnableISCSISettingParams, opts ...ClientOption) (*UpdateClusterEnableISCSISettingOK, error)

	UpdateClusterHaSetting(params *UpdateClusterHaSettingParams, opts ...ClientOption) (*UpdateClusterHaSettingOK, error)

	UpdateClusterLicense(params *UpdateClusterLicenseParams, opts ...ClientOption) (*UpdateClusterLicenseOK, error)

	UpdateClusterNetworkSetting(params *UpdateClusterNetworkSettingParams, opts ...ClientOption) (*UpdateClusterNetworkSettingOK, error)

	UpdateClusterVirtualizationSetting(params *UpdateClusterVirtualizationSettingParams, opts ...ClientOption) (*UpdateClusterVirtualizationSettingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConnectCluster connect cluster API
*/
func (a *Client) ConnectCluster(params *ConnectClusterParams, opts ...ClientOption) (*ConnectClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectCluster",
		Method:             "POST",
		PathPattern:        "/connect-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConnectCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCluster delete cluster API
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCluster",
		Method:             "POST",
		PathPattern:        "/delete-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterStorageInfo get cluster storage info API
*/
func (a *Client) GetClusterStorageInfo(params *GetClusterStorageInfoParams, opts ...ClientOption) (*GetClusterStorageInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStorageInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterStorageInfo",
		Method:             "POST",
		PathPattern:        "/get-cluster-storage-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterStorageInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterStorageInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterStorageInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusters get clusters API
*/
func (a *Client) GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusters",
		Method:             "POST",
		PathPattern:        "/get-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClustersConnection get clusters connection API
*/
func (a *Client) GetClustersConnection(params *GetClustersConnectionParams, opts ...ClientOption) (*GetClustersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClustersConnection",
		Method:             "POST",
		PathPattern:        "/get-clusters-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClustersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMetaLeader get meta leader API
*/
func (a *Client) GetMetaLeader(params *GetMetaLeaderParams, opts ...ClientOption) (*GetMetaLeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetaLeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMetaLeader",
		Method:             "POST",
		PathPattern:        "/get-meta-leader",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetaLeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetaLeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMetaLeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCluster update cluster API
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCluster",
		Method:             "POST",
		PathPattern:        "/update-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterEnableISCSISetting update cluster enable i s c s i setting API
*/
func (a *Client) UpdateClusterEnableISCSISetting(params *UpdateClusterEnableISCSISettingParams, opts ...ClientOption) (*UpdateClusterEnableISCSISettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterEnableISCSISettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterEnableISCSISetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-enable-iscsi-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterEnableISCSISettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterEnableISCSISettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterEnableISCSISetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterHaSetting update cluster ha setting API
*/
func (a *Client) UpdateClusterHaSetting(params *UpdateClusterHaSettingParams, opts ...ClientOption) (*UpdateClusterHaSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterHaSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterHaSetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-ha-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterHaSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterHaSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterHaSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterLicense update cluster license API
*/
func (a *Client) UpdateClusterLicense(params *UpdateClusterLicenseParams, opts ...ClientOption) (*UpdateClusterLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterLicense",
		Method:             "POST",
		PathPattern:        "/update-cluster-license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterNetworkSetting update cluster network setting API
*/
func (a *Client) UpdateClusterNetworkSetting(params *UpdateClusterNetworkSettingParams, opts ...ClientOption) (*UpdateClusterNetworkSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterNetworkSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterNetworkSetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-network-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterNetworkSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterNetworkSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterNetworkSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterVirtualizationSetting update cluster virtualization setting API
*/
func (a *Client) UpdateClusterVirtualizationSetting(params *UpdateClusterVirtualizationSettingParams, opts ...ClientOption) (*UpdateClusterVirtualizationSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterVirtualizationSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterVirtualizationSetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-virtualization-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterVirtualizationSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterVirtualizationSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterVirtualizationSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
