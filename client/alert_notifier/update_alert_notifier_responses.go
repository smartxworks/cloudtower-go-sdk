// Code generated by go-swagger; DO NOT EDIT.

package alert_notifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateAlertNotifierReader is a Reader for the UpdateAlertNotifier structure.
type UpdateAlertNotifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertNotifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAlertNotifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateAlertNotifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateAlertNotifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateAlertNotifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAlertNotifierOK creates a UpdateAlertNotifierOK with default headers values
func NewUpdateAlertNotifierOK() *UpdateAlertNotifierOK {
	return &UpdateAlertNotifierOK{}
}

/* UpdateAlertNotifierOK describes a response with status code 200, with default header values.

UpdateAlertNotifierOK update alert notifier o k
*/
type UpdateAlertNotifierOK struct {
	XTowerRequestID string

	Payload *models.WithTaskAlertNotifier
}

func (o *UpdateAlertNotifierOK) Error() string {
	return fmt.Sprintf("[POST /update-alert-notifier][%d] updateAlertNotifierOK  %+v", 200, o.Payload)
}
func (o *UpdateAlertNotifierOK) GetPayload() *models.WithTaskAlertNotifier {
	return o.Payload
}

func (o *UpdateAlertNotifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskAlertNotifier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotifierBadRequest creates a UpdateAlertNotifierBadRequest with default headers values
func NewUpdateAlertNotifierBadRequest() *UpdateAlertNotifierBadRequest {
	return &UpdateAlertNotifierBadRequest{}
}

/* UpdateAlertNotifierBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateAlertNotifierBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAlertNotifierBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-alert-notifier][%d] updateAlertNotifierBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateAlertNotifierBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAlertNotifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotifierNotFound creates a UpdateAlertNotifierNotFound with default headers values
func NewUpdateAlertNotifierNotFound() *UpdateAlertNotifierNotFound {
	return &UpdateAlertNotifierNotFound{}
}

/* UpdateAlertNotifierNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateAlertNotifierNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAlertNotifierNotFound) Error() string {
	return fmt.Sprintf("[POST /update-alert-notifier][%d] updateAlertNotifierNotFound  %+v", 404, o.Payload)
}
func (o *UpdateAlertNotifierNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAlertNotifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotifierInternalServerError creates a UpdateAlertNotifierInternalServerError with default headers values
func NewUpdateAlertNotifierInternalServerError() *UpdateAlertNotifierInternalServerError {
	return &UpdateAlertNotifierInternalServerError{}
}

/* UpdateAlertNotifierInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateAlertNotifierInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAlertNotifierInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-alert-notifier][%d] updateAlertNotifierInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateAlertNotifierInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAlertNotifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
