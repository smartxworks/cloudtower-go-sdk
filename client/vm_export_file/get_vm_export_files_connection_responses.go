// Code generated by go-swagger; DO NOT EDIT.

package vm_export_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMExportFilesConnectionReader is a Reader for the GetVMExportFilesConnection structure.
type GetVMExportFilesConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMExportFilesConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMExportFilesConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMExportFilesConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMExportFilesConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMExportFilesConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMExportFilesConnectionOK creates a GetVMExportFilesConnectionOK with default headers values
func NewGetVMExportFilesConnectionOK() *GetVMExportFilesConnectionOK {
	return &GetVMExportFilesConnectionOK{}
}

/* GetVMExportFilesConnectionOK describes a response with status code 200, with default header values.

GetVMExportFilesConnectionOK get Vm export files connection o k
*/
type GetVMExportFilesConnectionOK struct {
	XTowerRequestID string

	Payload *models.VMExportFileConnection
}

func (o *GetVMExportFilesConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-export-files-connection][%d] getVmExportFilesConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVMExportFilesConnectionOK) GetPayload() *models.VMExportFileConnection {
	return o.Payload
}

func (o *GetVMExportFilesConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VMExportFileConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMExportFilesConnectionBadRequest creates a GetVMExportFilesConnectionBadRequest with default headers values
func NewGetVMExportFilesConnectionBadRequest() *GetVMExportFilesConnectionBadRequest {
	return &GetVMExportFilesConnectionBadRequest{}
}

/* GetVMExportFilesConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMExportFilesConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMExportFilesConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-export-files-connection][%d] getVmExportFilesConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMExportFilesConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMExportFilesConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMExportFilesConnectionNotFound creates a GetVMExportFilesConnectionNotFound with default headers values
func NewGetVMExportFilesConnectionNotFound() *GetVMExportFilesConnectionNotFound {
	return &GetVMExportFilesConnectionNotFound{}
}

/* GetVMExportFilesConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMExportFilesConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMExportFilesConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-export-files-connection][%d] getVmExportFilesConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVMExportFilesConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMExportFilesConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMExportFilesConnectionInternalServerError creates a GetVMExportFilesConnectionInternalServerError with default headers values
func NewGetVMExportFilesConnectionInternalServerError() *GetVMExportFilesConnectionInternalServerError {
	return &GetVMExportFilesConnectionInternalServerError{}
}

/* GetVMExportFilesConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMExportFilesConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMExportFilesConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-export-files-connection][%d] getVmExportFilesConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMExportFilesConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMExportFilesConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
