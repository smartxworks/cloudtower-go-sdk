// Code generated by go-swagger; DO NOT EDIT.

package report_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateReportTemplateReader is a Reader for the UpdateReportTemplate structure.
type UpdateReportTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReportTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReportTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateReportTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateReportTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateReportTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateReportTemplateOK creates a UpdateReportTemplateOK with default headers values
func NewUpdateReportTemplateOK() *UpdateReportTemplateOK {
	return &UpdateReportTemplateOK{}
}

/* UpdateReportTemplateOK describes a response with status code 200, with default header values.

UpdateReportTemplateOK update report template o k
*/
type UpdateReportTemplateOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskReportTemplate
}

func (o *UpdateReportTemplateOK) Error() string {
	return fmt.Sprintf("[POST /update-report-template][%d] updateReportTemplateOK  %+v", 200, o.Payload)
}
func (o *UpdateReportTemplateOK) GetPayload() []*models.WithTaskReportTemplate {
	return o.Payload
}

func (o *UpdateReportTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportTemplateBadRequest creates a UpdateReportTemplateBadRequest with default headers values
func NewUpdateReportTemplateBadRequest() *UpdateReportTemplateBadRequest {
	return &UpdateReportTemplateBadRequest{}
}

/* UpdateReportTemplateBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateReportTemplateBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateReportTemplateBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-report-template][%d] updateReportTemplateBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateReportTemplateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateReportTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportTemplateNotFound creates a UpdateReportTemplateNotFound with default headers values
func NewUpdateReportTemplateNotFound() *UpdateReportTemplateNotFound {
	return &UpdateReportTemplateNotFound{}
}

/* UpdateReportTemplateNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateReportTemplateNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateReportTemplateNotFound) Error() string {
	return fmt.Sprintf("[POST /update-report-template][%d] updateReportTemplateNotFound  %+v", 404, o.Payload)
}
func (o *UpdateReportTemplateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateReportTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportTemplateInternalServerError creates a UpdateReportTemplateInternalServerError with default headers values
func NewUpdateReportTemplateInternalServerError() *UpdateReportTemplateInternalServerError {
	return &UpdateReportTemplateInternalServerError{}
}

/* UpdateReportTemplateInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateReportTemplateInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateReportTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-report-template][%d] updateReportTemplateInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateReportTemplateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateReportTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
