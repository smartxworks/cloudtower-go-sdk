// Code generated by go-swagger; DO NOT EDIT.

package vlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVlansConnectionReader is a Reader for the GetVlansConnection structure.
type GetVlansConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVlansConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVlansConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVlansConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVlansConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVlansConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVlansConnectionOK creates a GetVlansConnectionOK with default headers values
func NewGetVlansConnectionOK() *GetVlansConnectionOK {
	return &GetVlansConnectionOK{}
}

/* GetVlansConnectionOK describes a response with status code 200, with default header values.

GetVlansConnectionOK get vlans connection o k
*/
type GetVlansConnectionOK struct {
	XTowerRequestID string

	Payload *models.VlanConnection
}

func (o *GetVlansConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-vlans-connection][%d] getVlansConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVlansConnectionOK) GetPayload() *models.VlanConnection {
	return o.Payload
}

func (o *GetVlansConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VlanConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVlansConnectionBadRequest creates a GetVlansConnectionBadRequest with default headers values
func NewGetVlansConnectionBadRequest() *GetVlansConnectionBadRequest {
	return &GetVlansConnectionBadRequest{}
}

/* GetVlansConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVlansConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVlansConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vlans-connection][%d] getVlansConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVlansConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVlansConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVlansConnectionNotFound creates a GetVlansConnectionNotFound with default headers values
func NewGetVlansConnectionNotFound() *GetVlansConnectionNotFound {
	return &GetVlansConnectionNotFound{}
}

/* GetVlansConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVlansConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVlansConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vlans-connection][%d] getVlansConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVlansConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVlansConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVlansConnectionInternalServerError creates a GetVlansConnectionInternalServerError with default headers values
func NewGetVlansConnectionInternalServerError() *GetVlansConnectionInternalServerError {
	return &GetVlansConnectionInternalServerError{}
}

/* GetVlansConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVlansConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVlansConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vlans-connection][%d] getVlansConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVlansConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVlansConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
