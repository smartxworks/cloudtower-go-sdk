// Code generated by go-swagger; DO NOT EDIT.

package vlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateVMVlanReader is a Reader for the CreateVMVlan structure.
type CreateVMVlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVMVlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVMVlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateVMVlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateVMVlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateVMVlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVMVlanOK creates a CreateVMVlanOK with default headers values
func NewCreateVMVlanOK() *CreateVMVlanOK {
	return &CreateVMVlanOK{}
}

/* CreateVMVlanOK describes a response with status code 200, with default header values.

CreateVMVlanOK create Vm vlan o k
*/
type CreateVMVlanOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVlan
}

func (o *CreateVMVlanOK) Error() string {
	return fmt.Sprintf("[POST /create-vm-vlan][%d] createVmVlanOK  %+v", 200, o.Payload)
}
func (o *CreateVMVlanOK) GetPayload() []*models.WithTaskVlan {
	return o.Payload
}

func (o *CreateVMVlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMVlanBadRequest creates a CreateVMVlanBadRequest with default headers values
func NewCreateVMVlanBadRequest() *CreateVMVlanBadRequest {
	return &CreateVMVlanBadRequest{}
}

/* CreateVMVlanBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateVMVlanBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMVlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-vm-vlan][%d] createVmVlanBadRequest  %+v", 400, o.Payload)
}
func (o *CreateVMVlanBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMVlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMVlanNotFound creates a CreateVMVlanNotFound with default headers values
func NewCreateVMVlanNotFound() *CreateVMVlanNotFound {
	return &CreateVMVlanNotFound{}
}

/* CreateVMVlanNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateVMVlanNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMVlanNotFound) Error() string {
	return fmt.Sprintf("[POST /create-vm-vlan][%d] createVmVlanNotFound  %+v", 404, o.Payload)
}
func (o *CreateVMVlanNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMVlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMVlanInternalServerError creates a CreateVMVlanInternalServerError with default headers values
func NewCreateVMVlanInternalServerError() *CreateVMVlanInternalServerError {
	return &CreateVMVlanInternalServerError{}
}

/* CreateVMVlanInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateVMVlanInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMVlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-vm-vlan][%d] createVmVlanInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateVMVlanInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMVlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
