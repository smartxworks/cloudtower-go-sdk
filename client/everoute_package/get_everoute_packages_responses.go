// Code generated by go-swagger; DO NOT EDIT.

package everoute_package

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetEveroutePackagesReader is a Reader for the GetEveroutePackages structure.
type GetEveroutePackagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEveroutePackagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEveroutePackagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetEveroutePackagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetEveroutePackagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetEveroutePackagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEveroutePackagesOK creates a GetEveroutePackagesOK with default headers values
func NewGetEveroutePackagesOK() *GetEveroutePackagesOK {
	return &GetEveroutePackagesOK{}
}

/* GetEveroutePackagesOK describes a response with status code 200, with default header values.

GetEveroutePackagesOK get everoute packages o k
*/
type GetEveroutePackagesOK struct {
	XTowerRequestID string

	Payload []*models.EveroutePackage
}

func (o *GetEveroutePackagesOK) Error() string {
	return fmt.Sprintf("[POST /get-everoute-packages][%d] getEveroutePackagesOK  %+v", 200, o.Payload)
}
func (o *GetEveroutePackagesOK) GetPayload() []*models.EveroutePackage {
	return o.Payload
}

func (o *GetEveroutePackagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEveroutePackagesBadRequest creates a GetEveroutePackagesBadRequest with default headers values
func NewGetEveroutePackagesBadRequest() *GetEveroutePackagesBadRequest {
	return &GetEveroutePackagesBadRequest{}
}

/* GetEveroutePackagesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetEveroutePackagesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEveroutePackagesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-everoute-packages][%d] getEveroutePackagesBadRequest  %+v", 400, o.Payload)
}
func (o *GetEveroutePackagesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEveroutePackagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEveroutePackagesNotFound creates a GetEveroutePackagesNotFound with default headers values
func NewGetEveroutePackagesNotFound() *GetEveroutePackagesNotFound {
	return &GetEveroutePackagesNotFound{}
}

/* GetEveroutePackagesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetEveroutePackagesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEveroutePackagesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-everoute-packages][%d] getEveroutePackagesNotFound  %+v", 404, o.Payload)
}
func (o *GetEveroutePackagesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEveroutePackagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEveroutePackagesInternalServerError creates a GetEveroutePackagesInternalServerError with default headers values
func NewGetEveroutePackagesInternalServerError() *GetEveroutePackagesInternalServerError {
	return &GetEveroutePackagesInternalServerError{}
}

/* GetEveroutePackagesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetEveroutePackagesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEveroutePackagesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-everoute-packages][%d] getEveroutePackagesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEveroutePackagesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEveroutePackagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
