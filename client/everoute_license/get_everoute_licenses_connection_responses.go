// Code generated by go-swagger; DO NOT EDIT.

package everoute_license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetEverouteLicensesConnectionReader is a Reader for the GetEverouteLicensesConnection structure.
type GetEverouteLicensesConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEverouteLicensesConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEverouteLicensesConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetEverouteLicensesConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetEverouteLicensesConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetEverouteLicensesConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEverouteLicensesConnectionOK creates a GetEverouteLicensesConnectionOK with default headers values
func NewGetEverouteLicensesConnectionOK() *GetEverouteLicensesConnectionOK {
	return &GetEverouteLicensesConnectionOK{}
}

/* GetEverouteLicensesConnectionOK describes a response with status code 200, with default header values.

GetEverouteLicensesConnectionOK get everoute licenses connection o k
*/
type GetEverouteLicensesConnectionOK struct {
	XTowerRequestID string

	Payload *models.EverouteLicenseConnection
}

func (o *GetEverouteLicensesConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-everoute-licenses-connection][%d] getEverouteLicensesConnectionOK  %+v", 200, o.Payload)
}
func (o *GetEverouteLicensesConnectionOK) GetPayload() *models.EverouteLicenseConnection {
	return o.Payload
}

func (o *GetEverouteLicensesConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.EverouteLicenseConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEverouteLicensesConnectionBadRequest creates a GetEverouteLicensesConnectionBadRequest with default headers values
func NewGetEverouteLicensesConnectionBadRequest() *GetEverouteLicensesConnectionBadRequest {
	return &GetEverouteLicensesConnectionBadRequest{}
}

/* GetEverouteLicensesConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetEverouteLicensesConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEverouteLicensesConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-everoute-licenses-connection][%d] getEverouteLicensesConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetEverouteLicensesConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEverouteLicensesConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEverouteLicensesConnectionNotFound creates a GetEverouteLicensesConnectionNotFound with default headers values
func NewGetEverouteLicensesConnectionNotFound() *GetEverouteLicensesConnectionNotFound {
	return &GetEverouteLicensesConnectionNotFound{}
}

/* GetEverouteLicensesConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetEverouteLicensesConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEverouteLicensesConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-everoute-licenses-connection][%d] getEverouteLicensesConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetEverouteLicensesConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEverouteLicensesConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEverouteLicensesConnectionInternalServerError creates a GetEverouteLicensesConnectionInternalServerError with default headers values
func NewGetEverouteLicensesConnectionInternalServerError() *GetEverouteLicensesConnectionInternalServerError {
	return &GetEverouteLicensesConnectionInternalServerError{}
}

/* GetEverouteLicensesConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetEverouteLicensesConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEverouteLicensesConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-everoute-licenses-connection][%d] getEverouteLicensesConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEverouteLicensesConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEverouteLicensesConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
