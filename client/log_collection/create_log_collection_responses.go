// Code generated by go-swagger; DO NOT EDIT.

package log_collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateLogCollectionReader is a Reader for the CreateLogCollection structure.
type CreateLogCollectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogCollectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateLogCollectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateLogCollectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateLogCollectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateLogCollectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateLogCollectionOK creates a CreateLogCollectionOK with default headers values
func NewCreateLogCollectionOK() *CreateLogCollectionOK {
	return &CreateLogCollectionOK{}
}

/* CreateLogCollectionOK describes a response with status code 200, with default header values.

CreateLogCollectionOK create log collection o k
*/
type CreateLogCollectionOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskLogCollection
}

func (o *CreateLogCollectionOK) Error() string {
	return fmt.Sprintf("[POST /create-log-collection][%d] createLogCollectionOK  %+v", 200, o.Payload)
}
func (o *CreateLogCollectionOK) GetPayload() []*models.WithTaskLogCollection {
	return o.Payload
}

func (o *CreateLogCollectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogCollectionBadRequest creates a CreateLogCollectionBadRequest with default headers values
func NewCreateLogCollectionBadRequest() *CreateLogCollectionBadRequest {
	return &CreateLogCollectionBadRequest{}
}

/* CreateLogCollectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateLogCollectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLogCollectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-log-collection][%d] createLogCollectionBadRequest  %+v", 400, o.Payload)
}
func (o *CreateLogCollectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLogCollectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogCollectionNotFound creates a CreateLogCollectionNotFound with default headers values
func NewCreateLogCollectionNotFound() *CreateLogCollectionNotFound {
	return &CreateLogCollectionNotFound{}
}

/* CreateLogCollectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateLogCollectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLogCollectionNotFound) Error() string {
	return fmt.Sprintf("[POST /create-log-collection][%d] createLogCollectionNotFound  %+v", 404, o.Payload)
}
func (o *CreateLogCollectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLogCollectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogCollectionInternalServerError creates a CreateLogCollectionInternalServerError with default headers values
func NewCreateLogCollectionInternalServerError() *CreateLogCollectionInternalServerError {
	return &CreateLogCollectionInternalServerError{}
}

/* CreateLogCollectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateLogCollectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLogCollectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-log-collection][%d] createLogCollectionInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateLogCollectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLogCollectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
