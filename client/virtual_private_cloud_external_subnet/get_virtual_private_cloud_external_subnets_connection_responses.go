// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_external_subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVirtualPrivateCloudExternalSubnetsConnectionReader is a Reader for the GetVirtualPrivateCloudExternalSubnetsConnection structure.
type GetVirtualPrivateCloudExternalSubnetsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualPrivateCloudExternalSubnetsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualPrivateCloudExternalSubnetsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVirtualPrivateCloudExternalSubnetsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVirtualPrivateCloudExternalSubnetsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualPrivateCloudExternalSubnetsConnectionOK creates a GetVirtualPrivateCloudExternalSubnetsConnectionOK with default headers values
func NewGetVirtualPrivateCloudExternalSubnetsConnectionOK() *GetVirtualPrivateCloudExternalSubnetsConnectionOK {
	return &GetVirtualPrivateCloudExternalSubnetsConnectionOK{}
}

/* GetVirtualPrivateCloudExternalSubnetsConnectionOK describes a response with status code 200, with default header values.

GetVirtualPrivateCloudExternalSubnetsConnectionOK get virtual private cloud external subnets connection o k
*/
type GetVirtualPrivateCloudExternalSubnetsConnectionOK struct {
	XTowerRequestID string

	Payload *models.VirtualPrivateCloudExternalSubnetConnection
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-external-subnets-connection][%d] getVirtualPrivateCloudExternalSubnetsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVirtualPrivateCloudExternalSubnetsConnectionOK) GetPayload() *models.VirtualPrivateCloudExternalSubnetConnection {
	return o.Payload
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VirtualPrivateCloudExternalSubnetConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudExternalSubnetsConnectionBadRequest creates a GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest with default headers values
func NewGetVirtualPrivateCloudExternalSubnetsConnectionBadRequest() *GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest {
	return &GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest{}
}

/* GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-external-subnets-connection][%d] getVirtualPrivateCloudExternalSubnetsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudExternalSubnetsConnectionNotFound creates a GetVirtualPrivateCloudExternalSubnetsConnectionNotFound with default headers values
func NewGetVirtualPrivateCloudExternalSubnetsConnectionNotFound() *GetVirtualPrivateCloudExternalSubnetsConnectionNotFound {
	return &GetVirtualPrivateCloudExternalSubnetsConnectionNotFound{}
}

/* GetVirtualPrivateCloudExternalSubnetsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVirtualPrivateCloudExternalSubnetsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-external-subnets-connection][%d] getVirtualPrivateCloudExternalSubnetsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVirtualPrivateCloudExternalSubnetsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError creates a GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError with default headers values
func NewGetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError() *GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError {
	return &GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError{}
}

/* GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-external-subnets-connection][%d] getVirtualPrivateCloudExternalSubnetsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudExternalSubnetsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
