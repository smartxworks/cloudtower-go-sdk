// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ResolveAlertReader is a Reader for the ResolveAlert structure.
type ResolveAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResolveAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResolveAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewResolveAlertBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewResolveAlertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewResolveAlertInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResolveAlertOK creates a ResolveAlertOK with default headers values
func NewResolveAlertOK() *ResolveAlertOK {
	return &ResolveAlertOK{}
}

/* ResolveAlertOK describes a response with status code 200, with default header values.

ResolveAlertOK resolve alert o k
*/
type ResolveAlertOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskAlert
}

func (o *ResolveAlertOK) Error() string {
	return fmt.Sprintf("[POST /resolve-alert][%d] resolveAlertOK  %+v", 200, o.Payload)
}
func (o *ResolveAlertOK) GetPayload() []*models.WithTaskAlert {
	return o.Payload
}

func (o *ResolveAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveAlertBadRequest creates a ResolveAlertBadRequest with default headers values
func NewResolveAlertBadRequest() *ResolveAlertBadRequest {
	return &ResolveAlertBadRequest{}
}

/* ResolveAlertBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ResolveAlertBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResolveAlertBadRequest) Error() string {
	return fmt.Sprintf("[POST /resolve-alert][%d] resolveAlertBadRequest  %+v", 400, o.Payload)
}
func (o *ResolveAlertBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResolveAlertBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveAlertNotFound creates a ResolveAlertNotFound with default headers values
func NewResolveAlertNotFound() *ResolveAlertNotFound {
	return &ResolveAlertNotFound{}
}

/* ResolveAlertNotFound describes a response with status code 404, with default header values.

Not found
*/
type ResolveAlertNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResolveAlertNotFound) Error() string {
	return fmt.Sprintf("[POST /resolve-alert][%d] resolveAlertNotFound  %+v", 404, o.Payload)
}
func (o *ResolveAlertNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResolveAlertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveAlertInternalServerError creates a ResolveAlertInternalServerError with default headers values
func NewResolveAlertInternalServerError() *ResolveAlertInternalServerError {
	return &ResolveAlertInternalServerError{}
}

/* ResolveAlertInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ResolveAlertInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResolveAlertInternalServerError) Error() string {
	return fmt.Sprintf("[POST /resolve-alert][%d] resolveAlertInternalServerError  %+v", 500, o.Payload)
}
func (o *ResolveAlertInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResolveAlertInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
