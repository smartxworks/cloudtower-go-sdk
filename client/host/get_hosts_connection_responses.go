// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetHostsConnectionReader is a Reader for the GetHostsConnection structure.
type GetHostsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHostsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetHostsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetHostsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetHostsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHostsConnectionOK creates a GetHostsConnectionOK with default headers values
func NewGetHostsConnectionOK() *GetHostsConnectionOK {
	return &GetHostsConnectionOK{}
}

/* GetHostsConnectionOK describes a response with status code 200, with default header values.

GetHostsConnectionOK get hosts connection o k
*/
type GetHostsConnectionOK struct {
	XTowerRequestID string

	Payload *models.HostConnection
}

func (o *GetHostsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-hosts-connection][%d] getHostsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetHostsConnectionOK) GetPayload() *models.HostConnection {
	return o.Payload
}

func (o *GetHostsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.HostConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsConnectionBadRequest creates a GetHostsConnectionBadRequest with default headers values
func NewGetHostsConnectionBadRequest() *GetHostsConnectionBadRequest {
	return &GetHostsConnectionBadRequest{}
}

/* GetHostsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetHostsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-hosts-connection][%d] getHostsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetHostsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsConnectionNotFound creates a GetHostsConnectionNotFound with default headers values
func NewGetHostsConnectionNotFound() *GetHostsConnectionNotFound {
	return &GetHostsConnectionNotFound{}
}

/* GetHostsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetHostsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-hosts-connection][%d] getHostsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetHostsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsConnectionInternalServerError creates a GetHostsConnectionInternalServerError with default headers values
func NewGetHostsConnectionInternalServerError() *GetHostsConnectionInternalServerError {
	return &GetHostsConnectionInternalServerError{}
}

/* GetHostsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetHostsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetHostsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-hosts-connection][%d] getHostsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetHostsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetHostsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
