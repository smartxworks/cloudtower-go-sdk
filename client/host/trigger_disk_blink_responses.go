// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// TriggerDiskBlinkReader is a Reader for the TriggerDiskBlink structure.
type TriggerDiskBlinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggerDiskBlinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTriggerDiskBlinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewTriggerDiskBlinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewTriggerDiskBlinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewTriggerDiskBlinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTriggerDiskBlinkOK creates a TriggerDiskBlinkOK with default headers values
func NewTriggerDiskBlinkOK() *TriggerDiskBlinkOK {
	return &TriggerDiskBlinkOK{}
}

/* TriggerDiskBlinkOK describes a response with status code 200, with default header values.

TriggerDiskBlinkOK trigger disk blink o k
*/
type TriggerDiskBlinkOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskHost
}

func (o *TriggerDiskBlinkOK) Error() string {
	return fmt.Sprintf("[POST /trigger-disk-blink][%d] triggerDiskBlinkOK  %+v", 200, o.Payload)
}
func (o *TriggerDiskBlinkOK) GetPayload() []*models.WithTaskHost {
	return o.Payload
}

func (o *TriggerDiskBlinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerDiskBlinkBadRequest creates a TriggerDiskBlinkBadRequest with default headers values
func NewTriggerDiskBlinkBadRequest() *TriggerDiskBlinkBadRequest {
	return &TriggerDiskBlinkBadRequest{}
}

/* TriggerDiskBlinkBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type TriggerDiskBlinkBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *TriggerDiskBlinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /trigger-disk-blink][%d] triggerDiskBlinkBadRequest  %+v", 400, o.Payload)
}
func (o *TriggerDiskBlinkBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *TriggerDiskBlinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerDiskBlinkNotFound creates a TriggerDiskBlinkNotFound with default headers values
func NewTriggerDiskBlinkNotFound() *TriggerDiskBlinkNotFound {
	return &TriggerDiskBlinkNotFound{}
}

/* TriggerDiskBlinkNotFound describes a response with status code 404, with default header values.

Not found
*/
type TriggerDiskBlinkNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *TriggerDiskBlinkNotFound) Error() string {
	return fmt.Sprintf("[POST /trigger-disk-blink][%d] triggerDiskBlinkNotFound  %+v", 404, o.Payload)
}
func (o *TriggerDiskBlinkNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *TriggerDiskBlinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggerDiskBlinkInternalServerError creates a TriggerDiskBlinkInternalServerError with default headers values
func NewTriggerDiskBlinkInternalServerError() *TriggerDiskBlinkInternalServerError {
	return &TriggerDiskBlinkInternalServerError{}
}

/* TriggerDiskBlinkInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type TriggerDiskBlinkInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *TriggerDiskBlinkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /trigger-disk-blink][%d] triggerDiskBlinkInternalServerError  %+v", 500, o.Payload)
}
func (o *TriggerDiskBlinkInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *TriggerDiskBlinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
