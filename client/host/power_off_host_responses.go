// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// PowerOffHostReader is a Reader for the PowerOffHost structure.
type PowerOffHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PowerOffHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPowerOffHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewPowerOffHostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewPowerOffHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewPowerOffHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPowerOffHostOK creates a PowerOffHostOK with default headers values
func NewPowerOffHostOK() *PowerOffHostOK {
	return &PowerOffHostOK{}
}

/* PowerOffHostOK describes a response with status code 200, with default header values.

PowerOffHostOK power off host o k
*/
type PowerOffHostOK struct {
	XTowerRequestID string

	Payload *models.WithTaskHost
}

func (o *PowerOffHostOK) Error() string {
	return fmt.Sprintf("[POST /operate-host-power][%d] powerOffHostOK  %+v", 200, o.Payload)
}
func (o *PowerOffHostOK) GetPayload() *models.WithTaskHost {
	return o.Payload
}

func (o *PowerOffHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPowerOffHostBadRequest creates a PowerOffHostBadRequest with default headers values
func NewPowerOffHostBadRequest() *PowerOffHostBadRequest {
	return &PowerOffHostBadRequest{}
}

/* PowerOffHostBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PowerOffHostBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PowerOffHostBadRequest) Error() string {
	return fmt.Sprintf("[POST /operate-host-power][%d] powerOffHostBadRequest  %+v", 400, o.Payload)
}
func (o *PowerOffHostBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PowerOffHostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPowerOffHostNotFound creates a PowerOffHostNotFound with default headers values
func NewPowerOffHostNotFound() *PowerOffHostNotFound {
	return &PowerOffHostNotFound{}
}

/* PowerOffHostNotFound describes a response with status code 404, with default header values.

Not found
*/
type PowerOffHostNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PowerOffHostNotFound) Error() string {
	return fmt.Sprintf("[POST /operate-host-power][%d] powerOffHostNotFound  %+v", 404, o.Payload)
}
func (o *PowerOffHostNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PowerOffHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPowerOffHostInternalServerError creates a PowerOffHostInternalServerError with default headers values
func NewPowerOffHostInternalServerError() *PowerOffHostInternalServerError {
	return &PowerOffHostInternalServerError{}
}

/* PowerOffHostInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PowerOffHostInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PowerOffHostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /operate-host-power][%d] powerOffHostInternalServerError  %+v", 500, o.Payload)
}
func (o *PowerOffHostInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PowerOffHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
