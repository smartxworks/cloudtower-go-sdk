// Code generated by go-swagger; DO NOT EDIT.

package iscsi_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateIscsiTargetReader is a Reader for the CreateIscsiTarget structure.
type CreateIscsiTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIscsiTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateIscsiTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateIscsiTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateIscsiTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateIscsiTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateIscsiTargetOK creates a CreateIscsiTargetOK with default headers values
func NewCreateIscsiTargetOK() *CreateIscsiTargetOK {
	return &CreateIscsiTargetOK{}
}

/* CreateIscsiTargetOK describes a response with status code 200, with default header values.

CreateIscsiTargetOK create iscsi target o k
*/
type CreateIscsiTargetOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskIscsiTarget
}

func (o *CreateIscsiTargetOK) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-target][%d] createIscsiTargetOK  %+v", 200, o.Payload)
}
func (o *CreateIscsiTargetOK) GetPayload() []*models.WithTaskIscsiTarget {
	return o.Payload
}

func (o *CreateIscsiTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiTargetBadRequest creates a CreateIscsiTargetBadRequest with default headers values
func NewCreateIscsiTargetBadRequest() *CreateIscsiTargetBadRequest {
	return &CreateIscsiTargetBadRequest{}
}

/* CreateIscsiTargetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateIscsiTargetBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiTargetBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-target][%d] createIscsiTargetBadRequest  %+v", 400, o.Payload)
}
func (o *CreateIscsiTargetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiTargetNotFound creates a CreateIscsiTargetNotFound with default headers values
func NewCreateIscsiTargetNotFound() *CreateIscsiTargetNotFound {
	return &CreateIscsiTargetNotFound{}
}

/* CreateIscsiTargetNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateIscsiTargetNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiTargetNotFound) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-target][%d] createIscsiTargetNotFound  %+v", 404, o.Payload)
}
func (o *CreateIscsiTargetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiTargetInternalServerError creates a CreateIscsiTargetInternalServerError with default headers values
func NewCreateIscsiTargetInternalServerError() *CreateIscsiTargetInternalServerError {
	return &CreateIscsiTargetInternalServerError{}
}

/* CreateIscsiTargetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateIscsiTargetInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiTargetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-target][%d] createIscsiTargetInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateIscsiTargetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
