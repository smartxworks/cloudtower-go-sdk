// Code generated by go-swagger; DO NOT EDIT.

package iscsi_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateIscsiTargetReader is a Reader for the UpdateIscsiTarget structure.
type UpdateIscsiTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIscsiTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIscsiTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateIscsiTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateIscsiTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateIscsiTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateIscsiTargetOK creates a UpdateIscsiTargetOK with default headers values
func NewUpdateIscsiTargetOK() *UpdateIscsiTargetOK {
	return &UpdateIscsiTargetOK{}
}

/* UpdateIscsiTargetOK describes a response with status code 200, with default header values.

UpdateIscsiTargetOK update iscsi target o k
*/
type UpdateIscsiTargetOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskIscsiTarget
}

func (o *UpdateIscsiTargetOK) Error() string {
	return fmt.Sprintf("[POST /update-iscsi-target][%d] updateIscsiTargetOK  %+v", 200, o.Payload)
}
func (o *UpdateIscsiTargetOK) GetPayload() []*models.WithTaskIscsiTarget {
	return o.Payload
}

func (o *UpdateIscsiTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIscsiTargetBadRequest creates a UpdateIscsiTargetBadRequest with default headers values
func NewUpdateIscsiTargetBadRequest() *UpdateIscsiTargetBadRequest {
	return &UpdateIscsiTargetBadRequest{}
}

/* UpdateIscsiTargetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateIscsiTargetBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIscsiTargetBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-iscsi-target][%d] updateIscsiTargetBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateIscsiTargetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIscsiTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIscsiTargetNotFound creates a UpdateIscsiTargetNotFound with default headers values
func NewUpdateIscsiTargetNotFound() *UpdateIscsiTargetNotFound {
	return &UpdateIscsiTargetNotFound{}
}

/* UpdateIscsiTargetNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateIscsiTargetNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIscsiTargetNotFound) Error() string {
	return fmt.Sprintf("[POST /update-iscsi-target][%d] updateIscsiTargetNotFound  %+v", 404, o.Payload)
}
func (o *UpdateIscsiTargetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIscsiTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIscsiTargetInternalServerError creates a UpdateIscsiTargetInternalServerError with default headers values
func NewUpdateIscsiTargetInternalServerError() *UpdateIscsiTargetInternalServerError {
	return &UpdateIscsiTargetInternalServerError{}
}

/* UpdateIscsiTargetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateIscsiTargetInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateIscsiTargetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-iscsi-target][%d] updateIscsiTargetInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateIscsiTargetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateIscsiTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
