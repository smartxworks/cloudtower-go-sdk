// Code generated by go-swagger; DO NOT EDIT.

package iscsi_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteIscsiTargetReader is a Reader for the DeleteIscsiTarget structure.
type DeleteIscsiTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIscsiTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIscsiTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteIscsiTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteIscsiTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteIscsiTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteIscsiTargetOK creates a DeleteIscsiTargetOK with default headers values
func NewDeleteIscsiTargetOK() *DeleteIscsiTargetOK {
	return &DeleteIscsiTargetOK{}
}

/* DeleteIscsiTargetOK describes a response with status code 200, with default header values.

DeleteIscsiTargetOK delete iscsi target o k
*/
type DeleteIscsiTargetOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteIscsiTarget
}

func (o *DeleteIscsiTargetOK) Error() string {
	return fmt.Sprintf("[POST /delete-iscsi-target][%d] deleteIscsiTargetOK  %+v", 200, o.Payload)
}
func (o *DeleteIscsiTargetOK) GetPayload() []*models.WithTaskDeleteIscsiTarget {
	return o.Payload
}

func (o *DeleteIscsiTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIscsiTargetBadRequest creates a DeleteIscsiTargetBadRequest with default headers values
func NewDeleteIscsiTargetBadRequest() *DeleteIscsiTargetBadRequest {
	return &DeleteIscsiTargetBadRequest{}
}

/* DeleteIscsiTargetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteIscsiTargetBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteIscsiTargetBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-iscsi-target][%d] deleteIscsiTargetBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteIscsiTargetBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteIscsiTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIscsiTargetNotFound creates a DeleteIscsiTargetNotFound with default headers values
func NewDeleteIscsiTargetNotFound() *DeleteIscsiTargetNotFound {
	return &DeleteIscsiTargetNotFound{}
}

/* DeleteIscsiTargetNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteIscsiTargetNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteIscsiTargetNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-iscsi-target][%d] deleteIscsiTargetNotFound  %+v", 404, o.Payload)
}
func (o *DeleteIscsiTargetNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteIscsiTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIscsiTargetInternalServerError creates a DeleteIscsiTargetInternalServerError with default headers values
func NewDeleteIscsiTargetInternalServerError() *DeleteIscsiTargetInternalServerError {
	return &DeleteIscsiTargetInternalServerError{}
}

/* DeleteIscsiTargetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteIscsiTargetInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteIscsiTargetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-iscsi-target][%d] deleteIscsiTargetInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteIscsiTargetInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteIscsiTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
