// Code generated by go-swagger; DO NOT EDIT.

package ovf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UploadElfFileReader is a Reader for the UploadElfFile structure.
type UploadElfFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadElfFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadElfFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUploadElfFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUploadElfFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUploadElfFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadElfFileOK creates a UploadElfFileOK with default headers values
func NewUploadElfFileOK() *UploadElfFileOK {
	return &UploadElfFileOK{}
}

/* UploadElfFileOK describes a response with status code 200, with default header values.

UploadElfFileOK upload elf file o k
*/
type UploadElfFileOK struct {
	XTowerRequestID string

	Payload *models.UploadTask
}

func (o *UploadElfFileOK) Error() string {
	return fmt.Sprintf("[POST /upload-elf-file][%d] uploadElfFileOK  %+v", 200, o.Payload)
}
func (o *UploadElfFileOK) GetPayload() *models.UploadTask {
	return o.Payload
}

func (o *UploadElfFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.UploadTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadElfFileBadRequest creates a UploadElfFileBadRequest with default headers values
func NewUploadElfFileBadRequest() *UploadElfFileBadRequest {
	return &UploadElfFileBadRequest{}
}

/* UploadElfFileBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UploadElfFileBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadElfFileBadRequest) Error() string {
	return fmt.Sprintf("[POST /upload-elf-file][%d] uploadElfFileBadRequest  %+v", 400, o.Payload)
}
func (o *UploadElfFileBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadElfFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadElfFileNotFound creates a UploadElfFileNotFound with default headers values
func NewUploadElfFileNotFound() *UploadElfFileNotFound {
	return &UploadElfFileNotFound{}
}

/* UploadElfFileNotFound describes a response with status code 404, with default header values.

Not found
*/
type UploadElfFileNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadElfFileNotFound) Error() string {
	return fmt.Sprintf("[POST /upload-elf-file][%d] uploadElfFileNotFound  %+v", 404, o.Payload)
}
func (o *UploadElfFileNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadElfFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadElfFileInternalServerError creates a UploadElfFileInternalServerError with default headers values
func NewUploadElfFileInternalServerError() *UploadElfFileInternalServerError {
	return &UploadElfFileInternalServerError{}
}

/* UploadElfFileInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UploadElfFileInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UploadElfFileInternalServerError) Error() string {
	return fmt.Sprintf("[POST /upload-elf-file][%d] uploadElfFileInternalServerError  %+v", 500, o.Payload)
}
func (o *UploadElfFileInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UploadElfFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
