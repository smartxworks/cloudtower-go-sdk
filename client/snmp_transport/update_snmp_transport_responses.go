// Code generated by go-swagger; DO NOT EDIT.

package snmp_transport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateSnmpTransportReader is a Reader for the UpdateSnmpTransport structure.
type UpdateSnmpTransportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSnmpTransportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSnmpTransportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateSnmpTransportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateSnmpTransportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateSnmpTransportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSnmpTransportOK creates a UpdateSnmpTransportOK with default headers values
func NewUpdateSnmpTransportOK() *UpdateSnmpTransportOK {
	return &UpdateSnmpTransportOK{}
}

/* UpdateSnmpTransportOK describes a response with status code 200, with default header values.

UpdateSnmpTransportOK update snmp transport o k
*/
type UpdateSnmpTransportOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskSnmpTransport
}

func (o *UpdateSnmpTransportOK) Error() string {
	return fmt.Sprintf("[POST /update-snmp-transport][%d] updateSnmpTransportOK  %+v", 200, o.Payload)
}
func (o *UpdateSnmpTransportOK) GetPayload() []*models.WithTaskSnmpTransport {
	return o.Payload
}

func (o *UpdateSnmpTransportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnmpTransportBadRequest creates a UpdateSnmpTransportBadRequest with default headers values
func NewUpdateSnmpTransportBadRequest() *UpdateSnmpTransportBadRequest {
	return &UpdateSnmpTransportBadRequest{}
}

/* UpdateSnmpTransportBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSnmpTransportBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnmpTransportBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-snmp-transport][%d] updateSnmpTransportBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateSnmpTransportBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnmpTransportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnmpTransportNotFound creates a UpdateSnmpTransportNotFound with default headers values
func NewUpdateSnmpTransportNotFound() *UpdateSnmpTransportNotFound {
	return &UpdateSnmpTransportNotFound{}
}

/* UpdateSnmpTransportNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateSnmpTransportNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnmpTransportNotFound) Error() string {
	return fmt.Sprintf("[POST /update-snmp-transport][%d] updateSnmpTransportNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSnmpTransportNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnmpTransportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnmpTransportInternalServerError creates a UpdateSnmpTransportInternalServerError with default headers values
func NewUpdateSnmpTransportInternalServerError() *UpdateSnmpTransportInternalServerError {
	return &UpdateSnmpTransportInternalServerError{}
}

/* UpdateSnmpTransportInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateSnmpTransportInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnmpTransportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-snmp-transport][%d] updateSnmpTransportInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateSnmpTransportInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnmpTransportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
