// Code generated by go-swagger; DO NOT EDIT.

package security_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateSecurityPolicyReader is a Reader for the UpdateSecurityPolicy structure.
type UpdateSecurityPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecurityPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSecurityPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateSecurityPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateSecurityPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateSecurityPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSecurityPolicyOK creates a UpdateSecurityPolicyOK with default headers values
func NewUpdateSecurityPolicyOK() *UpdateSecurityPolicyOK {
	return &UpdateSecurityPolicyOK{}
}

/* UpdateSecurityPolicyOK describes a response with status code 200, with default header values.

UpdateSecurityPolicyOK update security policy o k
*/
type UpdateSecurityPolicyOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskSecurityPolicy
}

func (o *UpdateSecurityPolicyOK) Error() string {
	return fmt.Sprintf("[POST /update-security-policy][%d] updateSecurityPolicyOK  %+v", 200, o.Payload)
}
func (o *UpdateSecurityPolicyOK) GetPayload() []*models.WithTaskSecurityPolicy {
	return o.Payload
}

func (o *UpdateSecurityPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecurityPolicyBadRequest creates a UpdateSecurityPolicyBadRequest with default headers values
func NewUpdateSecurityPolicyBadRequest() *UpdateSecurityPolicyBadRequest {
	return &UpdateSecurityPolicyBadRequest{}
}

/* UpdateSecurityPolicyBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSecurityPolicyBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSecurityPolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-security-policy][%d] updateSecurityPolicyBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateSecurityPolicyBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSecurityPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecurityPolicyNotFound creates a UpdateSecurityPolicyNotFound with default headers values
func NewUpdateSecurityPolicyNotFound() *UpdateSecurityPolicyNotFound {
	return &UpdateSecurityPolicyNotFound{}
}

/* UpdateSecurityPolicyNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateSecurityPolicyNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSecurityPolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /update-security-policy][%d] updateSecurityPolicyNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSecurityPolicyNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSecurityPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecurityPolicyInternalServerError creates a UpdateSecurityPolicyInternalServerError with default headers values
func NewUpdateSecurityPolicyInternalServerError() *UpdateSecurityPolicyInternalServerError {
	return &UpdateSecurityPolicyInternalServerError{}
}

/* UpdateSecurityPolicyInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateSecurityPolicyInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSecurityPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-security-policy][%d] updateSecurityPolicyInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateSecurityPolicyInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSecurityPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
