// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNvmfNamespaceSnapshotsReader is a Reader for the GetNvmfNamespaceSnapshots structure.
type GetNvmfNamespaceSnapshotsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNvmfNamespaceSnapshotsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNvmfNamespaceSnapshotsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetNvmfNamespaceSnapshotsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetNvmfNamespaceSnapshotsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetNvmfNamespaceSnapshotsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNvmfNamespaceSnapshotsOK creates a GetNvmfNamespaceSnapshotsOK with default headers values
func NewGetNvmfNamespaceSnapshotsOK() *GetNvmfNamespaceSnapshotsOK {
	return &GetNvmfNamespaceSnapshotsOK{}
}

/* GetNvmfNamespaceSnapshotsOK describes a response with status code 200, with default header values.

GetNvmfNamespaceSnapshotsOK get nvmf namespace snapshots o k
*/
type GetNvmfNamespaceSnapshotsOK struct {
	XTowerRequestID string

	Payload []*models.NvmfNamespaceSnapshot
}

func (o *GetNvmfNamespaceSnapshotsOK) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots][%d] getNvmfNamespaceSnapshotsOK  %+v", 200, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsOK) GetPayload() []*models.NvmfNamespaceSnapshot {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsBadRequest creates a GetNvmfNamespaceSnapshotsBadRequest with default headers values
func NewGetNvmfNamespaceSnapshotsBadRequest() *GetNvmfNamespaceSnapshotsBadRequest {
	return &GetNvmfNamespaceSnapshotsBadRequest{}
}

/* GetNvmfNamespaceSnapshotsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNvmfNamespaceSnapshotsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots][%d] getNvmfNamespaceSnapshotsBadRequest  %+v", 400, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsNotFound creates a GetNvmfNamespaceSnapshotsNotFound with default headers values
func NewGetNvmfNamespaceSnapshotsNotFound() *GetNvmfNamespaceSnapshotsNotFound {
	return &GetNvmfNamespaceSnapshotsNotFound{}
}

/* GetNvmfNamespaceSnapshotsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNvmfNamespaceSnapshotsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots][%d] getNvmfNamespaceSnapshotsNotFound  %+v", 404, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsInternalServerError creates a GetNvmfNamespaceSnapshotsInternalServerError with default headers values
func NewGetNvmfNamespaceSnapshotsInternalServerError() *GetNvmfNamespaceSnapshotsInternalServerError {
	return &GetNvmfNamespaceSnapshotsInternalServerError{}
}

/* GetNvmfNamespaceSnapshotsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNvmfNamespaceSnapshotsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots][%d] getNvmfNamespaceSnapshotsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
