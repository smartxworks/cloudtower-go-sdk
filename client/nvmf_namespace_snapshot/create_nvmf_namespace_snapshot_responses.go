// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateNvmfNamespaceSnapshotReader is a Reader for the CreateNvmfNamespaceSnapshot structure.
type CreateNvmfNamespaceSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNvmfNamespaceSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNvmfNamespaceSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateNvmfNamespaceSnapshotBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateNvmfNamespaceSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateNvmfNamespaceSnapshotInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNvmfNamespaceSnapshotOK creates a CreateNvmfNamespaceSnapshotOK with default headers values
func NewCreateNvmfNamespaceSnapshotOK() *CreateNvmfNamespaceSnapshotOK {
	return &CreateNvmfNamespaceSnapshotOK{}
}

/* CreateNvmfNamespaceSnapshotOK describes a response with status code 200, with default header values.

CreateNvmfNamespaceSnapshotOK create nvmf namespace snapshot o k
*/
type CreateNvmfNamespaceSnapshotOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskNvmfNamespaceSnapshot
}

func (o *CreateNvmfNamespaceSnapshotOK) Error() string {
	return fmt.Sprintf("[POST /create-nvmf-namespace-snapshot][%d] createNvmfNamespaceSnapshotOK  %+v", 200, o.Payload)
}
func (o *CreateNvmfNamespaceSnapshotOK) GetPayload() []*models.WithTaskNvmfNamespaceSnapshot {
	return o.Payload
}

func (o *CreateNvmfNamespaceSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNvmfNamespaceSnapshotBadRequest creates a CreateNvmfNamespaceSnapshotBadRequest with default headers values
func NewCreateNvmfNamespaceSnapshotBadRequest() *CreateNvmfNamespaceSnapshotBadRequest {
	return &CreateNvmfNamespaceSnapshotBadRequest{}
}

/* CreateNvmfNamespaceSnapshotBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateNvmfNamespaceSnapshotBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNvmfNamespaceSnapshotBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-nvmf-namespace-snapshot][%d] createNvmfNamespaceSnapshotBadRequest  %+v", 400, o.Payload)
}
func (o *CreateNvmfNamespaceSnapshotBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNvmfNamespaceSnapshotBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNvmfNamespaceSnapshotNotFound creates a CreateNvmfNamespaceSnapshotNotFound with default headers values
func NewCreateNvmfNamespaceSnapshotNotFound() *CreateNvmfNamespaceSnapshotNotFound {
	return &CreateNvmfNamespaceSnapshotNotFound{}
}

/* CreateNvmfNamespaceSnapshotNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateNvmfNamespaceSnapshotNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNvmfNamespaceSnapshotNotFound) Error() string {
	return fmt.Sprintf("[POST /create-nvmf-namespace-snapshot][%d] createNvmfNamespaceSnapshotNotFound  %+v", 404, o.Payload)
}
func (o *CreateNvmfNamespaceSnapshotNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNvmfNamespaceSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNvmfNamespaceSnapshotInternalServerError creates a CreateNvmfNamespaceSnapshotInternalServerError with default headers values
func NewCreateNvmfNamespaceSnapshotInternalServerError() *CreateNvmfNamespaceSnapshotInternalServerError {
	return &CreateNvmfNamespaceSnapshotInternalServerError{}
}

/* CreateNvmfNamespaceSnapshotInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateNvmfNamespaceSnapshotInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNvmfNamespaceSnapshotInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-nvmf-namespace-snapshot][%d] createNvmfNamespaceSnapshotInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateNvmfNamespaceSnapshotInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNvmfNamespaceSnapshotInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
