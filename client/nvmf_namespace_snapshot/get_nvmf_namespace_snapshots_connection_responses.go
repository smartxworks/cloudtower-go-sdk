// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNvmfNamespaceSnapshotsConnectionReader is a Reader for the GetNvmfNamespaceSnapshotsConnection structure.
type GetNvmfNamespaceSnapshotsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNvmfNamespaceSnapshotsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNvmfNamespaceSnapshotsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetNvmfNamespaceSnapshotsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetNvmfNamespaceSnapshotsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetNvmfNamespaceSnapshotsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNvmfNamespaceSnapshotsConnectionOK creates a GetNvmfNamespaceSnapshotsConnectionOK with default headers values
func NewGetNvmfNamespaceSnapshotsConnectionOK() *GetNvmfNamespaceSnapshotsConnectionOK {
	return &GetNvmfNamespaceSnapshotsConnectionOK{}
}

/* GetNvmfNamespaceSnapshotsConnectionOK describes a response with status code 200, with default header values.

GetNvmfNamespaceSnapshotsConnectionOK get nvmf namespace snapshots connection o k
*/
type GetNvmfNamespaceSnapshotsConnectionOK struct {
	XTowerRequestID string

	Payload *models.NvmfNamespaceSnapshotConnection
}

func (o *GetNvmfNamespaceSnapshotsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots-connection][%d] getNvmfNamespaceSnapshotsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsConnectionOK) GetPayload() *models.NvmfNamespaceSnapshotConnection {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.NvmfNamespaceSnapshotConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsConnectionBadRequest creates a GetNvmfNamespaceSnapshotsConnectionBadRequest with default headers values
func NewGetNvmfNamespaceSnapshotsConnectionBadRequest() *GetNvmfNamespaceSnapshotsConnectionBadRequest {
	return &GetNvmfNamespaceSnapshotsConnectionBadRequest{}
}

/* GetNvmfNamespaceSnapshotsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNvmfNamespaceSnapshotsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots-connection][%d] getNvmfNamespaceSnapshotsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsConnectionNotFound creates a GetNvmfNamespaceSnapshotsConnectionNotFound with default headers values
func NewGetNvmfNamespaceSnapshotsConnectionNotFound() *GetNvmfNamespaceSnapshotsConnectionNotFound {
	return &GetNvmfNamespaceSnapshotsConnectionNotFound{}
}

/* GetNvmfNamespaceSnapshotsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNvmfNamespaceSnapshotsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots-connection][%d] getNvmfNamespaceSnapshotsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNvmfNamespaceSnapshotsConnectionInternalServerError creates a GetNvmfNamespaceSnapshotsConnectionInternalServerError with default headers values
func NewGetNvmfNamespaceSnapshotsConnectionInternalServerError() *GetNvmfNamespaceSnapshotsConnectionInternalServerError {
	return &GetNvmfNamespaceSnapshotsConnectionInternalServerError{}
}

/* GetNvmfNamespaceSnapshotsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNvmfNamespaceSnapshotsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNvmfNamespaceSnapshotsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-nvmf-namespace-snapshots-connection][%d] getNvmfNamespaceSnapshotsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNvmfNamespaceSnapshotsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNvmfNamespaceSnapshotsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
