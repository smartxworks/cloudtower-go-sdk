// Code generated by go-swagger; DO NOT EDIT.

package pci_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetPciDevicesReader is a Reader for the GetPciDevices structure.
type GetPciDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPciDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPciDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetPciDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetPciDevicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetPciDevicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPciDevicesOK creates a GetPciDevicesOK with default headers values
func NewGetPciDevicesOK() *GetPciDevicesOK {
	return &GetPciDevicesOK{}
}

/* GetPciDevicesOK describes a response with status code 200, with default header values.

GetPciDevicesOK get pci devices o k
*/
type GetPciDevicesOK struct {
	XTowerRequestID string

	Payload []*models.PciDevice
}

func (o *GetPciDevicesOK) Error() string {
	return fmt.Sprintf("[POST /get-pci-devices][%d] getPciDevicesOK  %+v", 200, o.Payload)
}
func (o *GetPciDevicesOK) GetPayload() []*models.PciDevice {
	return o.Payload
}

func (o *GetPciDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPciDevicesBadRequest creates a GetPciDevicesBadRequest with default headers values
func NewGetPciDevicesBadRequest() *GetPciDevicesBadRequest {
	return &GetPciDevicesBadRequest{}
}

/* GetPciDevicesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetPciDevicesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetPciDevicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-pci-devices][%d] getPciDevicesBadRequest  %+v", 400, o.Payload)
}
func (o *GetPciDevicesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPciDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPciDevicesNotFound creates a GetPciDevicesNotFound with default headers values
func NewGetPciDevicesNotFound() *GetPciDevicesNotFound {
	return &GetPciDevicesNotFound{}
}

/* GetPciDevicesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetPciDevicesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetPciDevicesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-pci-devices][%d] getPciDevicesNotFound  %+v", 404, o.Payload)
}
func (o *GetPciDevicesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPciDevicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPciDevicesInternalServerError creates a GetPciDevicesInternalServerError with default headers values
func NewGetPciDevicesInternalServerError() *GetPciDevicesInternalServerError {
	return &GetPciDevicesInternalServerError{}
}

/* GetPciDevicesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetPciDevicesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetPciDevicesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-pci-devices][%d] getPciDevicesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetPciDevicesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetPciDevicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
