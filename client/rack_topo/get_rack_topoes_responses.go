// Code generated by go-swagger; DO NOT EDIT.

package rack_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetRackTopoesReader is a Reader for the GetRackTopoes structure.
type GetRackTopoesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRackTopoesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRackTopoesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetRackTopoesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetRackTopoesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetRackTopoesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRackTopoesOK creates a GetRackTopoesOK with default headers values
func NewGetRackTopoesOK() *GetRackTopoesOK {
	return &GetRackTopoesOK{}
}

/* GetRackTopoesOK describes a response with status code 200, with default header values.

GetRackTopoesOK get rack topoes o k
*/
type GetRackTopoesOK struct {
	XTowerRequestID string

	Payload []*models.RackTopo
}

func (o *GetRackTopoesOK) Error() string {
	return fmt.Sprintf("[POST /get-rack-topoes][%d] getRackTopoesOK  %+v", 200, o.Payload)
}
func (o *GetRackTopoesOK) GetPayload() []*models.RackTopo {
	return o.Payload
}

func (o *GetRackTopoesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRackTopoesBadRequest creates a GetRackTopoesBadRequest with default headers values
func NewGetRackTopoesBadRequest() *GetRackTopoesBadRequest {
	return &GetRackTopoesBadRequest{}
}

/* GetRackTopoesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetRackTopoesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetRackTopoesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-rack-topoes][%d] getRackTopoesBadRequest  %+v", 400, o.Payload)
}
func (o *GetRackTopoesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRackTopoesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRackTopoesNotFound creates a GetRackTopoesNotFound with default headers values
func NewGetRackTopoesNotFound() *GetRackTopoesNotFound {
	return &GetRackTopoesNotFound{}
}

/* GetRackTopoesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetRackTopoesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetRackTopoesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-rack-topoes][%d] getRackTopoesNotFound  %+v", 404, o.Payload)
}
func (o *GetRackTopoesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRackTopoesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRackTopoesInternalServerError creates a GetRackTopoesInternalServerError with default headers values
func NewGetRackTopoesInternalServerError() *GetRackTopoesInternalServerError {
	return &GetRackTopoesInternalServerError{}
}

/* GetRackTopoesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetRackTopoesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetRackTopoesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-rack-topoes][%d] getRackTopoesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRackTopoesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRackTopoesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
