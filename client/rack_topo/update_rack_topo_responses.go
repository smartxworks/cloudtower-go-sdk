// Code generated by go-swagger; DO NOT EDIT.

package rack_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateRackTopoReader is a Reader for the UpdateRackTopo structure.
type UpdateRackTopoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRackTopoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRackTopoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateRackTopoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateRackTopoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateRackTopoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRackTopoOK creates a UpdateRackTopoOK with default headers values
func NewUpdateRackTopoOK() *UpdateRackTopoOK {
	return &UpdateRackTopoOK{}
}

/* UpdateRackTopoOK describes a response with status code 200, with default header values.

UpdateRackTopoOK update rack topo o k
*/
type UpdateRackTopoOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskRackTopo
}

func (o *UpdateRackTopoOK) Error() string {
	return fmt.Sprintf("[POST /update-rack-topo][%d] updateRackTopoOK  %+v", 200, o.Payload)
}
func (o *UpdateRackTopoOK) GetPayload() []*models.WithTaskRackTopo {
	return o.Payload
}

func (o *UpdateRackTopoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRackTopoBadRequest creates a UpdateRackTopoBadRequest with default headers values
func NewUpdateRackTopoBadRequest() *UpdateRackTopoBadRequest {
	return &UpdateRackTopoBadRequest{}
}

/* UpdateRackTopoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateRackTopoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateRackTopoBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-rack-topo][%d] updateRackTopoBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateRackTopoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateRackTopoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRackTopoNotFound creates a UpdateRackTopoNotFound with default headers values
func NewUpdateRackTopoNotFound() *UpdateRackTopoNotFound {
	return &UpdateRackTopoNotFound{}
}

/* UpdateRackTopoNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateRackTopoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateRackTopoNotFound) Error() string {
	return fmt.Sprintf("[POST /update-rack-topo][%d] updateRackTopoNotFound  %+v", 404, o.Payload)
}
func (o *UpdateRackTopoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateRackTopoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRackTopoInternalServerError creates a UpdateRackTopoInternalServerError with default headers values
func NewUpdateRackTopoInternalServerError() *UpdateRackTopoInternalServerError {
	return &UpdateRackTopoInternalServerError{}
}

/* UpdateRackTopoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateRackTopoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateRackTopoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-rack-topo][%d] updateRackTopoInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateRackTopoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateRackTopoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
