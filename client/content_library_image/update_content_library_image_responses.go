// Code generated by go-swagger; DO NOT EDIT.

package content_library_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateContentLibraryImageReader is a Reader for the UpdateContentLibraryImage structure.
type UpdateContentLibraryImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContentLibraryImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContentLibraryImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateContentLibraryImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateContentLibraryImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateContentLibraryImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateContentLibraryImageOK creates a UpdateContentLibraryImageOK with default headers values
func NewUpdateContentLibraryImageOK() *UpdateContentLibraryImageOK {
	return &UpdateContentLibraryImageOK{}
}

/* UpdateContentLibraryImageOK describes a response with status code 200, with default header values.

UpdateContentLibraryImageOK update content library image o k
*/
type UpdateContentLibraryImageOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskContentLibraryImage
}

func (o *UpdateContentLibraryImageOK) Error() string {
	return fmt.Sprintf("[POST /update-content-library-image][%d] updateContentLibraryImageOK  %+v", 200, o.Payload)
}
func (o *UpdateContentLibraryImageOK) GetPayload() []*models.WithTaskContentLibraryImage {
	return o.Payload
}

func (o *UpdateContentLibraryImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentLibraryImageBadRequest creates a UpdateContentLibraryImageBadRequest with default headers values
func NewUpdateContentLibraryImageBadRequest() *UpdateContentLibraryImageBadRequest {
	return &UpdateContentLibraryImageBadRequest{}
}

/* UpdateContentLibraryImageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateContentLibraryImageBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateContentLibraryImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-content-library-image][%d] updateContentLibraryImageBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateContentLibraryImageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateContentLibraryImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentLibraryImageNotFound creates a UpdateContentLibraryImageNotFound with default headers values
func NewUpdateContentLibraryImageNotFound() *UpdateContentLibraryImageNotFound {
	return &UpdateContentLibraryImageNotFound{}
}

/* UpdateContentLibraryImageNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateContentLibraryImageNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateContentLibraryImageNotFound) Error() string {
	return fmt.Sprintf("[POST /update-content-library-image][%d] updateContentLibraryImageNotFound  %+v", 404, o.Payload)
}
func (o *UpdateContentLibraryImageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateContentLibraryImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentLibraryImageInternalServerError creates a UpdateContentLibraryImageInternalServerError with default headers values
func NewUpdateContentLibraryImageInternalServerError() *UpdateContentLibraryImageInternalServerError {
	return &UpdateContentLibraryImageInternalServerError{}
}

/* UpdateContentLibraryImageInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateContentLibraryImageInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateContentLibraryImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-content-library-image][%d] updateContentLibraryImageInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateContentLibraryImageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateContentLibraryImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
