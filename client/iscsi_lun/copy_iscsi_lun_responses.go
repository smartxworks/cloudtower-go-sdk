// Code generated by go-swagger; DO NOT EDIT.

package iscsi_lun

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CopyIscsiLunReader is a Reader for the CopyIscsiLun structure.
type CopyIscsiLunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CopyIscsiLunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCopyIscsiLunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCopyIscsiLunBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCopyIscsiLunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCopyIscsiLunInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCopyIscsiLunOK creates a CopyIscsiLunOK with default headers values
func NewCopyIscsiLunOK() *CopyIscsiLunOK {
	return &CopyIscsiLunOK{}
}

/* CopyIscsiLunOK describes a response with status code 200, with default header values.

CopyIscsiLunOK copy iscsi lun o k
*/
type CopyIscsiLunOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskIscsiLun
}

func (o *CopyIscsiLunOK) Error() string {
	return fmt.Sprintf("[POST /copy-iscsi-lun][%d] copyIscsiLunOK  %+v", 200, o.Payload)
}
func (o *CopyIscsiLunOK) GetPayload() []*models.WithTaskIscsiLun {
	return o.Payload
}

func (o *CopyIscsiLunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyIscsiLunBadRequest creates a CopyIscsiLunBadRequest with default headers values
func NewCopyIscsiLunBadRequest() *CopyIscsiLunBadRequest {
	return &CopyIscsiLunBadRequest{}
}

/* CopyIscsiLunBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CopyIscsiLunBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CopyIscsiLunBadRequest) Error() string {
	return fmt.Sprintf("[POST /copy-iscsi-lun][%d] copyIscsiLunBadRequest  %+v", 400, o.Payload)
}
func (o *CopyIscsiLunBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CopyIscsiLunBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyIscsiLunNotFound creates a CopyIscsiLunNotFound with default headers values
func NewCopyIscsiLunNotFound() *CopyIscsiLunNotFound {
	return &CopyIscsiLunNotFound{}
}

/* CopyIscsiLunNotFound describes a response with status code 404, with default header values.

Not found
*/
type CopyIscsiLunNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CopyIscsiLunNotFound) Error() string {
	return fmt.Sprintf("[POST /copy-iscsi-lun][%d] copyIscsiLunNotFound  %+v", 404, o.Payload)
}
func (o *CopyIscsiLunNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CopyIscsiLunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyIscsiLunInternalServerError creates a CopyIscsiLunInternalServerError with default headers values
func NewCopyIscsiLunInternalServerError() *CopyIscsiLunInternalServerError {
	return &CopyIscsiLunInternalServerError{}
}

/* CopyIscsiLunInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CopyIscsiLunInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CopyIscsiLunInternalServerError) Error() string {
	return fmt.Sprintf("[POST /copy-iscsi-lun][%d] copyIscsiLunInternalServerError  %+v", 500, o.Payload)
}
func (o *CopyIscsiLunInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CopyIscsiLunInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
