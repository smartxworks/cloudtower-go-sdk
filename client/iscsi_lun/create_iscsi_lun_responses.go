// Code generated by go-swagger; DO NOT EDIT.

package iscsi_lun

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateIscsiLunReader is a Reader for the CreateIscsiLun structure.
type CreateIscsiLunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIscsiLunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateIscsiLunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateIscsiLunBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateIscsiLunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateIscsiLunInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateIscsiLunOK creates a CreateIscsiLunOK with default headers values
func NewCreateIscsiLunOK() *CreateIscsiLunOK {
	return &CreateIscsiLunOK{}
}

/* CreateIscsiLunOK describes a response with status code 200, with default header values.

CreateIscsiLunOK create iscsi lun o k
*/
type CreateIscsiLunOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskIscsiLun
}

func (o *CreateIscsiLunOK) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-lun][%d] createIscsiLunOK  %+v", 200, o.Payload)
}
func (o *CreateIscsiLunOK) GetPayload() []*models.WithTaskIscsiLun {
	return o.Payload
}

func (o *CreateIscsiLunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiLunBadRequest creates a CreateIscsiLunBadRequest with default headers values
func NewCreateIscsiLunBadRequest() *CreateIscsiLunBadRequest {
	return &CreateIscsiLunBadRequest{}
}

/* CreateIscsiLunBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateIscsiLunBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiLunBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-lun][%d] createIscsiLunBadRequest  %+v", 400, o.Payload)
}
func (o *CreateIscsiLunBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiLunBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiLunNotFound creates a CreateIscsiLunNotFound with default headers values
func NewCreateIscsiLunNotFound() *CreateIscsiLunNotFound {
	return &CreateIscsiLunNotFound{}
}

/* CreateIscsiLunNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateIscsiLunNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiLunNotFound) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-lun][%d] createIscsiLunNotFound  %+v", 404, o.Payload)
}
func (o *CreateIscsiLunNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiLunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIscsiLunInternalServerError creates a CreateIscsiLunInternalServerError with default headers values
func NewCreateIscsiLunInternalServerError() *CreateIscsiLunInternalServerError {
	return &CreateIscsiLunInternalServerError{}
}

/* CreateIscsiLunInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateIscsiLunInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateIscsiLunInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-iscsi-lun][%d] createIscsiLunInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateIscsiLunInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateIscsiLunInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
