// Code generated by go-swagger; DO NOT EDIT.

package iscsi_lun

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetIscsiLunsReader is a Reader for the GetIscsiLuns structure.
type GetIscsiLunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIscsiLunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIscsiLunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetIscsiLunsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetIscsiLunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetIscsiLunsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetIscsiLunsOK creates a GetIscsiLunsOK with default headers values
func NewGetIscsiLunsOK() *GetIscsiLunsOK {
	return &GetIscsiLunsOK{}
}

/* GetIscsiLunsOK describes a response with status code 200, with default header values.

GetIscsiLunsOK get iscsi luns o k
*/
type GetIscsiLunsOK struct {
	XTowerRequestID string

	Payload []*models.IscsiLun
}

func (o *GetIscsiLunsOK) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-luns][%d] getIscsiLunsOK  %+v", 200, o.Payload)
}
func (o *GetIscsiLunsOK) GetPayload() []*models.IscsiLun {
	return o.Payload
}

func (o *GetIscsiLunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiLunsBadRequest creates a GetIscsiLunsBadRequest with default headers values
func NewGetIscsiLunsBadRequest() *GetIscsiLunsBadRequest {
	return &GetIscsiLunsBadRequest{}
}

/* GetIscsiLunsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetIscsiLunsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiLunsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-luns][%d] getIscsiLunsBadRequest  %+v", 400, o.Payload)
}
func (o *GetIscsiLunsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiLunsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiLunsNotFound creates a GetIscsiLunsNotFound with default headers values
func NewGetIscsiLunsNotFound() *GetIscsiLunsNotFound {
	return &GetIscsiLunsNotFound{}
}

/* GetIscsiLunsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetIscsiLunsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiLunsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-luns][%d] getIscsiLunsNotFound  %+v", 404, o.Payload)
}
func (o *GetIscsiLunsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiLunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiLunsInternalServerError creates a GetIscsiLunsInternalServerError with default headers values
func NewGetIscsiLunsInternalServerError() *GetIscsiLunsInternalServerError {
	return &GetIscsiLunsInternalServerError{}
}

/* GetIscsiLunsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetIscsiLunsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiLunsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-luns][%d] getIscsiLunsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetIscsiLunsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiLunsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
