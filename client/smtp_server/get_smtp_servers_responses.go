// Code generated by go-swagger; DO NOT EDIT.

package smtp_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetSMTPServersReader is a Reader for the GetSMTPServers structure.
type GetSMTPServersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSMTPServersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSMTPServersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSMTPServersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSMTPServersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSMTPServersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSMTPServersOK creates a GetSMTPServersOK with default headers values
func NewGetSMTPServersOK() *GetSMTPServersOK {
	return &GetSMTPServersOK{}
}

/* GetSMTPServersOK describes a response with status code 200, with default header values.

GetSMTPServersOK get Smtp servers o k
*/
type GetSMTPServersOK struct {
	XTowerRequestID string

	Payload []*models.SMTPServer
}

func (o *GetSMTPServersOK) Error() string {
	return fmt.Sprintf("[POST /get-smtp-servers][%d] getSmtpServersOK  %+v", 200, o.Payload)
}
func (o *GetSMTPServersOK) GetPayload() []*models.SMTPServer {
	return o.Payload
}

func (o *GetSMTPServersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSMTPServersBadRequest creates a GetSMTPServersBadRequest with default headers values
func NewGetSMTPServersBadRequest() *GetSMTPServersBadRequest {
	return &GetSMTPServersBadRequest{}
}

/* GetSMTPServersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSMTPServersBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSMTPServersBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-smtp-servers][%d] getSmtpServersBadRequest  %+v", 400, o.Payload)
}
func (o *GetSMTPServersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSMTPServersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSMTPServersNotFound creates a GetSMTPServersNotFound with default headers values
func NewGetSMTPServersNotFound() *GetSMTPServersNotFound {
	return &GetSMTPServersNotFound{}
}

/* GetSMTPServersNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetSMTPServersNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSMTPServersNotFound) Error() string {
	return fmt.Sprintf("[POST /get-smtp-servers][%d] getSmtpServersNotFound  %+v", 404, o.Payload)
}
func (o *GetSMTPServersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSMTPServersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSMTPServersInternalServerError creates a GetSMTPServersInternalServerError with default headers values
func NewGetSMTPServersInternalServerError() *GetSMTPServersInternalServerError {
	return &GetSMTPServersInternalServerError{}
}

/* GetSMTPServersInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetSMTPServersInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSMTPServersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-smtp-servers][%d] getSmtpServersInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSMTPServersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSMTPServersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
