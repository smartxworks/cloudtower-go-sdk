// Code generated by go-swagger; DO NOT EDIT.

package ecp_license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetEcpLicensesReader is a Reader for the GetEcpLicenses structure.
type GetEcpLicensesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEcpLicensesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEcpLicensesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetEcpLicensesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetEcpLicensesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetEcpLicensesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEcpLicensesOK creates a GetEcpLicensesOK with default headers values
func NewGetEcpLicensesOK() *GetEcpLicensesOK {
	return &GetEcpLicensesOK{}
}

/* GetEcpLicensesOK describes a response with status code 200, with default header values.

GetEcpLicensesOK get ecp licenses o k
*/
type GetEcpLicensesOK struct {
	XTowerRequestID string

	Payload []*models.EcpLicense
}

func (o *GetEcpLicensesOK) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses][%d] getEcpLicensesOK  %+v", 200, o.Payload)
}
func (o *GetEcpLicensesOK) GetPayload() []*models.EcpLicense {
	return o.Payload
}

func (o *GetEcpLicensesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesBadRequest creates a GetEcpLicensesBadRequest with default headers values
func NewGetEcpLicensesBadRequest() *GetEcpLicensesBadRequest {
	return &GetEcpLicensesBadRequest{}
}

/* GetEcpLicensesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetEcpLicensesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses][%d] getEcpLicensesBadRequest  %+v", 400, o.Payload)
}
func (o *GetEcpLicensesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesNotFound creates a GetEcpLicensesNotFound with default headers values
func NewGetEcpLicensesNotFound() *GetEcpLicensesNotFound {
	return &GetEcpLicensesNotFound{}
}

/* GetEcpLicensesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetEcpLicensesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses][%d] getEcpLicensesNotFound  %+v", 404, o.Payload)
}
func (o *GetEcpLicensesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesInternalServerError creates a GetEcpLicensesInternalServerError with default headers values
func NewGetEcpLicensesInternalServerError() *GetEcpLicensesInternalServerError {
	return &GetEcpLicensesInternalServerError{}
}

/* GetEcpLicensesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetEcpLicensesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses][%d] getEcpLicensesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEcpLicensesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
