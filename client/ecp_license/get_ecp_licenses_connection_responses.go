// Code generated by go-swagger; DO NOT EDIT.

package ecp_license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetEcpLicensesConnectionReader is a Reader for the GetEcpLicensesConnection structure.
type GetEcpLicensesConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEcpLicensesConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEcpLicensesConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetEcpLicensesConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetEcpLicensesConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetEcpLicensesConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEcpLicensesConnectionOK creates a GetEcpLicensesConnectionOK with default headers values
func NewGetEcpLicensesConnectionOK() *GetEcpLicensesConnectionOK {
	return &GetEcpLicensesConnectionOK{}
}

/* GetEcpLicensesConnectionOK describes a response with status code 200, with default header values.

GetEcpLicensesConnectionOK get ecp licenses connection o k
*/
type GetEcpLicensesConnectionOK struct {
	XTowerRequestID string

	Payload *models.EcpLicenseConnection
}

func (o *GetEcpLicensesConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses-connection][%d] getEcpLicensesConnectionOK  %+v", 200, o.Payload)
}
func (o *GetEcpLicensesConnectionOK) GetPayload() *models.EcpLicenseConnection {
	return o.Payload
}

func (o *GetEcpLicensesConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.EcpLicenseConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesConnectionBadRequest creates a GetEcpLicensesConnectionBadRequest with default headers values
func NewGetEcpLicensesConnectionBadRequest() *GetEcpLicensesConnectionBadRequest {
	return &GetEcpLicensesConnectionBadRequest{}
}

/* GetEcpLicensesConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetEcpLicensesConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses-connection][%d] getEcpLicensesConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetEcpLicensesConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesConnectionNotFound creates a GetEcpLicensesConnectionNotFound with default headers values
func NewGetEcpLicensesConnectionNotFound() *GetEcpLicensesConnectionNotFound {
	return &GetEcpLicensesConnectionNotFound{}
}

/* GetEcpLicensesConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetEcpLicensesConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses-connection][%d] getEcpLicensesConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetEcpLicensesConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcpLicensesConnectionInternalServerError creates a GetEcpLicensesConnectionInternalServerError with default headers values
func NewGetEcpLicensesConnectionInternalServerError() *GetEcpLicensesConnectionInternalServerError {
	return &GetEcpLicensesConnectionInternalServerError{}
}

/* GetEcpLicensesConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetEcpLicensesConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetEcpLicensesConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-ecp-licenses-connection][%d] getEcpLicensesConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEcpLicensesConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetEcpLicensesConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
