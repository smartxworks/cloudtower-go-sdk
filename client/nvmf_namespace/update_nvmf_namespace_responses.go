// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateNvmfNamespaceReader is a Reader for the UpdateNvmfNamespace structure.
type UpdateNvmfNamespaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNvmfNamespaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNvmfNamespaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateNvmfNamespaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateNvmfNamespaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateNvmfNamespaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNvmfNamespaceOK creates a UpdateNvmfNamespaceOK with default headers values
func NewUpdateNvmfNamespaceOK() *UpdateNvmfNamespaceOK {
	return &UpdateNvmfNamespaceOK{}
}

/* UpdateNvmfNamespaceOK describes a response with status code 200, with default header values.

UpdateNvmfNamespaceOK update nvmf namespace o k
*/
type UpdateNvmfNamespaceOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskNvmfNamespace
}

func (o *UpdateNvmfNamespaceOK) Error() string {
	return fmt.Sprintf("[POST /update-nvmf-namespace][%d] updateNvmfNamespaceOK  %+v", 200, o.Payload)
}
func (o *UpdateNvmfNamespaceOK) GetPayload() []*models.WithTaskNvmfNamespace {
	return o.Payload
}

func (o *UpdateNvmfNamespaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNvmfNamespaceBadRequest creates a UpdateNvmfNamespaceBadRequest with default headers values
func NewUpdateNvmfNamespaceBadRequest() *UpdateNvmfNamespaceBadRequest {
	return &UpdateNvmfNamespaceBadRequest{}
}

/* UpdateNvmfNamespaceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateNvmfNamespaceBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNvmfNamespaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-nvmf-namespace][%d] updateNvmfNamespaceBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateNvmfNamespaceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNvmfNamespaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNvmfNamespaceNotFound creates a UpdateNvmfNamespaceNotFound with default headers values
func NewUpdateNvmfNamespaceNotFound() *UpdateNvmfNamespaceNotFound {
	return &UpdateNvmfNamespaceNotFound{}
}

/* UpdateNvmfNamespaceNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateNvmfNamespaceNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNvmfNamespaceNotFound) Error() string {
	return fmt.Sprintf("[POST /update-nvmf-namespace][%d] updateNvmfNamespaceNotFound  %+v", 404, o.Payload)
}
func (o *UpdateNvmfNamespaceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNvmfNamespaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNvmfNamespaceInternalServerError creates a UpdateNvmfNamespaceInternalServerError with default headers values
func NewUpdateNvmfNamespaceInternalServerError() *UpdateNvmfNamespaceInternalServerError {
	return &UpdateNvmfNamespaceInternalServerError{}
}

/* UpdateNvmfNamespaceInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateNvmfNamespaceInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNvmfNamespaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-nvmf-namespace][%d] updateNvmfNamespaceInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateNvmfNamespaceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNvmfNamespaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
