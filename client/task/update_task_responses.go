// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateTaskReader is a Reader for the UpdateTask structure.
type UpdateTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateTaskOK creates a UpdateTaskOK with default headers values
func NewUpdateTaskOK() *UpdateTaskOK {
	return &UpdateTaskOK{}
}

/* UpdateTaskOK describes a response with status code 200, with default header values.

UpdateTaskOK update task o k
*/
type UpdateTaskOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskTask
}

func (o *UpdateTaskOK) Error() string {
	return fmt.Sprintf("[POST /update-task][%d] updateTaskOK  %+v", 200, o.Payload)
}
func (o *UpdateTaskOK) GetPayload() []*models.WithTaskTask {
	return o.Payload
}

func (o *UpdateTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskBadRequest creates a UpdateTaskBadRequest with default headers values
func NewUpdateTaskBadRequest() *UpdateTaskBadRequest {
	return &UpdateTaskBadRequest{}
}

/* UpdateTaskBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateTaskBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-task][%d] updateTaskBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateTaskBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskNotFound creates a UpdateTaskNotFound with default headers values
func NewUpdateTaskNotFound() *UpdateTaskNotFound {
	return &UpdateTaskNotFound{}
}

/* UpdateTaskNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateTaskNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateTaskNotFound) Error() string {
	return fmt.Sprintf("[POST /update-task][%d] updateTaskNotFound  %+v", 404, o.Payload)
}
func (o *UpdateTaskNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTaskInternalServerError creates a UpdateTaskInternalServerError with default headers values
func NewUpdateTaskInternalServerError() *UpdateTaskInternalServerError {
	return &UpdateTaskInternalServerError{}
}

/* UpdateTaskInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateTaskInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateTaskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-task][%d] updateTaskInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateTaskInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
