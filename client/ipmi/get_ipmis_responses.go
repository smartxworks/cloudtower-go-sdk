// Code generated by go-swagger; DO NOT EDIT.

package ipmi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetIpmisReader is a Reader for the GetIpmis structure.
type GetIpmisReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIpmisReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIpmisOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetIpmisBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetIpmisNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetIpmisInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetIpmisOK creates a GetIpmisOK with default headers values
func NewGetIpmisOK() *GetIpmisOK {
	return &GetIpmisOK{}
}

/* GetIpmisOK describes a response with status code 200, with default header values.

GetIpmisOK get ipmis o k
*/
type GetIpmisOK struct {
	XTowerRequestID string

	Payload []*models.Ipmi
}

func (o *GetIpmisOK) Error() string {
	return fmt.Sprintf("[POST /get-ipmis][%d] getIpmisOK  %+v", 200, o.Payload)
}
func (o *GetIpmisOK) GetPayload() []*models.Ipmi {
	return o.Payload
}

func (o *GetIpmisOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpmisBadRequest creates a GetIpmisBadRequest with default headers values
func NewGetIpmisBadRequest() *GetIpmisBadRequest {
	return &GetIpmisBadRequest{}
}

/* GetIpmisBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetIpmisBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIpmisBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-ipmis][%d] getIpmisBadRequest  %+v", 400, o.Payload)
}
func (o *GetIpmisBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIpmisBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpmisNotFound creates a GetIpmisNotFound with default headers values
func NewGetIpmisNotFound() *GetIpmisNotFound {
	return &GetIpmisNotFound{}
}

/* GetIpmisNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetIpmisNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIpmisNotFound) Error() string {
	return fmt.Sprintf("[POST /get-ipmis][%d] getIpmisNotFound  %+v", 404, o.Payload)
}
func (o *GetIpmisNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIpmisNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpmisInternalServerError creates a GetIpmisInternalServerError with default headers values
func NewGetIpmisInternalServerError() *GetIpmisInternalServerError {
	return &GetIpmisInternalServerError{}
}

/* GetIpmisInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetIpmisInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIpmisInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-ipmis][%d] getIpmisInternalServerError  %+v", 500, o.Payload)
}
func (o *GetIpmisInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIpmisInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
