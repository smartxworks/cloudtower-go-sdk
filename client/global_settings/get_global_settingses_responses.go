// Code generated by go-swagger; DO NOT EDIT.

package global_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetGlobalSettingsesReader is a Reader for the GetGlobalSettingses structure.
type GetGlobalSettingsesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGlobalSettingsesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGlobalSettingsesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetGlobalSettingsesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetGlobalSettingsesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetGlobalSettingsesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGlobalSettingsesOK creates a GetGlobalSettingsesOK with default headers values
func NewGetGlobalSettingsesOK() *GetGlobalSettingsesOK {
	return &GetGlobalSettingsesOK{}
}

/* GetGlobalSettingsesOK describes a response with status code 200, with default header values.

GetGlobalSettingsesOK get global settingses o k
*/
type GetGlobalSettingsesOK struct {
	XTowerRequestID string

	Payload []*models.GlobalSettings
}

func (o *GetGlobalSettingsesOK) Error() string {
	return fmt.Sprintf("[POST /get-global-settingses][%d] getGlobalSettingsesOK  %+v", 200, o.Payload)
}
func (o *GetGlobalSettingsesOK) GetPayload() []*models.GlobalSettings {
	return o.Payload
}

func (o *GetGlobalSettingsesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalSettingsesBadRequest creates a GetGlobalSettingsesBadRequest with default headers values
func NewGetGlobalSettingsesBadRequest() *GetGlobalSettingsesBadRequest {
	return &GetGlobalSettingsesBadRequest{}
}

/* GetGlobalSettingsesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGlobalSettingsesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalSettingsesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-global-settingses][%d] getGlobalSettingsesBadRequest  %+v", 400, o.Payload)
}
func (o *GetGlobalSettingsesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalSettingsesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalSettingsesNotFound creates a GetGlobalSettingsesNotFound with default headers values
func NewGetGlobalSettingsesNotFound() *GetGlobalSettingsesNotFound {
	return &GetGlobalSettingsesNotFound{}
}

/* GetGlobalSettingsesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGlobalSettingsesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalSettingsesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-global-settingses][%d] getGlobalSettingsesNotFound  %+v", 404, o.Payload)
}
func (o *GetGlobalSettingsesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalSettingsesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGlobalSettingsesInternalServerError creates a GetGlobalSettingsesInternalServerError with default headers values
func NewGetGlobalSettingsesInternalServerError() *GetGlobalSettingsesInternalServerError {
	return &GetGlobalSettingsesInternalServerError{}
}

/* GetGlobalSettingsesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetGlobalSettingsesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetGlobalSettingsesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-global-settingses][%d] getGlobalSettingsesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGlobalSettingsesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetGlobalSettingsesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
