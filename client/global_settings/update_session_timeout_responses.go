// Code generated by go-swagger; DO NOT EDIT.

package global_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateSessionTimeoutReader is a Reader for the UpdateSessionTimeout structure.
type UpdateSessionTimeoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSessionTimeoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSessionTimeoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateSessionTimeoutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateSessionTimeoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateSessionTimeoutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSessionTimeoutOK creates a UpdateSessionTimeoutOK with default headers values
func NewUpdateSessionTimeoutOK() *UpdateSessionTimeoutOK {
	return &UpdateSessionTimeoutOK{}
}

/* UpdateSessionTimeoutOK describes a response with status code 200, with default header values.

UpdateSessionTimeoutOK update session timeout o k
*/
type UpdateSessionTimeoutOK struct {
	XTowerRequestID string

	Payload *models.WithTaskGlobalSettings
}

func (o *UpdateSessionTimeoutOK) Error() string {
	return fmt.Sprintf("[POST /update-session-timeout][%d] updateSessionTimeoutOK  %+v", 200, o.Payload)
}
func (o *UpdateSessionTimeoutOK) GetPayload() *models.WithTaskGlobalSettings {
	return o.Payload
}

func (o *UpdateSessionTimeoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskGlobalSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSessionTimeoutBadRequest creates a UpdateSessionTimeoutBadRequest with default headers values
func NewUpdateSessionTimeoutBadRequest() *UpdateSessionTimeoutBadRequest {
	return &UpdateSessionTimeoutBadRequest{}
}

/* UpdateSessionTimeoutBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSessionTimeoutBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSessionTimeoutBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-session-timeout][%d] updateSessionTimeoutBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateSessionTimeoutBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSessionTimeoutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSessionTimeoutNotFound creates a UpdateSessionTimeoutNotFound with default headers values
func NewUpdateSessionTimeoutNotFound() *UpdateSessionTimeoutNotFound {
	return &UpdateSessionTimeoutNotFound{}
}

/* UpdateSessionTimeoutNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateSessionTimeoutNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSessionTimeoutNotFound) Error() string {
	return fmt.Sprintf("[POST /update-session-timeout][%d] updateSessionTimeoutNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSessionTimeoutNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSessionTimeoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSessionTimeoutInternalServerError creates a UpdateSessionTimeoutInternalServerError with default headers values
func NewUpdateSessionTimeoutInternalServerError() *UpdateSessionTimeoutInternalServerError {
	return &UpdateSessionTimeoutInternalServerError{}
}

/* UpdateSessionTimeoutInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateSessionTimeoutInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSessionTimeoutInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-session-timeout][%d] updateSessionTimeoutInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateSessionTimeoutInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSessionTimeoutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
