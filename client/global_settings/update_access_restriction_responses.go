// Code generated by go-swagger; DO NOT EDIT.

package global_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateAccessRestrictionReader is a Reader for the UpdateAccessRestriction structure.
type UpdateAccessRestrictionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAccessRestrictionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAccessRestrictionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateAccessRestrictionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateAccessRestrictionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateAccessRestrictionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAccessRestrictionOK creates a UpdateAccessRestrictionOK with default headers values
func NewUpdateAccessRestrictionOK() *UpdateAccessRestrictionOK {
	return &UpdateAccessRestrictionOK{}
}

/* UpdateAccessRestrictionOK describes a response with status code 200, with default header values.

UpdateAccessRestrictionOK update access restriction o k
*/
type UpdateAccessRestrictionOK struct {
	XTowerRequestID string

	Payload *models.WithTaskGlobalSettings
}

func (o *UpdateAccessRestrictionOK) Error() string {
	return fmt.Sprintf("[POST /update-access-restriction][%d] updateAccessRestrictionOK  %+v", 200, o.Payload)
}
func (o *UpdateAccessRestrictionOK) GetPayload() *models.WithTaskGlobalSettings {
	return o.Payload
}

func (o *UpdateAccessRestrictionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.WithTaskGlobalSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessRestrictionBadRequest creates a UpdateAccessRestrictionBadRequest with default headers values
func NewUpdateAccessRestrictionBadRequest() *UpdateAccessRestrictionBadRequest {
	return &UpdateAccessRestrictionBadRequest{}
}

/* UpdateAccessRestrictionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateAccessRestrictionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAccessRestrictionBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-access-restriction][%d] updateAccessRestrictionBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateAccessRestrictionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAccessRestrictionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessRestrictionNotFound creates a UpdateAccessRestrictionNotFound with default headers values
func NewUpdateAccessRestrictionNotFound() *UpdateAccessRestrictionNotFound {
	return &UpdateAccessRestrictionNotFound{}
}

/* UpdateAccessRestrictionNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateAccessRestrictionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAccessRestrictionNotFound) Error() string {
	return fmt.Sprintf("[POST /update-access-restriction][%d] updateAccessRestrictionNotFound  %+v", 404, o.Payload)
}
func (o *UpdateAccessRestrictionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAccessRestrictionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessRestrictionInternalServerError creates a UpdateAccessRestrictionInternalServerError with default headers values
func NewUpdateAccessRestrictionInternalServerError() *UpdateAccessRestrictionInternalServerError {
	return &UpdateAccessRestrictionInternalServerError{}
}

/* UpdateAccessRestrictionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateAccessRestrictionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateAccessRestrictionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-access-restriction][%d] updateAccessRestrictionInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateAccessRestrictionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateAccessRestrictionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
