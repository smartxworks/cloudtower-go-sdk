// Code generated by go-swagger; DO NOT EDIT.

package vm_folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateVMFolderReader is a Reader for the CreateVMFolder structure.
type CreateVMFolderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVMFolderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVMFolderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateVMFolderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateVMFolderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateVMFolderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVMFolderOK creates a CreateVMFolderOK with default headers values
func NewCreateVMFolderOK() *CreateVMFolderOK {
	return &CreateVMFolderOK{}
}

/* CreateVMFolderOK describes a response with status code 200, with default header values.

CreateVMFolderOK create Vm folder o k
*/
type CreateVMFolderOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMFolder
}

func (o *CreateVMFolderOK) Error() string {
	return fmt.Sprintf("[POST /create-vm-folder][%d] createVmFolderOK  %+v", 200, o.Payload)
}
func (o *CreateVMFolderOK) GetPayload() []*models.WithTaskVMFolder {
	return o.Payload
}

func (o *CreateVMFolderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMFolderBadRequest creates a CreateVMFolderBadRequest with default headers values
func NewCreateVMFolderBadRequest() *CreateVMFolderBadRequest {
	return &CreateVMFolderBadRequest{}
}

/* CreateVMFolderBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateVMFolderBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMFolderBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-vm-folder][%d] createVmFolderBadRequest  %+v", 400, o.Payload)
}
func (o *CreateVMFolderBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMFolderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMFolderNotFound creates a CreateVMFolderNotFound with default headers values
func NewCreateVMFolderNotFound() *CreateVMFolderNotFound {
	return &CreateVMFolderNotFound{}
}

/* CreateVMFolderNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateVMFolderNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMFolderNotFound) Error() string {
	return fmt.Sprintf("[POST /create-vm-folder][%d] createVmFolderNotFound  %+v", 404, o.Payload)
}
func (o *CreateVMFolderNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMFolderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMFolderInternalServerError creates a CreateVMFolderInternalServerError with default headers values
func NewCreateVMFolderInternalServerError() *CreateVMFolderInternalServerError {
	return &CreateVMFolderInternalServerError{}
}

/* CreateVMFolderInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateVMFolderInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMFolderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-vm-folder][%d] createVmFolderInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateVMFolderInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMFolderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
