// Code generated by go-swagger; DO NOT EDIT.

package vm_folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMFoldersReader is a Reader for the GetVMFolders structure.
type GetVMFoldersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMFoldersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMFoldersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMFoldersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMFoldersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMFoldersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMFoldersOK creates a GetVMFoldersOK with default headers values
func NewGetVMFoldersOK() *GetVMFoldersOK {
	return &GetVMFoldersOK{}
}

/* GetVMFoldersOK describes a response with status code 200, with default header values.

GetVMFoldersOK get Vm folders o k
*/
type GetVMFoldersOK struct {
	XTowerRequestID string

	Payload []*models.VMFolder
}

func (o *GetVMFoldersOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-folders][%d] getVmFoldersOK  %+v", 200, o.Payload)
}
func (o *GetVMFoldersOK) GetPayload() []*models.VMFolder {
	return o.Payload
}

func (o *GetVMFoldersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMFoldersBadRequest creates a GetVMFoldersBadRequest with default headers values
func NewGetVMFoldersBadRequest() *GetVMFoldersBadRequest {
	return &GetVMFoldersBadRequest{}
}

/* GetVMFoldersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMFoldersBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMFoldersBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-folders][%d] getVmFoldersBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMFoldersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMFoldersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMFoldersNotFound creates a GetVMFoldersNotFound with default headers values
func NewGetVMFoldersNotFound() *GetVMFoldersNotFound {
	return &GetVMFoldersNotFound{}
}

/* GetVMFoldersNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMFoldersNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMFoldersNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-folders][%d] getVmFoldersNotFound  %+v", 404, o.Payload)
}
func (o *GetVMFoldersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMFoldersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMFoldersInternalServerError creates a GetVMFoldersInternalServerError with default headers values
func NewGetVMFoldersInternalServerError() *GetVMFoldersInternalServerError {
	return &GetVMFoldersInternalServerError{}
}

/* GetVMFoldersInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMFoldersInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMFoldersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-folders][%d] getVmFoldersInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMFoldersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMFoldersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
