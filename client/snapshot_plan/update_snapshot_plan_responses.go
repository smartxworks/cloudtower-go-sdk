// Code generated by go-swagger; DO NOT EDIT.

package snapshot_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateSnapshotPlanReader is a Reader for the UpdateSnapshotPlan structure.
type UpdateSnapshotPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSnapshotPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSnapshotPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateSnapshotPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateSnapshotPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateSnapshotPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSnapshotPlanOK creates a UpdateSnapshotPlanOK with default headers values
func NewUpdateSnapshotPlanOK() *UpdateSnapshotPlanOK {
	return &UpdateSnapshotPlanOK{}
}

/* UpdateSnapshotPlanOK describes a response with status code 200, with default header values.

UpdateSnapshotPlanOK update snapshot plan o k
*/
type UpdateSnapshotPlanOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskSnapshotPlan
}

func (o *UpdateSnapshotPlanOK) Error() string {
	return fmt.Sprintf("[POST /update-snapshot-plan][%d] updateSnapshotPlanOK  %+v", 200, o.Payload)
}
func (o *UpdateSnapshotPlanOK) GetPayload() []*models.WithTaskSnapshotPlan {
	return o.Payload
}

func (o *UpdateSnapshotPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnapshotPlanBadRequest creates a UpdateSnapshotPlanBadRequest with default headers values
func NewUpdateSnapshotPlanBadRequest() *UpdateSnapshotPlanBadRequest {
	return &UpdateSnapshotPlanBadRequest{}
}

/* UpdateSnapshotPlanBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSnapshotPlanBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnapshotPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-snapshot-plan][%d] updateSnapshotPlanBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateSnapshotPlanBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnapshotPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnapshotPlanNotFound creates a UpdateSnapshotPlanNotFound with default headers values
func NewUpdateSnapshotPlanNotFound() *UpdateSnapshotPlanNotFound {
	return &UpdateSnapshotPlanNotFound{}
}

/* UpdateSnapshotPlanNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateSnapshotPlanNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnapshotPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /update-snapshot-plan][%d] updateSnapshotPlanNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSnapshotPlanNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnapshotPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSnapshotPlanInternalServerError creates a UpdateSnapshotPlanInternalServerError with default headers values
func NewUpdateSnapshotPlanInternalServerError() *UpdateSnapshotPlanInternalServerError {
	return &UpdateSnapshotPlanInternalServerError{}
}

/* UpdateSnapshotPlanInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateSnapshotPlanInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateSnapshotPlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-snapshot-plan][%d] updateSnapshotPlanInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateSnapshotPlanInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateSnapshotPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
