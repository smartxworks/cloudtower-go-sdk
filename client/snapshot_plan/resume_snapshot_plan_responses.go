// Code generated by go-swagger; DO NOT EDIT.

package snapshot_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ResumeSnapshotPlanReader is a Reader for the ResumeSnapshotPlan structure.
type ResumeSnapshotPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResumeSnapshotPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResumeSnapshotPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewResumeSnapshotPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewResumeSnapshotPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewResumeSnapshotPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResumeSnapshotPlanOK creates a ResumeSnapshotPlanOK with default headers values
func NewResumeSnapshotPlanOK() *ResumeSnapshotPlanOK {
	return &ResumeSnapshotPlanOK{}
}

/* ResumeSnapshotPlanOK describes a response with status code 200, with default header values.

ResumeSnapshotPlanOK resume snapshot plan o k
*/
type ResumeSnapshotPlanOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskSnapshotPlan
}

func (o *ResumeSnapshotPlanOK) Error() string {
	return fmt.Sprintf("[POST /resume-snapshot-plan][%d] resumeSnapshotPlanOK  %+v", 200, o.Payload)
}
func (o *ResumeSnapshotPlanOK) GetPayload() []*models.WithTaskSnapshotPlan {
	return o.Payload
}

func (o *ResumeSnapshotPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResumeSnapshotPlanBadRequest creates a ResumeSnapshotPlanBadRequest with default headers values
func NewResumeSnapshotPlanBadRequest() *ResumeSnapshotPlanBadRequest {
	return &ResumeSnapshotPlanBadRequest{}
}

/* ResumeSnapshotPlanBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ResumeSnapshotPlanBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResumeSnapshotPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /resume-snapshot-plan][%d] resumeSnapshotPlanBadRequest  %+v", 400, o.Payload)
}
func (o *ResumeSnapshotPlanBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResumeSnapshotPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResumeSnapshotPlanNotFound creates a ResumeSnapshotPlanNotFound with default headers values
func NewResumeSnapshotPlanNotFound() *ResumeSnapshotPlanNotFound {
	return &ResumeSnapshotPlanNotFound{}
}

/* ResumeSnapshotPlanNotFound describes a response with status code 404, with default header values.

Not found
*/
type ResumeSnapshotPlanNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResumeSnapshotPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /resume-snapshot-plan][%d] resumeSnapshotPlanNotFound  %+v", 404, o.Payload)
}
func (o *ResumeSnapshotPlanNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResumeSnapshotPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResumeSnapshotPlanInternalServerError creates a ResumeSnapshotPlanInternalServerError with default headers values
func NewResumeSnapshotPlanInternalServerError() *ResumeSnapshotPlanInternalServerError {
	return &ResumeSnapshotPlanInternalServerError{}
}

/* ResumeSnapshotPlanInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ResumeSnapshotPlanInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ResumeSnapshotPlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /resume-snapshot-plan][%d] resumeSnapshotPlanInternalServerError  %+v", 500, o.Payload)
}
func (o *ResumeSnapshotPlanInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ResumeSnapshotPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
