// Code generated by go-swagger; DO NOT EDIT.

package ntp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNtpServiceURLReader is a Reader for the GetNtpServiceURL structure.
type GetNtpServiceURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNtpServiceURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNtpServiceURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNtpServiceURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNtpServiceURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNtpServiceURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNtpServiceURLOK creates a GetNtpServiceURLOK with default headers values
func NewGetNtpServiceURLOK() *GetNtpServiceURLOK {
	return &GetNtpServiceURLOK{}
}

/* GetNtpServiceURLOK describes a response with status code 200, with default header values.

GetNtpServiceURLOK get ntp service Url o k
*/
type GetNtpServiceURLOK struct {
	XTowerRequestID string

	Payload *models.NtpServiceURL
}

func (o *GetNtpServiceURLOK) Error() string {
	return fmt.Sprintf("[POST /get-ntp-service-url][%d] getNtpServiceUrlOK  %+v", 200, o.Payload)
}
func (o *GetNtpServiceURLOK) GetPayload() *models.NtpServiceURL {
	return o.Payload
}

func (o *GetNtpServiceURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.NtpServiceURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNtpServiceURLBadRequest creates a GetNtpServiceURLBadRequest with default headers values
func NewGetNtpServiceURLBadRequest() *GetNtpServiceURLBadRequest {
	return &GetNtpServiceURLBadRequest{}
}

/* GetNtpServiceURLBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNtpServiceURLBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNtpServiceURLBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-ntp-service-url][%d] getNtpServiceUrlBadRequest  %+v", 400, o.Payload)
}
func (o *GetNtpServiceURLBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNtpServiceURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNtpServiceURLNotFound creates a GetNtpServiceURLNotFound with default headers values
func NewGetNtpServiceURLNotFound() *GetNtpServiceURLNotFound {
	return &GetNtpServiceURLNotFound{}
}

/* GetNtpServiceURLNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNtpServiceURLNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNtpServiceURLNotFound) Error() string {
	return fmt.Sprintf("[POST /get-ntp-service-url][%d] getNtpServiceUrlNotFound  %+v", 404, o.Payload)
}
func (o *GetNtpServiceURLNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNtpServiceURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNtpServiceURLInternalServerError creates a GetNtpServiceURLInternalServerError with default headers values
func NewGetNtpServiceURLInternalServerError() *GetNtpServiceURLInternalServerError {
	return &GetNtpServiceURLInternalServerError{}
}

/* GetNtpServiceURLInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNtpServiceURLInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNtpServiceURLInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-ntp-service-url][%d] getNtpServiceUrlInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNtpServiceURLInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNtpServiceURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
