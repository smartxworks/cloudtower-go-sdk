// Code generated by go-swagger; DO NOT EDIT.

package view

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateViewReader is a Reader for the UpdateView structure.
type UpdateViewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateViewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateViewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateViewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateViewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateViewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateViewOK creates a UpdateViewOK with default headers values
func NewUpdateViewOK() *UpdateViewOK {
	return &UpdateViewOK{}
}

/* UpdateViewOK describes a response with status code 200, with default header values.

UpdateViewOK update view o k
*/
type UpdateViewOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskView
}

func (o *UpdateViewOK) Error() string {
	return fmt.Sprintf("[POST /update-view][%d] updateViewOK  %+v", 200, o.Payload)
}
func (o *UpdateViewOK) GetPayload() []*models.WithTaskView {
	return o.Payload
}

func (o *UpdateViewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateViewBadRequest creates a UpdateViewBadRequest with default headers values
func NewUpdateViewBadRequest() *UpdateViewBadRequest {
	return &UpdateViewBadRequest{}
}

/* UpdateViewBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateViewBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateViewBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-view][%d] updateViewBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateViewBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateViewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateViewNotFound creates a UpdateViewNotFound with default headers values
func NewUpdateViewNotFound() *UpdateViewNotFound {
	return &UpdateViewNotFound{}
}

/* UpdateViewNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateViewNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateViewNotFound) Error() string {
	return fmt.Sprintf("[POST /update-view][%d] updateViewNotFound  %+v", 404, o.Payload)
}
func (o *UpdateViewNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateViewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateViewInternalServerError creates a UpdateViewInternalServerError with default headers values
func NewUpdateViewInternalServerError() *UpdateViewInternalServerError {
	return &UpdateViewInternalServerError{}
}

/* UpdateViewInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateViewInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateViewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-view][%d] updateViewInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateViewInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateViewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
