// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateLabelReader is a Reader for the CreateLabel structure.
type CreateLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateLabelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateLabelOK creates a CreateLabelOK with default headers values
func NewCreateLabelOK() *CreateLabelOK {
	return &CreateLabelOK{}
}

/* CreateLabelOK describes a response with status code 200, with default header values.

CreateLabelOK create label o k
*/
type CreateLabelOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskLabel
}

func (o *CreateLabelOK) Error() string {
	return fmt.Sprintf("[POST /create-label][%d] createLabelOK  %+v", 200, o.Payload)
}
func (o *CreateLabelOK) GetPayload() []*models.WithTaskLabel {
	return o.Payload
}

func (o *CreateLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLabelBadRequest creates a CreateLabelBadRequest with default headers values
func NewCreateLabelBadRequest() *CreateLabelBadRequest {
	return &CreateLabelBadRequest{}
}

/* CreateLabelBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateLabelBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLabelBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-label][%d] createLabelBadRequest  %+v", 400, o.Payload)
}
func (o *CreateLabelBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLabelNotFound creates a CreateLabelNotFound with default headers values
func NewCreateLabelNotFound() *CreateLabelNotFound {
	return &CreateLabelNotFound{}
}

/* CreateLabelNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateLabelNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLabelNotFound) Error() string {
	return fmt.Sprintf("[POST /create-label][%d] createLabelNotFound  %+v", 404, o.Payload)
}
func (o *CreateLabelNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLabelInternalServerError creates a CreateLabelInternalServerError with default headers values
func NewCreateLabelInternalServerError() *CreateLabelInternalServerError {
	return &CreateLabelInternalServerError{}
}

/* CreateLabelInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateLabelInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateLabelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-label][%d] createLabelInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateLabelInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateLabelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
