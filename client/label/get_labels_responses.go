// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetLabelsReader is a Reader for the GetLabels structure.
type GetLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetLabelsOK creates a GetLabelsOK with default headers values
func NewGetLabelsOK() *GetLabelsOK {
	return &GetLabelsOK{}
}

/* GetLabelsOK describes a response with status code 200, with default header values.

GetLabelsOK get labels o k
*/
type GetLabelsOK struct {
	XTowerRequestID string

	Payload []*models.Label
}

func (o *GetLabelsOK) Error() string {
	return fmt.Sprintf("[POST /get-labels][%d] getLabelsOK  %+v", 200, o.Payload)
}
func (o *GetLabelsOK) GetPayload() []*models.Label {
	return o.Payload
}

func (o *GetLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLabelsBadRequest creates a GetLabelsBadRequest with default headers values
func NewGetLabelsBadRequest() *GetLabelsBadRequest {
	return &GetLabelsBadRequest{}
}

/* GetLabelsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetLabelsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLabelsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-labels][%d] getLabelsBadRequest  %+v", 400, o.Payload)
}
func (o *GetLabelsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLabelsNotFound creates a GetLabelsNotFound with default headers values
func NewGetLabelsNotFound() *GetLabelsNotFound {
	return &GetLabelsNotFound{}
}

/* GetLabelsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetLabelsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLabelsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-labels][%d] getLabelsNotFound  %+v", 404, o.Payload)
}
func (o *GetLabelsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLabelsInternalServerError creates a GetLabelsInternalServerError with default headers values
func NewGetLabelsInternalServerError() *GetLabelsInternalServerError {
	return &GetLabelsInternalServerError{}
}

/* GetLabelsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetLabelsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-labels][%d] getLabelsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetLabelsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
