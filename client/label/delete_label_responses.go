// Code generated by go-swagger; DO NOT EDIT.

package label

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteLabelReader is a Reader for the DeleteLabel structure.
type DeleteLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteLabelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteLabelOK creates a DeleteLabelOK with default headers values
func NewDeleteLabelOK() *DeleteLabelOK {
	return &DeleteLabelOK{}
}

/* DeleteLabelOK describes a response with status code 200, with default header values.

DeleteLabelOK delete label o k
*/
type DeleteLabelOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteLabel
}

func (o *DeleteLabelOK) Error() string {
	return fmt.Sprintf("[POST /delete-label][%d] deleteLabelOK  %+v", 200, o.Payload)
}
func (o *DeleteLabelOK) GetPayload() []*models.WithTaskDeleteLabel {
	return o.Payload
}

func (o *DeleteLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLabelBadRequest creates a DeleteLabelBadRequest with default headers values
func NewDeleteLabelBadRequest() *DeleteLabelBadRequest {
	return &DeleteLabelBadRequest{}
}

/* DeleteLabelBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteLabelBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteLabelBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-label][%d] deleteLabelBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteLabelBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLabelNotFound creates a DeleteLabelNotFound with default headers values
func NewDeleteLabelNotFound() *DeleteLabelNotFound {
	return &DeleteLabelNotFound{}
}

/* DeleteLabelNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteLabelNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteLabelNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-label][%d] deleteLabelNotFound  %+v", 404, o.Payload)
}
func (o *DeleteLabelNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLabelInternalServerError creates a DeleteLabelInternalServerError with default headers values
func NewDeleteLabelInternalServerError() *DeleteLabelInternalServerError {
	return &DeleteLabelInternalServerError{}
}

/* DeleteLabelInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteLabelInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteLabelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-label][%d] deleteLabelInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteLabelInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteLabelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
