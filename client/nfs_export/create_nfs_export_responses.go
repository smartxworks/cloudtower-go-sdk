// Code generated by go-swagger; DO NOT EDIT.

package nfs_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateNfsExportReader is a Reader for the CreateNfsExport structure.
type CreateNfsExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNfsExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNfsExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateNfsExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateNfsExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateNfsExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNfsExportOK creates a CreateNfsExportOK with default headers values
func NewCreateNfsExportOK() *CreateNfsExportOK {
	return &CreateNfsExportOK{}
}

/* CreateNfsExportOK describes a response with status code 200, with default header values.

CreateNfsExportOK create nfs export o k
*/
type CreateNfsExportOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskNfsExport
}

func (o *CreateNfsExportOK) Error() string {
	return fmt.Sprintf("[POST /create-nfs-export][%d] createNfsExportOK  %+v", 200, o.Payload)
}
func (o *CreateNfsExportOK) GetPayload() []*models.WithTaskNfsExport {
	return o.Payload
}

func (o *CreateNfsExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNfsExportBadRequest creates a CreateNfsExportBadRequest with default headers values
func NewCreateNfsExportBadRequest() *CreateNfsExportBadRequest {
	return &CreateNfsExportBadRequest{}
}

/* CreateNfsExportBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateNfsExportBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNfsExportBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-nfs-export][%d] createNfsExportBadRequest  %+v", 400, o.Payload)
}
func (o *CreateNfsExportBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNfsExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNfsExportNotFound creates a CreateNfsExportNotFound with default headers values
func NewCreateNfsExportNotFound() *CreateNfsExportNotFound {
	return &CreateNfsExportNotFound{}
}

/* CreateNfsExportNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateNfsExportNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNfsExportNotFound) Error() string {
	return fmt.Sprintf("[POST /create-nfs-export][%d] createNfsExportNotFound  %+v", 404, o.Payload)
}
func (o *CreateNfsExportNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNfsExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNfsExportInternalServerError creates a CreateNfsExportInternalServerError with default headers values
func NewCreateNfsExportInternalServerError() *CreateNfsExportInternalServerError {
	return &CreateNfsExportInternalServerError{}
}

/* CreateNfsExportInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateNfsExportInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateNfsExportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-nfs-export][%d] createNfsExportInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateNfsExportInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateNfsExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
