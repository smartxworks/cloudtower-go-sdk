// Code generated by go-swagger; DO NOT EDIT.

package nfs_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateNfsExportReader is a Reader for the UpdateNfsExport structure.
type UpdateNfsExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNfsExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNfsExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateNfsExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateNfsExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateNfsExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNfsExportOK creates a UpdateNfsExportOK with default headers values
func NewUpdateNfsExportOK() *UpdateNfsExportOK {
	return &UpdateNfsExportOK{}
}

/* UpdateNfsExportOK describes a response with status code 200, with default header values.

UpdateNfsExportOK update nfs export o k
*/
type UpdateNfsExportOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskNfsExport
}

func (o *UpdateNfsExportOK) Error() string {
	return fmt.Sprintf("[POST /update-nfs-export][%d] updateNfsExportOK  %+v", 200, o.Payload)
}
func (o *UpdateNfsExportOK) GetPayload() []*models.WithTaskNfsExport {
	return o.Payload
}

func (o *UpdateNfsExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNfsExportBadRequest creates a UpdateNfsExportBadRequest with default headers values
func NewUpdateNfsExportBadRequest() *UpdateNfsExportBadRequest {
	return &UpdateNfsExportBadRequest{}
}

/* UpdateNfsExportBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateNfsExportBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNfsExportBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-nfs-export][%d] updateNfsExportBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateNfsExportBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNfsExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNfsExportNotFound creates a UpdateNfsExportNotFound with default headers values
func NewUpdateNfsExportNotFound() *UpdateNfsExportNotFound {
	return &UpdateNfsExportNotFound{}
}

/* UpdateNfsExportNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateNfsExportNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNfsExportNotFound) Error() string {
	return fmt.Sprintf("[POST /update-nfs-export][%d] updateNfsExportNotFound  %+v", 404, o.Payload)
}
func (o *UpdateNfsExportNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNfsExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNfsExportInternalServerError creates a UpdateNfsExportInternalServerError with default headers values
func NewUpdateNfsExportInternalServerError() *UpdateNfsExportInternalServerError {
	return &UpdateNfsExportInternalServerError{}
}

/* UpdateNfsExportInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateNfsExportInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateNfsExportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-nfs-export][%d] updateNfsExportInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateNfsExportInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateNfsExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
