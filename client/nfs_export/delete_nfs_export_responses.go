// Code generated by go-swagger; DO NOT EDIT.

package nfs_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteNfsExportReader is a Reader for the DeleteNfsExport structure.
type DeleteNfsExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNfsExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNfsExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteNfsExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteNfsExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteNfsExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteNfsExportOK creates a DeleteNfsExportOK with default headers values
func NewDeleteNfsExportOK() *DeleteNfsExportOK {
	return &DeleteNfsExportOK{}
}

/* DeleteNfsExportOK describes a response with status code 200, with default header values.

DeleteNfsExportOK delete nfs export o k
*/
type DeleteNfsExportOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteNfsExport
}

func (o *DeleteNfsExportOK) Error() string {
	return fmt.Sprintf("[POST /delete-nfs-export][%d] deleteNfsExportOK  %+v", 200, o.Payload)
}
func (o *DeleteNfsExportOK) GetPayload() []*models.WithTaskDeleteNfsExport {
	return o.Payload
}

func (o *DeleteNfsExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNfsExportBadRequest creates a DeleteNfsExportBadRequest with default headers values
func NewDeleteNfsExportBadRequest() *DeleteNfsExportBadRequest {
	return &DeleteNfsExportBadRequest{}
}

/* DeleteNfsExportBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteNfsExportBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteNfsExportBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-nfs-export][%d] deleteNfsExportBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteNfsExportBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteNfsExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNfsExportNotFound creates a DeleteNfsExportNotFound with default headers values
func NewDeleteNfsExportNotFound() *DeleteNfsExportNotFound {
	return &DeleteNfsExportNotFound{}
}

/* DeleteNfsExportNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteNfsExportNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteNfsExportNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-nfs-export][%d] deleteNfsExportNotFound  %+v", 404, o.Payload)
}
func (o *DeleteNfsExportNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteNfsExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNfsExportInternalServerError creates a DeleteNfsExportInternalServerError with default headers values
func NewDeleteNfsExportInternalServerError() *DeleteNfsExportInternalServerError {
	return &DeleteNfsExportInternalServerError{}
}

/* DeleteNfsExportInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteNfsExportInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteNfsExportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-nfs-export][%d] deleteNfsExportInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteNfsExportInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteNfsExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
