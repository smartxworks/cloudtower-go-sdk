// Code generated by go-swagger; DO NOT EDIT.

package upload_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetUploadTasksReader is a Reader for the GetUploadTasks structure.
type GetUploadTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUploadTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUploadTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetUploadTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetUploadTasksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetUploadTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUploadTasksOK creates a GetUploadTasksOK with default headers values
func NewGetUploadTasksOK() *GetUploadTasksOK {
	return &GetUploadTasksOK{}
}

/* GetUploadTasksOK describes a response with status code 200, with default header values.

GetUploadTasksOK get upload tasks o k
*/
type GetUploadTasksOK struct {
	XTowerRequestID string

	Payload []*models.UploadTask
}

func (o *GetUploadTasksOK) Error() string {
	return fmt.Sprintf("[POST /get-upload-tasks][%d] getUploadTasksOK  %+v", 200, o.Payload)
}
func (o *GetUploadTasksOK) GetPayload() []*models.UploadTask {
	return o.Payload
}

func (o *GetUploadTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUploadTasksBadRequest creates a GetUploadTasksBadRequest with default headers values
func NewGetUploadTasksBadRequest() *GetUploadTasksBadRequest {
	return &GetUploadTasksBadRequest{}
}

/* GetUploadTasksBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetUploadTasksBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUploadTasksBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-upload-tasks][%d] getUploadTasksBadRequest  %+v", 400, o.Payload)
}
func (o *GetUploadTasksBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUploadTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUploadTasksNotFound creates a GetUploadTasksNotFound with default headers values
func NewGetUploadTasksNotFound() *GetUploadTasksNotFound {
	return &GetUploadTasksNotFound{}
}

/* GetUploadTasksNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetUploadTasksNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUploadTasksNotFound) Error() string {
	return fmt.Sprintf("[POST /get-upload-tasks][%d] getUploadTasksNotFound  %+v", 404, o.Payload)
}
func (o *GetUploadTasksNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUploadTasksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUploadTasksInternalServerError creates a GetUploadTasksInternalServerError with default headers values
func NewGetUploadTasksInternalServerError() *GetUploadTasksInternalServerError {
	return &GetUploadTasksInternalServerError{}
}

/* GetUploadTasksInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetUploadTasksInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetUploadTasksInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-upload-tasks][%d] getUploadTasksInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUploadTasksInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetUploadTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
