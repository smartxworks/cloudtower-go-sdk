// Code generated by go-swagger; DO NOT EDIT.

package upload_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CancelUploadTaskReader is a Reader for the CancelUploadTask structure.
type CancelUploadTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelUploadTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelUploadTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 304:
		result := NewCancelUploadTaskNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 400:
		result := NewCancelUploadTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCancelUploadTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCancelUploadTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelUploadTaskOK creates a CancelUploadTaskOK with default headers values
func NewCancelUploadTaskOK() *CancelUploadTaskOK {
	return &CancelUploadTaskOK{}
}

/* CancelUploadTaskOK describes a response with status code 200, with default header values.

CancelUploadTaskOK cancel upload task o k
*/
type CancelUploadTaskOK struct {
	XTowerRequestID string

	Payload []string
}

func (o *CancelUploadTaskOK) Error() string {
	return fmt.Sprintf("[POST /cancel-upload-task][%d] cancelUploadTaskOK  %+v", 200, o.Payload)
}
func (o *CancelUploadTaskOK) GetPayload() []string {
	return o.Payload
}

func (o *CancelUploadTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelUploadTaskNotModified creates a CancelUploadTaskNotModified with default headers values
func NewCancelUploadTaskNotModified() *CancelUploadTaskNotModified {
	return &CancelUploadTaskNotModified{}
}

/* CancelUploadTaskNotModified describes a response with status code 304, with default header values.

Not modified
*/
type CancelUploadTaskNotModified struct {
}

func (o *CancelUploadTaskNotModified) Error() string {
	return fmt.Sprintf("[POST /cancel-upload-task][%d] cancelUploadTaskNotModified ", 304)
}

func (o *CancelUploadTaskNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelUploadTaskBadRequest creates a CancelUploadTaskBadRequest with default headers values
func NewCancelUploadTaskBadRequest() *CancelUploadTaskBadRequest {
	return &CancelUploadTaskBadRequest{}
}

/* CancelUploadTaskBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CancelUploadTaskBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CancelUploadTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /cancel-upload-task][%d] cancelUploadTaskBadRequest  %+v", 400, o.Payload)
}
func (o *CancelUploadTaskBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CancelUploadTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelUploadTaskNotFound creates a CancelUploadTaskNotFound with default headers values
func NewCancelUploadTaskNotFound() *CancelUploadTaskNotFound {
	return &CancelUploadTaskNotFound{}
}

/* CancelUploadTaskNotFound describes a response with status code 404, with default header values.

Not found
*/
type CancelUploadTaskNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CancelUploadTaskNotFound) Error() string {
	return fmt.Sprintf("[POST /cancel-upload-task][%d] cancelUploadTaskNotFound  %+v", 404, o.Payload)
}
func (o *CancelUploadTaskNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CancelUploadTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelUploadTaskInternalServerError creates a CancelUploadTaskInternalServerError with default headers values
func NewCancelUploadTaskInternalServerError() *CancelUploadTaskInternalServerError {
	return &CancelUploadTaskInternalServerError{}
}

/* CancelUploadTaskInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CancelUploadTaskInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CancelUploadTaskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cancel-upload-task][%d] cancelUploadTaskInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelUploadTaskInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CancelUploadTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
