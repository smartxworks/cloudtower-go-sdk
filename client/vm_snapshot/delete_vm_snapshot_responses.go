// Code generated by go-swagger; DO NOT EDIT.

package vm_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteVMSnapshotReader is a Reader for the DeleteVMSnapshot structure.
type DeleteVMSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVMSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVMSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteVMSnapshotBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteVMSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteVMSnapshotInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteVMSnapshotOK creates a DeleteVMSnapshotOK with default headers values
func NewDeleteVMSnapshotOK() *DeleteVMSnapshotOK {
	return &DeleteVMSnapshotOK{}
}

/* DeleteVMSnapshotOK describes a response with status code 200, with default header values.

DeleteVMSnapshotOK delete Vm snapshot o k
*/
type DeleteVMSnapshotOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteVMSnapshot
}

func (o *DeleteVMSnapshotOK) Error() string {
	return fmt.Sprintf("[POST /delete-vm-snapshot][%d] deleteVmSnapshotOK  %+v", 200, o.Payload)
}
func (o *DeleteVMSnapshotOK) GetPayload() []*models.WithTaskDeleteVMSnapshot {
	return o.Payload
}

func (o *DeleteVMSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMSnapshotBadRequest creates a DeleteVMSnapshotBadRequest with default headers values
func NewDeleteVMSnapshotBadRequest() *DeleteVMSnapshotBadRequest {
	return &DeleteVMSnapshotBadRequest{}
}

/* DeleteVMSnapshotBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteVMSnapshotBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteVMSnapshotBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-vm-snapshot][%d] deleteVmSnapshotBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteVMSnapshotBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteVMSnapshotBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMSnapshotNotFound creates a DeleteVMSnapshotNotFound with default headers values
func NewDeleteVMSnapshotNotFound() *DeleteVMSnapshotNotFound {
	return &DeleteVMSnapshotNotFound{}
}

/* DeleteVMSnapshotNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteVMSnapshotNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteVMSnapshotNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-vm-snapshot][%d] deleteVmSnapshotNotFound  %+v", 404, o.Payload)
}
func (o *DeleteVMSnapshotNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteVMSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVMSnapshotInternalServerError creates a DeleteVMSnapshotInternalServerError with default headers values
func NewDeleteVMSnapshotInternalServerError() *DeleteVMSnapshotInternalServerError {
	return &DeleteVMSnapshotInternalServerError{}
}

/* DeleteVMSnapshotInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteVMSnapshotInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteVMSnapshotInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-vm-snapshot][%d] deleteVmSnapshotInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteVMSnapshotInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteVMSnapshotInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
