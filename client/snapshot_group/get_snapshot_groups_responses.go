// Code generated by go-swagger; DO NOT EDIT.

package snapshot_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetSnapshotGroupsReader is a Reader for the GetSnapshotGroups structure.
type GetSnapshotGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSnapshotGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSnapshotGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetSnapshotGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetSnapshotGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetSnapshotGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSnapshotGroupsOK creates a GetSnapshotGroupsOK with default headers values
func NewGetSnapshotGroupsOK() *GetSnapshotGroupsOK {
	return &GetSnapshotGroupsOK{}
}

/* GetSnapshotGroupsOK describes a response with status code 200, with default header values.

GetSnapshotGroupsOK get snapshot groups o k
*/
type GetSnapshotGroupsOK struct {
	XTowerRequestID string

	Payload []*models.SnapshotGroup
}

func (o *GetSnapshotGroupsOK) Error() string {
	return fmt.Sprintf("[POST /get-snapshot-groups][%d] getSnapshotGroupsOK  %+v", 200, o.Payload)
}
func (o *GetSnapshotGroupsOK) GetPayload() []*models.SnapshotGroup {
	return o.Payload
}

func (o *GetSnapshotGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnapshotGroupsBadRequest creates a GetSnapshotGroupsBadRequest with default headers values
func NewGetSnapshotGroupsBadRequest() *GetSnapshotGroupsBadRequest {
	return &GetSnapshotGroupsBadRequest{}
}

/* GetSnapshotGroupsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSnapshotGroupsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSnapshotGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-snapshot-groups][%d] getSnapshotGroupsBadRequest  %+v", 400, o.Payload)
}
func (o *GetSnapshotGroupsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSnapshotGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnapshotGroupsNotFound creates a GetSnapshotGroupsNotFound with default headers values
func NewGetSnapshotGroupsNotFound() *GetSnapshotGroupsNotFound {
	return &GetSnapshotGroupsNotFound{}
}

/* GetSnapshotGroupsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetSnapshotGroupsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSnapshotGroupsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-snapshot-groups][%d] getSnapshotGroupsNotFound  %+v", 404, o.Payload)
}
func (o *GetSnapshotGroupsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSnapshotGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSnapshotGroupsInternalServerError creates a GetSnapshotGroupsInternalServerError with default headers values
func NewGetSnapshotGroupsInternalServerError() *GetSnapshotGroupsInternalServerError {
	return &GetSnapshotGroupsInternalServerError{}
}

/* GetSnapshotGroupsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetSnapshotGroupsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetSnapshotGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-snapshot-groups][%d] getSnapshotGroupsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSnapshotGroupsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSnapshotGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
