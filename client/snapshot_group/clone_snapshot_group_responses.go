// Code generated by go-swagger; DO NOT EDIT.

package snapshot_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CloneSnapshotGroupReader is a Reader for the CloneSnapshotGroup structure.
type CloneSnapshotGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloneSnapshotGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloneSnapshotGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCloneSnapshotGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCloneSnapshotGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCloneSnapshotGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCloneSnapshotGroupOK creates a CloneSnapshotGroupOK with default headers values
func NewCloneSnapshotGroupOK() *CloneSnapshotGroupOK {
	return &CloneSnapshotGroupOK{}
}

/* CloneSnapshotGroupOK describes a response with status code 200, with default header values.

CloneSnapshotGroupOK clone snapshot group o k
*/
type CloneSnapshotGroupOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskSnapshotGroup
}

func (o *CloneSnapshotGroupOK) Error() string {
	return fmt.Sprintf("[POST /clone-snapshot-group][%d] cloneSnapshotGroupOK  %+v", 200, o.Payload)
}
func (o *CloneSnapshotGroupOK) GetPayload() []*models.WithTaskSnapshotGroup {
	return o.Payload
}

func (o *CloneSnapshotGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloneSnapshotGroupBadRequest creates a CloneSnapshotGroupBadRequest with default headers values
func NewCloneSnapshotGroupBadRequest() *CloneSnapshotGroupBadRequest {
	return &CloneSnapshotGroupBadRequest{}
}

/* CloneSnapshotGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CloneSnapshotGroupBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CloneSnapshotGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /clone-snapshot-group][%d] cloneSnapshotGroupBadRequest  %+v", 400, o.Payload)
}
func (o *CloneSnapshotGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CloneSnapshotGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloneSnapshotGroupNotFound creates a CloneSnapshotGroupNotFound with default headers values
func NewCloneSnapshotGroupNotFound() *CloneSnapshotGroupNotFound {
	return &CloneSnapshotGroupNotFound{}
}

/* CloneSnapshotGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type CloneSnapshotGroupNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CloneSnapshotGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /clone-snapshot-group][%d] cloneSnapshotGroupNotFound  %+v", 404, o.Payload)
}
func (o *CloneSnapshotGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CloneSnapshotGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloneSnapshotGroupInternalServerError creates a CloneSnapshotGroupInternalServerError with default headers values
func NewCloneSnapshotGroupInternalServerError() *CloneSnapshotGroupInternalServerError {
	return &CloneSnapshotGroupInternalServerError{}
}

/* CloneSnapshotGroupInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CloneSnapshotGroupInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CloneSnapshotGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /clone-snapshot-group][%d] cloneSnapshotGroupInternalServerError  %+v", 500, o.Payload)
}
func (o *CloneSnapshotGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CloneSnapshotGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
