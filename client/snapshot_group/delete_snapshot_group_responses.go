// Code generated by go-swagger; DO NOT EDIT.

package snapshot_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// DeleteSnapshotGroupReader is a Reader for the DeleteSnapshotGroup structure.
type DeleteSnapshotGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSnapshotGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSnapshotGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewDeleteSnapshotGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewDeleteSnapshotGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewDeleteSnapshotGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSnapshotGroupOK creates a DeleteSnapshotGroupOK with default headers values
func NewDeleteSnapshotGroupOK() *DeleteSnapshotGroupOK {
	return &DeleteSnapshotGroupOK{}
}

/* DeleteSnapshotGroupOK describes a response with status code 200, with default header values.

DeleteSnapshotGroupOK delete snapshot group o k
*/
type DeleteSnapshotGroupOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteSnapshotGroup
}

func (o *DeleteSnapshotGroupOK) Error() string {
	return fmt.Sprintf("[POST /delete-snapshot-group][%d] deleteSnapshotGroupOK  %+v", 200, o.Payload)
}
func (o *DeleteSnapshotGroupOK) GetPayload() []*models.WithTaskDeleteSnapshotGroup {
	return o.Payload
}

func (o *DeleteSnapshotGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSnapshotGroupBadRequest creates a DeleteSnapshotGroupBadRequest with default headers values
func NewDeleteSnapshotGroupBadRequest() *DeleteSnapshotGroupBadRequest {
	return &DeleteSnapshotGroupBadRequest{}
}

/* DeleteSnapshotGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteSnapshotGroupBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteSnapshotGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /delete-snapshot-group][%d] deleteSnapshotGroupBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteSnapshotGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSnapshotGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSnapshotGroupNotFound creates a DeleteSnapshotGroupNotFound with default headers values
func NewDeleteSnapshotGroupNotFound() *DeleteSnapshotGroupNotFound {
	return &DeleteSnapshotGroupNotFound{}
}

/* DeleteSnapshotGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteSnapshotGroupNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteSnapshotGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /delete-snapshot-group][%d] deleteSnapshotGroupNotFound  %+v", 404, o.Payload)
}
func (o *DeleteSnapshotGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSnapshotGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSnapshotGroupInternalServerError creates a DeleteSnapshotGroupInternalServerError with default headers values
func NewDeleteSnapshotGroupInternalServerError() *DeleteSnapshotGroupInternalServerError {
	return &DeleteSnapshotGroupInternalServerError{}
}

/* DeleteSnapshotGroupInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteSnapshotGroupInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *DeleteSnapshotGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delete-snapshot-group][%d] deleteSnapshotGroupInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteSnapshotGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSnapshotGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
