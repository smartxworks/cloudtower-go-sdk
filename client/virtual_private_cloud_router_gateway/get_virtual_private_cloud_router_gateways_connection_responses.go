// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_router_gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVirtualPrivateCloudRouterGatewaysConnectionReader is a Reader for the GetVirtualPrivateCloudRouterGatewaysConnection structure.
type GetVirtualPrivateCloudRouterGatewaysConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualPrivateCloudRouterGatewaysConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualPrivateCloudRouterGatewaysConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVirtualPrivateCloudRouterGatewaysConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVirtualPrivateCloudRouterGatewaysConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualPrivateCloudRouterGatewaysConnectionOK creates a GetVirtualPrivateCloudRouterGatewaysConnectionOK with default headers values
func NewGetVirtualPrivateCloudRouterGatewaysConnectionOK() *GetVirtualPrivateCloudRouterGatewaysConnectionOK {
	return &GetVirtualPrivateCloudRouterGatewaysConnectionOK{}
}

/* GetVirtualPrivateCloudRouterGatewaysConnectionOK describes a response with status code 200, with default header values.

GetVirtualPrivateCloudRouterGatewaysConnectionOK get virtual private cloud router gateways connection o k
*/
type GetVirtualPrivateCloudRouterGatewaysConnectionOK struct {
	XTowerRequestID string

	Payload *models.VirtualPrivateCloudRouterGatewayConnection
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-router-gateways-connection][%d] getVirtualPrivateCloudRouterGatewaysConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVirtualPrivateCloudRouterGatewaysConnectionOK) GetPayload() *models.VirtualPrivateCloudRouterGatewayConnection {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VirtualPrivateCloudRouterGatewayConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouterGatewaysConnectionBadRequest creates a GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest with default headers values
func NewGetVirtualPrivateCloudRouterGatewaysConnectionBadRequest() *GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest {
	return &GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest{}
}

/* GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-router-gateways-connection][%d] getVirtualPrivateCloudRouterGatewaysConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouterGatewaysConnectionNotFound creates a GetVirtualPrivateCloudRouterGatewaysConnectionNotFound with default headers values
func NewGetVirtualPrivateCloudRouterGatewaysConnectionNotFound() *GetVirtualPrivateCloudRouterGatewaysConnectionNotFound {
	return &GetVirtualPrivateCloudRouterGatewaysConnectionNotFound{}
}

/* GetVirtualPrivateCloudRouterGatewaysConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVirtualPrivateCloudRouterGatewaysConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-router-gateways-connection][%d] getVirtualPrivateCloudRouterGatewaysConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVirtualPrivateCloudRouterGatewaysConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError creates a GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError with default headers values
func NewGetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError() *GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError {
	return &GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError{}
}

/* GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-router-gateways-connection][%d] getVirtualPrivateCloudRouterGatewaysConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouterGatewaysConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
