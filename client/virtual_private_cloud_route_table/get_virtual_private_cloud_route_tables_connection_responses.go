// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_route_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVirtualPrivateCloudRouteTablesConnectionReader is a Reader for the GetVirtualPrivateCloudRouteTablesConnection structure.
type GetVirtualPrivateCloudRouteTablesConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualPrivateCloudRouteTablesConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualPrivateCloudRouteTablesConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVirtualPrivateCloudRouteTablesConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVirtualPrivateCloudRouteTablesConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVirtualPrivateCloudRouteTablesConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualPrivateCloudRouteTablesConnectionOK creates a GetVirtualPrivateCloudRouteTablesConnectionOK with default headers values
func NewGetVirtualPrivateCloudRouteTablesConnectionOK() *GetVirtualPrivateCloudRouteTablesConnectionOK {
	return &GetVirtualPrivateCloudRouteTablesConnectionOK{}
}

/* GetVirtualPrivateCloudRouteTablesConnectionOK describes a response with status code 200, with default header values.

GetVirtualPrivateCloudRouteTablesConnectionOK get virtual private cloud route tables connection o k
*/
type GetVirtualPrivateCloudRouteTablesConnectionOK struct {
	XTowerRequestID string

	Payload *models.VirtualPrivateCloudRouteTableConnection
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-route-tables-connection][%d] getVirtualPrivateCloudRouteTablesConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVirtualPrivateCloudRouteTablesConnectionOK) GetPayload() *models.VirtualPrivateCloudRouteTableConnection {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VirtualPrivateCloudRouteTableConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouteTablesConnectionBadRequest creates a GetVirtualPrivateCloudRouteTablesConnectionBadRequest with default headers values
func NewGetVirtualPrivateCloudRouteTablesConnectionBadRequest() *GetVirtualPrivateCloudRouteTablesConnectionBadRequest {
	return &GetVirtualPrivateCloudRouteTablesConnectionBadRequest{}
}

/* GetVirtualPrivateCloudRouteTablesConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVirtualPrivateCloudRouteTablesConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-route-tables-connection][%d] getVirtualPrivateCloudRouteTablesConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVirtualPrivateCloudRouteTablesConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouteTablesConnectionNotFound creates a GetVirtualPrivateCloudRouteTablesConnectionNotFound with default headers values
func NewGetVirtualPrivateCloudRouteTablesConnectionNotFound() *GetVirtualPrivateCloudRouteTablesConnectionNotFound {
	return &GetVirtualPrivateCloudRouteTablesConnectionNotFound{}
}

/* GetVirtualPrivateCloudRouteTablesConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVirtualPrivateCloudRouteTablesConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-route-tables-connection][%d] getVirtualPrivateCloudRouteTablesConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVirtualPrivateCloudRouteTablesConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualPrivateCloudRouteTablesConnectionInternalServerError creates a GetVirtualPrivateCloudRouteTablesConnectionInternalServerError with default headers values
func NewGetVirtualPrivateCloudRouteTablesConnectionInternalServerError() *GetVirtualPrivateCloudRouteTablesConnectionInternalServerError {
	return &GetVirtualPrivateCloudRouteTablesConnectionInternalServerError{}
}

/* GetVirtualPrivateCloudRouteTablesConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVirtualPrivateCloudRouteTablesConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-virtual-private-cloud-route-tables-connection][%d] getVirtualPrivateCloudRouteTablesConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVirtualPrivateCloudRouteTablesConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVirtualPrivateCloudRouteTablesConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
