// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_route_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVirtualPrivateCloudRouteTableReader is a Reader for the UpdateVirtualPrivateCloudRouteTable structure.
type UpdateVirtualPrivateCloudRouteTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVirtualPrivateCloudRouteTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVirtualPrivateCloudRouteTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateVirtualPrivateCloudRouteTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVirtualPrivateCloudRouteTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVirtualPrivateCloudRouteTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVirtualPrivateCloudRouteTableOK creates a UpdateVirtualPrivateCloudRouteTableOK with default headers values
func NewUpdateVirtualPrivateCloudRouteTableOK() *UpdateVirtualPrivateCloudRouteTableOK {
	return &UpdateVirtualPrivateCloudRouteTableOK{}
}

/* UpdateVirtualPrivateCloudRouteTableOK describes a response with status code 200, with default header values.

UpdateVirtualPrivateCloudRouteTableOK update virtual private cloud route table o k
*/
type UpdateVirtualPrivateCloudRouteTableOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVirtualPrivateCloudRouteTable
}

func (o *UpdateVirtualPrivateCloudRouteTableOK) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud-route-table][%d] updateVirtualPrivateCloudRouteTableOK  %+v", 200, o.Payload)
}
func (o *UpdateVirtualPrivateCloudRouteTableOK) GetPayload() []*models.WithTaskVirtualPrivateCloudRouteTable {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudRouteTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudRouteTableBadRequest creates a UpdateVirtualPrivateCloudRouteTableBadRequest with default headers values
func NewUpdateVirtualPrivateCloudRouteTableBadRequest() *UpdateVirtualPrivateCloudRouteTableBadRequest {
	return &UpdateVirtualPrivateCloudRouteTableBadRequest{}
}

/* UpdateVirtualPrivateCloudRouteTableBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVirtualPrivateCloudRouteTableBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudRouteTableBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud-route-table][%d] updateVirtualPrivateCloudRouteTableBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVirtualPrivateCloudRouteTableBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudRouteTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudRouteTableNotFound creates a UpdateVirtualPrivateCloudRouteTableNotFound with default headers values
func NewUpdateVirtualPrivateCloudRouteTableNotFound() *UpdateVirtualPrivateCloudRouteTableNotFound {
	return &UpdateVirtualPrivateCloudRouteTableNotFound{}
}

/* UpdateVirtualPrivateCloudRouteTableNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVirtualPrivateCloudRouteTableNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudRouteTableNotFound) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud-route-table][%d] updateVirtualPrivateCloudRouteTableNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVirtualPrivateCloudRouteTableNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudRouteTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualPrivateCloudRouteTableInternalServerError creates a UpdateVirtualPrivateCloudRouteTableInternalServerError with default headers values
func NewUpdateVirtualPrivateCloudRouteTableInternalServerError() *UpdateVirtualPrivateCloudRouteTableInternalServerError {
	return &UpdateVirtualPrivateCloudRouteTableInternalServerError{}
}

/* UpdateVirtualPrivateCloudRouteTableInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVirtualPrivateCloudRouteTableInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVirtualPrivateCloudRouteTableInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-virtual-private-cloud-route-table][%d] updateVirtualPrivateCloudRouteTableInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVirtualPrivateCloudRouteTableInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVirtualPrivateCloudRouteTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
