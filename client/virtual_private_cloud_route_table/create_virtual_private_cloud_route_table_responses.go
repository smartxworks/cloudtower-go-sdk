// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud_route_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateVirtualPrivateCloudRouteTableReader is a Reader for the CreateVirtualPrivateCloudRouteTable structure.
type CreateVirtualPrivateCloudRouteTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVirtualPrivateCloudRouteTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVirtualPrivateCloudRouteTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateVirtualPrivateCloudRouteTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateVirtualPrivateCloudRouteTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateVirtualPrivateCloudRouteTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVirtualPrivateCloudRouteTableOK creates a CreateVirtualPrivateCloudRouteTableOK with default headers values
func NewCreateVirtualPrivateCloudRouteTableOK() *CreateVirtualPrivateCloudRouteTableOK {
	return &CreateVirtualPrivateCloudRouteTableOK{}
}

/* CreateVirtualPrivateCloudRouteTableOK describes a response with status code 200, with default header values.

CreateVirtualPrivateCloudRouteTableOK create virtual private cloud route table o k
*/
type CreateVirtualPrivateCloudRouteTableOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVirtualPrivateCloudRouteTable
}

func (o *CreateVirtualPrivateCloudRouteTableOK) Error() string {
	return fmt.Sprintf("[POST /create-virtual-private-cloud-route-table][%d] createVirtualPrivateCloudRouteTableOK  %+v", 200, o.Payload)
}
func (o *CreateVirtualPrivateCloudRouteTableOK) GetPayload() []*models.WithTaskVirtualPrivateCloudRouteTable {
	return o.Payload
}

func (o *CreateVirtualPrivateCloudRouteTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualPrivateCloudRouteTableBadRequest creates a CreateVirtualPrivateCloudRouteTableBadRequest with default headers values
func NewCreateVirtualPrivateCloudRouteTableBadRequest() *CreateVirtualPrivateCloudRouteTableBadRequest {
	return &CreateVirtualPrivateCloudRouteTableBadRequest{}
}

/* CreateVirtualPrivateCloudRouteTableBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateVirtualPrivateCloudRouteTableBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVirtualPrivateCloudRouteTableBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-virtual-private-cloud-route-table][%d] createVirtualPrivateCloudRouteTableBadRequest  %+v", 400, o.Payload)
}
func (o *CreateVirtualPrivateCloudRouteTableBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVirtualPrivateCloudRouteTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualPrivateCloudRouteTableNotFound creates a CreateVirtualPrivateCloudRouteTableNotFound with default headers values
func NewCreateVirtualPrivateCloudRouteTableNotFound() *CreateVirtualPrivateCloudRouteTableNotFound {
	return &CreateVirtualPrivateCloudRouteTableNotFound{}
}

/* CreateVirtualPrivateCloudRouteTableNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateVirtualPrivateCloudRouteTableNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVirtualPrivateCloudRouteTableNotFound) Error() string {
	return fmt.Sprintf("[POST /create-virtual-private-cloud-route-table][%d] createVirtualPrivateCloudRouteTableNotFound  %+v", 404, o.Payload)
}
func (o *CreateVirtualPrivateCloudRouteTableNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVirtualPrivateCloudRouteTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVirtualPrivateCloudRouteTableInternalServerError creates a CreateVirtualPrivateCloudRouteTableInternalServerError with default headers values
func NewCreateVirtualPrivateCloudRouteTableInternalServerError() *CreateVirtualPrivateCloudRouteTableInternalServerError {
	return &CreateVirtualPrivateCloudRouteTableInternalServerError{}
}

/* CreateVirtualPrivateCloudRouteTableInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateVirtualPrivateCloudRouteTableInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVirtualPrivateCloudRouteTableInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-virtual-private-cloud-route-table][%d] createVirtualPrivateCloudRouteTableInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateVirtualPrivateCloudRouteTableInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVirtualPrivateCloudRouteTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
