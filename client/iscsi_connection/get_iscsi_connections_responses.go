// Code generated by go-swagger; DO NOT EDIT.

package iscsi_connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetIscsiConnectionsReader is a Reader for the GetIscsiConnections structure.
type GetIscsiConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIscsiConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIscsiConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetIscsiConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetIscsiConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetIscsiConnectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetIscsiConnectionsOK creates a GetIscsiConnectionsOK with default headers values
func NewGetIscsiConnectionsOK() *GetIscsiConnectionsOK {
	return &GetIscsiConnectionsOK{}
}

/* GetIscsiConnectionsOK describes a response with status code 200, with default header values.

GetIscsiConnectionsOK get iscsi connections o k
*/
type GetIscsiConnectionsOK struct {
	XTowerRequestID string

	Payload []*models.IscsiConnection
}

func (o *GetIscsiConnectionsOK) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-connections][%d] getIscsiConnectionsOK  %+v", 200, o.Payload)
}
func (o *GetIscsiConnectionsOK) GetPayload() []*models.IscsiConnection {
	return o.Payload
}

func (o *GetIscsiConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiConnectionsBadRequest creates a GetIscsiConnectionsBadRequest with default headers values
func NewGetIscsiConnectionsBadRequest() *GetIscsiConnectionsBadRequest {
	return &GetIscsiConnectionsBadRequest{}
}

/* GetIscsiConnectionsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetIscsiConnectionsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-connections][%d] getIscsiConnectionsBadRequest  %+v", 400, o.Payload)
}
func (o *GetIscsiConnectionsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiConnectionsNotFound creates a GetIscsiConnectionsNotFound with default headers values
func NewGetIscsiConnectionsNotFound() *GetIscsiConnectionsNotFound {
	return &GetIscsiConnectionsNotFound{}
}

/* GetIscsiConnectionsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetIscsiConnectionsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiConnectionsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-connections][%d] getIscsiConnectionsNotFound  %+v", 404, o.Payload)
}
func (o *GetIscsiConnectionsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIscsiConnectionsInternalServerError creates a GetIscsiConnectionsInternalServerError with default headers values
func NewGetIscsiConnectionsInternalServerError() *GetIscsiConnectionsInternalServerError {
	return &GetIscsiConnectionsInternalServerError{}
}

/* GetIscsiConnectionsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetIscsiConnectionsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetIscsiConnectionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-iscsi-connections][%d] getIscsiConnectionsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetIscsiConnectionsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetIscsiConnectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
