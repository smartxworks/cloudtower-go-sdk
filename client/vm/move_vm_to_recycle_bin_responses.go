// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// MoveVMToRecycleBinReader is a Reader for the MoveVMToRecycleBin structure.
type MoveVMToRecycleBinReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveVMToRecycleBinReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveVMToRecycleBinOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewMoveVMToRecycleBinBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewMoveVMToRecycleBinNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewMoveVMToRecycleBinInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveVMToRecycleBinOK creates a MoveVMToRecycleBinOK with default headers values
func NewMoveVMToRecycleBinOK() *MoveVMToRecycleBinOK {
	return &MoveVMToRecycleBinOK{}
}

/* MoveVMToRecycleBinOK describes a response with status code 200, with default header values.

MoveVMToRecycleBinOK move Vm to recycle bin o k
*/
type MoveVMToRecycleBinOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskDeleteVM
}

func (o *MoveVMToRecycleBinOK) Error() string {
	return fmt.Sprintf("[POST /move-vm-to-recycle][%d] moveVmToRecycleBinOK  %+v", 200, o.Payload)
}
func (o *MoveVMToRecycleBinOK) GetPayload() []*models.WithTaskDeleteVM {
	return o.Payload
}

func (o *MoveVMToRecycleBinOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveVMToRecycleBinBadRequest creates a MoveVMToRecycleBinBadRequest with default headers values
func NewMoveVMToRecycleBinBadRequest() *MoveVMToRecycleBinBadRequest {
	return &MoveVMToRecycleBinBadRequest{}
}

/* MoveVMToRecycleBinBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type MoveVMToRecycleBinBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MoveVMToRecycleBinBadRequest) Error() string {
	return fmt.Sprintf("[POST /move-vm-to-recycle][%d] moveVmToRecycleBinBadRequest  %+v", 400, o.Payload)
}
func (o *MoveVMToRecycleBinBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MoveVMToRecycleBinBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveVMToRecycleBinNotFound creates a MoveVMToRecycleBinNotFound with default headers values
func NewMoveVMToRecycleBinNotFound() *MoveVMToRecycleBinNotFound {
	return &MoveVMToRecycleBinNotFound{}
}

/* MoveVMToRecycleBinNotFound describes a response with status code 404, with default header values.

Not found
*/
type MoveVMToRecycleBinNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MoveVMToRecycleBinNotFound) Error() string {
	return fmt.Sprintf("[POST /move-vm-to-recycle][%d] moveVmToRecycleBinNotFound  %+v", 404, o.Payload)
}
func (o *MoveVMToRecycleBinNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MoveVMToRecycleBinNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveVMToRecycleBinInternalServerError creates a MoveVMToRecycleBinInternalServerError with default headers values
func NewMoveVMToRecycleBinInternalServerError() *MoveVMToRecycleBinInternalServerError {
	return &MoveVMToRecycleBinInternalServerError{}
}

/* MoveVMToRecycleBinInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type MoveVMToRecycleBinInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *MoveVMToRecycleBinInternalServerError) Error() string {
	return fmt.Sprintf("[POST /move-vm-to-recycle][%d] moveVmToRecycleBinInternalServerError  %+v", 500, o.Payload)
}
func (o *MoveVMToRecycleBinInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *MoveVMToRecycleBinInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
