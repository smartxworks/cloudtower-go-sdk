// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// RebuildVMReader is a Reader for the RebuildVM structure.
type RebuildVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RebuildVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRebuildVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewRebuildVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewRebuildVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewRebuildVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRebuildVMOK creates a RebuildVMOK with default headers values
func NewRebuildVMOK() *RebuildVMOK {
	return &RebuildVMOK{}
}

/* RebuildVMOK describes a response with status code 200, with default header values.

RebuildVMOK rebuild Vm o k
*/
type RebuildVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *RebuildVMOK) Error() string {
	return fmt.Sprintf("[POST /rebuild-vm-from-snapshot][%d] rebuildVmOK  %+v", 200, o.Payload)
}
func (o *RebuildVMOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *RebuildVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRebuildVMBadRequest creates a RebuildVMBadRequest with default headers values
func NewRebuildVMBadRequest() *RebuildVMBadRequest {
	return &RebuildVMBadRequest{}
}

/* RebuildVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RebuildVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RebuildVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /rebuild-vm-from-snapshot][%d] rebuildVmBadRequest  %+v", 400, o.Payload)
}
func (o *RebuildVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RebuildVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRebuildVMNotFound creates a RebuildVMNotFound with default headers values
func NewRebuildVMNotFound() *RebuildVMNotFound {
	return &RebuildVMNotFound{}
}

/* RebuildVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type RebuildVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RebuildVMNotFound) Error() string {
	return fmt.Sprintf("[POST /rebuild-vm-from-snapshot][%d] rebuildVmNotFound  %+v", 404, o.Payload)
}
func (o *RebuildVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RebuildVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRebuildVMInternalServerError creates a RebuildVMInternalServerError with default headers values
func NewRebuildVMInternalServerError() *RebuildVMInternalServerError {
	return &RebuildVMInternalServerError{}
}

/* RebuildVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RebuildVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RebuildVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rebuild-vm-from-snapshot][%d] rebuildVmInternalServerError  %+v", 500, o.Payload)
}
func (o *RebuildVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RebuildVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
