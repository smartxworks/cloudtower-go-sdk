// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// RestartVMReader is a Reader for the RestartVM structure.
type RestartVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestartVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestartVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewRestartVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewRestartVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewRestartVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestartVMOK creates a RestartVMOK with default headers values
func NewRestartVMOK() *RestartVMOK {
	return &RestartVMOK{}
}

/* RestartVMOK describes a response with status code 200, with default header values.

RestartVMOK restart Vm o k
*/
type RestartVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *RestartVMOK) Error() string {
	return fmt.Sprintf("[POST /restart-vm][%d] restartVmOK  %+v", 200, o.Payload)
}
func (o *RestartVMOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *RestartVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestartVMBadRequest creates a RestartVMBadRequest with default headers values
func NewRestartVMBadRequest() *RestartVMBadRequest {
	return &RestartVMBadRequest{}
}

/* RestartVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RestartVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RestartVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /restart-vm][%d] restartVmBadRequest  %+v", 400, o.Payload)
}
func (o *RestartVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RestartVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestartVMNotFound creates a RestartVMNotFound with default headers values
func NewRestartVMNotFound() *RestartVMNotFound {
	return &RestartVMNotFound{}
}

/* RestartVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type RestartVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RestartVMNotFound) Error() string {
	return fmt.Sprintf("[POST /restart-vm][%d] restartVmNotFound  %+v", 404, o.Payload)
}
func (o *RestartVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RestartVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestartVMInternalServerError creates a RestartVMInternalServerError with default headers values
func NewRestartVMInternalServerError() *RestartVMInternalServerError {
	return &RestartVMInternalServerError{}
}

/* RestartVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RestartVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RestartVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /restart-vm][%d] restartVmInternalServerError  %+v", 500, o.Payload)
}
func (o *RestartVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RestartVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
