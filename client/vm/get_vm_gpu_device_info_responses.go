// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMGpuDeviceInfoReader is a Reader for the GetVMGpuDeviceInfo structure.
type GetVMGpuDeviceInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMGpuDeviceInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMGpuDeviceInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMGpuDeviceInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMGpuDeviceInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMGpuDeviceInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMGpuDeviceInfoOK creates a GetVMGpuDeviceInfoOK with default headers values
func NewGetVMGpuDeviceInfoOK() *GetVMGpuDeviceInfoOK {
	return &GetVMGpuDeviceInfoOK{}
}

/* GetVMGpuDeviceInfoOK describes a response with status code 200, with default header values.

GetVMGpuDeviceInfoOK get Vm gpu device info o k
*/
type GetVMGpuDeviceInfoOK struct {
	XTowerRequestID string

	Payload []*models.VMGpuInfo
}

func (o *GetVMGpuDeviceInfoOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-gpu-device-info][%d] getVmGpuDeviceInfoOK  %+v", 200, o.Payload)
}
func (o *GetVMGpuDeviceInfoOK) GetPayload() []*models.VMGpuInfo {
	return o.Payload
}

func (o *GetVMGpuDeviceInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMGpuDeviceInfoBadRequest creates a GetVMGpuDeviceInfoBadRequest with default headers values
func NewGetVMGpuDeviceInfoBadRequest() *GetVMGpuDeviceInfoBadRequest {
	return &GetVMGpuDeviceInfoBadRequest{}
}

/* GetVMGpuDeviceInfoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMGpuDeviceInfoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMGpuDeviceInfoBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-gpu-device-info][%d] getVmGpuDeviceInfoBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMGpuDeviceInfoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMGpuDeviceInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMGpuDeviceInfoNotFound creates a GetVMGpuDeviceInfoNotFound with default headers values
func NewGetVMGpuDeviceInfoNotFound() *GetVMGpuDeviceInfoNotFound {
	return &GetVMGpuDeviceInfoNotFound{}
}

/* GetVMGpuDeviceInfoNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMGpuDeviceInfoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMGpuDeviceInfoNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-gpu-device-info][%d] getVmGpuDeviceInfoNotFound  %+v", 404, o.Payload)
}
func (o *GetVMGpuDeviceInfoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMGpuDeviceInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMGpuDeviceInfoInternalServerError creates a GetVMGpuDeviceInfoInternalServerError with default headers values
func NewGetVMGpuDeviceInfoInternalServerError() *GetVMGpuDeviceInfoInternalServerError {
	return &GetVMGpuDeviceInfoInternalServerError{}
}

/* GetVMGpuDeviceInfoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMGpuDeviceInfoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMGpuDeviceInfoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-gpu-device-info][%d] getVmGpuDeviceInfoInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMGpuDeviceInfoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMGpuDeviceInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
