// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// AddVMGpuDeviceReader is a Reader for the AddVMGpuDevice structure.
type AddVMGpuDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVMGpuDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddVMGpuDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewAddVMGpuDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewAddVMGpuDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewAddVMGpuDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddVMGpuDeviceOK creates a AddVMGpuDeviceOK with default headers values
func NewAddVMGpuDeviceOK() *AddVMGpuDeviceOK {
	return &AddVMGpuDeviceOK{}
}

/* AddVMGpuDeviceOK describes a response with status code 200, with default header values.

AddVMGpuDeviceOK add Vm gpu device o k
*/
type AddVMGpuDeviceOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *AddVMGpuDeviceOK) Error() string {
	return fmt.Sprintf("[POST /add-vm-gpu-device][%d] addVmGpuDeviceOK  %+v", 200, o.Payload)
}
func (o *AddVMGpuDeviceOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *AddVMGpuDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMGpuDeviceBadRequest creates a AddVMGpuDeviceBadRequest with default headers values
func NewAddVMGpuDeviceBadRequest() *AddVMGpuDeviceBadRequest {
	return &AddVMGpuDeviceBadRequest{}
}

/* AddVMGpuDeviceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddVMGpuDeviceBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMGpuDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /add-vm-gpu-device][%d] addVmGpuDeviceBadRequest  %+v", 400, o.Payload)
}
func (o *AddVMGpuDeviceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMGpuDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMGpuDeviceNotFound creates a AddVMGpuDeviceNotFound with default headers values
func NewAddVMGpuDeviceNotFound() *AddVMGpuDeviceNotFound {
	return &AddVMGpuDeviceNotFound{}
}

/* AddVMGpuDeviceNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddVMGpuDeviceNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMGpuDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /add-vm-gpu-device][%d] addVmGpuDeviceNotFound  %+v", 404, o.Payload)
}
func (o *AddVMGpuDeviceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMGpuDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMGpuDeviceInternalServerError creates a AddVMGpuDeviceInternalServerError with default headers values
func NewAddVMGpuDeviceInternalServerError() *AddVMGpuDeviceInternalServerError {
	return &AddVMGpuDeviceInternalServerError{}
}

/* AddVMGpuDeviceInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type AddVMGpuDeviceInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMGpuDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /add-vm-gpu-device][%d] addVmGpuDeviceInternalServerError  %+v", 500, o.Payload)
}
func (o *AddVMGpuDeviceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMGpuDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
