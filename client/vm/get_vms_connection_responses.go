// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVmsConnectionReader is a Reader for the GetVmsConnection structure.
type GetVmsConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVmsConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVmsConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVmsConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVmsConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVmsConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVmsConnectionOK creates a GetVmsConnectionOK with default headers values
func NewGetVmsConnectionOK() *GetVmsConnectionOK {
	return &GetVmsConnectionOK{}
}

/* GetVmsConnectionOK describes a response with status code 200, with default header values.

GetVmsConnectionOK get vms connection o k
*/
type GetVmsConnectionOK struct {
	XTowerRequestID string

	Payload *models.VMConnection
}

func (o *GetVmsConnectionOK) Error() string {
	return fmt.Sprintf("[POST /get-vms-connection][%d] getVmsConnectionOK  %+v", 200, o.Payload)
}
func (o *GetVmsConnectionOK) GetPayload() *models.VMConnection {
	return o.Payload
}

func (o *GetVmsConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VMConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVmsConnectionBadRequest creates a GetVmsConnectionBadRequest with default headers values
func NewGetVmsConnectionBadRequest() *GetVmsConnectionBadRequest {
	return &GetVmsConnectionBadRequest{}
}

/* GetVmsConnectionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVmsConnectionBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVmsConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vms-connection][%d] getVmsConnectionBadRequest  %+v", 400, o.Payload)
}
func (o *GetVmsConnectionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVmsConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVmsConnectionNotFound creates a GetVmsConnectionNotFound with default headers values
func NewGetVmsConnectionNotFound() *GetVmsConnectionNotFound {
	return &GetVmsConnectionNotFound{}
}

/* GetVmsConnectionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVmsConnectionNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVmsConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vms-connection][%d] getVmsConnectionNotFound  %+v", 404, o.Payload)
}
func (o *GetVmsConnectionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVmsConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVmsConnectionInternalServerError creates a GetVmsConnectionInternalServerError with default headers values
func NewGetVmsConnectionInternalServerError() *GetVmsConnectionInternalServerError {
	return &GetVmsConnectionInternalServerError{}
}

/* GetVmsConnectionInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVmsConnectionInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVmsConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vms-connection][%d] getVmsConnectionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVmsConnectionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVmsConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
