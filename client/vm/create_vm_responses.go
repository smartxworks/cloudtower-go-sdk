// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// CreateVMReader is a Reader for the CreateVM structure.
type CreateVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewCreateVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewCreateVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewCreateVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVMOK creates a CreateVMOK with default headers values
func NewCreateVMOK() *CreateVMOK {
	return &CreateVMOK{}
}

/* CreateVMOK describes a response with status code 200, with default header values.

CreateVMOK create Vm o k
*/
type CreateVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *CreateVMOK) Error() string {
	return fmt.Sprintf("[POST /create-vm][%d] createVmOK  %+v", 200, o.Payload)
}
func (o *CreateVMOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *CreateVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMBadRequest creates a CreateVMBadRequest with default headers values
func NewCreateVMBadRequest() *CreateVMBadRequest {
	return &CreateVMBadRequest{}
}

/* CreateVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /create-vm][%d] createVmBadRequest  %+v", 400, o.Payload)
}
func (o *CreateVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMNotFound creates a CreateVMNotFound with default headers values
func NewCreateVMNotFound() *CreateVMNotFound {
	return &CreateVMNotFound{}
}

/* CreateVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMNotFound) Error() string {
	return fmt.Sprintf("[POST /create-vm][%d] createVmNotFound  %+v", 404, o.Payload)
}
func (o *CreateVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVMInternalServerError creates a CreateVMInternalServerError with default headers values
func NewCreateVMInternalServerError() *CreateVMInternalServerError {
	return &CreateVMInternalServerError{}
}

/* CreateVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *CreateVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /create-vm][%d] createVmInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *CreateVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
