// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// AddVMDiskReader is a Reader for the AddVMDisk structure.
type AddVMDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVMDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddVMDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewAddVMDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewAddVMDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewAddVMDiskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddVMDiskOK creates a AddVMDiskOK with default headers values
func NewAddVMDiskOK() *AddVMDiskOK {
	return &AddVMDiskOK{}
}

/* AddVMDiskOK describes a response with status code 200, with default header values.

AddVMDiskOK add Vm disk o k
*/
type AddVMDiskOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *AddVMDiskOK) Error() string {
	return fmt.Sprintf("[POST /add-vm-disk][%d] addVmDiskOK  %+v", 200, o.Payload)
}
func (o *AddVMDiskOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *AddVMDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMDiskBadRequest creates a AddVMDiskBadRequest with default headers values
func NewAddVMDiskBadRequest() *AddVMDiskBadRequest {
	return &AddVMDiskBadRequest{}
}

/* AddVMDiskBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddVMDiskBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /add-vm-disk][%d] addVmDiskBadRequest  %+v", 400, o.Payload)
}
func (o *AddVMDiskBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMDiskNotFound creates a AddVMDiskNotFound with default headers values
func NewAddVMDiskNotFound() *AddVMDiskNotFound {
	return &AddVMDiskNotFound{}
}

/* AddVMDiskNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddVMDiskNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /add-vm-disk][%d] addVmDiskNotFound  %+v", 404, o.Payload)
}
func (o *AddVMDiskNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVMDiskInternalServerError creates a AddVMDiskInternalServerError with default headers values
func NewAddVMDiskInternalServerError() *AddVMDiskInternalServerError {
	return &AddVMDiskInternalServerError{}
}

/* AddVMDiskInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type AddVMDiskInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *AddVMDiskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /add-vm-disk][%d] addVmDiskInternalServerError  %+v", 500, o.Payload)
}
func (o *AddVMDiskInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *AddVMDiskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
