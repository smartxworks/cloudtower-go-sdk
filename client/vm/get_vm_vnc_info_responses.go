// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetVMVncInfoReader is a Reader for the GetVMVncInfo structure.
type GetVMVncInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVMVncInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVMVncInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetVMVncInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetVMVncInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetVMVncInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVMVncInfoOK creates a GetVMVncInfoOK with default headers values
func NewGetVMVncInfoOK() *GetVMVncInfoOK {
	return &GetVMVncInfoOK{}
}

/* GetVMVncInfoOK describes a response with status code 200, with default header values.

GetVMVncInfoOK get Vm vnc info o k
*/
type GetVMVncInfoOK struct {
	XTowerRequestID string

	Payload *models.VMVncInfo
}

func (o *GetVMVncInfoOK) Error() string {
	return fmt.Sprintf("[POST /get-vm-vnc-info][%d] getVmVncInfoOK  %+v", 200, o.Payload)
}
func (o *GetVMVncInfoOK) GetPayload() *models.VMVncInfo {
	return o.Payload
}

func (o *GetVMVncInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.VMVncInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVncInfoBadRequest creates a GetVMVncInfoBadRequest with default headers values
func NewGetVMVncInfoBadRequest() *GetVMVncInfoBadRequest {
	return &GetVMVncInfoBadRequest{}
}

/* GetVMVncInfoBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVMVncInfoBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVncInfoBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-vm-vnc-info][%d] getVmVncInfoBadRequest  %+v", 400, o.Payload)
}
func (o *GetVMVncInfoBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVncInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVncInfoNotFound creates a GetVMVncInfoNotFound with default headers values
func NewGetVMVncInfoNotFound() *GetVMVncInfoNotFound {
	return &GetVMVncInfoNotFound{}
}

/* GetVMVncInfoNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVMVncInfoNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVncInfoNotFound) Error() string {
	return fmt.Sprintf("[POST /get-vm-vnc-info][%d] getVmVncInfoNotFound  %+v", 404, o.Payload)
}
func (o *GetVMVncInfoNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVncInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVMVncInfoInternalServerError creates a GetVMVncInfoInternalServerError with default headers values
func NewGetVMVncInfoInternalServerError() *GetVMVncInfoInternalServerError {
	return &GetVMVncInfoInternalServerError{}
}

/* GetVMVncInfoInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetVMVncInfoInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetVMVncInfoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-vm-vnc-info][%d] getVmVncInfoInternalServerError  %+v", 500, o.Payload)
}
func (o *GetVMVncInfoInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetVMVncInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
