// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// ExportVMReader is a Reader for the ExportVM structure.
type ExportVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 304:
		result := NewExportVMNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 400:
		result := NewExportVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewExportVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewExportVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportVMOK creates a ExportVMOK with default headers values
func NewExportVMOK() *ExportVMOK {
	return &ExportVMOK{}
}

/* ExportVMOK describes a response with status code 200, with default header values.

ExportVMOK export Vm o k
*/
type ExportVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMExportFile
}

func (o *ExportVMOK) Error() string {
	return fmt.Sprintf("[POST /export-vm][%d] exportVmOK  %+v", 200, o.Payload)
}
func (o *ExportVMOK) GetPayload() []*models.WithTaskVMExportFile {
	return o.Payload
}

func (o *ExportVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMNotModified creates a ExportVMNotModified with default headers values
func NewExportVMNotModified() *ExportVMNotModified {
	return &ExportVMNotModified{}
}

/* ExportVMNotModified describes a response with status code 304, with default header values.

Not modified
*/
type ExportVMNotModified struct {
}

func (o *ExportVMNotModified) Error() string {
	return fmt.Sprintf("[POST /export-vm][%d] exportVmNotModified ", 304)
}

func (o *ExportVMNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportVMBadRequest creates a ExportVMBadRequest with default headers values
func NewExportVMBadRequest() *ExportVMBadRequest {
	return &ExportVMBadRequest{}
}

/* ExportVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ExportVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /export-vm][%d] exportVmBadRequest  %+v", 400, o.Payload)
}
func (o *ExportVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMNotFound creates a ExportVMNotFound with default headers values
func NewExportVMNotFound() *ExportVMNotFound {
	return &ExportVMNotFound{}
}

/* ExportVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type ExportVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMNotFound) Error() string {
	return fmt.Sprintf("[POST /export-vm][%d] exportVmNotFound  %+v", 404, o.Payload)
}
func (o *ExportVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportVMInternalServerError creates a ExportVMInternalServerError with default headers values
func NewExportVMInternalServerError() *ExportVMInternalServerError {
	return &ExportVMInternalServerError{}
}

/* ExportVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ExportVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *ExportVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /export-vm][%d] exportVmInternalServerError  %+v", 500, o.Payload)
}
func (o *ExportVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *ExportVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
