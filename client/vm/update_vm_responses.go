// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVMReader is a Reader for the UpdateVM structure.
type UpdateVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVMOK creates a UpdateVMOK with default headers values
func NewUpdateVMOK() *UpdateVMOK {
	return &UpdateVMOK{}
}

/* UpdateVMOK describes a response with status code 200, with default header values.

UpdateVMOK update Vm o k
*/
type UpdateVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *UpdateVMOK) Error() string {
	return fmt.Sprintf("[POST /update-vm-basic-info][%d] updateVmOK  %+v", 200, o.Payload)
}
func (o *UpdateVMOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *UpdateVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMBadRequest creates a UpdateVMBadRequest with default headers values
func NewUpdateVMBadRequest() *UpdateVMBadRequest {
	return &UpdateVMBadRequest{}
}

/* UpdateVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-vm-basic-info][%d] updateVmBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMNotFound creates a UpdateVMNotFound with default headers values
func NewUpdateVMNotFound() *UpdateVMNotFound {
	return &UpdateVMNotFound{}
}

/* UpdateVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMNotFound) Error() string {
	return fmt.Sprintf("[POST /update-vm-basic-info][%d] updateVmNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMInternalServerError creates a UpdateVMInternalServerError with default headers values
func NewUpdateVMInternalServerError() *UpdateVMInternalServerError {
	return &UpdateVMInternalServerError{}
}

/* UpdateVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-vm-basic-info][%d] updateVmInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
