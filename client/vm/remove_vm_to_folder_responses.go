// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// RemoveVMToFolderReader is a Reader for the RemoveVMToFolder structure.
type RemoveVMToFolderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVMToFolderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveVMToFolderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewRemoveVMToFolderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewRemoveVMToFolderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewRemoveVMToFolderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveVMToFolderOK creates a RemoveVMToFolderOK with default headers values
func NewRemoveVMToFolderOK() *RemoveVMToFolderOK {
	return &RemoveVMToFolderOK{}
}

/* RemoveVMToFolderOK describes a response with status code 200, with default header values.

RemoveVMToFolderOK remove Vm to folder o k
*/
type RemoveVMToFolderOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *RemoveVMToFolderOK) Error() string {
	return fmt.Sprintf("[POST /remove-vm-from-folder][%d] removeVmToFolderOK  %+v", 200, o.Payload)
}
func (o *RemoveVMToFolderOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *RemoveVMToFolderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMToFolderBadRequest creates a RemoveVMToFolderBadRequest with default headers values
func NewRemoveVMToFolderBadRequest() *RemoveVMToFolderBadRequest {
	return &RemoveVMToFolderBadRequest{}
}

/* RemoveVMToFolderBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RemoveVMToFolderBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMToFolderBadRequest) Error() string {
	return fmt.Sprintf("[POST /remove-vm-from-folder][%d] removeVmToFolderBadRequest  %+v", 400, o.Payload)
}
func (o *RemoveVMToFolderBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMToFolderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMToFolderNotFound creates a RemoveVMToFolderNotFound with default headers values
func NewRemoveVMToFolderNotFound() *RemoveVMToFolderNotFound {
	return &RemoveVMToFolderNotFound{}
}

/* RemoveVMToFolderNotFound describes a response with status code 404, with default header values.

Not found
*/
type RemoveVMToFolderNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMToFolderNotFound) Error() string {
	return fmt.Sprintf("[POST /remove-vm-from-folder][%d] removeVmToFolderNotFound  %+v", 404, o.Payload)
}
func (o *RemoveVMToFolderNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMToFolderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMToFolderInternalServerError creates a RemoveVMToFolderInternalServerError with default headers values
func NewRemoveVMToFolderInternalServerError() *RemoveVMToFolderInternalServerError {
	return &RemoveVMToFolderInternalServerError{}
}

/* RemoveVMToFolderInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RemoveVMToFolderInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMToFolderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /remove-vm-from-folder][%d] removeVmToFolderInternalServerError  %+v", 500, o.Payload)
}
func (o *RemoveVMToFolderInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMToFolderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
