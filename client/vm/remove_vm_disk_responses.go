// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// RemoveVMDiskReader is a Reader for the RemoveVMDisk structure.
type RemoveVMDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVMDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveVMDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewRemoveVMDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewRemoveVMDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewRemoveVMDiskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveVMDiskOK creates a RemoveVMDiskOK with default headers values
func NewRemoveVMDiskOK() *RemoveVMDiskOK {
	return &RemoveVMDiskOK{}
}

/* RemoveVMDiskOK describes a response with status code 200, with default header values.

RemoveVMDiskOK remove Vm disk o k
*/
type RemoveVMDiskOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *RemoveVMDiskOK) Error() string {
	return fmt.Sprintf("[POST /remove-vm-disk][%d] removeVmDiskOK  %+v", 200, o.Payload)
}
func (o *RemoveVMDiskOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *RemoveVMDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMDiskBadRequest creates a RemoveVMDiskBadRequest with default headers values
func NewRemoveVMDiskBadRequest() *RemoveVMDiskBadRequest {
	return &RemoveVMDiskBadRequest{}
}

/* RemoveVMDiskBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RemoveVMDiskBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /remove-vm-disk][%d] removeVmDiskBadRequest  %+v", 400, o.Payload)
}
func (o *RemoveVMDiskBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMDiskNotFound creates a RemoveVMDiskNotFound with default headers values
func NewRemoveVMDiskNotFound() *RemoveVMDiskNotFound {
	return &RemoveVMDiskNotFound{}
}

/* RemoveVMDiskNotFound describes a response with status code 404, with default header values.

Not found
*/
type RemoveVMDiskNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /remove-vm-disk][%d] removeVmDiskNotFound  %+v", 404, o.Payload)
}
func (o *RemoveVMDiskNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMDiskInternalServerError creates a RemoveVMDiskInternalServerError with default headers values
func NewRemoveVMDiskInternalServerError() *RemoveVMDiskInternalServerError {
	return &RemoveVMDiskInternalServerError{}
}

/* RemoveVMDiskInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RemoveVMDiskInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMDiskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /remove-vm-disk][%d] removeVmDiskInternalServerError  %+v", 500, o.Payload)
}
func (o *RemoveVMDiskInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMDiskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
