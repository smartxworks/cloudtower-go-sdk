// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// EjectIsoFromVMCdRomReader is a Reader for the EjectIsoFromVMCdRom structure.
type EjectIsoFromVMCdRomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EjectIsoFromVMCdRomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEjectIsoFromVMCdRomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewEjectIsoFromVMCdRomBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewEjectIsoFromVMCdRomNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewEjectIsoFromVMCdRomInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEjectIsoFromVMCdRomOK creates a EjectIsoFromVMCdRomOK with default headers values
func NewEjectIsoFromVMCdRomOK() *EjectIsoFromVMCdRomOK {
	return &EjectIsoFromVMCdRomOK{}
}

/* EjectIsoFromVMCdRomOK describes a response with status code 200, with default header values.

EjectIsoFromVMCdRomOK eject iso from Vm cd rom o k
*/
type EjectIsoFromVMCdRomOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *EjectIsoFromVMCdRomOK) Error() string {
	return fmt.Sprintf("[POST /eject-iso-from-vm-cd-rom][%d] ejectIsoFromVmCdRomOK  %+v", 200, o.Payload)
}
func (o *EjectIsoFromVMCdRomOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *EjectIsoFromVMCdRomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEjectIsoFromVMCdRomBadRequest creates a EjectIsoFromVMCdRomBadRequest with default headers values
func NewEjectIsoFromVMCdRomBadRequest() *EjectIsoFromVMCdRomBadRequest {
	return &EjectIsoFromVMCdRomBadRequest{}
}

/* EjectIsoFromVMCdRomBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type EjectIsoFromVMCdRomBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *EjectIsoFromVMCdRomBadRequest) Error() string {
	return fmt.Sprintf("[POST /eject-iso-from-vm-cd-rom][%d] ejectIsoFromVmCdRomBadRequest  %+v", 400, o.Payload)
}
func (o *EjectIsoFromVMCdRomBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *EjectIsoFromVMCdRomBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEjectIsoFromVMCdRomNotFound creates a EjectIsoFromVMCdRomNotFound with default headers values
func NewEjectIsoFromVMCdRomNotFound() *EjectIsoFromVMCdRomNotFound {
	return &EjectIsoFromVMCdRomNotFound{}
}

/* EjectIsoFromVMCdRomNotFound describes a response with status code 404, with default header values.

Not found
*/
type EjectIsoFromVMCdRomNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *EjectIsoFromVMCdRomNotFound) Error() string {
	return fmt.Sprintf("[POST /eject-iso-from-vm-cd-rom][%d] ejectIsoFromVmCdRomNotFound  %+v", 404, o.Payload)
}
func (o *EjectIsoFromVMCdRomNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *EjectIsoFromVMCdRomNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEjectIsoFromVMCdRomInternalServerError creates a EjectIsoFromVMCdRomInternalServerError with default headers values
func NewEjectIsoFromVMCdRomInternalServerError() *EjectIsoFromVMCdRomInternalServerError {
	return &EjectIsoFromVMCdRomInternalServerError{}
}

/* EjectIsoFromVMCdRomInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type EjectIsoFromVMCdRomInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *EjectIsoFromVMCdRomInternalServerError) Error() string {
	return fmt.Sprintf("[POST /eject-iso-from-vm-cd-rom][%d] ejectIsoFromVmCdRomInternalServerError  %+v", 500, o.Payload)
}
func (o *EjectIsoFromVMCdRomInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *EjectIsoFromVMCdRomInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
