// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// RemoveVMGpuDeviceReader is a Reader for the RemoveVMGpuDevice structure.
type RemoveVMGpuDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVMGpuDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveVMGpuDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewRemoveVMGpuDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewRemoveVMGpuDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewRemoveVMGpuDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveVMGpuDeviceOK creates a RemoveVMGpuDeviceOK with default headers values
func NewRemoveVMGpuDeviceOK() *RemoveVMGpuDeviceOK {
	return &RemoveVMGpuDeviceOK{}
}

/* RemoveVMGpuDeviceOK describes a response with status code 200, with default header values.

RemoveVMGpuDeviceOK remove Vm gpu device o k
*/
type RemoveVMGpuDeviceOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *RemoveVMGpuDeviceOK) Error() string {
	return fmt.Sprintf("[POST /remove-vm-gpu-device][%d] removeVmGpuDeviceOK  %+v", 200, o.Payload)
}
func (o *RemoveVMGpuDeviceOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *RemoveVMGpuDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMGpuDeviceBadRequest creates a RemoveVMGpuDeviceBadRequest with default headers values
func NewRemoveVMGpuDeviceBadRequest() *RemoveVMGpuDeviceBadRequest {
	return &RemoveVMGpuDeviceBadRequest{}
}

/* RemoveVMGpuDeviceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RemoveVMGpuDeviceBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMGpuDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /remove-vm-gpu-device][%d] removeVmGpuDeviceBadRequest  %+v", 400, o.Payload)
}
func (o *RemoveVMGpuDeviceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMGpuDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMGpuDeviceNotFound creates a RemoveVMGpuDeviceNotFound with default headers values
func NewRemoveVMGpuDeviceNotFound() *RemoveVMGpuDeviceNotFound {
	return &RemoveVMGpuDeviceNotFound{}
}

/* RemoveVMGpuDeviceNotFound describes a response with status code 404, with default header values.

Not found
*/
type RemoveVMGpuDeviceNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMGpuDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /remove-vm-gpu-device][%d] removeVmGpuDeviceNotFound  %+v", 404, o.Payload)
}
func (o *RemoveVMGpuDeviceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMGpuDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVMGpuDeviceInternalServerError creates a RemoveVMGpuDeviceInternalServerError with default headers values
func NewRemoveVMGpuDeviceInternalServerError() *RemoveVMGpuDeviceInternalServerError {
	return &RemoveVMGpuDeviceInternalServerError{}
}

/* RemoveVMGpuDeviceInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type RemoveVMGpuDeviceInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *RemoveVMGpuDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /remove-vm-gpu-device][%d] removeVmGpuDeviceInternalServerError  %+v", 500, o.Payload)
}
func (o *RemoveVMGpuDeviceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *RemoveVMGpuDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
