// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// PoweroffVMReader is a Reader for the PoweroffVM structure.
type PoweroffVMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PoweroffVMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPoweroffVMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewPoweroffVMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewPoweroffVMNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewPoweroffVMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPoweroffVMOK creates a PoweroffVMOK with default headers values
func NewPoweroffVMOK() *PoweroffVMOK {
	return &PoweroffVMOK{}
}

/* PoweroffVMOK describes a response with status code 200, with default header values.

PoweroffVMOK poweroff Vm o k
*/
type PoweroffVMOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVM
}

func (o *PoweroffVMOK) Error() string {
	return fmt.Sprintf("[POST /poweroff-vm][%d] poweroffVmOK  %+v", 200, o.Payload)
}
func (o *PoweroffVMOK) GetPayload() []*models.WithTaskVM {
	return o.Payload
}

func (o *PoweroffVMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPoweroffVMBadRequest creates a PoweroffVMBadRequest with default headers values
func NewPoweroffVMBadRequest() *PoweroffVMBadRequest {
	return &PoweroffVMBadRequest{}
}

/* PoweroffVMBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PoweroffVMBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PoweroffVMBadRequest) Error() string {
	return fmt.Sprintf("[POST /poweroff-vm][%d] poweroffVmBadRequest  %+v", 400, o.Payload)
}
func (o *PoweroffVMBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PoweroffVMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPoweroffVMNotFound creates a PoweroffVMNotFound with default headers values
func NewPoweroffVMNotFound() *PoweroffVMNotFound {
	return &PoweroffVMNotFound{}
}

/* PoweroffVMNotFound describes a response with status code 404, with default header values.

Not found
*/
type PoweroffVMNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PoweroffVMNotFound) Error() string {
	return fmt.Sprintf("[POST /poweroff-vm][%d] poweroffVmNotFound  %+v", 404, o.Payload)
}
func (o *PoweroffVMNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PoweroffVMNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPoweroffVMInternalServerError creates a PoweroffVMInternalServerError with default headers values
func NewPoweroffVMInternalServerError() *PoweroffVMInternalServerError {
	return &PoweroffVMInternalServerError{}
}

/* PoweroffVMInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PoweroffVMInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *PoweroffVMInternalServerError) Error() string {
	return fmt.Sprintf("[POST /poweroff-vm][%d] poweroffVmInternalServerError  %+v", 500, o.Payload)
}
func (o *PoweroffVMInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PoweroffVMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
