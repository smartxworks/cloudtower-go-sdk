// Code generated by go-swagger; DO NOT EDIT.

package replica_vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetReplicaVmsReader is a Reader for the GetReplicaVms structure.
type GetReplicaVmsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReplicaVmsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReplicaVmsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetReplicaVmsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetReplicaVmsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetReplicaVmsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetReplicaVmsOK creates a GetReplicaVmsOK with default headers values
func NewGetReplicaVmsOK() *GetReplicaVmsOK {
	return &GetReplicaVmsOK{}
}

/* GetReplicaVmsOK describes a response with status code 200, with default header values.

GetReplicaVmsOK get replica vms o k
*/
type GetReplicaVmsOK struct {
	XTowerRequestID string

	Payload []*models.ReplicaVM
}

func (o *GetReplicaVmsOK) Error() string {
	return fmt.Sprintf("[POST /get-replica-vms][%d] getReplicaVmsOK  %+v", 200, o.Payload)
}
func (o *GetReplicaVmsOK) GetPayload() []*models.ReplicaVM {
	return o.Payload
}

func (o *GetReplicaVmsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReplicaVmsBadRequest creates a GetReplicaVmsBadRequest with default headers values
func NewGetReplicaVmsBadRequest() *GetReplicaVmsBadRequest {
	return &GetReplicaVmsBadRequest{}
}

/* GetReplicaVmsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetReplicaVmsBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetReplicaVmsBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-replica-vms][%d] getReplicaVmsBadRequest  %+v", 400, o.Payload)
}
func (o *GetReplicaVmsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetReplicaVmsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReplicaVmsNotFound creates a GetReplicaVmsNotFound with default headers values
func NewGetReplicaVmsNotFound() *GetReplicaVmsNotFound {
	return &GetReplicaVmsNotFound{}
}

/* GetReplicaVmsNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetReplicaVmsNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetReplicaVmsNotFound) Error() string {
	return fmt.Sprintf("[POST /get-replica-vms][%d] getReplicaVmsNotFound  %+v", 404, o.Payload)
}
func (o *GetReplicaVmsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetReplicaVmsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReplicaVmsInternalServerError creates a GetReplicaVmsInternalServerError with default headers values
func NewGetReplicaVmsInternalServerError() *GetReplicaVmsInternalServerError {
	return &GetReplicaVmsInternalServerError{}
}

/* GetReplicaVmsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetReplicaVmsInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetReplicaVmsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-replica-vms][%d] getReplicaVmsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetReplicaVmsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetReplicaVmsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
