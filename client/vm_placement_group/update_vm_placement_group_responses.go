// Code generated by go-swagger; DO NOT EDIT.

package vm_placement_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// UpdateVMPlacementGroupReader is a Reader for the UpdateVMPlacementGroup structure.
type UpdateVMPlacementGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVMPlacementGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVMPlacementGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewUpdateVMPlacementGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewUpdateVMPlacementGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewUpdateVMPlacementGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVMPlacementGroupOK creates a UpdateVMPlacementGroupOK with default headers values
func NewUpdateVMPlacementGroupOK() *UpdateVMPlacementGroupOK {
	return &UpdateVMPlacementGroupOK{}
}

/* UpdateVMPlacementGroupOK describes a response with status code 200, with default header values.

UpdateVMPlacementGroupOK update Vm placement group o k
*/
type UpdateVMPlacementGroupOK struct {
	XTowerRequestID string

	Payload []*models.WithTaskVMPlacementGroup
}

func (o *UpdateVMPlacementGroupOK) Error() string {
	return fmt.Sprintf("[POST /update-vm-placement-group][%d] updateVmPlacementGroupOK  %+v", 200, o.Payload)
}
func (o *UpdateVMPlacementGroupOK) GetPayload() []*models.WithTaskVMPlacementGroup {
	return o.Payload
}

func (o *UpdateVMPlacementGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMPlacementGroupBadRequest creates a UpdateVMPlacementGroupBadRequest with default headers values
func NewUpdateVMPlacementGroupBadRequest() *UpdateVMPlacementGroupBadRequest {
	return &UpdateVMPlacementGroupBadRequest{}
}

/* UpdateVMPlacementGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateVMPlacementGroupBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMPlacementGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /update-vm-placement-group][%d] updateVmPlacementGroupBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVMPlacementGroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMPlacementGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMPlacementGroupNotFound creates a UpdateVMPlacementGroupNotFound with default headers values
func NewUpdateVMPlacementGroupNotFound() *UpdateVMPlacementGroupNotFound {
	return &UpdateVMPlacementGroupNotFound{}
}

/* UpdateVMPlacementGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateVMPlacementGroupNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMPlacementGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /update-vm-placement-group][%d] updateVmPlacementGroupNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVMPlacementGroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMPlacementGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVMPlacementGroupInternalServerError creates a UpdateVMPlacementGroupInternalServerError with default headers values
func NewUpdateVMPlacementGroupInternalServerError() *UpdateVMPlacementGroupInternalServerError {
	return &UpdateVMPlacementGroupInternalServerError{}
}

/* UpdateVMPlacementGroupInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateVMPlacementGroupInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *UpdateVMPlacementGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /update-vm-placement-group][%d] updateVmPlacementGroupInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVMPlacementGroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *UpdateVMPlacementGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
