// Code generated by go-swagger; DO NOT EDIT.

package node_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/smartxworks/cloudtower-go-sdk/v2/models"
)

// GetNodeTopoesReader is a Reader for the GetNodeTopoes structure.
type GetNodeTopoesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeTopoesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeTopoesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return result, nil
	case 400:
		result := NewGetNodeTopoesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 404:
		result := NewGetNodeTopoesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	case 500:
		result := NewGetNodeTopoesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, models.NewUnexpectedError(response, err)
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNodeTopoesOK creates a GetNodeTopoesOK with default headers values
func NewGetNodeTopoesOK() *GetNodeTopoesOK {
	return &GetNodeTopoesOK{}
}

/* GetNodeTopoesOK describes a response with status code 200, with default header values.

GetNodeTopoesOK get node topoes o k
*/
type GetNodeTopoesOK struct {
	XTowerRequestID string

	Payload []*models.NodeTopo
}

func (o *GetNodeTopoesOK) Error() string {
	return fmt.Sprintf("[POST /get-node-topoes][%d] getNodeTopoesOK  %+v", 200, o.Payload)
}
func (o *GetNodeTopoesOK) GetPayload() []*models.NodeTopo {
	return o.Payload
}

func (o *GetNodeTopoesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeTopoesBadRequest creates a GetNodeTopoesBadRequest with default headers values
func NewGetNodeTopoesBadRequest() *GetNodeTopoesBadRequest {
	return &GetNodeTopoesBadRequest{}
}

/* GetNodeTopoesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNodeTopoesBadRequest struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNodeTopoesBadRequest) Error() string {
	return fmt.Sprintf("[POST /get-node-topoes][%d] getNodeTopoesBadRequest  %+v", 400, o.Payload)
}
func (o *GetNodeTopoesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNodeTopoesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeTopoesNotFound creates a GetNodeTopoesNotFound with default headers values
func NewGetNodeTopoesNotFound() *GetNodeTopoesNotFound {
	return &GetNodeTopoesNotFound{}
}

/* GetNodeTopoesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetNodeTopoesNotFound struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNodeTopoesNotFound) Error() string {
	return fmt.Sprintf("[POST /get-node-topoes][%d] getNodeTopoesNotFound  %+v", 404, o.Payload)
}
func (o *GetNodeTopoesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNodeTopoesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeTopoesInternalServerError creates a GetNodeTopoesInternalServerError with default headers values
func NewGetNodeTopoesInternalServerError() *GetNodeTopoesInternalServerError {
	return &GetNodeTopoesInternalServerError{}
}

/* GetNodeTopoesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetNodeTopoesInternalServerError struct {
	XTowerRequestID string

	Payload *models.ErrorBody
}

func (o *GetNodeTopoesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /get-node-topoes][%d] getNodeTopoesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetNodeTopoesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetNodeTopoesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-tower-request-id
	hdrXTowerRequestID := response.GetHeader("x-tower-request-id")

	if hdrXTowerRequestID != "" {
		o.XTowerRequestID = hdrXTowerRequestID
	}

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
