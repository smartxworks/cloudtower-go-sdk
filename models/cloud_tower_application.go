// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudTowerApplication cloud tower application
//
// swagger:model CloudTowerApplication
type CloudTowerApplication struct {

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// instance statuses
	// Required: true
	InstanceStatuses interface{} `json:"instanceStatuses"`

	// name
	// Required: true
	Name *string `json:"name"`

	// package
	Package *NestedCloudTowerApplicationPackage `json:"package,omitempty"`

	// placement situation
	PlacementSituation *string `json:"placementSituation,omitempty"`

	// placement verb
	PlacementVerb *string `json:"placementVerb,omitempty"`

	// resource version
	// Required: true
	ResourceVersion *int32 `json:"resourceVersion"`

	// state
	State *CloudTowerApplicationState `json:"state,omitempty"`

	// target package
	// Required: true
	TargetPackage *string `json:"targetPackage"`

	// user
	User *NestedUser `json:"user,omitempty"`

	// vm spec
	// Required: true
	VMSpec interface{} `json:"vmSpec"`

	MarshalOpts *CloudTowerApplicationMarshalOpts `json:"-"`
}

type CloudTowerApplicationMarshalOpts struct {
	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Package_Explicit_Null_When_Empty bool

	PlacementSituation_Explicit_Null_When_Empty bool

	PlacementVerb_Explicit_Null_When_Empty bool

	ResourceVersion_Explicit_Null_When_Empty bool

	State_Explicit_Null_When_Empty bool

	TargetPackage_Explicit_Null_When_Empty bool

	User_Explicit_Null_When_Empty bool
}

func (m CloudTowerApplication) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle non nullable field instanceStatuses with omitempty
	if !swag.IsZero(m.InstanceStatuses) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"instanceStatuses\":")
		bytes, err := swag.WriteJSON(m.InstanceStatuses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field package
	if m.Package != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"package\":")
		bytes, err := swag.WriteJSON(m.Package)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Package_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"package\":null")
		first = false
	}

	// handle nullable field placementSituation
	if m.PlacementSituation != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placementSituation\":")
		bytes, err := swag.WriteJSON(m.PlacementSituation)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PlacementSituation_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placementSituation\":null")
		first = false
	}

	// handle nullable field placementVerb
	if m.PlacementVerb != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placementVerb\":")
		bytes, err := swag.WriteJSON(m.PlacementVerb)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PlacementVerb_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placementVerb\":null")
		first = false
	}

	// handle nullable field resourceVersion
	if m.ResourceVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resourceVersion\":")
		bytes, err := swag.WriteJSON(m.ResourceVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resourceVersion\":null")
		first = false
	}

	// handle nullable field state
	if m.State != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":")
		bytes, err := swag.WriteJSON(m.State)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.State_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":null")
		first = false
	}

	// handle nullable field targetPackage
	if m.TargetPackage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targetPackage\":")
		bytes, err := swag.WriteJSON(m.TargetPackage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetPackage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targetPackage\":null")
		first = false
	}

	// handle nullable field user
	if m.User != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user\":")
		bytes, err := swag.WriteJSON(m.User)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.User_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user\":null")
		first = false
	}

	// handle non nullable field vmSpec with omitempty
	if !swag.IsZero(m.VMSpec) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmSpec\":")
		bytes, err := swag.WriteJSON(m.VMSpec)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cloud tower application
func (m *CloudTowerApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplication) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplication) validateInstanceStatuses(formats strfmt.Registry) error {

	if m.InstanceStatuses == nil {
		return errors.Required("instanceStatuses", "body", nil)
	}

	return nil
}

func (m *CloudTowerApplication) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplication) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) validateResourceVersion(formats strfmt.Registry) error {

	if err := validate.Required("resourceVersion", "body", m.ResourceVersion); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplication) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) validateTargetPackage(formats strfmt.Registry) error {

	if err := validate.Required("targetPackage", "body", m.TargetPackage); err != nil {
		return err
	}

	return nil
}

func (m *CloudTowerApplication) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) validateVMSpec(formats strfmt.Registry) error {

	if m.VMSpec == nil {
		return errors.Required("vmSpec", "body", nil)
	}

	return nil
}

// ContextValidate validate this cloud tower application based on the context it is used
func (m *CloudTowerApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTowerApplication) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {
		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTowerApplication) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudTowerApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudTowerApplication) UnmarshalBinary(b []byte) error {
	var res CloudTowerApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
