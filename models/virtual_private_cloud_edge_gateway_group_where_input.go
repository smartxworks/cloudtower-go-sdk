// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudEdgeGatewayGroupWhereInput virtual private cloud edge gateway group where input
//
// swagger:model VirtualPrivateCloudEdgeGatewayGroupWhereInput
type VirtualPrivateCloudEdgeGatewayGroupWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"OR,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// edge gateways every
	EdgeGatewaysEvery *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_every,omitempty"`

	// edge gateways none
	EdgeGatewaysNone *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_none,omitempty"`

	// edge gateways some
	EdgeGatewaysSome *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_some,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// external subnet groups every
	ExternalSubnetGroupsEvery *VirtualPrivateCloudExternalSubnetGroupWhereInput `json:"external_subnet_groups_every,omitempty"`

	// external subnet groups none
	ExternalSubnetGroupsNone *VirtualPrivateCloudExternalSubnetGroupWhereInput `json:"external_subnet_groups_none,omitempty"`

	// external subnet groups some
	ExternalSubnetGroupsSome *VirtualPrivateCloudExternalSubnetGroupWhereInput `json:"external_subnet_groups_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// primary edge gateway id
	PrimaryEdgeGatewayID *string `json:"primary_edge_gateway_id,omitempty"`

	// primary edge gateway id contains
	PrimaryEdgeGatewayIDContains *string `json:"primary_edge_gateway_id_contains,omitempty"`

	// primary edge gateway id ends with
	PrimaryEdgeGatewayIDEndsWith *string `json:"primary_edge_gateway_id_ends_with,omitempty"`

	// primary edge gateway id gt
	PrimaryEdgeGatewayIDGt *string `json:"primary_edge_gateway_id_gt,omitempty"`

	// primary edge gateway id gte
	PrimaryEdgeGatewayIDGte *string `json:"primary_edge_gateway_id_gte,omitempty"`

	// primary edge gateway id in
	PrimaryEdgeGatewayIDIn []string `json:"primary_edge_gateway_id_in,omitempty"`

	// primary edge gateway id lt
	PrimaryEdgeGatewayIDLt *string `json:"primary_edge_gateway_id_lt,omitempty"`

	// primary edge gateway id lte
	PrimaryEdgeGatewayIDLte *string `json:"primary_edge_gateway_id_lte,omitempty"`

	// primary edge gateway id not
	PrimaryEdgeGatewayIDNot *string `json:"primary_edge_gateway_id_not,omitempty"`

	// primary edge gateway id not contains
	PrimaryEdgeGatewayIDNotContains *string `json:"primary_edge_gateway_id_not_contains,omitempty"`

	// primary edge gateway id not ends with
	PrimaryEdgeGatewayIDNotEndsWith *string `json:"primary_edge_gateway_id_not_ends_with,omitempty"`

	// primary edge gateway id not in
	PrimaryEdgeGatewayIDNotIn []string `json:"primary_edge_gateway_id_not_in,omitempty"`

	// primary edge gateway id not starts with
	PrimaryEdgeGatewayIDNotStartsWith *string `json:"primary_edge_gateway_id_not_starts_with,omitempty"`

	// primary edge gateway id starts with
	PrimaryEdgeGatewayIDStartsWith *string `json:"primary_edge_gateway_id_starts_with,omitempty"`

	// vpc service
	VpcService *VirtualPrivateCloudServiceWhereInput `json:"vpc_service,omitempty"`
}

// Validate validates this virtual private cloud edge gateway group where input
func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEdgeGatewaysEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysEvery) { // not required
		return nil
	}

	if m.EdgeGatewaysEvery != nil {
		if err := m.EdgeGatewaysEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEdgeGatewaysNone(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysNone) { // not required
		return nil
	}

	if m.EdgeGatewaysNone != nil {
		if err := m.EdgeGatewaysNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEdgeGatewaysSome(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysSome) { // not required
		return nil
	}

	if m.EdgeGatewaysSome != nil {
		if err := m.EdgeGatewaysSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateExternalSubnetGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetGroupsEvery) { // not required
		return nil
	}

	if m.ExternalSubnetGroupsEvery != nil {
		if err := m.ExternalSubnetGroupsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateExternalSubnetGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetGroupsNone) { // not required
		return nil
	}

	if m.ExternalSubnetGroupsNone != nil {
		if err := m.ExternalSubnetGroupsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateExternalSubnetGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetGroupsSome) { // not required
		return nil
	}

	if m.ExternalSubnetGroupsSome != nil {
		if err := m.ExternalSubnetGroupsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) validateVpcService(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcService) { // not required
		return nil
	}

	if m.VpcService != nil {
		if err := m.VpcService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud edge gateway group where input based on the context it is used
func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEdgeGatewaysEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysEvery != nil {
		if err := m.EdgeGatewaysEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEdgeGatewaysNone(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysNone != nil {
		if err := m.EdgeGatewaysNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEdgeGatewaysSome(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysSome != nil {
		if err := m.EdgeGatewaysSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateExternalSubnetGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetGroupsEvery != nil {
		if err := m.ExternalSubnetGroupsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateExternalSubnetGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetGroupsNone != nil {
		if err := m.ExternalSubnetGroupsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateExternalSubnetGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetGroupsSome != nil {
		if err := m.ExternalSubnetGroupsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnet_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnet_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) contextValidateVpcService(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcService != nil {
		if err := m.VpcService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudEdgeGatewayGroupWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudEdgeGatewayGroupWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
