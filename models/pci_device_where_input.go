// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PciDeviceWhereInput pci device where input
//
// swagger:model PciDeviceWhereInput
type PciDeviceWhereInput struct {

	// a n d
	AND []*PciDeviceWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*PciDeviceWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*PciDeviceWhereInput `json:"OR,omitempty"`

	// bus
	Bus *string `json:"bus,omitempty"`

	// bus contains
	BusContains *string `json:"bus_contains,omitempty"`

	// bus ends with
	BusEndsWith *string `json:"bus_ends_with,omitempty"`

	// bus gt
	BusGt *string `json:"bus_gt,omitempty"`

	// bus gte
	BusGte *string `json:"bus_gte,omitempty"`

	// bus in
	BusIn []string `json:"bus_in,omitempty"`

	// bus location
	BusLocation *string `json:"bus_location,omitempty"`

	// bus location contains
	BusLocationContains *string `json:"bus_location_contains,omitempty"`

	// bus location ends with
	BusLocationEndsWith *string `json:"bus_location_ends_with,omitempty"`

	// bus location gt
	BusLocationGt *string `json:"bus_location_gt,omitempty"`

	// bus location gte
	BusLocationGte *string `json:"bus_location_gte,omitempty"`

	// bus location in
	BusLocationIn []string `json:"bus_location_in,omitempty"`

	// bus location lt
	BusLocationLt *string `json:"bus_location_lt,omitempty"`

	// bus location lte
	BusLocationLte *string `json:"bus_location_lte,omitempty"`

	// bus location not
	BusLocationNot *string `json:"bus_location_not,omitempty"`

	// bus location not contains
	BusLocationNotContains *string `json:"bus_location_not_contains,omitempty"`

	// bus location not ends with
	BusLocationNotEndsWith *string `json:"bus_location_not_ends_with,omitempty"`

	// bus location not in
	BusLocationNotIn []string `json:"bus_location_not_in,omitempty"`

	// bus location not starts with
	BusLocationNotStartsWith *string `json:"bus_location_not_starts_with,omitempty"`

	// bus location starts with
	BusLocationStartsWith *string `json:"bus_location_starts_with,omitempty"`

	// bus lt
	BusLt *string `json:"bus_lt,omitempty"`

	// bus lte
	BusLte *string `json:"bus_lte,omitempty"`

	// bus not
	BusNot *string `json:"bus_not,omitempty"`

	// bus not contains
	BusNotContains *string `json:"bus_not_contains,omitempty"`

	// bus not ends with
	BusNotEndsWith *string `json:"bus_not_ends_with,omitempty"`

	// bus not in
	BusNotIn []string `json:"bus_not_in,omitempty"`

	// bus not starts with
	BusNotStartsWith *string `json:"bus_not_starts_with,omitempty"`

	// bus starts with
	BusStartsWith *string `json:"bus_starts_with,omitempty"`

	// class code
	ClassCode *string `json:"class_code,omitempty"`

	// class code contains
	ClassCodeContains *string `json:"class_code_contains,omitempty"`

	// class code ends with
	ClassCodeEndsWith *string `json:"class_code_ends_with,omitempty"`

	// class code gt
	ClassCodeGt *string `json:"class_code_gt,omitempty"`

	// class code gte
	ClassCodeGte *string `json:"class_code_gte,omitempty"`

	// class code in
	ClassCodeIn []string `json:"class_code_in,omitempty"`

	// class code lt
	ClassCodeLt *string `json:"class_code_lt,omitempty"`

	// class code lte
	ClassCodeLte *string `json:"class_code_lte,omitempty"`

	// class code not
	ClassCodeNot *string `json:"class_code_not,omitempty"`

	// class code not contains
	ClassCodeNotContains *string `json:"class_code_not_contains,omitempty"`

	// class code not ends with
	ClassCodeNotEndsWith *string `json:"class_code_not_ends_with,omitempty"`

	// class code not in
	ClassCodeNotIn []string `json:"class_code_not_in,omitempty"`

	// class code not starts with
	ClassCodeNotStartsWith *string `json:"class_code_not_starts_with,omitempty"`

	// class code starts with
	ClassCodeStartsWith *string `json:"class_code_starts_with,omitempty"`

	// device type
	DeviceType *string `json:"device_type,omitempty"`

	// device type contains
	DeviceTypeContains *string `json:"device_type_contains,omitempty"`

	// device type ends with
	DeviceTypeEndsWith *string `json:"device_type_ends_with,omitempty"`

	// device type gt
	DeviceTypeGt *string `json:"device_type_gt,omitempty"`

	// device type gte
	DeviceTypeGte *string `json:"device_type_gte,omitempty"`

	// device type in
	DeviceTypeIn []string `json:"device_type_in,omitempty"`

	// device type lt
	DeviceTypeLt *string `json:"device_type_lt,omitempty"`

	// device type lte
	DeviceTypeLte *string `json:"device_type_lte,omitempty"`

	// device type not
	DeviceTypeNot *string `json:"device_type_not,omitempty"`

	// device type not contains
	DeviceTypeNotContains *string `json:"device_type_not_contains,omitempty"`

	// device type not ends with
	DeviceTypeNotEndsWith *string `json:"device_type_not_ends_with,omitempty"`

	// device type not in
	DeviceTypeNotIn []string `json:"device_type_not_in,omitempty"`

	// device type not starts with
	DeviceTypeNotStartsWith *string `json:"device_type_not_starts_with,omitempty"`

	// device type starts with
	DeviceTypeStartsWith *string `json:"device_type_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// function num
	FunctionNum *string `json:"function_num,omitempty"`

	// function num contains
	FunctionNumContains *string `json:"function_num_contains,omitempty"`

	// function num ends with
	FunctionNumEndsWith *string `json:"function_num_ends_with,omitempty"`

	// function num gt
	FunctionNumGt *string `json:"function_num_gt,omitempty"`

	// function num gte
	FunctionNumGte *string `json:"function_num_gte,omitempty"`

	// function num in
	FunctionNumIn []string `json:"function_num_in,omitempty"`

	// function num lt
	FunctionNumLt *string `json:"function_num_lt,omitempty"`

	// function num lte
	FunctionNumLte *string `json:"function_num_lte,omitempty"`

	// function num not
	FunctionNumNot *string `json:"function_num_not,omitempty"`

	// function num not contains
	FunctionNumNotContains *string `json:"function_num_not_contains,omitempty"`

	// function num not ends with
	FunctionNumNotEndsWith *string `json:"function_num_not_ends_with,omitempty"`

	// function num not in
	FunctionNumNotIn []string `json:"function_num_not_in,omitempty"`

	// function num not starts with
	FunctionNumNotStartsWith *string `json:"function_num_not_starts_with,omitempty"`

	// function num starts with
	FunctionNumStartsWith *string `json:"function_num_starts_with,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iommu status
	IommuStatus *IommuStatus `json:"iommu_status,omitempty"`

	// iommu status in
	IommuStatusIn []IommuStatus `json:"iommu_status_in,omitempty"`

	// iommu status not
	IommuStatusNot *IommuStatus `json:"iommu_status_not,omitempty"`

	// iommu status not in
	IommuStatusNotIn []IommuStatus `json:"iommu_status_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// mdev state
	MdevState *PciDeviceMdevState `json:"mdev_state,omitempty"`

	// mdev state in
	MdevStateIn []PciDeviceMdevState `json:"mdev_state_in,omitempty"`

	// mdev state not
	MdevStateNot *PciDeviceMdevState `json:"mdev_state_not,omitempty"`

	// mdev state not in
	MdevStateNotIn []PciDeviceMdevState `json:"mdev_state_not_in,omitempty"`

	// mdev type id
	MdevTypeID *string `json:"mdev_type_id,omitempty"`

	// mdev type id contains
	MdevTypeIDContains *string `json:"mdev_type_id_contains,omitempty"`

	// mdev type id ends with
	MdevTypeIDEndsWith *string `json:"mdev_type_id_ends_with,omitempty"`

	// mdev type id gt
	MdevTypeIDGt *string `json:"mdev_type_id_gt,omitempty"`

	// mdev type id gte
	MdevTypeIDGte *string `json:"mdev_type_id_gte,omitempty"`

	// mdev type id in
	MdevTypeIDIn []string `json:"mdev_type_id_in,omitempty"`

	// mdev type id lt
	MdevTypeIDLt *string `json:"mdev_type_id_lt,omitempty"`

	// mdev type id lte
	MdevTypeIDLte *string `json:"mdev_type_id_lte,omitempty"`

	// mdev type id not
	MdevTypeIDNot *string `json:"mdev_type_id_not,omitempty"`

	// mdev type id not contains
	MdevTypeIDNotContains *string `json:"mdev_type_id_not_contains,omitempty"`

	// mdev type id not ends with
	MdevTypeIDNotEndsWith *string `json:"mdev_type_id_not_ends_with,omitempty"`

	// mdev type id not in
	MdevTypeIDNotIn []string `json:"mdev_type_id_not_in,omitempty"`

	// mdev type id not starts with
	MdevTypeIDNotStartsWith *string `json:"mdev_type_id_not_starts_with,omitempty"`

	// mdev type id starts with
	MdevTypeIDStartsWith *string `json:"mdev_type_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// partitioning state
	PartitioningState *PciDevicePartitionState `json:"partitioning_state,omitempty"`

	// partitioning state in
	PartitioningStateIn []PciDevicePartitionState `json:"partitioning_state_in,omitempty"`

	// partitioning state not
	PartitioningStateNot *PciDevicePartitionState `json:"partitioning_state_not,omitempty"`

	// partitioning state not in
	PartitioningStateNotIn []PciDevicePartitionState `json:"partitioning_state_not_in,omitempty"`

	// product id
	ProductID *string `json:"product_id,omitempty"`

	// product id contains
	ProductIDContains *string `json:"product_id_contains,omitempty"`

	// product id ends with
	ProductIDEndsWith *string `json:"product_id_ends_with,omitempty"`

	// product id gt
	ProductIDGt *string `json:"product_id_gt,omitempty"`

	// product id gte
	ProductIDGte *string `json:"product_id_gte,omitempty"`

	// product id in
	ProductIDIn []string `json:"product_id_in,omitempty"`

	// product id lt
	ProductIDLt *string `json:"product_id_lt,omitempty"`

	// product id lte
	ProductIDLte *string `json:"product_id_lte,omitempty"`

	// product id not
	ProductIDNot *string `json:"product_id_not,omitempty"`

	// product id not contains
	ProductIDNotContains *string `json:"product_id_not_contains,omitempty"`

	// product id not ends with
	ProductIDNotEndsWith *string `json:"product_id_not_ends_with,omitempty"`

	// product id not in
	ProductIDNotIn []string `json:"product_id_not_in,omitempty"`

	// product id not starts with
	ProductIDNotStartsWith *string `json:"product_id_not_starts_with,omitempty"`

	// product id starts with
	ProductIDStartsWith *string `json:"product_id_starts_with,omitempty"`

	// slot
	Slot *string `json:"slot,omitempty"`

	// slot contains
	SlotContains *string `json:"slot_contains,omitempty"`

	// slot ends with
	SlotEndsWith *string `json:"slot_ends_with,omitempty"`

	// slot gt
	SlotGt *string `json:"slot_gt,omitempty"`

	// slot gte
	SlotGte *string `json:"slot_gte,omitempty"`

	// slot in
	SlotIn []string `json:"slot_in,omitempty"`

	// slot lt
	SlotLt *string `json:"slot_lt,omitempty"`

	// slot lte
	SlotLte *string `json:"slot_lte,omitempty"`

	// slot not
	SlotNot *string `json:"slot_not,omitempty"`

	// slot not contains
	SlotNotContains *string `json:"slot_not_contains,omitempty"`

	// slot not ends with
	SlotNotEndsWith *string `json:"slot_not_ends_with,omitempty"`

	// slot not in
	SlotNotIn []string `json:"slot_not_in,omitempty"`

	// slot not starts with
	SlotNotStartsWith *string `json:"slot_not_starts_with,omitempty"`

	// slot starts with
	SlotStartsWith *string `json:"slot_starts_with,omitempty"`

	// sriov state
	SriovState *PciDeviceSriovState `json:"sriov_state,omitempty"`

	// sriov state in
	SriovStateIn []PciDeviceSriovState `json:"sriov_state_in,omitempty"`

	// sriov state not
	SriovStateNot *PciDeviceSriovState `json:"sriov_state_not,omitempty"`

	// sriov state not in
	SriovStateNotIn []PciDeviceSriovState `json:"sriov_state_not_in,omitempty"`

	// subsystem product id
	SubsystemProductID *string `json:"subsystem_product_id,omitempty"`

	// subsystem product id contains
	SubsystemProductIDContains *string `json:"subsystem_product_id_contains,omitempty"`

	// subsystem product id ends with
	SubsystemProductIDEndsWith *string `json:"subsystem_product_id_ends_with,omitempty"`

	// subsystem product id gt
	SubsystemProductIDGt *string `json:"subsystem_product_id_gt,omitempty"`

	// subsystem product id gte
	SubsystemProductIDGte *string `json:"subsystem_product_id_gte,omitempty"`

	// subsystem product id in
	SubsystemProductIDIn []string `json:"subsystem_product_id_in,omitempty"`

	// subsystem product id lt
	SubsystemProductIDLt *string `json:"subsystem_product_id_lt,omitempty"`

	// subsystem product id lte
	SubsystemProductIDLte *string `json:"subsystem_product_id_lte,omitempty"`

	// subsystem product id not
	SubsystemProductIDNot *string `json:"subsystem_product_id_not,omitempty"`

	// subsystem product id not contains
	SubsystemProductIDNotContains *string `json:"subsystem_product_id_not_contains,omitempty"`

	// subsystem product id not ends with
	SubsystemProductIDNotEndsWith *string `json:"subsystem_product_id_not_ends_with,omitempty"`

	// subsystem product id not in
	SubsystemProductIDNotIn []string `json:"subsystem_product_id_not_in,omitempty"`

	// subsystem product id not starts with
	SubsystemProductIDNotStartsWith *string `json:"subsystem_product_id_not_starts_with,omitempty"`

	// subsystem product id starts with
	SubsystemProductIDStartsWith *string `json:"subsystem_product_id_starts_with,omitempty"`

	// subsystem vendor id
	SubsystemVendorID *string `json:"subsystem_vendor_id,omitempty"`

	// subsystem vendor id contains
	SubsystemVendorIDContains *string `json:"subsystem_vendor_id_contains,omitempty"`

	// subsystem vendor id ends with
	SubsystemVendorIDEndsWith *string `json:"subsystem_vendor_id_ends_with,omitempty"`

	// subsystem vendor id gt
	SubsystemVendorIDGt *string `json:"subsystem_vendor_id_gt,omitempty"`

	// subsystem vendor id gte
	SubsystemVendorIDGte *string `json:"subsystem_vendor_id_gte,omitempty"`

	// subsystem vendor id in
	SubsystemVendorIDIn []string `json:"subsystem_vendor_id_in,omitempty"`

	// subsystem vendor id lt
	SubsystemVendorIDLt *string `json:"subsystem_vendor_id_lt,omitempty"`

	// subsystem vendor id lte
	SubsystemVendorIDLte *string `json:"subsystem_vendor_id_lte,omitempty"`

	// subsystem vendor id not
	SubsystemVendorIDNot *string `json:"subsystem_vendor_id_not,omitempty"`

	// subsystem vendor id not contains
	SubsystemVendorIDNotContains *string `json:"subsystem_vendor_id_not_contains,omitempty"`

	// subsystem vendor id not ends with
	SubsystemVendorIDNotEndsWith *string `json:"subsystem_vendor_id_not_ends_with,omitempty"`

	// subsystem vendor id not in
	SubsystemVendorIDNotIn []string `json:"subsystem_vendor_id_not_in,omitempty"`

	// subsystem vendor id not starts with
	SubsystemVendorIDNotStartsWith *string `json:"subsystem_vendor_id_not_starts_with,omitempty"`

	// subsystem vendor id starts with
	SubsystemVendorIDStartsWith *string `json:"subsystem_vendor_id_starts_with,omitempty"`

	// total mdev num
	TotalMdevNum *int32 `json:"total_mdev_num,omitempty"`

	// total mdev num gt
	TotalMdevNumGt *int32 `json:"total_mdev_num_gt,omitempty"`

	// total mdev num gte
	TotalMdevNumGte *int32 `json:"total_mdev_num_gte,omitempty"`

	// total mdev num in
	TotalMdevNumIn []int32 `json:"total_mdev_num_in,omitempty"`

	// total mdev num lt
	TotalMdevNumLt *int32 `json:"total_mdev_num_lt,omitempty"`

	// total mdev num lte
	TotalMdevNumLte *int32 `json:"total_mdev_num_lte,omitempty"`

	// total mdev num not
	TotalMdevNumNot *int32 `json:"total_mdev_num_not,omitempty"`

	// total mdev num not in
	TotalMdevNumNotIn []int32 `json:"total_mdev_num_not_in,omitempty"`

	// total partitioning num
	TotalPartitioningNum *int32 `json:"total_partitioning_num,omitempty"`

	// total partitioning num gt
	TotalPartitioningNumGt *int32 `json:"total_partitioning_num_gt,omitempty"`

	// total partitioning num gte
	TotalPartitioningNumGte *int32 `json:"total_partitioning_num_gte,omitempty"`

	// total partitioning num in
	TotalPartitioningNumIn []int32 `json:"total_partitioning_num_in,omitempty"`

	// total partitioning num lt
	TotalPartitioningNumLt *int32 `json:"total_partitioning_num_lt,omitempty"`

	// total partitioning num lte
	TotalPartitioningNumLte *int32 `json:"total_partitioning_num_lte,omitempty"`

	// total partitioning num not
	TotalPartitioningNumNot *int32 `json:"total_partitioning_num_not,omitempty"`

	// total partitioning num not in
	TotalPartitioningNumNotIn []int32 `json:"total_partitioning_num_not_in,omitempty"`

	// total vf num
	TotalVfNum *int32 `json:"total_vf_num,omitempty"`

	// total vf num gt
	TotalVfNumGt *int32 `json:"total_vf_num_gt,omitempty"`

	// total vf num gte
	TotalVfNumGte *int32 `json:"total_vf_num_gte,omitempty"`

	// total vf num in
	TotalVfNumIn []int32 `json:"total_vf_num_in,omitempty"`

	// total vf num lt
	TotalVfNumLt *int32 `json:"total_vf_num_lt,omitempty"`

	// total vf num lte
	TotalVfNumLte *int32 `json:"total_vf_num_lte,omitempty"`

	// total vf num not
	TotalVfNumNot *int32 `json:"total_vf_num_not,omitempty"`

	// total vf num not in
	TotalVfNumNotIn []int32 `json:"total_vf_num_not_in,omitempty"`

	// usage type
	UsageType *PciDeviceType `json:"usage_type,omitempty"`

	// usage type in
	UsageTypeIn []PciDeviceType `json:"usage_type_in,omitempty"`

	// usage type not
	UsageTypeNot *PciDeviceType `json:"usage_type_not,omitempty"`

	// usage type not in
	UsageTypeNotIn []PciDeviceType `json:"usage_type_not_in,omitempty"`

	// used mdev num
	UsedMdevNum *int32 `json:"used_mdev_num,omitempty"`

	// used mdev num gt
	UsedMdevNumGt *int32 `json:"used_mdev_num_gt,omitempty"`

	// used mdev num gte
	UsedMdevNumGte *int32 `json:"used_mdev_num_gte,omitempty"`

	// used mdev num in
	UsedMdevNumIn []int32 `json:"used_mdev_num_in,omitempty"`

	// used mdev num lt
	UsedMdevNumLt *int32 `json:"used_mdev_num_lt,omitempty"`

	// used mdev num lte
	UsedMdevNumLte *int32 `json:"used_mdev_num_lte,omitempty"`

	// used mdev num not
	UsedMdevNumNot *int32 `json:"used_mdev_num_not,omitempty"`

	// used mdev num not in
	UsedMdevNumNotIn []int32 `json:"used_mdev_num_not_in,omitempty"`

	// used partitioning num
	UsedPartitioningNum *int32 `json:"used_partitioning_num,omitempty"`

	// used partitioning num gt
	UsedPartitioningNumGt *int32 `json:"used_partitioning_num_gt,omitempty"`

	// used partitioning num gte
	UsedPartitioningNumGte *int32 `json:"used_partitioning_num_gte,omitempty"`

	// used partitioning num in
	UsedPartitioningNumIn []int32 `json:"used_partitioning_num_in,omitempty"`

	// used partitioning num lt
	UsedPartitioningNumLt *int32 `json:"used_partitioning_num_lt,omitempty"`

	// used partitioning num lte
	UsedPartitioningNumLte *int32 `json:"used_partitioning_num_lte,omitempty"`

	// used partitioning num not
	UsedPartitioningNumNot *int32 `json:"used_partitioning_num_not,omitempty"`

	// used partitioning num not in
	UsedPartitioningNumNotIn []int32 `json:"used_partitioning_num_not_in,omitempty"`

	// used vf num
	UsedVfNum *int32 `json:"used_vf_num,omitempty"`

	// used vf num gt
	UsedVfNumGt *int32 `json:"used_vf_num_gt,omitempty"`

	// used vf num gte
	UsedVfNumGte *int32 `json:"used_vf_num_gte,omitempty"`

	// used vf num in
	UsedVfNumIn []int32 `json:"used_vf_num_in,omitempty"`

	// used vf num lt
	UsedVfNumLt *int32 `json:"used_vf_num_lt,omitempty"`

	// used vf num lte
	UsedVfNumLte *int32 `json:"used_vf_num_lte,omitempty"`

	// used vf num not
	UsedVfNumNot *int32 `json:"used_vf_num_not,omitempty"`

	// used vf num not in
	UsedVfNumNotIn []int32 `json:"used_vf_num_not_in,omitempty"`

	// user usage
	UserUsage *PciDeviceUsage `json:"user_usage,omitempty"`

	// user usage in
	UserUsageIn []PciDeviceUsage `json:"user_usage_in,omitempty"`

	// user usage not
	UserUsageNot *PciDeviceUsage `json:"user_usage_not,omitempty"`

	// user usage not in
	UserUsageNotIn []PciDeviceUsage `json:"user_usage_not_in,omitempty"`

	// vendor id
	VendorID *string `json:"vendor_id,omitempty"`

	// vendor id contains
	VendorIDContains *string `json:"vendor_id_contains,omitempty"`

	// vendor id ends with
	VendorIDEndsWith *string `json:"vendor_id_ends_with,omitempty"`

	// vendor id gt
	VendorIDGt *string `json:"vendor_id_gt,omitempty"`

	// vendor id gte
	VendorIDGte *string `json:"vendor_id_gte,omitempty"`

	// vendor id in
	VendorIDIn []string `json:"vendor_id_in,omitempty"`

	// vendor id lt
	VendorIDLt *string `json:"vendor_id_lt,omitempty"`

	// vendor id lte
	VendorIDLte *string `json:"vendor_id_lte,omitempty"`

	// vendor id not
	VendorIDNot *string `json:"vendor_id_not,omitempty"`

	// vendor id not contains
	VendorIDNotContains *string `json:"vendor_id_not_contains,omitempty"`

	// vendor id not ends with
	VendorIDNotEndsWith *string `json:"vendor_id_not_ends_with,omitempty"`

	// vendor id not in
	VendorIDNotIn []string `json:"vendor_id_not_in,omitempty"`

	// vendor id not starts with
	VendorIDNotStartsWith *string `json:"vendor_id_not_starts_with,omitempty"`

	// vendor id starts with
	VendorIDStartsWith *string `json:"vendor_id_starts_with,omitempty"`

	// verdor name
	VerdorName *string `json:"verdor_name,omitempty"`

	// verdor name contains
	VerdorNameContains *string `json:"verdor_name_contains,omitempty"`

	// verdor name ends with
	VerdorNameEndsWith *string `json:"verdor_name_ends_with,omitempty"`

	// verdor name gt
	VerdorNameGt *string `json:"verdor_name_gt,omitempty"`

	// verdor name gte
	VerdorNameGte *string `json:"verdor_name_gte,omitempty"`

	// verdor name in
	VerdorNameIn []string `json:"verdor_name_in,omitempty"`

	// verdor name lt
	VerdorNameLt *string `json:"verdor_name_lt,omitempty"`

	// verdor name lte
	VerdorNameLte *string `json:"verdor_name_lte,omitempty"`

	// verdor name not
	VerdorNameNot *string `json:"verdor_name_not,omitempty"`

	// verdor name not contains
	VerdorNameNotContains *string `json:"verdor_name_not_contains,omitempty"`

	// verdor name not ends with
	VerdorNameNotEndsWith *string `json:"verdor_name_not_ends_with,omitempty"`

	// verdor name not in
	VerdorNameNotIn []string `json:"verdor_name_not_in,omitempty"`

	// verdor name not starts with
	VerdorNameNotStartsWith *string `json:"verdor_name_not_starts_with,omitempty"`

	// verdor name starts with
	VerdorNameStartsWith *string `json:"verdor_name_starts_with,omitempty"`

	MarshalOpts *PciDeviceWhereInputMarshalOpts `json:"-"`
}

type PciDeviceWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Bus_Explicit_Null_When_Empty bool

	BusContains_Explicit_Null_When_Empty bool

	BusEndsWith_Explicit_Null_When_Empty bool

	BusGt_Explicit_Null_When_Empty bool

	BusGte_Explicit_Null_When_Empty bool

	BusIn_Explicit_Null_When_Empty bool

	BusLocation_Explicit_Null_When_Empty bool

	BusLocationContains_Explicit_Null_When_Empty bool

	BusLocationEndsWith_Explicit_Null_When_Empty bool

	BusLocationGt_Explicit_Null_When_Empty bool

	BusLocationGte_Explicit_Null_When_Empty bool

	BusLocationIn_Explicit_Null_When_Empty bool

	BusLocationLt_Explicit_Null_When_Empty bool

	BusLocationLte_Explicit_Null_When_Empty bool

	BusLocationNot_Explicit_Null_When_Empty bool

	BusLocationNotContains_Explicit_Null_When_Empty bool

	BusLocationNotEndsWith_Explicit_Null_When_Empty bool

	BusLocationNotIn_Explicit_Null_When_Empty bool

	BusLocationNotStartsWith_Explicit_Null_When_Empty bool

	BusLocationStartsWith_Explicit_Null_When_Empty bool

	BusLt_Explicit_Null_When_Empty bool

	BusLte_Explicit_Null_When_Empty bool

	BusNot_Explicit_Null_When_Empty bool

	BusNotContains_Explicit_Null_When_Empty bool

	BusNotEndsWith_Explicit_Null_When_Empty bool

	BusNotIn_Explicit_Null_When_Empty bool

	BusNotStartsWith_Explicit_Null_When_Empty bool

	BusStartsWith_Explicit_Null_When_Empty bool

	ClassCode_Explicit_Null_When_Empty bool

	ClassCodeContains_Explicit_Null_When_Empty bool

	ClassCodeEndsWith_Explicit_Null_When_Empty bool

	ClassCodeGt_Explicit_Null_When_Empty bool

	ClassCodeGte_Explicit_Null_When_Empty bool

	ClassCodeIn_Explicit_Null_When_Empty bool

	ClassCodeLt_Explicit_Null_When_Empty bool

	ClassCodeLte_Explicit_Null_When_Empty bool

	ClassCodeNot_Explicit_Null_When_Empty bool

	ClassCodeNotContains_Explicit_Null_When_Empty bool

	ClassCodeNotEndsWith_Explicit_Null_When_Empty bool

	ClassCodeNotIn_Explicit_Null_When_Empty bool

	ClassCodeNotStartsWith_Explicit_Null_When_Empty bool

	ClassCodeStartsWith_Explicit_Null_When_Empty bool

	DeviceType_Explicit_Null_When_Empty bool

	DeviceTypeContains_Explicit_Null_When_Empty bool

	DeviceTypeEndsWith_Explicit_Null_When_Empty bool

	DeviceTypeGt_Explicit_Null_When_Empty bool

	DeviceTypeGte_Explicit_Null_When_Empty bool

	DeviceTypeIn_Explicit_Null_When_Empty bool

	DeviceTypeLt_Explicit_Null_When_Empty bool

	DeviceTypeLte_Explicit_Null_When_Empty bool

	DeviceTypeNot_Explicit_Null_When_Empty bool

	DeviceTypeNotContains_Explicit_Null_When_Empty bool

	DeviceTypeNotEndsWith_Explicit_Null_When_Empty bool

	DeviceTypeNotIn_Explicit_Null_When_Empty bool

	DeviceTypeNotStartsWith_Explicit_Null_When_Empty bool

	DeviceTypeStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	FunctionNum_Explicit_Null_When_Empty bool

	FunctionNumContains_Explicit_Null_When_Empty bool

	FunctionNumEndsWith_Explicit_Null_When_Empty bool

	FunctionNumGt_Explicit_Null_When_Empty bool

	FunctionNumGte_Explicit_Null_When_Empty bool

	FunctionNumIn_Explicit_Null_When_Empty bool

	FunctionNumLt_Explicit_Null_When_Empty bool

	FunctionNumLte_Explicit_Null_When_Empty bool

	FunctionNumNot_Explicit_Null_When_Empty bool

	FunctionNumNotContains_Explicit_Null_When_Empty bool

	FunctionNumNotEndsWith_Explicit_Null_When_Empty bool

	FunctionNumNotIn_Explicit_Null_When_Empty bool

	FunctionNumNotStartsWith_Explicit_Null_When_Empty bool

	FunctionNumStartsWith_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IommuStatus_Explicit_Null_When_Empty bool

	IommuStatusIn_Explicit_Null_When_Empty bool

	IommuStatusNot_Explicit_Null_When_Empty bool

	IommuStatusNotIn_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	MdevState_Explicit_Null_When_Empty bool

	MdevStateIn_Explicit_Null_When_Empty bool

	MdevStateNot_Explicit_Null_When_Empty bool

	MdevStateNotIn_Explicit_Null_When_Empty bool

	MdevTypeID_Explicit_Null_When_Empty bool

	MdevTypeIDContains_Explicit_Null_When_Empty bool

	MdevTypeIDEndsWith_Explicit_Null_When_Empty bool

	MdevTypeIDGt_Explicit_Null_When_Empty bool

	MdevTypeIDGte_Explicit_Null_When_Empty bool

	MdevTypeIDIn_Explicit_Null_When_Empty bool

	MdevTypeIDLt_Explicit_Null_When_Empty bool

	MdevTypeIDLte_Explicit_Null_When_Empty bool

	MdevTypeIDNot_Explicit_Null_When_Empty bool

	MdevTypeIDNotContains_Explicit_Null_When_Empty bool

	MdevTypeIDNotEndsWith_Explicit_Null_When_Empty bool

	MdevTypeIDNotIn_Explicit_Null_When_Empty bool

	MdevTypeIDNotStartsWith_Explicit_Null_When_Empty bool

	MdevTypeIDStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	PartitioningState_Explicit_Null_When_Empty bool

	PartitioningStateIn_Explicit_Null_When_Empty bool

	PartitioningStateNot_Explicit_Null_When_Empty bool

	PartitioningStateNotIn_Explicit_Null_When_Empty bool

	ProductID_Explicit_Null_When_Empty bool

	ProductIDContains_Explicit_Null_When_Empty bool

	ProductIDEndsWith_Explicit_Null_When_Empty bool

	ProductIDGt_Explicit_Null_When_Empty bool

	ProductIDGte_Explicit_Null_When_Empty bool

	ProductIDIn_Explicit_Null_When_Empty bool

	ProductIDLt_Explicit_Null_When_Empty bool

	ProductIDLte_Explicit_Null_When_Empty bool

	ProductIDNot_Explicit_Null_When_Empty bool

	ProductIDNotContains_Explicit_Null_When_Empty bool

	ProductIDNotEndsWith_Explicit_Null_When_Empty bool

	ProductIDNotIn_Explicit_Null_When_Empty bool

	ProductIDNotStartsWith_Explicit_Null_When_Empty bool

	ProductIDStartsWith_Explicit_Null_When_Empty bool

	Slot_Explicit_Null_When_Empty bool

	SlotContains_Explicit_Null_When_Empty bool

	SlotEndsWith_Explicit_Null_When_Empty bool

	SlotGt_Explicit_Null_When_Empty bool

	SlotGte_Explicit_Null_When_Empty bool

	SlotIn_Explicit_Null_When_Empty bool

	SlotLt_Explicit_Null_When_Empty bool

	SlotLte_Explicit_Null_When_Empty bool

	SlotNot_Explicit_Null_When_Empty bool

	SlotNotContains_Explicit_Null_When_Empty bool

	SlotNotEndsWith_Explicit_Null_When_Empty bool

	SlotNotIn_Explicit_Null_When_Empty bool

	SlotNotStartsWith_Explicit_Null_When_Empty bool

	SlotStartsWith_Explicit_Null_When_Empty bool

	SriovState_Explicit_Null_When_Empty bool

	SriovStateIn_Explicit_Null_When_Empty bool

	SriovStateNot_Explicit_Null_When_Empty bool

	SriovStateNotIn_Explicit_Null_When_Empty bool

	SubsystemProductID_Explicit_Null_When_Empty bool

	SubsystemProductIDContains_Explicit_Null_When_Empty bool

	SubsystemProductIDEndsWith_Explicit_Null_When_Empty bool

	SubsystemProductIDGt_Explicit_Null_When_Empty bool

	SubsystemProductIDGte_Explicit_Null_When_Empty bool

	SubsystemProductIDIn_Explicit_Null_When_Empty bool

	SubsystemProductIDLt_Explicit_Null_When_Empty bool

	SubsystemProductIDLte_Explicit_Null_When_Empty bool

	SubsystemProductIDNot_Explicit_Null_When_Empty bool

	SubsystemProductIDNotContains_Explicit_Null_When_Empty bool

	SubsystemProductIDNotEndsWith_Explicit_Null_When_Empty bool

	SubsystemProductIDNotIn_Explicit_Null_When_Empty bool

	SubsystemProductIDNotStartsWith_Explicit_Null_When_Empty bool

	SubsystemProductIDStartsWith_Explicit_Null_When_Empty bool

	SubsystemVendorID_Explicit_Null_When_Empty bool

	SubsystemVendorIDContains_Explicit_Null_When_Empty bool

	SubsystemVendorIDEndsWith_Explicit_Null_When_Empty bool

	SubsystemVendorIDGt_Explicit_Null_When_Empty bool

	SubsystemVendorIDGte_Explicit_Null_When_Empty bool

	SubsystemVendorIDIn_Explicit_Null_When_Empty bool

	SubsystemVendorIDLt_Explicit_Null_When_Empty bool

	SubsystemVendorIDLte_Explicit_Null_When_Empty bool

	SubsystemVendorIDNot_Explicit_Null_When_Empty bool

	SubsystemVendorIDNotContains_Explicit_Null_When_Empty bool

	SubsystemVendorIDNotEndsWith_Explicit_Null_When_Empty bool

	SubsystemVendorIDNotIn_Explicit_Null_When_Empty bool

	SubsystemVendorIDNotStartsWith_Explicit_Null_When_Empty bool

	SubsystemVendorIDStartsWith_Explicit_Null_When_Empty bool

	TotalMdevNum_Explicit_Null_When_Empty bool

	TotalMdevNumGt_Explicit_Null_When_Empty bool

	TotalMdevNumGte_Explicit_Null_When_Empty bool

	TotalMdevNumIn_Explicit_Null_When_Empty bool

	TotalMdevNumLt_Explicit_Null_When_Empty bool

	TotalMdevNumLte_Explicit_Null_When_Empty bool

	TotalMdevNumNot_Explicit_Null_When_Empty bool

	TotalMdevNumNotIn_Explicit_Null_When_Empty bool

	TotalPartitioningNum_Explicit_Null_When_Empty bool

	TotalPartitioningNumGt_Explicit_Null_When_Empty bool

	TotalPartitioningNumGte_Explicit_Null_When_Empty bool

	TotalPartitioningNumIn_Explicit_Null_When_Empty bool

	TotalPartitioningNumLt_Explicit_Null_When_Empty bool

	TotalPartitioningNumLte_Explicit_Null_When_Empty bool

	TotalPartitioningNumNot_Explicit_Null_When_Empty bool

	TotalPartitioningNumNotIn_Explicit_Null_When_Empty bool

	TotalVfNum_Explicit_Null_When_Empty bool

	TotalVfNumGt_Explicit_Null_When_Empty bool

	TotalVfNumGte_Explicit_Null_When_Empty bool

	TotalVfNumIn_Explicit_Null_When_Empty bool

	TotalVfNumLt_Explicit_Null_When_Empty bool

	TotalVfNumLte_Explicit_Null_When_Empty bool

	TotalVfNumNot_Explicit_Null_When_Empty bool

	TotalVfNumNotIn_Explicit_Null_When_Empty bool

	UsageType_Explicit_Null_When_Empty bool

	UsageTypeIn_Explicit_Null_When_Empty bool

	UsageTypeNot_Explicit_Null_When_Empty bool

	UsageTypeNotIn_Explicit_Null_When_Empty bool

	UsedMdevNum_Explicit_Null_When_Empty bool

	UsedMdevNumGt_Explicit_Null_When_Empty bool

	UsedMdevNumGte_Explicit_Null_When_Empty bool

	UsedMdevNumIn_Explicit_Null_When_Empty bool

	UsedMdevNumLt_Explicit_Null_When_Empty bool

	UsedMdevNumLte_Explicit_Null_When_Empty bool

	UsedMdevNumNot_Explicit_Null_When_Empty bool

	UsedMdevNumNotIn_Explicit_Null_When_Empty bool

	UsedPartitioningNum_Explicit_Null_When_Empty bool

	UsedPartitioningNumGt_Explicit_Null_When_Empty bool

	UsedPartitioningNumGte_Explicit_Null_When_Empty bool

	UsedPartitioningNumIn_Explicit_Null_When_Empty bool

	UsedPartitioningNumLt_Explicit_Null_When_Empty bool

	UsedPartitioningNumLte_Explicit_Null_When_Empty bool

	UsedPartitioningNumNot_Explicit_Null_When_Empty bool

	UsedPartitioningNumNotIn_Explicit_Null_When_Empty bool

	UsedVfNum_Explicit_Null_When_Empty bool

	UsedVfNumGt_Explicit_Null_When_Empty bool

	UsedVfNumGte_Explicit_Null_When_Empty bool

	UsedVfNumIn_Explicit_Null_When_Empty bool

	UsedVfNumLt_Explicit_Null_When_Empty bool

	UsedVfNumLte_Explicit_Null_When_Empty bool

	UsedVfNumNot_Explicit_Null_When_Empty bool

	UsedVfNumNotIn_Explicit_Null_When_Empty bool

	UserUsage_Explicit_Null_When_Empty bool

	UserUsageIn_Explicit_Null_When_Empty bool

	UserUsageNot_Explicit_Null_When_Empty bool

	UserUsageNotIn_Explicit_Null_When_Empty bool

	VendorID_Explicit_Null_When_Empty bool

	VendorIDContains_Explicit_Null_When_Empty bool

	VendorIDEndsWith_Explicit_Null_When_Empty bool

	VendorIDGt_Explicit_Null_When_Empty bool

	VendorIDGte_Explicit_Null_When_Empty bool

	VendorIDIn_Explicit_Null_When_Empty bool

	VendorIDLt_Explicit_Null_When_Empty bool

	VendorIDLte_Explicit_Null_When_Empty bool

	VendorIDNot_Explicit_Null_When_Empty bool

	VendorIDNotContains_Explicit_Null_When_Empty bool

	VendorIDNotEndsWith_Explicit_Null_When_Empty bool

	VendorIDNotIn_Explicit_Null_When_Empty bool

	VendorIDNotStartsWith_Explicit_Null_When_Empty bool

	VendorIDStartsWith_Explicit_Null_When_Empty bool

	VerdorName_Explicit_Null_When_Empty bool

	VerdorNameContains_Explicit_Null_When_Empty bool

	VerdorNameEndsWith_Explicit_Null_When_Empty bool

	VerdorNameGt_Explicit_Null_When_Empty bool

	VerdorNameGte_Explicit_Null_When_Empty bool

	VerdorNameIn_Explicit_Null_When_Empty bool

	VerdorNameLt_Explicit_Null_When_Empty bool

	VerdorNameLte_Explicit_Null_When_Empty bool

	VerdorNameNot_Explicit_Null_When_Empty bool

	VerdorNameNotContains_Explicit_Null_When_Empty bool

	VerdorNameNotEndsWith_Explicit_Null_When_Empty bool

	VerdorNameNotIn_Explicit_Null_When_Empty bool

	VerdorNameNotStartsWith_Explicit_Null_When_Empty bool

	VerdorNameStartsWith_Explicit_Null_When_Empty bool
}

func (m PciDeviceWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus
	if m.Bus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":")
		bytes, err := swag.WriteJSON(m.Bus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":null")
		first = false
	}

	// handle nullable field bus_contains
	if m.BusContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_contains\":")
		bytes, err := swag.WriteJSON(m.BusContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_contains\":null")
		first = false
	}

	// handle nullable field bus_ends_with
	if m.BusEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_ends_with\":")
		bytes, err := swag.WriteJSON(m.BusEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_ends_with\":null")
		first = false
	}

	// handle nullable field bus_gt
	if m.BusGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_gt\":")
		bytes, err := swag.WriteJSON(m.BusGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_gt\":null")
		first = false
	}

	// handle nullable field bus_gte
	if m.BusGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_gte\":")
		bytes, err := swag.WriteJSON(m.BusGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_gte\":null")
		first = false
	}

	// handle non nullable field bus_in with omitempty
	if !swag.IsZero(m.BusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_in\":")
		bytes, err := swag.WriteJSON(m.BusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus_location
	if m.BusLocation != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location\":")
		bytes, err := swag.WriteJSON(m.BusLocation)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocation_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location\":null")
		first = false
	}

	// handle nullable field bus_location_contains
	if m.BusLocationContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_contains\":")
		bytes, err := swag.WriteJSON(m.BusLocationContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_contains\":null")
		first = false
	}

	// handle nullable field bus_location_ends_with
	if m.BusLocationEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_ends_with\":")
		bytes, err := swag.WriteJSON(m.BusLocationEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_ends_with\":null")
		first = false
	}

	// handle nullable field bus_location_gt
	if m.BusLocationGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_gt\":")
		bytes, err := swag.WriteJSON(m.BusLocationGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_gt\":null")
		first = false
	}

	// handle nullable field bus_location_gte
	if m.BusLocationGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_gte\":")
		bytes, err := swag.WriteJSON(m.BusLocationGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_gte\":null")
		first = false
	}

	// handle non nullable field bus_location_in with omitempty
	if !swag.IsZero(m.BusLocationIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_in\":")
		bytes, err := swag.WriteJSON(m.BusLocationIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus_location_lt
	if m.BusLocationLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_lt\":")
		bytes, err := swag.WriteJSON(m.BusLocationLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_lt\":null")
		first = false
	}

	// handle nullable field bus_location_lte
	if m.BusLocationLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_lte\":")
		bytes, err := swag.WriteJSON(m.BusLocationLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_lte\":null")
		first = false
	}

	// handle nullable field bus_location_not
	if m.BusLocationNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not\":")
		bytes, err := swag.WriteJSON(m.BusLocationNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not\":null")
		first = false
	}

	// handle nullable field bus_location_not_contains
	if m.BusLocationNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_contains\":")
		bytes, err := swag.WriteJSON(m.BusLocationNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_contains\":null")
		first = false
	}

	// handle nullable field bus_location_not_ends_with
	if m.BusLocationNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.BusLocationNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_ends_with\":null")
		first = false
	}

	// handle non nullable field bus_location_not_in with omitempty
	if !swag.IsZero(m.BusLocationNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_in\":")
		bytes, err := swag.WriteJSON(m.BusLocationNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus_location_not_starts_with
	if m.BusLocationNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.BusLocationNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_not_starts_with\":null")
		first = false
	}

	// handle nullable field bus_location_starts_with
	if m.BusLocationStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_starts_with\":")
		bytes, err := swag.WriteJSON(m.BusLocationStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLocationStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_location_starts_with\":null")
		first = false
	}

	// handle nullable field bus_lt
	if m.BusLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_lt\":")
		bytes, err := swag.WriteJSON(m.BusLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_lt\":null")
		first = false
	}

	// handle nullable field bus_lte
	if m.BusLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_lte\":")
		bytes, err := swag.WriteJSON(m.BusLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_lte\":null")
		first = false
	}

	// handle nullable field bus_not
	if m.BusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not\":")
		bytes, err := swag.WriteJSON(m.BusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not\":null")
		first = false
	}

	// handle nullable field bus_not_contains
	if m.BusNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_contains\":")
		bytes, err := swag.WriteJSON(m.BusNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_contains\":null")
		first = false
	}

	// handle nullable field bus_not_ends_with
	if m.BusNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.BusNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_ends_with\":null")
		first = false
	}

	// handle non nullable field bus_not_in with omitempty
	if !swag.IsZero(m.BusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_in\":")
		bytes, err := swag.WriteJSON(m.BusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus_not_starts_with
	if m.BusNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.BusNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_starts_with\":null")
		first = false
	}

	// handle nullable field bus_starts_with
	if m.BusStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_starts_with\":")
		bytes, err := swag.WriteJSON(m.BusStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_starts_with\":null")
		first = false
	}

	// handle nullable field class_code
	if m.ClassCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code\":")
		bytes, err := swag.WriteJSON(m.ClassCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code\":null")
		first = false
	}

	// handle nullable field class_code_contains
	if m.ClassCodeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_contains\":")
		bytes, err := swag.WriteJSON(m.ClassCodeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_contains\":null")
		first = false
	}

	// handle nullable field class_code_ends_with
	if m.ClassCodeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClassCodeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_ends_with\":null")
		first = false
	}

	// handle nullable field class_code_gt
	if m.ClassCodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_gt\":")
		bytes, err := swag.WriteJSON(m.ClassCodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_gt\":null")
		first = false
	}

	// handle nullable field class_code_gte
	if m.ClassCodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_gte\":")
		bytes, err := swag.WriteJSON(m.ClassCodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_gte\":null")
		first = false
	}

	// handle non nullable field class_code_in with omitempty
	if !swag.IsZero(m.ClassCodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_in\":")
		bytes, err := swag.WriteJSON(m.ClassCodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field class_code_lt
	if m.ClassCodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_lt\":")
		bytes, err := swag.WriteJSON(m.ClassCodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_lt\":null")
		first = false
	}

	// handle nullable field class_code_lte
	if m.ClassCodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_lte\":")
		bytes, err := swag.WriteJSON(m.ClassCodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_lte\":null")
		first = false
	}

	// handle nullable field class_code_not
	if m.ClassCodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not\":")
		bytes, err := swag.WriteJSON(m.ClassCodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not\":null")
		first = false
	}

	// handle nullable field class_code_not_contains
	if m.ClassCodeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_contains\":")
		bytes, err := swag.WriteJSON(m.ClassCodeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_contains\":null")
		first = false
	}

	// handle nullable field class_code_not_ends_with
	if m.ClassCodeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClassCodeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_ends_with\":null")
		first = false
	}

	// handle non nullable field class_code_not_in with omitempty
	if !swag.IsZero(m.ClassCodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_in\":")
		bytes, err := swag.WriteJSON(m.ClassCodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field class_code_not_starts_with
	if m.ClassCodeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClassCodeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_not_starts_with\":null")
		first = false
	}

	// handle nullable field class_code_starts_with
	if m.ClassCodeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClassCodeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClassCodeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"class_code_starts_with\":null")
		first = false
	}

	// handle nullable field device_type
	if m.DeviceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type\":")
		bytes, err := swag.WriteJSON(m.DeviceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type\":null")
		first = false
	}

	// handle nullable field device_type_contains
	if m.DeviceTypeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_contains\":null")
		first = false
	}

	// handle nullable field device_type_ends_with
	if m.DeviceTypeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_ends_with\":null")
		first = false
	}

	// handle nullable field device_type_gt
	if m.DeviceTypeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_gt\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_gt\":null")
		first = false
	}

	// handle nullable field device_type_gte
	if m.DeviceTypeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_gte\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_gte\":null")
		first = false
	}

	// handle non nullable field device_type_in with omitempty
	if !swag.IsZero(m.DeviceTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_in\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_type_lt
	if m.DeviceTypeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_lt\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_lt\":null")
		first = false
	}

	// handle nullable field device_type_lte
	if m.DeviceTypeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_lte\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_lte\":null")
		first = false
	}

	// handle nullable field device_type_not
	if m.DeviceTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not\":null")
		first = false
	}

	// handle nullable field device_type_not_contains
	if m.DeviceTypeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_contains\":null")
		first = false
	}

	// handle nullable field device_type_not_ends_with
	if m.DeviceTypeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_ends_with\":null")
		first = false
	}

	// handle non nullable field device_type_not_in with omitempty
	if !swag.IsZero(m.DeviceTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_in\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_type_not_starts_with
	if m.DeviceTypeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_not_starts_with\":null")
		first = false
	}

	// handle nullable field device_type_starts_with
	if m.DeviceTypeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceTypeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceTypeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_type_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field function_num
	if m.FunctionNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num\":")
		bytes, err := swag.WriteJSON(m.FunctionNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num\":null")
		first = false
	}

	// handle nullable field function_num_contains
	if m.FunctionNumContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_contains\":")
		bytes, err := swag.WriteJSON(m.FunctionNumContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_contains\":null")
		first = false
	}

	// handle nullable field function_num_ends_with
	if m.FunctionNumEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_ends_with\":")
		bytes, err := swag.WriteJSON(m.FunctionNumEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_ends_with\":null")
		first = false
	}

	// handle nullable field function_num_gt
	if m.FunctionNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_gt\":")
		bytes, err := swag.WriteJSON(m.FunctionNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_gt\":null")
		first = false
	}

	// handle nullable field function_num_gte
	if m.FunctionNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_gte\":")
		bytes, err := swag.WriteJSON(m.FunctionNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_gte\":null")
		first = false
	}

	// handle non nullable field function_num_in with omitempty
	if !swag.IsZero(m.FunctionNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_in\":")
		bytes, err := swag.WriteJSON(m.FunctionNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field function_num_lt
	if m.FunctionNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_lt\":")
		bytes, err := swag.WriteJSON(m.FunctionNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_lt\":null")
		first = false
	}

	// handle nullable field function_num_lte
	if m.FunctionNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_lte\":")
		bytes, err := swag.WriteJSON(m.FunctionNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_lte\":null")
		first = false
	}

	// handle nullable field function_num_not
	if m.FunctionNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not\":")
		bytes, err := swag.WriteJSON(m.FunctionNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not\":null")
		first = false
	}

	// handle nullable field function_num_not_contains
	if m.FunctionNumNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_contains\":")
		bytes, err := swag.WriteJSON(m.FunctionNumNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_contains\":null")
		first = false
	}

	// handle nullable field function_num_not_ends_with
	if m.FunctionNumNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.FunctionNumNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_ends_with\":null")
		first = false
	}

	// handle non nullable field function_num_not_in with omitempty
	if !swag.IsZero(m.FunctionNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_in\":")
		bytes, err := swag.WriteJSON(m.FunctionNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field function_num_not_starts_with
	if m.FunctionNumNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.FunctionNumNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_not_starts_with\":null")
		first = false
	}

	// handle nullable field function_num_starts_with
	if m.FunctionNumStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_starts_with\":")
		bytes, err := swag.WriteJSON(m.FunctionNumStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNumStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_num_starts_with\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field iommu_status
	if m.IommuStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status\":")
		bytes, err := swag.WriteJSON(m.IommuStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IommuStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status\":null")
		first = false
	}

	// handle non nullable field iommu_status_in with omitempty
	if !swag.IsZero(m.IommuStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_in\":")
		bytes, err := swag.WriteJSON(m.IommuStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iommu_status_not
	if m.IommuStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not\":")
		bytes, err := swag.WriteJSON(m.IommuStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IommuStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not\":null")
		first = false
	}

	// handle non nullable field iommu_status_not_in with omitempty
	if !swag.IsZero(m.IommuStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not_in\":")
		bytes, err := swag.WriteJSON(m.IommuStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field mdev_state
	if m.MdevState != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state\":")
		bytes, err := swag.WriteJSON(m.MdevState)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevState_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state\":null")
		first = false
	}

	// handle non nullable field mdev_state_in with omitempty
	if !swag.IsZero(m.MdevStateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state_in\":")
		bytes, err := swag.WriteJSON(m.MdevStateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mdev_state_not
	if m.MdevStateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state_not\":")
		bytes, err := swag.WriteJSON(m.MdevStateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevStateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state_not\":null")
		first = false
	}

	// handle non nullable field mdev_state_not_in with omitempty
	if !swag.IsZero(m.MdevStateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_state_not_in\":")
		bytes, err := swag.WriteJSON(m.MdevStateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mdev_type_id
	if m.MdevTypeID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id\":")
		bytes, err := swag.WriteJSON(m.MdevTypeID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id\":null")
		first = false
	}

	// handle nullable field mdev_type_id_contains
	if m.MdevTypeIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_contains\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_contains\":null")
		first = false
	}

	// handle nullable field mdev_type_id_ends_with
	if m.MdevTypeIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_ends_with\":null")
		first = false
	}

	// handle nullable field mdev_type_id_gt
	if m.MdevTypeIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_gt\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_gt\":null")
		first = false
	}

	// handle nullable field mdev_type_id_gte
	if m.MdevTypeIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_gte\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_gte\":null")
		first = false
	}

	// handle non nullable field mdev_type_id_in with omitempty
	if !swag.IsZero(m.MdevTypeIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_in\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mdev_type_id_lt
	if m.MdevTypeIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_lt\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_lt\":null")
		first = false
	}

	// handle nullable field mdev_type_id_lte
	if m.MdevTypeIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_lte\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_lte\":null")
		first = false
	}

	// handle nullable field mdev_type_id_not
	if m.MdevTypeIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not\":null")
		first = false
	}

	// handle nullable field mdev_type_id_not_contains
	if m.MdevTypeIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_contains\":null")
		first = false
	}

	// handle nullable field mdev_type_id_not_ends_with
	if m.MdevTypeIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field mdev_type_id_not_in with omitempty
	if !swag.IsZero(m.MdevTypeIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_in\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mdev_type_id_not_starts_with
	if m.MdevTypeIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field mdev_type_id_starts_with
	if m.MdevTypeIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.MdevTypeIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MdevTypeIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mdev_type_id_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field partitioning_state
	if m.PartitioningState != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state\":")
		bytes, err := swag.WriteJSON(m.PartitioningState)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartitioningState_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state\":null")
		first = false
	}

	// handle non nullable field partitioning_state_in with omitempty
	if !swag.IsZero(m.PartitioningStateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state_in\":")
		bytes, err := swag.WriteJSON(m.PartitioningStateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field partitioning_state_not
	if m.PartitioningStateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state_not\":")
		bytes, err := swag.WriteJSON(m.PartitioningStateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartitioningStateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state_not\":null")
		first = false
	}

	// handle non nullable field partitioning_state_not_in with omitempty
	if !swag.IsZero(m.PartitioningStateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"partitioning_state_not_in\":")
		bytes, err := swag.WriteJSON(m.PartitioningStateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field product_id
	if m.ProductID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id\":")
		bytes, err := swag.WriteJSON(m.ProductID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id\":null")
		first = false
	}

	// handle nullable field product_id_contains
	if m.ProductIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_contains\":")
		bytes, err := swag.WriteJSON(m.ProductIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_contains\":null")
		first = false
	}

	// handle nullable field product_id_ends_with
	if m.ProductIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ProductIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_ends_with\":null")
		first = false
	}

	// handle nullable field product_id_gt
	if m.ProductIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_gt\":")
		bytes, err := swag.WriteJSON(m.ProductIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_gt\":null")
		first = false
	}

	// handle nullable field product_id_gte
	if m.ProductIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_gte\":")
		bytes, err := swag.WriteJSON(m.ProductIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_gte\":null")
		first = false
	}

	// handle non nullable field product_id_in with omitempty
	if !swag.IsZero(m.ProductIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_in\":")
		bytes, err := swag.WriteJSON(m.ProductIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field product_id_lt
	if m.ProductIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_lt\":")
		bytes, err := swag.WriteJSON(m.ProductIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_lt\":null")
		first = false
	}

	// handle nullable field product_id_lte
	if m.ProductIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_lte\":")
		bytes, err := swag.WriteJSON(m.ProductIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_lte\":null")
		first = false
	}

	// handle nullable field product_id_not
	if m.ProductIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not\":")
		bytes, err := swag.WriteJSON(m.ProductIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not\":null")
		first = false
	}

	// handle nullable field product_id_not_contains
	if m.ProductIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ProductIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_contains\":null")
		first = false
	}

	// handle nullable field product_id_not_ends_with
	if m.ProductIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ProductIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field product_id_not_in with omitempty
	if !swag.IsZero(m.ProductIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ProductIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field product_id_not_starts_with
	if m.ProductIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ProductIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field product_id_starts_with
	if m.ProductIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ProductIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_id_starts_with\":null")
		first = false
	}

	// handle nullable field slot
	if m.Slot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot\":")
		bytes, err := swag.WriteJSON(m.Slot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Slot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot\":null")
		first = false
	}

	// handle nullable field slot_contains
	if m.SlotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_contains\":")
		bytes, err := swag.WriteJSON(m.SlotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_contains\":null")
		first = false
	}

	// handle nullable field slot_ends_with
	if m.SlotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_ends_with\":")
		bytes, err := swag.WriteJSON(m.SlotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_ends_with\":null")
		first = false
	}

	// handle nullable field slot_gt
	if m.SlotGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_gt\":")
		bytes, err := swag.WriteJSON(m.SlotGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_gt\":null")
		first = false
	}

	// handle nullable field slot_gte
	if m.SlotGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_gte\":")
		bytes, err := swag.WriteJSON(m.SlotGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_gte\":null")
		first = false
	}

	// handle non nullable field slot_in with omitempty
	if !swag.IsZero(m.SlotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_in\":")
		bytes, err := swag.WriteJSON(m.SlotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slot_lt
	if m.SlotLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_lt\":")
		bytes, err := swag.WriteJSON(m.SlotLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_lt\":null")
		first = false
	}

	// handle nullable field slot_lte
	if m.SlotLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_lte\":")
		bytes, err := swag.WriteJSON(m.SlotLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_lte\":null")
		first = false
	}

	// handle nullable field slot_not
	if m.SlotNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not\":")
		bytes, err := swag.WriteJSON(m.SlotNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not\":null")
		first = false
	}

	// handle nullable field slot_not_contains
	if m.SlotNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_contains\":")
		bytes, err := swag.WriteJSON(m.SlotNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_contains\":null")
		first = false
	}

	// handle nullable field slot_not_ends_with
	if m.SlotNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SlotNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_ends_with\":null")
		first = false
	}

	// handle non nullable field slot_not_in with omitempty
	if !swag.IsZero(m.SlotNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_in\":")
		bytes, err := swag.WriteJSON(m.SlotNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slot_not_starts_with
	if m.SlotNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SlotNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_not_starts_with\":null")
		first = false
	}

	// handle nullable field slot_starts_with
	if m.SlotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_starts_with\":")
		bytes, err := swag.WriteJSON(m.SlotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SlotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slot_starts_with\":null")
		first = false
	}

	// handle nullable field sriov_state
	if m.SriovState != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state\":")
		bytes, err := swag.WriteJSON(m.SriovState)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SriovState_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state\":null")
		first = false
	}

	// handle non nullable field sriov_state_in with omitempty
	if !swag.IsZero(m.SriovStateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state_in\":")
		bytes, err := swag.WriteJSON(m.SriovStateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field sriov_state_not
	if m.SriovStateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state_not\":")
		bytes, err := swag.WriteJSON(m.SriovStateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SriovStateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state_not\":null")
		first = false
	}

	// handle non nullable field sriov_state_not_in with omitempty
	if !swag.IsZero(m.SriovStateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sriov_state_not_in\":")
		bytes, err := swag.WriteJSON(m.SriovStateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subsystem_product_id
	if m.SubsystemProductID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_contains
	if m.SubsystemProductIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_contains\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_contains\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_ends_with
	if m.SubsystemProductIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_ends_with\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_gt
	if m.SubsystemProductIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_gt\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_gt\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_gte
	if m.SubsystemProductIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_gte\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_gte\":null")
		first = false
	}

	// handle non nullable field subsystem_product_id_in with omitempty
	if !swag.IsZero(m.SubsystemProductIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_in\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subsystem_product_id_lt
	if m.SubsystemProductIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_lt\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_lt\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_lte
	if m.SubsystemProductIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_lte\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_lte\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_not
	if m.SubsystemProductIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_not_contains
	if m.SubsystemProductIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_contains\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_not_ends_with
	if m.SubsystemProductIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field subsystem_product_id_not_in with omitempty
	if !swag.IsZero(m.SubsystemProductIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_in\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subsystem_product_id_not_starts_with
	if m.SubsystemProductIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field subsystem_product_id_starts_with
	if m.SubsystemProductIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemProductIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemProductIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_product_id_starts_with\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id
	if m.SubsystemVendorID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_contains
	if m.SubsystemVendorIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_contains\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_contains\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_ends_with
	if m.SubsystemVendorIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_ends_with\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_gt
	if m.SubsystemVendorIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_gt\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_gt\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_gte
	if m.SubsystemVendorIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_gte\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_gte\":null")
		first = false
	}

	// handle non nullable field subsystem_vendor_id_in with omitempty
	if !swag.IsZero(m.SubsystemVendorIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_in\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subsystem_vendor_id_lt
	if m.SubsystemVendorIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_lt\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_lt\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_lte
	if m.SubsystemVendorIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_lte\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_lte\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_not
	if m.SubsystemVendorIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_not_contains
	if m.SubsystemVendorIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_contains\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_not_ends_with
	if m.SubsystemVendorIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field subsystem_vendor_id_not_in with omitempty
	if !swag.IsZero(m.SubsystemVendorIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_in\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subsystem_vendor_id_not_starts_with
	if m.SubsystemVendorIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field subsystem_vendor_id_starts_with
	if m.SubsystemVendorIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubsystemVendorIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubsystemVendorIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subsystem_vendor_id_starts_with\":null")
		first = false
	}

	// handle nullable field total_mdev_num
	if m.TotalMdevNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num\":null")
		first = false
	}

	// handle nullable field total_mdev_num_gt
	if m.TotalMdevNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_gt\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_gt\":null")
		first = false
	}

	// handle nullable field total_mdev_num_gte
	if m.TotalMdevNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_gte\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_gte\":null")
		first = false
	}

	// handle non nullable field total_mdev_num_in with omitempty
	if !swag.IsZero(m.TotalMdevNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_in\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_mdev_num_lt
	if m.TotalMdevNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_lt\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_lt\":null")
		first = false
	}

	// handle nullable field total_mdev_num_lte
	if m.TotalMdevNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_lte\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_lte\":null")
		first = false
	}

	// handle nullable field total_mdev_num_not
	if m.TotalMdevNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_not\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMdevNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_not\":null")
		first = false
	}

	// handle non nullable field total_mdev_num_not_in with omitempty
	if !swag.IsZero(m.TotalMdevNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_mdev_num_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalMdevNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_partitioning_num
	if m.TotalPartitioningNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num\":null")
		first = false
	}

	// handle nullable field total_partitioning_num_gt
	if m.TotalPartitioningNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_gt\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_gt\":null")
		first = false
	}

	// handle nullable field total_partitioning_num_gte
	if m.TotalPartitioningNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_gte\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_gte\":null")
		first = false
	}

	// handle non nullable field total_partitioning_num_in with omitempty
	if !swag.IsZero(m.TotalPartitioningNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_in\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_partitioning_num_lt
	if m.TotalPartitioningNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_lt\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_lt\":null")
		first = false
	}

	// handle nullable field total_partitioning_num_lte
	if m.TotalPartitioningNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_lte\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_lte\":null")
		first = false
	}

	// handle nullable field total_partitioning_num_not
	if m.TotalPartitioningNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_not\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalPartitioningNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_not\":null")
		first = false
	}

	// handle non nullable field total_partitioning_num_not_in with omitempty
	if !swag.IsZero(m.TotalPartitioningNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_partitioning_num_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalPartitioningNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_vf_num
	if m.TotalVfNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num\":")
		bytes, err := swag.WriteJSON(m.TotalVfNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num\":null")
		first = false
	}

	// handle nullable field total_vf_num_gt
	if m.TotalVfNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gt\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gt\":null")
		first = false
	}

	// handle nullable field total_vf_num_gte
	if m.TotalVfNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gte\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gte\":null")
		first = false
	}

	// handle non nullable field total_vf_num_in with omitempty
	if !swag.IsZero(m.TotalVfNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_in\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_vf_num_lt
	if m.TotalVfNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lt\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lt\":null")
		first = false
	}

	// handle nullable field total_vf_num_lte
	if m.TotalVfNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lte\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lte\":null")
		first = false
	}

	// handle nullable field total_vf_num_not
	if m.TotalVfNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not\":null")
		first = false
	}

	// handle non nullable field total_vf_num_not_in with omitempty
	if !swag.IsZero(m.TotalVfNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage_type
	if m.UsageType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type\":")
		bytes, err := swag.WriteJSON(m.UsageType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsageType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type\":null")
		first = false
	}

	// handle non nullable field usage_type_in with omitempty
	if !swag.IsZero(m.UsageTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type_in\":")
		bytes, err := swag.WriteJSON(m.UsageTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage_type_not
	if m.UsageTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type_not\":")
		bytes, err := swag.WriteJSON(m.UsageTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsageTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type_not\":null")
		first = false
	}

	// handle non nullable field usage_type_not_in with omitempty
	if !swag.IsZero(m.UsageTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_type_not_in\":")
		bytes, err := swag.WriteJSON(m.UsageTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_mdev_num
	if m.UsedMdevNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num\":null")
		first = false
	}

	// handle nullable field used_mdev_num_gt
	if m.UsedMdevNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_gt\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_gt\":null")
		first = false
	}

	// handle nullable field used_mdev_num_gte
	if m.UsedMdevNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_gte\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_gte\":null")
		first = false
	}

	// handle non nullable field used_mdev_num_in with omitempty
	if !swag.IsZero(m.UsedMdevNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_in\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_mdev_num_lt
	if m.UsedMdevNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_lt\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_lt\":null")
		first = false
	}

	// handle nullable field used_mdev_num_lte
	if m.UsedMdevNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_lte\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_lte\":null")
		first = false
	}

	// handle nullable field used_mdev_num_not
	if m.UsedMdevNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_not\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMdevNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_not\":null")
		first = false
	}

	// handle non nullable field used_mdev_num_not_in with omitempty
	if !swag.IsZero(m.UsedMdevNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_mdev_num_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedMdevNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_partitioning_num
	if m.UsedPartitioningNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num\":null")
		first = false
	}

	// handle nullable field used_partitioning_num_gt
	if m.UsedPartitioningNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_gt\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_gt\":null")
		first = false
	}

	// handle nullable field used_partitioning_num_gte
	if m.UsedPartitioningNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_gte\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_gte\":null")
		first = false
	}

	// handle non nullable field used_partitioning_num_in with omitempty
	if !swag.IsZero(m.UsedPartitioningNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_in\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_partitioning_num_lt
	if m.UsedPartitioningNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_lt\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_lt\":null")
		first = false
	}

	// handle nullable field used_partitioning_num_lte
	if m.UsedPartitioningNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_lte\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_lte\":null")
		first = false
	}

	// handle nullable field used_partitioning_num_not
	if m.UsedPartitioningNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_not\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedPartitioningNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_not\":null")
		first = false
	}

	// handle non nullable field used_partitioning_num_not_in with omitempty
	if !swag.IsZero(m.UsedPartitioningNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_partitioning_num_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedPartitioningNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_vf_num
	if m.UsedVfNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num\":")
		bytes, err := swag.WriteJSON(m.UsedVfNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num\":null")
		first = false
	}

	// handle nullable field used_vf_num_gt
	if m.UsedVfNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gt\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gt\":null")
		first = false
	}

	// handle nullable field used_vf_num_gte
	if m.UsedVfNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gte\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gte\":null")
		first = false
	}

	// handle non nullable field used_vf_num_in with omitempty
	if !swag.IsZero(m.UsedVfNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_in\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_vf_num_lt
	if m.UsedVfNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lt\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lt\":null")
		first = false
	}

	// handle nullable field used_vf_num_lte
	if m.UsedVfNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lte\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lte\":null")
		first = false
	}

	// handle nullable field used_vf_num_not
	if m.UsedVfNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not\":null")
		first = false
	}

	// handle non nullable field used_vf_num_not_in with omitempty
	if !swag.IsZero(m.UsedVfNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field user_usage
	if m.UserUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage\":")
		bytes, err := swag.WriteJSON(m.UserUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UserUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage\":null")
		first = false
	}

	// handle non nullable field user_usage_in with omitempty
	if !swag.IsZero(m.UserUsageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_in\":")
		bytes, err := swag.WriteJSON(m.UserUsageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field user_usage_not
	if m.UserUsageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not\":")
		bytes, err := swag.WriteJSON(m.UserUsageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UserUsageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not\":null")
		first = false
	}

	// handle non nullable field user_usage_not_in with omitempty
	if !swag.IsZero(m.UserUsageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not_in\":")
		bytes, err := swag.WriteJSON(m.UserUsageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor_id
	if m.VendorID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id\":")
		bytes, err := swag.WriteJSON(m.VendorID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id\":null")
		first = false
	}

	// handle nullable field vendor_id_contains
	if m.VendorIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_contains\":")
		bytes, err := swag.WriteJSON(m.VendorIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_contains\":null")
		first = false
	}

	// handle nullable field vendor_id_ends_with
	if m.VendorIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.VendorIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_ends_with\":null")
		first = false
	}

	// handle nullable field vendor_id_gt
	if m.VendorIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_gt\":")
		bytes, err := swag.WriteJSON(m.VendorIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_gt\":null")
		first = false
	}

	// handle nullable field vendor_id_gte
	if m.VendorIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_gte\":")
		bytes, err := swag.WriteJSON(m.VendorIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_gte\":null")
		first = false
	}

	// handle non nullable field vendor_id_in with omitempty
	if !swag.IsZero(m.VendorIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_in\":")
		bytes, err := swag.WriteJSON(m.VendorIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor_id_lt
	if m.VendorIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_lt\":")
		bytes, err := swag.WriteJSON(m.VendorIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_lt\":null")
		first = false
	}

	// handle nullable field vendor_id_lte
	if m.VendorIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_lte\":")
		bytes, err := swag.WriteJSON(m.VendorIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_lte\":null")
		first = false
	}

	// handle nullable field vendor_id_not
	if m.VendorIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not\":")
		bytes, err := swag.WriteJSON(m.VendorIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not\":null")
		first = false
	}

	// handle nullable field vendor_id_not_contains
	if m.VendorIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.VendorIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_contains\":null")
		first = false
	}

	// handle nullable field vendor_id_not_ends_with
	if m.VendorIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VendorIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vendor_id_not_in with omitempty
	if !swag.IsZero(m.VendorIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_in\":")
		bytes, err := swag.WriteJSON(m.VendorIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor_id_not_starts_with
	if m.VendorIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VendorIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field vendor_id_starts_with
	if m.VendorIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.VendorIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_id_starts_with\":null")
		first = false
	}

	// handle nullable field verdor_name
	if m.VerdorName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name\":")
		bytes, err := swag.WriteJSON(m.VerdorName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name\":null")
		first = false
	}

	// handle nullable field verdor_name_contains
	if m.VerdorNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_contains\":")
		bytes, err := swag.WriteJSON(m.VerdorNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_contains\":null")
		first = false
	}

	// handle nullable field verdor_name_ends_with
	if m.VerdorNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.VerdorNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_ends_with\":null")
		first = false
	}

	// handle nullable field verdor_name_gt
	if m.VerdorNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_gt\":")
		bytes, err := swag.WriteJSON(m.VerdorNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_gt\":null")
		first = false
	}

	// handle nullable field verdor_name_gte
	if m.VerdorNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_gte\":")
		bytes, err := swag.WriteJSON(m.VerdorNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_gte\":null")
		first = false
	}

	// handle non nullable field verdor_name_in with omitempty
	if !swag.IsZero(m.VerdorNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_in\":")
		bytes, err := swag.WriteJSON(m.VerdorNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field verdor_name_lt
	if m.VerdorNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_lt\":")
		bytes, err := swag.WriteJSON(m.VerdorNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_lt\":null")
		first = false
	}

	// handle nullable field verdor_name_lte
	if m.VerdorNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_lte\":")
		bytes, err := swag.WriteJSON(m.VerdorNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_lte\":null")
		first = false
	}

	// handle nullable field verdor_name_not
	if m.VerdorNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not\":")
		bytes, err := swag.WriteJSON(m.VerdorNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not\":null")
		first = false
	}

	// handle nullable field verdor_name_not_contains
	if m.VerdorNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.VerdorNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_contains\":null")
		first = false
	}

	// handle nullable field verdor_name_not_ends_with
	if m.VerdorNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VerdorNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field verdor_name_not_in with omitempty
	if !swag.IsZero(m.VerdorNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_in\":")
		bytes, err := swag.WriteJSON(m.VerdorNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field verdor_name_not_starts_with
	if m.VerdorNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VerdorNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field verdor_name_starts_with
	if m.VerdorNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.VerdorNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VerdorNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verdor_name_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this pci device where input
func (m *PciDeviceWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdevState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdevStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdevStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMdevStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitioningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitioningStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitioningStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitioningStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSriovState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSriovStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSriovStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSriovStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PciDeviceWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateIommuStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatus) { // not required
		return nil
	}

	if m.IommuStatus != nil {
		if err := m.IommuStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateIommuStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IommuStatusIn); i++ {

		if err := m.IommuStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateIommuStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusNot) { // not required
		return nil
	}

	if m.IommuStatusNot != nil {
		if err := m.IommuStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateIommuStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IommuStatusNotIn); i++ {

		if err := m.IommuStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateMdevState(formats strfmt.Registry) error {
	if swag.IsZero(m.MdevState) { // not required
		return nil
	}

	if m.MdevState != nil {
		if err := m.MdevState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateMdevStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MdevStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MdevStateIn); i++ {

		if err := m.MdevStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateMdevStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MdevStateNot) { // not required
		return nil
	}

	if m.MdevStateNot != nil {
		if err := m.MdevStateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateMdevStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MdevStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MdevStateNotIn); i++ {

		if err := m.MdevStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validatePartitioningState(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitioningState) { // not required
		return nil
	}

	if m.PartitioningState != nil {
		if err := m.PartitioningState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validatePartitioningStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitioningStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PartitioningStateIn); i++ {

		if err := m.PartitioningStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validatePartitioningStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitioningStateNot) { // not required
		return nil
	}

	if m.PartitioningStateNot != nil {
		if err := m.PartitioningStateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validatePartitioningStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PartitioningStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PartitioningStateNotIn); i++ {

		if err := m.PartitioningStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateSriovState(formats strfmt.Registry) error {
	if swag.IsZero(m.SriovState) { // not required
		return nil
	}

	if m.SriovState != nil {
		if err := m.SriovState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateSriovStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SriovStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SriovStateIn); i++ {

		if err := m.SriovStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateSriovStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SriovStateNot) { // not required
		return nil
	}

	if m.SriovStateNot != nil {
		if err := m.SriovStateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateSriovStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SriovStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SriovStateNotIn); i++ {

		if err := m.SriovStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateUsageType(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageType) { // not required
		return nil
	}

	if m.UsageType != nil {
		if err := m.UsageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateUsageTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageTypeIn); i++ {

		if err := m.UsageTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateUsageTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageTypeNot) { // not required
		return nil
	}

	if m.UsageTypeNot != nil {
		if err := m.UsageTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateUsageTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageTypeNotIn); i++ {

		if err := m.UsageTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateUserUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsage) { // not required
		return nil
	}

	if m.UserUsage != nil {
		if err := m.UserUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateUserUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) validateUserUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNot) { // not required
		return nil
	}

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) validateUserUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this pci device where input based on the context it is used
func (m *PciDeviceWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMdevState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMdevStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMdevStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMdevStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitioningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitioningStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitioningStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitioningStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSriovState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSriovStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSriovStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSriovStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PciDeviceWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateIommuStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.IommuStatus != nil {
		if err := m.IommuStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateIommuStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IommuStatusIn); i++ {

		if err := m.IommuStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateIommuStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.IommuStatusNot != nil {
		if err := m.IommuStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateIommuStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IommuStatusNotIn); i++ {

		if err := m.IommuStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateMdevState(ctx context.Context, formats strfmt.Registry) error {

	if m.MdevState != nil {
		if err := m.MdevState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateMdevStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MdevStateIn); i++ {

		if err := m.MdevStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateMdevStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MdevStateNot != nil {
		if err := m.MdevStateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateMdevStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MdevStateNotIn); i++ {

		if err := m.MdevStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mdev_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mdev_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidatePartitioningState(ctx context.Context, formats strfmt.Registry) error {

	if m.PartitioningState != nil {
		if err := m.PartitioningState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidatePartitioningStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PartitioningStateIn); i++ {

		if err := m.PartitioningStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidatePartitioningStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PartitioningStateNot != nil {
		if err := m.PartitioningStateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidatePartitioningStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PartitioningStateNotIn); i++ {

		if err := m.PartitioningStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partitioning_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("partitioning_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateSriovState(ctx context.Context, formats strfmt.Registry) error {

	if m.SriovState != nil {
		if err := m.SriovState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateSriovStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SriovStateIn); i++ {

		if err := m.SriovStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateSriovStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SriovStateNot != nil {
		if err := m.SriovStateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateSriovStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SriovStateNotIn); i++ {

		if err := m.SriovStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sriov_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sriov_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUsageType(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageType != nil {
		if err := m.UsageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUsageTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageTypeIn); i++ {

		if err := m.UsageTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUsageTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageTypeNot != nil {
		if err := m.UsageTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUsageTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageTypeNotIn); i++ {

		if err := m.UsageTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUserUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsage != nil {
		if err := m.UserUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUserUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUserUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *PciDeviceWhereInput) contextValidateUserUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PciDeviceWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PciDeviceWhereInput) UnmarshalBinary(b []byte) error {
	var res PciDeviceWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
