// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMNicMetaData Vm nic meta data
//
// swagger:model VmNicMetaData
type VMNicMetaData struct {

	// egress rate limit burst in bit
	EgressRateLimitBurstInBit *float64 `json:"egress_rate_limit_burst_in_bit,omitempty"`

	// egress rate limit enabled
	EgressRateLimitEnabled *bool `json:"egress_rate_limit_enabled,omitempty"`

	// egress rate limit max rate in bitps
	EgressRateLimitMaxRateInBitps *float64 `json:"egress_rate_limit_max_rate_in_bitps,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// ingress rate limit burst in bit
	IngressRateLimitBurstInBit *float64 `json:"ingress_rate_limit_burst_in_bit,omitempty"`

	// ingress rate limit enabled
	IngressRateLimitEnabled *bool `json:"ingress_rate_limit_enabled,omitempty"`

	// ingress rate limit max rate in bitps
	IngressRateLimitMaxRateInBitps *float64 `json:"ingress_rate_limit_max_rate_in_bitps,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// mac address
	MacAddress *string `json:"mac_address,omitempty"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// vlan local id
	VlanLocalID *string `json:"vlan_local_id,omitempty"`

	// vlan mode type
	VlanModeType *VlanModeType `json:"vlan_mode_type,omitempty"`

	// vlan name
	VlanName *string `json:"vlan_name,omitempty"`

	MarshalOpts *VMNicMetaDataMarshalOpts `json:"-"`
}

type VMNicMetaDataMarshalOpts struct {
	EgressRateLimitBurstInBit_Explicit_Null_When_Empty bool

	EgressRateLimitEnabled_Explicit_Null_When_Empty bool

	EgressRateLimitMaxRateInBitps_Explicit_Null_When_Empty bool

	Enabled_Explicit_Null_When_Empty bool

	IngressRateLimitBurstInBit_Explicit_Null_When_Empty bool

	IngressRateLimitEnabled_Explicit_Null_When_Empty bool

	IngressRateLimitMaxRateInBitps_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	MacAddress_Explicit_Null_When_Empty bool

	Mirror_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	VlanLocalID_Explicit_Null_When_Empty bool

	VlanModeType_Explicit_Null_When_Empty bool

	VlanName_Explicit_Null_When_Empty bool
}

func (m VMNicMetaData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field egress_rate_limit_burst_in_bit
	if m.EgressRateLimitBurstInBit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_burst_in_bit\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitBurstInBit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitBurstInBit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_burst_in_bit\":null")
		first = false
	}

	// handle nullable field egress_rate_limit_enabled
	if m.EgressRateLimitEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_enabled\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_enabled\":null")
		first = false
	}

	// handle nullable field egress_rate_limit_max_rate_in_bitps
	if m.EgressRateLimitMaxRateInBitps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_max_rate_in_bitps\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitMaxRateInBitps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitMaxRateInBitps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_max_rate_in_bitps\":null")
		first = false
	}

	// handle nullable field enabled
	if m.Enabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":")
		bytes, err := swag.WriteJSON(m.Enabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Enabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_burst_in_bit
	if m.IngressRateLimitBurstInBit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_burst_in_bit\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitBurstInBit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitBurstInBit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_burst_in_bit\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_enabled
	if m.IngressRateLimitEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_enabled\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_enabled\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_max_rate_in_bitps
	if m.IngressRateLimitMaxRateInBitps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_max_rate_in_bitps\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitMaxRateInBitps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitMaxRateInBitps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_max_rate_in_bitps\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field mac_address
	if m.MacAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":")
		bytes, err := swag.WriteJSON(m.MacAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":null")
		first = false
	}

	// handle nullable field mirror
	if m.Mirror != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mirror\":")
		bytes, err := swag.WriteJSON(m.Mirror)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mirror_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mirror\":null")
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field vlan_local_id
	if m.VlanLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":")
		bytes, err := swag.WriteJSON(m.VlanLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":null")
		first = false
	}

	// handle nullable field vlan_mode_type
	if m.VlanModeType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_mode_type\":")
		bytes, err := swag.WriteJSON(m.VlanModeType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanModeType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_mode_type\":null")
		first = false
	}

	// handle nullable field vlan_name
	if m.VlanName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_name\":")
		bytes, err := swag.WriteJSON(m.VlanName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_name\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm nic meta data
func (m *VMNicMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlanModeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicMetaData) validateVlanModeType(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanModeType) { // not required
		return nil
	}

	if m.VlanModeType != nil {
		if err := m.VlanModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm nic meta data based on the context it is used
func (m *VMNicMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlanModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicMetaData) contextValidateVlanModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanModeType != nil {
		if err := m.VlanModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMNicMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMNicMetaData) UnmarshalBinary(b []byte) error {
	var res VMNicMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
