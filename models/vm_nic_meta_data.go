// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMNicMetaData Vm nic meta data
//
// swagger:model VmNicMetaData
type VMNicMetaData struct {

	// egress rate limit burst in bit
	EgressRateLimitBurstInBit *float64 `json:"egress_rate_limit_burst_in_bit,omitempty"`

	// egress rate limit enabled
	EgressRateLimitEnabled *bool `json:"egress_rate_limit_enabled,omitempty"`

	// egress rate limit max rate in bitps
	EgressRateLimitMaxRateInBitps *float64 `json:"egress_rate_limit_max_rate_in_bitps,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// ingress rate limit burst in bit
	IngressRateLimitBurstInBit *float64 `json:"ingress_rate_limit_burst_in_bit,omitempty"`

	// ingress rate limit enabled
	IngressRateLimitEnabled *bool `json:"ingress_rate_limit_enabled,omitempty"`

	// ingress rate limit max rate in bitps
	IngressRateLimitMaxRateInBitps *float64 `json:"ingress_rate_limit_max_rate_in_bitps,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// mac address
	MacAddress *string `json:"mac_address,omitempty"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// vlan local id
	VlanLocalID *string `json:"vlan_local_id,omitempty"`

	// vlan mode type
	VlanModeType *VlanModeType `json:"vlan_mode_type,omitempty"`

	// vlan name
	VlanName *string `json:"vlan_name,omitempty"`
}

// Validate validates this Vm nic meta data
func (m *VMNicMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVlanModeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicMetaData) validateVlanModeType(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanModeType) { // not required
		return nil
	}

	if m.VlanModeType != nil {
		if err := m.VlanModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm nic meta data based on the context it is used
func (m *VMNicMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlanModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicMetaData) contextValidateVlanModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanModeType != nil {
		if err := m.VlanModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMNicMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMNicMetaData) UnmarshalBinary(b []byte) error {
	var res VMNicMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
