// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicationServiceWhereInput replication service where input
//
// swagger:model ReplicationServiceWhereInput
type ReplicationServiceWhereInput struct {

	// a n d
	AND []*ReplicationServiceWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ReplicationServiceWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ReplicationServiceWhereInput `json:"OR,omitempty"`

	// application
	Application *CloudTowerApplicationWhereInput `json:"application,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// failover executions every
	FailoverExecutionsEvery *FailoverExecutionWhereInput `json:"failover_executions_every,omitempty"`

	// failover executions none
	FailoverExecutionsNone *FailoverExecutionWhereInput `json:"failover_executions_none,omitempty"`

	// failover executions some
	FailoverExecutionsSome *FailoverExecutionWhereInput `json:"failover_executions_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// kube config
	KubeConfig *string `json:"kube_config,omitempty"`

	// kube config contains
	KubeConfigContains *string `json:"kube_config_contains,omitempty"`

	// kube config ends with
	KubeConfigEndsWith *string `json:"kube_config_ends_with,omitempty"`

	// kube config gt
	KubeConfigGt *string `json:"kube_config_gt,omitempty"`

	// kube config gte
	KubeConfigGte *string `json:"kube_config_gte,omitempty"`

	// kube config in
	KubeConfigIn []string `json:"kube_config_in,omitempty"`

	// kube config lt
	KubeConfigLt *string `json:"kube_config_lt,omitempty"`

	// kube config lte
	KubeConfigLte *string `json:"kube_config_lte,omitempty"`

	// kube config not
	KubeConfigNot *string `json:"kube_config_not,omitempty"`

	// kube config not contains
	KubeConfigNotContains *string `json:"kube_config_not_contains,omitempty"`

	// kube config not ends with
	KubeConfigNotEndsWith *string `json:"kube_config_not_ends_with,omitempty"`

	// kube config not in
	KubeConfigNotIn []string `json:"kube_config_not_in,omitempty"`

	// kube config not starts with
	KubeConfigNotStartsWith *string `json:"kube_config_not_starts_with,omitempty"`

	// kube config starts with
	KubeConfigStartsWith *string `json:"kube_config_starts_with,omitempty"`

	// max failback jobs
	MaxFailbackJobs *int32 `json:"max_failback_jobs,omitempty"`

	// max failback jobs gt
	MaxFailbackJobsGt *int32 `json:"max_failback_jobs_gt,omitempty"`

	// max failback jobs gte
	MaxFailbackJobsGte *int32 `json:"max_failback_jobs_gte,omitempty"`

	// max failback jobs in
	MaxFailbackJobsIn []int32 `json:"max_failback_jobs_in,omitempty"`

	// max failback jobs lt
	MaxFailbackJobsLt *int32 `json:"max_failback_jobs_lt,omitempty"`

	// max failback jobs lte
	MaxFailbackJobsLte *int32 `json:"max_failback_jobs_lte,omitempty"`

	// max failback jobs not
	MaxFailbackJobsNot *int32 `json:"max_failback_jobs_not,omitempty"`

	// max failback jobs not in
	MaxFailbackJobsNotIn []int32 `json:"max_failback_jobs_not_in,omitempty"`

	// max failback speed limit
	MaxFailbackSpeedLimit *float64 `json:"max_failback_speed_limit,omitempty"`

	// max failback speed limit gt
	MaxFailbackSpeedLimitGt *float64 `json:"max_failback_speed_limit_gt,omitempty"`

	// max failback speed limit gte
	MaxFailbackSpeedLimitGte *float64 `json:"max_failback_speed_limit_gte,omitempty"`

	// max failback speed limit in
	MaxFailbackSpeedLimitIn []float64 `json:"max_failback_speed_limit_in,omitempty"`

	// max failback speed limit lt
	MaxFailbackSpeedLimitLt *float64 `json:"max_failback_speed_limit_lt,omitempty"`

	// max failback speed limit lte
	MaxFailbackSpeedLimitLte *float64 `json:"max_failback_speed_limit_lte,omitempty"`

	// max failback speed limit not
	MaxFailbackSpeedLimitNot *float64 `json:"max_failback_speed_limit_not,omitempty"`

	// max failback speed limit not in
	MaxFailbackSpeedLimitNotIn []float64 `json:"max_failback_speed_limit_not_in,omitempty"`

	// max replication jobs
	MaxReplicationJobs *int32 `json:"max_replication_jobs,omitempty"`

	// max replication jobs gt
	MaxReplicationJobsGt *int32 `json:"max_replication_jobs_gt,omitempty"`

	// max replication jobs gte
	MaxReplicationJobsGte *int32 `json:"max_replication_jobs_gte,omitempty"`

	// max replication jobs in
	MaxReplicationJobsIn []int32 `json:"max_replication_jobs_in,omitempty"`

	// max replication jobs lt
	MaxReplicationJobsLt *int32 `json:"max_replication_jobs_lt,omitempty"`

	// max replication jobs lte
	MaxReplicationJobsLte *int32 `json:"max_replication_jobs_lte,omitempty"`

	// max replication jobs not
	MaxReplicationJobsNot *int32 `json:"max_replication_jobs_not,omitempty"`

	// max replication jobs not in
	MaxReplicationJobsNotIn []int32 `json:"max_replication_jobs_not_in,omitempty"`

	// max replication speed limit
	MaxReplicationSpeedLimit *float64 `json:"max_replication_speed_limit,omitempty"`

	// max replication speed limit gt
	MaxReplicationSpeedLimitGt *float64 `json:"max_replication_speed_limit_gt,omitempty"`

	// max replication speed limit gte
	MaxReplicationSpeedLimitGte *float64 `json:"max_replication_speed_limit_gte,omitempty"`

	// max replication speed limit in
	MaxReplicationSpeedLimitIn []float64 `json:"max_replication_speed_limit_in,omitempty"`

	// max replication speed limit lt
	MaxReplicationSpeedLimitLt *float64 `json:"max_replication_speed_limit_lt,omitempty"`

	// max replication speed limit lte
	MaxReplicationSpeedLimitLte *float64 `json:"max_replication_speed_limit_lte,omitempty"`

	// max replication speed limit not
	MaxReplicationSpeedLimitNot *float64 `json:"max_replication_speed_limit_not,omitempty"`

	// max replication speed limit not in
	MaxReplicationSpeedLimitNotIn []float64 `json:"max_replication_speed_limit_not_in,omitempty"`

	// max retry times
	MaxRetryTimes *int32 `json:"max_retry_times,omitempty"`

	// max retry times gt
	MaxRetryTimesGt *int32 `json:"max_retry_times_gt,omitempty"`

	// max retry times gte
	MaxRetryTimesGte *int32 `json:"max_retry_times_gte,omitempty"`

	// max retry times in
	MaxRetryTimesIn []int32 `json:"max_retry_times_in,omitempty"`

	// max retry times lt
	MaxRetryTimesLt *int32 `json:"max_retry_times_lt,omitempty"`

	// max retry times lte
	MaxRetryTimesLte *int32 `json:"max_retry_times_lte,omitempty"`

	// max retry times not
	MaxRetryTimesNot *int32 `json:"max_retry_times_not,omitempty"`

	// max retry times not in
	MaxRetryTimesNotIn []int32 `json:"max_retry_times_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// permanent failover execution every
	PermanentFailoverExecutionEvery *PermanentFailoverExecutionWhereInput `json:"permanent_failover_execution_every,omitempty"`

	// permanent failover execution none
	PermanentFailoverExecutionNone *PermanentFailoverExecutionWhereInput `json:"permanent_failover_execution_none,omitempty"`

	// permanent failover execution some
	PermanentFailoverExecutionSome *PermanentFailoverExecutionWhereInput `json:"permanent_failover_execution_some,omitempty"`

	// replication clusters every
	ReplicationClustersEvery *ClusterWhereInput `json:"replication_clusters_every,omitempty"`

	// replication clusters none
	ReplicationClustersNone *ClusterWhereInput `json:"replication_clusters_none,omitempty"`

	// replication clusters some
	ReplicationClustersSome *ClusterWhereInput `json:"replication_clusters_some,omitempty"`

	// replication plans every
	ReplicationPlansEvery *ReplicationPlanWhereInput `json:"replication_plans_every,omitempty"`

	// replication plans none
	ReplicationPlansNone *ReplicationPlanWhereInput `json:"replication_plans_none,omitempty"`

	// replication plans some
	ReplicationPlansSome *ReplicationPlanWhereInput `json:"replication_plans_some,omitempty"`

	// resource version
	ResourceVersion *int32 `json:"resource_version,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// retry interval
	RetryInterval *int32 `json:"retry_interval,omitempty"`

	// retry interval gt
	RetryIntervalGt *int32 `json:"retry_interval_gt,omitempty"`

	// retry interval gte
	RetryIntervalGte *int32 `json:"retry_interval_gte,omitempty"`

	// retry interval in
	RetryIntervalIn []int32 `json:"retry_interval_in,omitempty"`

	// retry interval lt
	RetryIntervalLt *int32 `json:"retry_interval_lt,omitempty"`

	// retry interval lte
	RetryIntervalLte *int32 `json:"retry_interval_lte,omitempty"`

	// retry interval not
	RetryIntervalNot *int32 `json:"retry_interval_not,omitempty"`

	// retry interval not in
	RetryIntervalNotIn []int32 `json:"retry_interval_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	MarshalOpts *ReplicationServiceWhereInputMarshalOpts `json:"-"`
}

type ReplicationServiceWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Application_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	FailoverExecutionsEvery_Explicit_Null_When_Empty bool

	FailoverExecutionsNone_Explicit_Null_When_Empty bool

	FailoverExecutionsSome_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	KubeConfig_Explicit_Null_When_Empty bool

	KubeConfigContains_Explicit_Null_When_Empty bool

	KubeConfigEndsWith_Explicit_Null_When_Empty bool

	KubeConfigGt_Explicit_Null_When_Empty bool

	KubeConfigGte_Explicit_Null_When_Empty bool

	KubeConfigIn_Explicit_Null_When_Empty bool

	KubeConfigLt_Explicit_Null_When_Empty bool

	KubeConfigLte_Explicit_Null_When_Empty bool

	KubeConfigNot_Explicit_Null_When_Empty bool

	KubeConfigNotContains_Explicit_Null_When_Empty bool

	KubeConfigNotEndsWith_Explicit_Null_When_Empty bool

	KubeConfigNotIn_Explicit_Null_When_Empty bool

	KubeConfigNotStartsWith_Explicit_Null_When_Empty bool

	KubeConfigStartsWith_Explicit_Null_When_Empty bool

	MaxFailbackJobs_Explicit_Null_When_Empty bool

	MaxFailbackJobsGt_Explicit_Null_When_Empty bool

	MaxFailbackJobsGte_Explicit_Null_When_Empty bool

	MaxFailbackJobsIn_Explicit_Null_When_Empty bool

	MaxFailbackJobsLt_Explicit_Null_When_Empty bool

	MaxFailbackJobsLte_Explicit_Null_When_Empty bool

	MaxFailbackJobsNot_Explicit_Null_When_Empty bool

	MaxFailbackJobsNotIn_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimit_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitGt_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitGte_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitIn_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitLt_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitLte_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitNot_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimitNotIn_Explicit_Null_When_Empty bool

	MaxReplicationJobs_Explicit_Null_When_Empty bool

	MaxReplicationJobsGt_Explicit_Null_When_Empty bool

	MaxReplicationJobsGte_Explicit_Null_When_Empty bool

	MaxReplicationJobsIn_Explicit_Null_When_Empty bool

	MaxReplicationJobsLt_Explicit_Null_When_Empty bool

	MaxReplicationJobsLte_Explicit_Null_When_Empty bool

	MaxReplicationJobsNot_Explicit_Null_When_Empty bool

	MaxReplicationJobsNotIn_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimit_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitGt_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitGte_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitIn_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitLt_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitLte_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitNot_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimitNotIn_Explicit_Null_When_Empty bool

	MaxRetryTimes_Explicit_Null_When_Empty bool

	MaxRetryTimesGt_Explicit_Null_When_Empty bool

	MaxRetryTimesGte_Explicit_Null_When_Empty bool

	MaxRetryTimesIn_Explicit_Null_When_Empty bool

	MaxRetryTimesLt_Explicit_Null_When_Empty bool

	MaxRetryTimesLte_Explicit_Null_When_Empty bool

	MaxRetryTimesNot_Explicit_Null_When_Empty bool

	MaxRetryTimesNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionEvery_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionNone_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionSome_Explicit_Null_When_Empty bool

	ReplicationClustersEvery_Explicit_Null_When_Empty bool

	ReplicationClustersNone_Explicit_Null_When_Empty bool

	ReplicationClustersSome_Explicit_Null_When_Empty bool

	ReplicationPlansEvery_Explicit_Null_When_Empty bool

	ReplicationPlansNone_Explicit_Null_When_Empty bool

	ReplicationPlansSome_Explicit_Null_When_Empty bool

	ResourceVersion_Explicit_Null_When_Empty bool

	ResourceVersionGt_Explicit_Null_When_Empty bool

	ResourceVersionGte_Explicit_Null_When_Empty bool

	ResourceVersionIn_Explicit_Null_When_Empty bool

	ResourceVersionLt_Explicit_Null_When_Empty bool

	ResourceVersionLte_Explicit_Null_When_Empty bool

	ResourceVersionNot_Explicit_Null_When_Empty bool

	ResourceVersionNotIn_Explicit_Null_When_Empty bool

	RetryInterval_Explicit_Null_When_Empty bool

	RetryIntervalGt_Explicit_Null_When_Empty bool

	RetryIntervalGte_Explicit_Null_When_Empty bool

	RetryIntervalIn_Explicit_Null_When_Empty bool

	RetryIntervalLt_Explicit_Null_When_Empty bool

	RetryIntervalLte_Explicit_Null_When_Empty bool

	RetryIntervalNot_Explicit_Null_When_Empty bool

	RetryIntervalNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool
}

func (m ReplicationServiceWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field application
	if m.Application != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":")
		bytes, err := swag.WriteJSON(m.Application)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Application_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failover_executions_every
	if m.FailoverExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":null")
		first = false
	}

	// handle nullable field failover_executions_none
	if m.FailoverExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":null")
		first = false
	}

	// handle nullable field failover_executions_some
	if m.FailoverExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field kube_config
	if m.KubeConfig != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":")
		bytes, err := swag.WriteJSON(m.KubeConfig)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfig_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":null")
		first = false
	}

	// handle nullable field kube_config_contains
	if m.KubeConfigContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_contains\":")
		bytes, err := swag.WriteJSON(m.KubeConfigContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_contains\":null")
		first = false
	}

	// handle nullable field kube_config_ends_with
	if m.KubeConfigEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_ends_with\":")
		bytes, err := swag.WriteJSON(m.KubeConfigEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_ends_with\":null")
		first = false
	}

	// handle nullable field kube_config_gt
	if m.KubeConfigGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_gt\":")
		bytes, err := swag.WriteJSON(m.KubeConfigGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_gt\":null")
		first = false
	}

	// handle nullable field kube_config_gte
	if m.KubeConfigGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_gte\":")
		bytes, err := swag.WriteJSON(m.KubeConfigGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_gte\":null")
		first = false
	}

	// handle non nullable field kube_config_in with omitempty
	if !swag.IsZero(m.KubeConfigIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_in\":")
		bytes, err := swag.WriteJSON(m.KubeConfigIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field kube_config_lt
	if m.KubeConfigLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_lt\":")
		bytes, err := swag.WriteJSON(m.KubeConfigLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_lt\":null")
		first = false
	}

	// handle nullable field kube_config_lte
	if m.KubeConfigLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_lte\":")
		bytes, err := swag.WriteJSON(m.KubeConfigLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_lte\":null")
		first = false
	}

	// handle nullable field kube_config_not
	if m.KubeConfigNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not\":")
		bytes, err := swag.WriteJSON(m.KubeConfigNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not\":null")
		first = false
	}

	// handle nullable field kube_config_not_contains
	if m.KubeConfigNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_contains\":")
		bytes, err := swag.WriteJSON(m.KubeConfigNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_contains\":null")
		first = false
	}

	// handle nullable field kube_config_not_ends_with
	if m.KubeConfigNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.KubeConfigNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_ends_with\":null")
		first = false
	}

	// handle non nullable field kube_config_not_in with omitempty
	if !swag.IsZero(m.KubeConfigNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_in\":")
		bytes, err := swag.WriteJSON(m.KubeConfigNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field kube_config_not_starts_with
	if m.KubeConfigNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.KubeConfigNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_not_starts_with\":null")
		first = false
	}

	// handle nullable field kube_config_starts_with
	if m.KubeConfigStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_starts_with\":")
		bytes, err := swag.WriteJSON(m.KubeConfigStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfigStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config_starts_with\":null")
		first = false
	}

	// handle nullable field max_failback_jobs
	if m.MaxFailbackJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs\":null")
		first = false
	}

	// handle nullable field max_failback_jobs_gt
	if m.MaxFailbackJobsGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_gt\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobsGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_gt\":null")
		first = false
	}

	// handle nullable field max_failback_jobs_gte
	if m.MaxFailbackJobsGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_gte\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobsGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_gte\":null")
		first = false
	}

	// handle non nullable field max_failback_jobs_in with omitempty
	if !swag.IsZero(m.MaxFailbackJobsIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_in\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_failback_jobs_lt
	if m.MaxFailbackJobsLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_lt\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobsLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_lt\":null")
		first = false
	}

	// handle nullable field max_failback_jobs_lte
	if m.MaxFailbackJobsLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_lte\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobsLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_lte\":null")
		first = false
	}

	// handle nullable field max_failback_jobs_not
	if m.MaxFailbackJobsNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_not\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobsNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_not\":null")
		first = false
	}

	// handle non nullable field max_failback_jobs_not_in with omitempty
	if !swag.IsZero(m.MaxFailbackJobsNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobsNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_failback_speed_limit
	if m.MaxFailbackSpeedLimit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit\":null")
		first = false
	}

	// handle nullable field max_failback_speed_limit_gt
	if m.MaxFailbackSpeedLimitGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_gt\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimitGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_gt\":null")
		first = false
	}

	// handle nullable field max_failback_speed_limit_gte
	if m.MaxFailbackSpeedLimitGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_gte\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimitGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_gte\":null")
		first = false
	}

	// handle non nullable field max_failback_speed_limit_in with omitempty
	if !swag.IsZero(m.MaxFailbackSpeedLimitIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_in\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_failback_speed_limit_lt
	if m.MaxFailbackSpeedLimitLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_lt\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimitLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_lt\":null")
		first = false
	}

	// handle nullable field max_failback_speed_limit_lte
	if m.MaxFailbackSpeedLimitLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_lte\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimitLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_lte\":null")
		first = false
	}

	// handle nullable field max_failback_speed_limit_not
	if m.MaxFailbackSpeedLimitNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_not\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimitNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_not\":null")
		first = false
	}

	// handle non nullable field max_failback_speed_limit_not_in with omitempty
	if !swag.IsZero(m.MaxFailbackSpeedLimitNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimitNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_replication_jobs
	if m.MaxReplicationJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs\":null")
		first = false
	}

	// handle nullable field max_replication_jobs_gt
	if m.MaxReplicationJobsGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_gt\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobsGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_gt\":null")
		first = false
	}

	// handle nullable field max_replication_jobs_gte
	if m.MaxReplicationJobsGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_gte\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobsGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_gte\":null")
		first = false
	}

	// handle non nullable field max_replication_jobs_in with omitempty
	if !swag.IsZero(m.MaxReplicationJobsIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_in\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_replication_jobs_lt
	if m.MaxReplicationJobsLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_lt\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobsLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_lt\":null")
		first = false
	}

	// handle nullable field max_replication_jobs_lte
	if m.MaxReplicationJobsLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_lte\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobsLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_lte\":null")
		first = false
	}

	// handle nullable field max_replication_jobs_not
	if m.MaxReplicationJobsNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_not\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobsNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_not\":null")
		first = false
	}

	// handle non nullable field max_replication_jobs_not_in with omitempty
	if !swag.IsZero(m.MaxReplicationJobsNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobsNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_replication_speed_limit
	if m.MaxReplicationSpeedLimit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit\":null")
		first = false
	}

	// handle nullable field max_replication_speed_limit_gt
	if m.MaxReplicationSpeedLimitGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_gt\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimitGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_gt\":null")
		first = false
	}

	// handle nullable field max_replication_speed_limit_gte
	if m.MaxReplicationSpeedLimitGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_gte\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimitGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_gte\":null")
		first = false
	}

	// handle non nullable field max_replication_speed_limit_in with omitempty
	if !swag.IsZero(m.MaxReplicationSpeedLimitIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_in\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_replication_speed_limit_lt
	if m.MaxReplicationSpeedLimitLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_lt\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimitLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_lt\":null")
		first = false
	}

	// handle nullable field max_replication_speed_limit_lte
	if m.MaxReplicationSpeedLimitLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_lte\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimitLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_lte\":null")
		first = false
	}

	// handle nullable field max_replication_speed_limit_not
	if m.MaxReplicationSpeedLimitNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_not\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimitNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_not\":null")
		first = false
	}

	// handle non nullable field max_replication_speed_limit_not_in with omitempty
	if !swag.IsZero(m.MaxReplicationSpeedLimitNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimitNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_retry_times
	if m.MaxRetryTimes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times\":null")
		first = false
	}

	// handle nullable field max_retry_times_gt
	if m.MaxRetryTimesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_gt\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_gt\":null")
		first = false
	}

	// handle nullable field max_retry_times_gte
	if m.MaxRetryTimesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_gte\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_gte\":null")
		first = false
	}

	// handle non nullable field max_retry_times_in with omitempty
	if !swag.IsZero(m.MaxRetryTimesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_in\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_retry_times_lt
	if m.MaxRetryTimesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_lt\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_lt\":null")
		first = false
	}

	// handle nullable field max_retry_times_lte
	if m.MaxRetryTimesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_lte\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_lte\":null")
		first = false
	}

	// handle nullable field max_retry_times_not
	if m.MaxRetryTimesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_not\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_not\":null")
		first = false
	}

	// handle non nullable field max_retry_times_not_in with omitempty
	if !swag.IsZero(m.MaxRetryTimesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field permanent_failover_execution_every
	if m.PermanentFailoverExecutionEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_every\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_every\":null")
		first = false
	}

	// handle nullable field permanent_failover_execution_none
	if m.PermanentFailoverExecutionNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_none\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_none\":null")
		first = false
	}

	// handle nullable field permanent_failover_execution_some
	if m.PermanentFailoverExecutionSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_some\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution_some\":null")
		first = false
	}

	// handle nullable field replication_clusters_every
	if m.ReplicationClustersEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationClustersEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationClustersEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_every\":null")
		first = false
	}

	// handle nullable field replication_clusters_none
	if m.ReplicationClustersNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationClustersNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationClustersNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_none\":null")
		first = false
	}

	// handle nullable field replication_clusters_some
	if m.ReplicationClustersSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationClustersSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationClustersSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_some\":null")
		first = false
	}

	// handle nullable field replication_plans_every
	if m.ReplicationPlansEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_every\":null")
		first = false
	}

	// handle nullable field replication_plans_none
	if m.ReplicationPlansNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_none\":null")
		first = false
	}

	// handle nullable field replication_plans_some
	if m.ReplicationPlansSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_some\":null")
		first = false
	}

	// handle nullable field resource_version
	if m.ResourceVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":")
		bytes, err := swag.WriteJSON(m.ResourceVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":null")
		first = false
	}

	// handle nullable field resource_version_gt
	if m.ResourceVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":null")
		first = false
	}

	// handle nullable field resource_version_gte
	if m.ResourceVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":null")
		first = false
	}

	// handle non nullable field resource_version_in with omitempty
	if !swag.IsZero(m.ResourceVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_version_lt
	if m.ResourceVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":null")
		first = false
	}

	// handle nullable field resource_version_lte
	if m.ResourceVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":null")
		first = false
	}

	// handle nullable field resource_version_not
	if m.ResourceVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":null")
		first = false
	}

	// handle non nullable field resource_version_not_in with omitempty
	if !swag.IsZero(m.ResourceVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field retry_interval
	if m.RetryInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":")
		bytes, err := swag.WriteJSON(m.RetryInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":null")
		first = false
	}

	// handle nullable field retry_interval_gt
	if m.RetryIntervalGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_gt\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryIntervalGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_gt\":null")
		first = false
	}

	// handle nullable field retry_interval_gte
	if m.RetryIntervalGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_gte\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryIntervalGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_gte\":null")
		first = false
	}

	// handle non nullable field retry_interval_in with omitempty
	if !swag.IsZero(m.RetryIntervalIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_in\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field retry_interval_lt
	if m.RetryIntervalLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_lt\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryIntervalLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_lt\":null")
		first = false
	}

	// handle nullable field retry_interval_lte
	if m.RetryIntervalLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_lte\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryIntervalLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_lte\":null")
		first = false
	}

	// handle nullable field retry_interval_not
	if m.RetryIntervalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_not\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryIntervalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_not\":null")
		first = false
	}

	// handle non nullable field retry_interval_not_in with omitempty
	if !swag.IsZero(m.RetryIntervalNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval_not_in\":")
		bytes, err := swag.WriteJSON(m.RetryIntervalNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replication service where input
func (m *ReplicationServiceWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationServiceWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateFailoverExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsEvery) { // not required
		return nil
	}

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateFailoverExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsNone) { // not required
		return nil
	}

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateFailoverExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsSome) { // not required
		return nil
	}

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validatePermanentFailoverExecutionEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionEvery) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionEvery != nil {
		if err := m.PermanentFailoverExecutionEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validatePermanentFailoverExecutionNone(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionNone) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionNone != nil {
		if err := m.PermanentFailoverExecutionNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validatePermanentFailoverExecutionSome(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionSome) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionSome != nil {
		if err := m.PermanentFailoverExecutionSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationClustersEvery) { // not required
		return nil
	}

	if m.ReplicationClustersEvery != nil {
		if err := m.ReplicationClustersEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationClustersNone) { // not required
		return nil
	}

	if m.ReplicationClustersNone != nil {
		if err := m.ReplicationClustersNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationClustersSome) { // not required
		return nil
	}

	if m.ReplicationClustersSome != nil {
		if err := m.ReplicationClustersSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationPlansEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansEvery) { // not required
		return nil
	}

	if m.ReplicationPlansEvery != nil {
		if err := m.ReplicationPlansEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationPlansNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansNone) { // not required
		return nil
	}

	if m.ReplicationPlansNone != nil {
		if err := m.ReplicationPlansNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) validateReplicationPlansSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansSome) { // not required
		return nil
	}

	if m.ReplicationPlansSome != nil {
		if err := m.ReplicationPlansSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication service where input based on the context it is used
func (m *ReplicationServiceWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {
		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateFailoverExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateFailoverExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateFailoverExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidatePermanentFailoverExecutionEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionEvery != nil {
		if err := m.PermanentFailoverExecutionEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidatePermanentFailoverExecutionNone(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionNone != nil {
		if err := m.PermanentFailoverExecutionNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidatePermanentFailoverExecutionSome(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionSome != nil {
		if err := m.PermanentFailoverExecutionSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationClustersEvery != nil {
		if err := m.ReplicationClustersEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationClustersNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationClustersNone != nil {
		if err := m.ReplicationClustersNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationClustersSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationClustersSome != nil {
		if err := m.ReplicationClustersSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationPlansEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansEvery != nil {
		if err := m.ReplicationPlansEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationPlansNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansNone != nil {
		if err := m.ReplicationPlansNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationServiceWhereInput) contextValidateReplicationPlansSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansSome != nil {
		if err := m.ReplicationPlansSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationServiceWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationServiceWhereInput) UnmarshalBinary(b []byte) error {
	var res ReplicationServiceWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
