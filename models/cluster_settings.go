// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSettings cluster settings
//
// swagger:model ClusterSettings
type ClusterSettings struct {

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// default ha
	DefaultHa *bool `json:"default_ha,omitempty"`

	// default storage policy
	DefaultStoragePolicy *VMVolumeElfStoragePolicyType `json:"default_storage_policy,omitempty"`

	// enabled iscsi
	EnabledIscsi *bool `json:"enabled_iscsi,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// vm recycle bin
	VMRecycleBin *NestedVMRecycleBin `json:"vm_recycle_bin,omitempty"`

	MarshalOpts *ClusterSettingsMarshalOpts `json:"-"`
}

type ClusterSettingsMarshalOpts struct {
	Cluster_Explicit_Null_When_Empty bool

	DefaultHa_Explicit_Null_When_Empty bool

	DefaultStoragePolicy_Explicit_Null_When_Empty bool

	EnabledIscsi_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	VMRecycleBin_Explicit_Null_When_Empty bool
}

func (m ClusterSettings) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field default_ha
	if m.DefaultHa != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"default_ha\":")
		bytes, err := swag.WriteJSON(m.DefaultHa)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DefaultHa_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"default_ha\":null")
		first = false
	}

	// handle nullable field default_storage_policy
	if m.DefaultStoragePolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"default_storage_policy\":")
		bytes, err := swag.WriteJSON(m.DefaultStoragePolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DefaultStoragePolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"default_storage_policy\":null")
		first = false
	}

	// handle nullable field enabled_iscsi
	if m.EnabledIscsi != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled_iscsi\":")
		bytes, err := swag.WriteJSON(m.EnabledIscsi)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnabledIscsi_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled_iscsi\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field vm_recycle_bin
	if m.VMRecycleBin != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_recycle_bin\":")
		bytes, err := swag.WriteJSON(m.VMRecycleBin)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMRecycleBin_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_recycle_bin\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster settings
func (m *ClusterSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMRecycleBin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateDefaultStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultStoragePolicy) { // not required
		return nil
	}

	if m.DefaultStoragePolicy != nil {
		if err := m.DefaultStoragePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSettings) validateVMRecycleBin(formats strfmt.Registry) error {
	if swag.IsZero(m.VMRecycleBin) { // not required
		return nil
	}

	if m.VMRecycleBin != nil {
		if err := m.VMRecycleBin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_recycle_bin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_recycle_bin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster settings based on the context it is used
func (m *ClusterSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMRecycleBin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) contextValidateDefaultStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultStoragePolicy != nil {
		if err := m.DefaultStoragePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) contextValidateVMRecycleBin(ctx context.Context, formats strfmt.Registry) error {

	if m.VMRecycleBin != nil {
		if err := m.VMRecycleBin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_recycle_bin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_recycle_bin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSettings) UnmarshalBinary(b []byte) error {
	var res ClusterSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
