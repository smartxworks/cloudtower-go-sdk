// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupPlanWhereInput backup plan where input
//
// swagger:model BackupPlanWhereInput
type BackupPlanWhereInput struct {

	// a n d
	AND []*BackupPlanWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupPlanWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupPlanWhereInput `json:"OR,omitempty"`

	// backup delay option
	BackupDelayOption *BackupPlanDelayOption `json:"backup_delay_option,omitempty"`

	// backup delay option in
	BackupDelayOptionIn []BackupPlanDelayOption `json:"backup_delay_option_in,omitempty"`

	// backup delay option not
	BackupDelayOptionNot *BackupPlanDelayOption `json:"backup_delay_option_not,omitempty"`

	// backup delay option not in
	BackupDelayOptionNotIn []BackupPlanDelayOption `json:"backup_delay_option_not_in,omitempty"`

	// backup plan executions every
	BackupPlanExecutionsEvery *BackupPlanExecutionWhereInput `json:"backup_plan_executions_every,omitempty"`

	// backup plan executions none
	BackupPlanExecutionsNone *BackupPlanExecutionWhereInput `json:"backup_plan_executions_none,omitempty"`

	// backup plan executions some
	BackupPlanExecutionsSome *BackupPlanExecutionWhereInput `json:"backup_plan_executions_some,omitempty"`

	// backup restore point count
	BackupRestorePointCount *int32 `json:"backup_restore_point_count,omitempty"`

	// backup restore point count gt
	BackupRestorePointCountGt *int32 `json:"backup_restore_point_count_gt,omitempty"`

	// backup restore point count gte
	BackupRestorePointCountGte *int32 `json:"backup_restore_point_count_gte,omitempty"`

	// backup restore point count in
	BackupRestorePointCountIn []int32 `json:"backup_restore_point_count_in,omitempty"`

	// backup restore point count lt
	BackupRestorePointCountLt *int32 `json:"backup_restore_point_count_lt,omitempty"`

	// backup restore point count lte
	BackupRestorePointCountLte *int32 `json:"backup_restore_point_count_lte,omitempty"`

	// backup restore point count not
	BackupRestorePointCountNot *int32 `json:"backup_restore_point_count_not,omitempty"`

	// backup restore point count not in
	BackupRestorePointCountNotIn []int32 `json:"backup_restore_point_count_not_in,omitempty"`

	// backup restore points every
	BackupRestorePointsEvery *BackupRestorePointWhereInput `json:"backup_restore_points_every,omitempty"`

	// backup restore points none
	BackupRestorePointsNone *BackupRestorePointWhereInput `json:"backup_restore_points_none,omitempty"`

	// backup restore points some
	BackupRestorePointsSome *BackupRestorePointWhereInput `json:"backup_restore_points_some,omitempty"`

	// backup service
	BackupService *BackupServiceWhereInput `json:"backup_service,omitempty"`

	// backup store repository
	BackupStoreRepository *BackupStoreRepositoryWhereInput `json:"backup_store_repository,omitempty"`

	// backup total size
	BackupTotalSize *int64 `json:"backup_total_size,omitempty"`

	// backup total size gt
	BackupTotalSizeGt *int64 `json:"backup_total_size_gt,omitempty"`

	// backup total size gte
	BackupTotalSizeGte *int64 `json:"backup_total_size_gte,omitempty"`

	// backup total size in
	BackupTotalSizeIn []int64 `json:"backup_total_size_in,omitempty"`

	// backup total size lt
	BackupTotalSizeLt *int64 `json:"backup_total_size_lt,omitempty"`

	// backup total size lte
	BackupTotalSizeLte *int64 `json:"backup_total_size_lte,omitempty"`

	// backup total size not
	BackupTotalSizeNot *int64 `json:"backup_total_size_not,omitempty"`

	// backup total size not in
	BackupTotalSizeNotIn []int64 `json:"backup_total_size_not_in,omitempty"`

	// compression
	Compression *bool `json:"compression,omitempty"`

	// compression not
	CompressionNot *bool `json:"compression_not,omitempty"`

	// compression ratio
	CompressionRatio *float64 `json:"compression_ratio,omitempty"`

	// compression ratio gt
	CompressionRatioGt *float64 `json:"compression_ratio_gt,omitempty"`

	// compression ratio gte
	CompressionRatioGte *float64 `json:"compression_ratio_gte,omitempty"`

	// compression ratio in
	CompressionRatioIn []float64 `json:"compression_ratio_in,omitempty"`

	// compression ratio lt
	CompressionRatioLt *float64 `json:"compression_ratio_lt,omitempty"`

	// compression ratio lte
	CompressionRatioLte *float64 `json:"compression_ratio_lte,omitempty"`

	// compression ratio not
	CompressionRatioNot *float64 `json:"compression_ratio_not,omitempty"`

	// compression ratio not in
	CompressionRatioNotIn []float64 `json:"compression_ratio_not_in,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// delete strategy
	DeleteStrategy *BackupPlanDeleteStrategy `json:"delete_strategy,omitempty"`

	// delete strategy in
	DeleteStrategyIn []BackupPlanDeleteStrategy `json:"delete_strategy_in,omitempty"`

	// delete strategy not
	DeleteStrategyNot *BackupPlanDeleteStrategy `json:"delete_strategy_not,omitempty"`

	// delete strategy not in
	DeleteStrategyNotIn []BackupPlanDeleteStrategy `json:"delete_strategy_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// enable window
	EnableWindow *bool `json:"enable_window,omitempty"`

	// enable window not
	EnableWindowNot *bool `json:"enable_window_not,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// full interval
	FullInterval *int32 `json:"full_interval,omitempty"`

	// full interval gt
	FullIntervalGt *int32 `json:"full_interval_gt,omitempty"`

	// full interval gte
	FullIntervalGte *int32 `json:"full_interval_gte,omitempty"`

	// full interval in
	FullIntervalIn []int32 `json:"full_interval_in,omitempty"`

	// full interval lt
	FullIntervalLt *int32 `json:"full_interval_lt,omitempty"`

	// full interval lte
	FullIntervalLte *int32 `json:"full_interval_lte,omitempty"`

	// full interval not
	FullIntervalNot *int32 `json:"full_interval_not,omitempty"`

	// full interval not in
	FullIntervalNotIn []int32 `json:"full_interval_not_in,omitempty"`

	// full period
	FullPeriod *BackupPlanPeriod `json:"full_period,omitempty"`

	// full period in
	FullPeriodIn []BackupPlanPeriod `json:"full_period_in,omitempty"`

	// full period not
	FullPeriodNot *BackupPlanPeriod `json:"full_period_not,omitempty"`

	// full period not in
	FullPeriodNotIn []BackupPlanPeriod `json:"full_period_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// incremental interval
	IncrementalInterval *int32 `json:"incremental_interval,omitempty"`

	// incremental interval gt
	IncrementalIntervalGt *int32 `json:"incremental_interval_gt,omitempty"`

	// incremental interval gte
	IncrementalIntervalGte *int32 `json:"incremental_interval_gte,omitempty"`

	// incremental interval in
	IncrementalIntervalIn []int32 `json:"incremental_interval_in,omitempty"`

	// incremental interval lt
	IncrementalIntervalLt *int32 `json:"incremental_interval_lt,omitempty"`

	// incremental interval lte
	IncrementalIntervalLte *int32 `json:"incremental_interval_lte,omitempty"`

	// incremental interval not
	IncrementalIntervalNot *int32 `json:"incremental_interval_not,omitempty"`

	// incremental interval not in
	IncrementalIntervalNotIn []int32 `json:"incremental_interval_not_in,omitempty"`

	// incremental period
	IncrementalPeriod *BackupPlanPeriod `json:"incremental_period,omitempty"`

	// incremental period in
	IncrementalPeriodIn []BackupPlanPeriod `json:"incremental_period_in,omitempty"`

	// incremental period not
	IncrementalPeriodNot *BackupPlanPeriod `json:"incremental_period_not,omitempty"`

	// incremental period not in
	IncrementalPeriodNotIn []BackupPlanPeriod `json:"incremental_period_not_in,omitempty"`

	// keep policy
	KeepPolicy *BackupPlanKeepPolicy `json:"keep_policy,omitempty"`

	// keep policy in
	KeepPolicyIn []BackupPlanKeepPolicy `json:"keep_policy_in,omitempty"`

	// keep policy not
	KeepPolicyNot *BackupPlanKeepPolicy `json:"keep_policy_not,omitempty"`

	// keep policy not in
	KeepPolicyNotIn []BackupPlanKeepPolicy `json:"keep_policy_not_in,omitempty"`

	// keep policy value
	KeepPolicyValue *int32 `json:"keep_policy_value,omitempty"`

	// keep policy value gt
	KeepPolicyValueGt *int32 `json:"keep_policy_value_gt,omitempty"`

	// keep policy value gte
	KeepPolicyValueGte *int32 `json:"keep_policy_value_gte,omitempty"`

	// keep policy value in
	KeepPolicyValueIn []int32 `json:"keep_policy_value_in,omitempty"`

	// keep policy value lt
	KeepPolicyValueLt *int32 `json:"keep_policy_value_lt,omitempty"`

	// keep policy value lte
	KeepPolicyValueLte *int32 `json:"keep_policy_value_lte,omitempty"`

	// keep policy value not
	KeepPolicyValueNot *int32 `json:"keep_policy_value_not,omitempty"`

	// keep policy value not in
	KeepPolicyValueNotIn []int32 `json:"keep_policy_value_not_in,omitempty"`

	// last execute status
	LastExecuteStatus *BackupPlanExecutionStatus `json:"last_execute_status,omitempty"`

	// last execute status in
	LastExecuteStatusIn []BackupPlanExecutionStatus `json:"last_execute_status_in,omitempty"`

	// last execute status message
	LastExecuteStatusMessage *string `json:"last_execute_status_message,omitempty"`

	// last execute status message contains
	LastExecuteStatusMessageContains *string `json:"last_execute_status_message_contains,omitempty"`

	// last execute status message ends with
	LastExecuteStatusMessageEndsWith *string `json:"last_execute_status_message_ends_with,omitempty"`

	// last execute status message gt
	LastExecuteStatusMessageGt *string `json:"last_execute_status_message_gt,omitempty"`

	// last execute status message gte
	LastExecuteStatusMessageGte *string `json:"last_execute_status_message_gte,omitempty"`

	// last execute status message in
	LastExecuteStatusMessageIn []string `json:"last_execute_status_message_in,omitempty"`

	// last execute status message lt
	LastExecuteStatusMessageLt *string `json:"last_execute_status_message_lt,omitempty"`

	// last execute status message lte
	LastExecuteStatusMessageLte *string `json:"last_execute_status_message_lte,omitempty"`

	// last execute status message not
	LastExecuteStatusMessageNot *string `json:"last_execute_status_message_not,omitempty"`

	// last execute status message not contains
	LastExecuteStatusMessageNotContains *string `json:"last_execute_status_message_not_contains,omitempty"`

	// last execute status message not ends with
	LastExecuteStatusMessageNotEndsWith *string `json:"last_execute_status_message_not_ends_with,omitempty"`

	// last execute status message not in
	LastExecuteStatusMessageNotIn []string `json:"last_execute_status_message_not_in,omitempty"`

	// last execute status message not starts with
	LastExecuteStatusMessageNotStartsWith *string `json:"last_execute_status_message_not_starts_with,omitempty"`

	// last execute status message starts with
	LastExecuteStatusMessageStartsWith *string `json:"last_execute_status_message_starts_with,omitempty"`

	// last execute status not
	LastExecuteStatusNot *BackupPlanExecutionStatus `json:"last_execute_status_not,omitempty"`

	// last execute status not in
	LastExecuteStatusNotIn []BackupPlanExecutionStatus `json:"last_execute_status_not_in,omitempty"`

	// last execute success job count
	LastExecuteSuccessJobCount *int32 `json:"last_execute_success_job_count,omitempty"`

	// last execute success job count gt
	LastExecuteSuccessJobCountGt *int32 `json:"last_execute_success_job_count_gt,omitempty"`

	// last execute success job count gte
	LastExecuteSuccessJobCountGte *int32 `json:"last_execute_success_job_count_gte,omitempty"`

	// last execute success job count in
	LastExecuteSuccessJobCountIn []int32 `json:"last_execute_success_job_count_in,omitempty"`

	// last execute success job count lt
	LastExecuteSuccessJobCountLt *int32 `json:"last_execute_success_job_count_lt,omitempty"`

	// last execute success job count lte
	LastExecuteSuccessJobCountLte *int32 `json:"last_execute_success_job_count_lte,omitempty"`

	// last execute success job count not
	LastExecuteSuccessJobCountNot *int32 `json:"last_execute_success_job_count_not,omitempty"`

	// last execute success job count not in
	LastExecuteSuccessJobCountNotIn []int32 `json:"last_execute_success_job_count_not_in,omitempty"`

	// last execute total job count
	LastExecuteTotalJobCount *int32 `json:"last_execute_total_job_count,omitempty"`

	// last execute total job count gt
	LastExecuteTotalJobCountGt *int32 `json:"last_execute_total_job_count_gt,omitempty"`

	// last execute total job count gte
	LastExecuteTotalJobCountGte *int32 `json:"last_execute_total_job_count_gte,omitempty"`

	// last execute total job count in
	LastExecuteTotalJobCountIn []int32 `json:"last_execute_total_job_count_in,omitempty"`

	// last execute total job count lt
	LastExecuteTotalJobCountLt *int32 `json:"last_execute_total_job_count_lt,omitempty"`

	// last execute total job count lte
	LastExecuteTotalJobCountLte *int32 `json:"last_execute_total_job_count_lte,omitempty"`

	// last execute total job count not
	LastExecuteTotalJobCountNot *int32 `json:"last_execute_total_job_count_not,omitempty"`

	// last execute total job count not in
	LastExecuteTotalJobCountNotIn []int32 `json:"last_execute_total_job_count_not_in,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last executed at gt
	LastExecutedAtGt *string `json:"last_executed_at_gt,omitempty"`

	// last executed at gte
	LastExecutedAtGte *string `json:"last_executed_at_gte,omitempty"`

	// last executed at in
	LastExecutedAtIn []string `json:"last_executed_at_in,omitempty"`

	// last executed at lt
	LastExecutedAtLt *string `json:"last_executed_at_lt,omitempty"`

	// last executed at lte
	LastExecutedAtLte *string `json:"last_executed_at_lte,omitempty"`

	// last executed at not
	LastExecutedAtNot *string `json:"last_executed_at_not,omitempty"`

	// last executed at not in
	LastExecutedAtNotIn []string `json:"last_executed_at_not_in,omitempty"`

	// last manual execute status
	LastManualExecuteStatus *BackupPlanExecutionStatus `json:"last_manual_execute_status,omitempty"`

	// last manual execute status in
	LastManualExecuteStatusIn []BackupPlanExecutionStatus `json:"last_manual_execute_status_in,omitempty"`

	// last manual execute status message
	LastManualExecuteStatusMessage *string `json:"last_manual_execute_status_message,omitempty"`

	// last manual execute status message contains
	LastManualExecuteStatusMessageContains *string `json:"last_manual_execute_status_message_contains,omitempty"`

	// last manual execute status message ends with
	LastManualExecuteStatusMessageEndsWith *string `json:"last_manual_execute_status_message_ends_with,omitempty"`

	// last manual execute status message gt
	LastManualExecuteStatusMessageGt *string `json:"last_manual_execute_status_message_gt,omitempty"`

	// last manual execute status message gte
	LastManualExecuteStatusMessageGte *string `json:"last_manual_execute_status_message_gte,omitempty"`

	// last manual execute status message in
	LastManualExecuteStatusMessageIn []string `json:"last_manual_execute_status_message_in,omitempty"`

	// last manual execute status message lt
	LastManualExecuteStatusMessageLt *string `json:"last_manual_execute_status_message_lt,omitempty"`

	// last manual execute status message lte
	LastManualExecuteStatusMessageLte *string `json:"last_manual_execute_status_message_lte,omitempty"`

	// last manual execute status message not
	LastManualExecuteStatusMessageNot *string `json:"last_manual_execute_status_message_not,omitempty"`

	// last manual execute status message not contains
	LastManualExecuteStatusMessageNotContains *string `json:"last_manual_execute_status_message_not_contains,omitempty"`

	// last manual execute status message not ends with
	LastManualExecuteStatusMessageNotEndsWith *string `json:"last_manual_execute_status_message_not_ends_with,omitempty"`

	// last manual execute status message not in
	LastManualExecuteStatusMessageNotIn []string `json:"last_manual_execute_status_message_not_in,omitempty"`

	// last manual execute status message not starts with
	LastManualExecuteStatusMessageNotStartsWith *string `json:"last_manual_execute_status_message_not_starts_with,omitempty"`

	// last manual execute status message starts with
	LastManualExecuteStatusMessageStartsWith *string `json:"last_manual_execute_status_message_starts_with,omitempty"`

	// last manual execute status not
	LastManualExecuteStatusNot *BackupPlanExecutionStatus `json:"last_manual_execute_status_not,omitempty"`

	// last manual execute status not in
	LastManualExecuteStatusNotIn []BackupPlanExecutionStatus `json:"last_manual_execute_status_not_in,omitempty"`

	// last manual execute success job count
	LastManualExecuteSuccessJobCount *int32 `json:"last_manual_execute_success_job_count,omitempty"`

	// last manual execute success job count gt
	LastManualExecuteSuccessJobCountGt *int32 `json:"last_manual_execute_success_job_count_gt,omitempty"`

	// last manual execute success job count gte
	LastManualExecuteSuccessJobCountGte *int32 `json:"last_manual_execute_success_job_count_gte,omitempty"`

	// last manual execute success job count in
	LastManualExecuteSuccessJobCountIn []int32 `json:"last_manual_execute_success_job_count_in,omitempty"`

	// last manual execute success job count lt
	LastManualExecuteSuccessJobCountLt *int32 `json:"last_manual_execute_success_job_count_lt,omitempty"`

	// last manual execute success job count lte
	LastManualExecuteSuccessJobCountLte *int32 `json:"last_manual_execute_success_job_count_lte,omitempty"`

	// last manual execute success job count not
	LastManualExecuteSuccessJobCountNot *int32 `json:"last_manual_execute_success_job_count_not,omitempty"`

	// last manual execute success job count not in
	LastManualExecuteSuccessJobCountNotIn []int32 `json:"last_manual_execute_success_job_count_not_in,omitempty"`

	// last manual execute total job count
	LastManualExecuteTotalJobCount *int32 `json:"last_manual_execute_total_job_count,omitempty"`

	// last manual execute total job count gt
	LastManualExecuteTotalJobCountGt *int32 `json:"last_manual_execute_total_job_count_gt,omitempty"`

	// last manual execute total job count gte
	LastManualExecuteTotalJobCountGte *int32 `json:"last_manual_execute_total_job_count_gte,omitempty"`

	// last manual execute total job count in
	LastManualExecuteTotalJobCountIn []int32 `json:"last_manual_execute_total_job_count_in,omitempty"`

	// last manual execute total job count lt
	LastManualExecuteTotalJobCountLt *int32 `json:"last_manual_execute_total_job_count_lt,omitempty"`

	// last manual execute total job count lte
	LastManualExecuteTotalJobCountLte *int32 `json:"last_manual_execute_total_job_count_lte,omitempty"`

	// last manual execute total job count not
	LastManualExecuteTotalJobCountNot *int32 `json:"last_manual_execute_total_job_count_not,omitempty"`

	// last manual execute total job count not in
	LastManualExecuteTotalJobCountNotIn []int32 `json:"last_manual_execute_total_job_count_not_in,omitempty"`

	// last manual executed at
	LastManualExecutedAt *string `json:"last_manual_executed_at,omitempty"`

	// last manual executed at gt
	LastManualExecutedAtGt *string `json:"last_manual_executed_at_gt,omitempty"`

	// last manual executed at gte
	LastManualExecutedAtGte *string `json:"last_manual_executed_at_gte,omitempty"`

	// last manual executed at in
	LastManualExecutedAtIn []string `json:"last_manual_executed_at_in,omitempty"`

	// last manual executed at lt
	LastManualExecutedAtLt *string `json:"last_manual_executed_at_lt,omitempty"`

	// last manual executed at lte
	LastManualExecutedAtLte *string `json:"last_manual_executed_at_lte,omitempty"`

	// last manual executed at not
	LastManualExecutedAtNot *string `json:"last_manual_executed_at_not,omitempty"`

	// last manual executed at not in
	LastManualExecutedAtNotIn []string `json:"last_manual_executed_at_not_in,omitempty"`

	// logical size
	LogicalSize *int64 `json:"logical_size,omitempty"`

	// logical size gt
	LogicalSizeGt *int64 `json:"logical_size_gt,omitempty"`

	// logical size gte
	LogicalSizeGte *int64 `json:"logical_size_gte,omitempty"`

	// logical size in
	LogicalSizeIn []int64 `json:"logical_size_in,omitempty"`

	// logical size lt
	LogicalSizeLt *int64 `json:"logical_size_lt,omitempty"`

	// logical size lte
	LogicalSizeLte *int64 `json:"logical_size_lte,omitempty"`

	// logical size not
	LogicalSizeNot *int64 `json:"logical_size_not,omitempty"`

	// logical size not in
	LogicalSizeNotIn []int64 `json:"logical_size_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// next execute time
	NextExecuteTime *string `json:"next_execute_time,omitempty"`

	// next execute time gt
	NextExecuteTimeGt *string `json:"next_execute_time_gt,omitempty"`

	// next execute time gte
	NextExecuteTimeGte *string `json:"next_execute_time_gte,omitempty"`

	// next execute time in
	NextExecuteTimeIn []string `json:"next_execute_time_in,omitempty"`

	// next execute time lt
	NextExecuteTimeLt *string `json:"next_execute_time_lt,omitempty"`

	// next execute time lte
	NextExecuteTimeLte *string `json:"next_execute_time_lte,omitempty"`

	// next execute time not
	NextExecuteTimeNot *string `json:"next_execute_time_not,omitempty"`

	// next execute time not in
	NextExecuteTimeNotIn []string `json:"next_execute_time_not_in,omitempty"`

	// phase
	Phase *BackupPlanPhase `json:"phase,omitempty"`

	// phase in
	PhaseIn []BackupPlanPhase `json:"phase_in,omitempty"`

	// phase not
	PhaseNot *BackupPlanPhase `json:"phase_not,omitempty"`

	// phase not in
	PhaseNotIn []BackupPlanPhase `json:"phase_not_in,omitempty"`

	// physical size
	PhysicalSize *int64 `json:"physical_size,omitempty"`

	// physical size gt
	PhysicalSizeGt *int64 `json:"physical_size_gt,omitempty"`

	// physical size gte
	PhysicalSizeGte *int64 `json:"physical_size_gte,omitempty"`

	// physical size in
	PhysicalSizeIn []int64 `json:"physical_size_in,omitempty"`

	// physical size lt
	PhysicalSizeLt *int64 `json:"physical_size_lt,omitempty"`

	// physical size lte
	PhysicalSizeLte *int64 `json:"physical_size_lte,omitempty"`

	// physical size not
	PhysicalSizeNot *int64 `json:"physical_size_not,omitempty"`

	// physical size not in
	PhysicalSizeNotIn []int64 `json:"physical_size_not_in,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// snapshot consistent type in
	SnapshotConsistentTypeIn []ConsistentType `json:"snapshot_consistent_type_in,omitempty"`

	// snapshot consistent type not
	SnapshotConsistentTypeNot *ConsistentType `json:"snapshot_consistent_type_not,omitempty"`

	// snapshot consistent type not in
	SnapshotConsistentTypeNotIn []ConsistentType `json:"snapshot_consistent_type_not_in,omitempty"`

	// status
	Status *BackupPlanStatus `json:"status,omitempty"`

	// status in
	StatusIn []BackupPlanStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *BackupPlanStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupPlanStatus `json:"status_not_in,omitempty"`

	// valid size of backup object
	ValidSizeOfBackupObject *int64 `json:"valid_size_of_backup_object,omitempty"`

	// valid size of backup object gt
	ValidSizeOfBackupObjectGt *int64 `json:"valid_size_of_backup_object_gt,omitempty"`

	// valid size of backup object gte
	ValidSizeOfBackupObjectGte *int64 `json:"valid_size_of_backup_object_gte,omitempty"`

	// valid size of backup object in
	ValidSizeOfBackupObjectIn []int64 `json:"valid_size_of_backup_object_in,omitempty"`

	// valid size of backup object lt
	ValidSizeOfBackupObjectLt *int64 `json:"valid_size_of_backup_object_lt,omitempty"`

	// valid size of backup object lte
	ValidSizeOfBackupObjectLte *int64 `json:"valid_size_of_backup_object_lte,omitempty"`

	// valid size of backup object not
	ValidSizeOfBackupObjectNot *int64 `json:"valid_size_of_backup_object_not,omitempty"`

	// valid size of backup object not in
	ValidSizeOfBackupObjectNotIn []int64 `json:"valid_size_of_backup_object_not_in,omitempty"`

	// valid size of restore point
	ValidSizeOfRestorePoint *int64 `json:"valid_size_of_restore_point,omitempty"`

	// valid size of restore point gt
	ValidSizeOfRestorePointGt *int64 `json:"valid_size_of_restore_point_gt,omitempty"`

	// valid size of restore point gte
	ValidSizeOfRestorePointGte *int64 `json:"valid_size_of_restore_point_gte,omitempty"`

	// valid size of restore point in
	ValidSizeOfRestorePointIn []int64 `json:"valid_size_of_restore_point_in,omitempty"`

	// valid size of restore point lt
	ValidSizeOfRestorePointLt *int64 `json:"valid_size_of_restore_point_lt,omitempty"`

	// valid size of restore point lte
	ValidSizeOfRestorePointLte *int64 `json:"valid_size_of_restore_point_lte,omitempty"`

	// valid size of restore point not
	ValidSizeOfRestorePointNot *int64 `json:"valid_size_of_restore_point_not,omitempty"`

	// valid size of restore point not in
	ValidSizeOfRestorePointNotIn []int64 `json:"valid_size_of_restore_point_not_in,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window end contains
	WindowEndContains *string `json:"window_end_contains,omitempty"`

	// window end ends with
	WindowEndEndsWith *string `json:"window_end_ends_with,omitempty"`

	// window end gt
	WindowEndGt *string `json:"window_end_gt,omitempty"`

	// window end gte
	WindowEndGte *string `json:"window_end_gte,omitempty"`

	// window end in
	WindowEndIn []string `json:"window_end_in,omitempty"`

	// window end lt
	WindowEndLt *string `json:"window_end_lt,omitempty"`

	// window end lte
	WindowEndLte *string `json:"window_end_lte,omitempty"`

	// window end not
	WindowEndNot *string `json:"window_end_not,omitempty"`

	// window end not contains
	WindowEndNotContains *string `json:"window_end_not_contains,omitempty"`

	// window end not ends with
	WindowEndNotEndsWith *string `json:"window_end_not_ends_with,omitempty"`

	// window end not in
	WindowEndNotIn []string `json:"window_end_not_in,omitempty"`

	// window end not starts with
	WindowEndNotStartsWith *string `json:"window_end_not_starts_with,omitempty"`

	// window end starts with
	WindowEndStartsWith *string `json:"window_end_starts_with,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	// window start contains
	WindowStartContains *string `json:"window_start_contains,omitempty"`

	// window start ends with
	WindowStartEndsWith *string `json:"window_start_ends_with,omitempty"`

	// window start gt
	WindowStartGt *string `json:"window_start_gt,omitempty"`

	// window start gte
	WindowStartGte *string `json:"window_start_gte,omitempty"`

	// window start in
	WindowStartIn []string `json:"window_start_in,omitempty"`

	// window start lt
	WindowStartLt *string `json:"window_start_lt,omitempty"`

	// window start lte
	WindowStartLte *string `json:"window_start_lte,omitempty"`

	// window start not
	WindowStartNot *string `json:"window_start_not,omitempty"`

	// window start not contains
	WindowStartNotContains *string `json:"window_start_not_contains,omitempty"`

	// window start not ends with
	WindowStartNotEndsWith *string `json:"window_start_not_ends_with,omitempty"`

	// window start not in
	WindowStartNotIn []string `json:"window_start_not_in,omitempty"`

	// window start not starts with
	WindowStartNotStartsWith *string `json:"window_start_not_starts_with,omitempty"`

	// window start starts with
	WindowStartStartsWith *string `json:"window_start_starts_with,omitempty"`

	MarshalOpts *BackupPlanWhereInputMarshalOpts `json:"-"`
}

type BackupPlanWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	BackupDelayOption_Explicit_Null_When_Empty bool

	BackupDelayOptionIn_Explicit_Null_When_Empty bool

	BackupDelayOptionNot_Explicit_Null_When_Empty bool

	BackupDelayOptionNotIn_Explicit_Null_When_Empty bool

	BackupPlanExecutionsEvery_Explicit_Null_When_Empty bool

	BackupPlanExecutionsNone_Explicit_Null_When_Empty bool

	BackupPlanExecutionsSome_Explicit_Null_When_Empty bool

	BackupRestorePointCount_Explicit_Null_When_Empty bool

	BackupRestorePointCountGt_Explicit_Null_When_Empty bool

	BackupRestorePointCountGte_Explicit_Null_When_Empty bool

	BackupRestorePointCountIn_Explicit_Null_When_Empty bool

	BackupRestorePointCountLt_Explicit_Null_When_Empty bool

	BackupRestorePointCountLte_Explicit_Null_When_Empty bool

	BackupRestorePointCountNot_Explicit_Null_When_Empty bool

	BackupRestorePointCountNotIn_Explicit_Null_When_Empty bool

	BackupRestorePointsEvery_Explicit_Null_When_Empty bool

	BackupRestorePointsNone_Explicit_Null_When_Empty bool

	BackupRestorePointsSome_Explicit_Null_When_Empty bool

	BackupService_Explicit_Null_When_Empty bool

	BackupStoreRepository_Explicit_Null_When_Empty bool

	BackupTotalSize_Explicit_Null_When_Empty bool

	BackupTotalSizeGt_Explicit_Null_When_Empty bool

	BackupTotalSizeGte_Explicit_Null_When_Empty bool

	BackupTotalSizeIn_Explicit_Null_When_Empty bool

	BackupTotalSizeLt_Explicit_Null_When_Empty bool

	BackupTotalSizeLte_Explicit_Null_When_Empty bool

	BackupTotalSizeNot_Explicit_Null_When_Empty bool

	BackupTotalSizeNotIn_Explicit_Null_When_Empty bool

	Compression_Explicit_Null_When_Empty bool

	CompressionNot_Explicit_Null_When_Empty bool

	CompressionRatio_Explicit_Null_When_Empty bool

	CompressionRatioGt_Explicit_Null_When_Empty bool

	CompressionRatioGte_Explicit_Null_When_Empty bool

	CompressionRatioIn_Explicit_Null_When_Empty bool

	CompressionRatioLt_Explicit_Null_When_Empty bool

	CompressionRatioLte_Explicit_Null_When_Empty bool

	CompressionRatioNot_Explicit_Null_When_Empty bool

	CompressionRatioNotIn_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	DeleteStrategy_Explicit_Null_When_Empty bool

	DeleteStrategyIn_Explicit_Null_When_Empty bool

	DeleteStrategyNot_Explicit_Null_When_Empty bool

	DeleteStrategyNotIn_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	EnableWindow_Explicit_Null_When_Empty bool

	EnableWindowNot_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	FullInterval_Explicit_Null_When_Empty bool

	FullIntervalGt_Explicit_Null_When_Empty bool

	FullIntervalGte_Explicit_Null_When_Empty bool

	FullIntervalIn_Explicit_Null_When_Empty bool

	FullIntervalLt_Explicit_Null_When_Empty bool

	FullIntervalLte_Explicit_Null_When_Empty bool

	FullIntervalNot_Explicit_Null_When_Empty bool

	FullIntervalNotIn_Explicit_Null_When_Empty bool

	FullPeriod_Explicit_Null_When_Empty bool

	FullPeriodIn_Explicit_Null_When_Empty bool

	FullPeriodNot_Explicit_Null_When_Empty bool

	FullPeriodNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IncrementalInterval_Explicit_Null_When_Empty bool

	IncrementalIntervalGt_Explicit_Null_When_Empty bool

	IncrementalIntervalGte_Explicit_Null_When_Empty bool

	IncrementalIntervalIn_Explicit_Null_When_Empty bool

	IncrementalIntervalLt_Explicit_Null_When_Empty bool

	IncrementalIntervalLte_Explicit_Null_When_Empty bool

	IncrementalIntervalNot_Explicit_Null_When_Empty bool

	IncrementalIntervalNotIn_Explicit_Null_When_Empty bool

	IncrementalPeriod_Explicit_Null_When_Empty bool

	IncrementalPeriodIn_Explicit_Null_When_Empty bool

	IncrementalPeriodNot_Explicit_Null_When_Empty bool

	IncrementalPeriodNotIn_Explicit_Null_When_Empty bool

	KeepPolicy_Explicit_Null_When_Empty bool

	KeepPolicyIn_Explicit_Null_When_Empty bool

	KeepPolicyNot_Explicit_Null_When_Empty bool

	KeepPolicyNotIn_Explicit_Null_When_Empty bool

	KeepPolicyValue_Explicit_Null_When_Empty bool

	KeepPolicyValueGt_Explicit_Null_When_Empty bool

	KeepPolicyValueGte_Explicit_Null_When_Empty bool

	KeepPolicyValueIn_Explicit_Null_When_Empty bool

	KeepPolicyValueLt_Explicit_Null_When_Empty bool

	KeepPolicyValueLte_Explicit_Null_When_Empty bool

	KeepPolicyValueNot_Explicit_Null_When_Empty bool

	KeepPolicyValueNotIn_Explicit_Null_When_Empty bool

	LastExecuteStatus_Explicit_Null_When_Empty bool

	LastExecuteStatusIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageContains_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageEndsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageGt_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageGte_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageLt_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageLte_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNot_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotContains_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageStartsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusNot_Explicit_Null_When_Empty bool

	LastExecuteStatusNotIn_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountGt_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountGte_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountIn_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountLt_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountLte_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountNot_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountNotIn_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountGt_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountGte_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountIn_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountLt_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountLte_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountNot_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountNotIn_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	LastExecutedAtGt_Explicit_Null_When_Empty bool

	LastExecutedAtGte_Explicit_Null_When_Empty bool

	LastExecutedAtIn_Explicit_Null_When_Empty bool

	LastExecutedAtLt_Explicit_Null_When_Empty bool

	LastExecutedAtLte_Explicit_Null_When_Empty bool

	LastExecutedAtNot_Explicit_Null_When_Empty bool

	LastExecutedAtNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatus_Explicit_Null_When_Empty bool

	LastManualExecuteStatusIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageContains_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageEndsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageGt_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageGte_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageLt_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageLte_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNot_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotContains_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageStartsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusNot_Explicit_Null_When_Empty bool

	LastManualExecuteStatusNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountGt_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountGte_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountIn_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountLt_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountLte_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountNot_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountGt_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountGte_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountIn_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountLt_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountLte_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountNot_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountNotIn_Explicit_Null_When_Empty bool

	LastManualExecutedAt_Explicit_Null_When_Empty bool

	LastManualExecutedAtGt_Explicit_Null_When_Empty bool

	LastManualExecutedAtGte_Explicit_Null_When_Empty bool

	LastManualExecutedAtIn_Explicit_Null_When_Empty bool

	LastManualExecutedAtLt_Explicit_Null_When_Empty bool

	LastManualExecutedAtLte_Explicit_Null_When_Empty bool

	LastManualExecutedAtNot_Explicit_Null_When_Empty bool

	LastManualExecutedAtNotIn_Explicit_Null_When_Empty bool

	LogicalSize_Explicit_Null_When_Empty bool

	LogicalSizeGt_Explicit_Null_When_Empty bool

	LogicalSizeGte_Explicit_Null_When_Empty bool

	LogicalSizeIn_Explicit_Null_When_Empty bool

	LogicalSizeLt_Explicit_Null_When_Empty bool

	LogicalSizeLte_Explicit_Null_When_Empty bool

	LogicalSizeNot_Explicit_Null_When_Empty bool

	LogicalSizeNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NextExecuteTime_Explicit_Null_When_Empty bool

	NextExecuteTimeGt_Explicit_Null_When_Empty bool

	NextExecuteTimeGte_Explicit_Null_When_Empty bool

	NextExecuteTimeIn_Explicit_Null_When_Empty bool

	NextExecuteTimeLt_Explicit_Null_When_Empty bool

	NextExecuteTimeLte_Explicit_Null_When_Empty bool

	NextExecuteTimeNot_Explicit_Null_When_Empty bool

	NextExecuteTimeNotIn_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	PhaseIn_Explicit_Null_When_Empty bool

	PhaseNot_Explicit_Null_When_Empty bool

	PhaseNotIn_Explicit_Null_When_Empty bool

	PhysicalSize_Explicit_Null_When_Empty bool

	PhysicalSizeGt_Explicit_Null_When_Empty bool

	PhysicalSizeGte_Explicit_Null_When_Empty bool

	PhysicalSizeIn_Explicit_Null_When_Empty bool

	PhysicalSizeLt_Explicit_Null_When_Empty bool

	PhysicalSizeLte_Explicit_Null_When_Empty bool

	PhysicalSizeNot_Explicit_Null_When_Empty bool

	PhysicalSizeNotIn_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeIn_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNot_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNotIn_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObject_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectGt_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectGte_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectIn_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectLt_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectLte_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectNot_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObjectNotIn_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePoint_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointGt_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointGte_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointIn_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointLt_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointLte_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointNot_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePointNotIn_Explicit_Null_When_Empty bool

	VmsEvery_Explicit_Null_When_Empty bool

	VmsNone_Explicit_Null_When_Empty bool

	VmsSome_Explicit_Null_When_Empty bool

	WindowEnd_Explicit_Null_When_Empty bool

	WindowEndContains_Explicit_Null_When_Empty bool

	WindowEndEndsWith_Explicit_Null_When_Empty bool

	WindowEndGt_Explicit_Null_When_Empty bool

	WindowEndGte_Explicit_Null_When_Empty bool

	WindowEndIn_Explicit_Null_When_Empty bool

	WindowEndLt_Explicit_Null_When_Empty bool

	WindowEndLte_Explicit_Null_When_Empty bool

	WindowEndNot_Explicit_Null_When_Empty bool

	WindowEndNotContains_Explicit_Null_When_Empty bool

	WindowEndNotEndsWith_Explicit_Null_When_Empty bool

	WindowEndNotIn_Explicit_Null_When_Empty bool

	WindowEndNotStartsWith_Explicit_Null_When_Empty bool

	WindowEndStartsWith_Explicit_Null_When_Empty bool

	WindowStart_Explicit_Null_When_Empty bool

	WindowStartContains_Explicit_Null_When_Empty bool

	WindowStartEndsWith_Explicit_Null_When_Empty bool

	WindowStartGt_Explicit_Null_When_Empty bool

	WindowStartGte_Explicit_Null_When_Empty bool

	WindowStartIn_Explicit_Null_When_Empty bool

	WindowStartLt_Explicit_Null_When_Empty bool

	WindowStartLte_Explicit_Null_When_Empty bool

	WindowStartNot_Explicit_Null_When_Empty bool

	WindowStartNotContains_Explicit_Null_When_Empty bool

	WindowStartNotEndsWith_Explicit_Null_When_Empty bool

	WindowStartNotIn_Explicit_Null_When_Empty bool

	WindowStartNotStartsWith_Explicit_Null_When_Empty bool

	WindowStartStartsWith_Explicit_Null_When_Empty bool
}

func (m BackupPlanWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_delay_option
	if m.BackupDelayOption != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOption)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupDelayOption_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":null")
		first = false
	}

	// handle non nullable field backup_delay_option_in with omitempty
	if !swag.IsZero(m.BackupDelayOptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option_in\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_delay_option_not
	if m.BackupDelayOptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option_not\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupDelayOptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option_not\":null")
		first = false
	}

	// handle non nullable field backup_delay_option_not_in with omitempty
	if !swag.IsZero(m.BackupDelayOptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option_not_in\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_plan_executions_every
	if m.BackupPlanExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_every\":")
		bytes, err := swag.WriteJSON(m.BackupPlanExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlanExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_every\":null")
		first = false
	}

	// handle nullable field backup_plan_executions_none
	if m.BackupPlanExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_none\":")
		bytes, err := swag.WriteJSON(m.BackupPlanExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlanExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_none\":null")
		first = false
	}

	// handle nullable field backup_plan_executions_some
	if m.BackupPlanExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_some\":")
		bytes, err := swag.WriteJSON(m.BackupPlanExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlanExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions_some\":null")
		first = false
	}

	// handle nullable field backup_restore_point_count
	if m.BackupRestorePointCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count\":null")
		first = false
	}

	// handle nullable field backup_restore_point_count_gt
	if m.BackupRestorePointCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_gt\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_gt\":null")
		first = false
	}

	// handle nullable field backup_restore_point_count_gte
	if m.BackupRestorePointCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_gte\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_gte\":null")
		first = false
	}

	// handle non nullable field backup_restore_point_count_in with omitempty
	if !swag.IsZero(m.BackupRestorePointCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_in\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_restore_point_count_lt
	if m.BackupRestorePointCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_lt\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_lt\":null")
		first = false
	}

	// handle nullable field backup_restore_point_count_lte
	if m.BackupRestorePointCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_lte\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_lte\":null")
		first = false
	}

	// handle nullable field backup_restore_point_count_not
	if m.BackupRestorePointCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_not\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_not\":null")
		first = false
	}

	// handle non nullable field backup_restore_point_count_not_in with omitempty
	if !swag.IsZero(m.BackupRestorePointCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count_not_in\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_restore_points_every
	if m.BackupRestorePointsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_every\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_every\":null")
		first = false
	}

	// handle nullable field backup_restore_points_none
	if m.BackupRestorePointsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_none\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_none\":null")
		first = false
	}

	// handle nullable field backup_restore_points_some
	if m.BackupRestorePointsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_some\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_some\":null")
		first = false
	}

	// handle nullable field backup_service
	if m.BackupService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":")
		bytes, err := swag.WriteJSON(m.BackupService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":null")
		first = false
	}

	// handle nullable field backup_store_repository
	if m.BackupStoreRepository != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository\":")
		bytes, err := swag.WriteJSON(m.BackupStoreRepository)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupStoreRepository_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository\":null")
		first = false
	}

	// handle nullable field backup_total_size
	if m.BackupTotalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size\":null")
		first = false
	}

	// handle nullable field backup_total_size_gt
	if m.BackupTotalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_gt\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_gt\":null")
		first = false
	}

	// handle nullable field backup_total_size_gte
	if m.BackupTotalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_gte\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_gte\":null")
		first = false
	}

	// handle non nullable field backup_total_size_in with omitempty
	if !swag.IsZero(m.BackupTotalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_in\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_total_size_lt
	if m.BackupTotalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_lt\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_lt\":null")
		first = false
	}

	// handle nullable field backup_total_size_lte
	if m.BackupTotalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_lte\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_lte\":null")
		first = false
	}

	// handle nullable field backup_total_size_not
	if m.BackupTotalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_not\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_not\":null")
		first = false
	}

	// handle non nullable field backup_total_size_not_in with omitempty
	if !swag.IsZero(m.BackupTotalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size_not_in\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field compression
	if m.Compression != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":")
		bytes, err := swag.WriteJSON(m.Compression)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compression_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":null")
		first = false
	}

	// handle nullable field compression_not
	if m.CompressionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_not\":")
		bytes, err := swag.WriteJSON(m.CompressionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_not\":null")
		first = false
	}

	// handle nullable field compression_ratio
	if m.CompressionRatio != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":")
		bytes, err := swag.WriteJSON(m.CompressionRatio)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatio_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":null")
		first = false
	}

	// handle nullable field compression_ratio_gt
	if m.CompressionRatioGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gt\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gt\":null")
		first = false
	}

	// handle nullable field compression_ratio_gte
	if m.CompressionRatioGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gte\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gte\":null")
		first = false
	}

	// handle non nullable field compression_ratio_in with omitempty
	if !swag.IsZero(m.CompressionRatioIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_in\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field compression_ratio_lt
	if m.CompressionRatioLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lt\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lt\":null")
		first = false
	}

	// handle nullable field compression_ratio_lte
	if m.CompressionRatioLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lte\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lte\":null")
		first = false
	}

	// handle nullable field compression_ratio_not
	if m.CompressionRatioNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not\":null")
		first = false
	}

	// handle non nullable field compression_ratio_not_in with omitempty
	if !swag.IsZero(m.CompressionRatioNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not_in\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field delete_strategy
	if m.DeleteStrategy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":null")
		first = false
	}

	// handle non nullable field delete_strategy_in with omitempty
	if !swag.IsZero(m.DeleteStrategyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_in\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field delete_strategy_not
	if m.DeleteStrategyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not\":null")
		first = false
	}

	// handle non nullable field delete_strategy_not_in with omitempty
	if !swag.IsZero(m.DeleteStrategyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not_in\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field enable_window
	if m.EnableWindow != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":")
		bytes, err := swag.WriteJSON(m.EnableWindow)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindow_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":null")
		first = false
	}

	// handle nullable field enable_window_not
	if m.EnableWindowNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window_not\":")
		bytes, err := swag.WriteJSON(m.EnableWindowNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindowNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window_not\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field full_interval
	if m.FullInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":")
		bytes, err := swag.WriteJSON(m.FullInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":null")
		first = false
	}

	// handle nullable field full_interval_gt
	if m.FullIntervalGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_gt\":")
		bytes, err := swag.WriteJSON(m.FullIntervalGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullIntervalGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_gt\":null")
		first = false
	}

	// handle nullable field full_interval_gte
	if m.FullIntervalGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_gte\":")
		bytes, err := swag.WriteJSON(m.FullIntervalGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullIntervalGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_gte\":null")
		first = false
	}

	// handle non nullable field full_interval_in with omitempty
	if !swag.IsZero(m.FullIntervalIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_in\":")
		bytes, err := swag.WriteJSON(m.FullIntervalIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field full_interval_lt
	if m.FullIntervalLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_lt\":")
		bytes, err := swag.WriteJSON(m.FullIntervalLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullIntervalLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_lt\":null")
		first = false
	}

	// handle nullable field full_interval_lte
	if m.FullIntervalLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_lte\":")
		bytes, err := swag.WriteJSON(m.FullIntervalLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullIntervalLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_lte\":null")
		first = false
	}

	// handle nullable field full_interval_not
	if m.FullIntervalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_not\":")
		bytes, err := swag.WriteJSON(m.FullIntervalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullIntervalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_not\":null")
		first = false
	}

	// handle non nullable field full_interval_not_in with omitempty
	if !swag.IsZero(m.FullIntervalNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval_not_in\":")
		bytes, err := swag.WriteJSON(m.FullIntervalNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field full_period
	if m.FullPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":")
		bytes, err := swag.WriteJSON(m.FullPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":null")
		first = false
	}

	// handle non nullable field full_period_in with omitempty
	if !swag.IsZero(m.FullPeriodIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period_in\":")
		bytes, err := swag.WriteJSON(m.FullPeriodIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field full_period_not
	if m.FullPeriodNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period_not\":")
		bytes, err := swag.WriteJSON(m.FullPeriodNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullPeriodNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period_not\":null")
		first = false
	}

	// handle non nullable field full_period_not_in with omitempty
	if !swag.IsZero(m.FullPeriodNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period_not_in\":")
		bytes, err := swag.WriteJSON(m.FullPeriodNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field incremental_interval
	if m.IncrementalInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":")
		bytes, err := swag.WriteJSON(m.IncrementalInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":null")
		first = false
	}

	// handle nullable field incremental_interval_gt
	if m.IncrementalIntervalGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_gt\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalIntervalGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_gt\":null")
		first = false
	}

	// handle nullable field incremental_interval_gte
	if m.IncrementalIntervalGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_gte\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalIntervalGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_gte\":null")
		first = false
	}

	// handle non nullable field incremental_interval_in with omitempty
	if !swag.IsZero(m.IncrementalIntervalIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_in\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field incremental_interval_lt
	if m.IncrementalIntervalLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_lt\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalIntervalLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_lt\":null")
		first = false
	}

	// handle nullable field incremental_interval_lte
	if m.IncrementalIntervalLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_lte\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalIntervalLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_lte\":null")
		first = false
	}

	// handle nullable field incremental_interval_not
	if m.IncrementalIntervalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_not\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalIntervalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_not\":null")
		first = false
	}

	// handle non nullable field incremental_interval_not_in with omitempty
	if !swag.IsZero(m.IncrementalIntervalNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval_not_in\":")
		bytes, err := swag.WriteJSON(m.IncrementalIntervalNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field incremental_period
	if m.IncrementalPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":null")
		first = false
	}

	// handle non nullable field incremental_period_in with omitempty
	if !swag.IsZero(m.IncrementalPeriodIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period_in\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriodIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field incremental_period_not
	if m.IncrementalPeriodNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period_not\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriodNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalPeriodNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period_not\":null")
		first = false
	}

	// handle non nullable field incremental_period_not_in with omitempty
	if !swag.IsZero(m.IncrementalPeriodNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period_not_in\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriodNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy
	if m.KeepPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":")
		bytes, err := swag.WriteJSON(m.KeepPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":null")
		first = false
	}

	// handle non nullable field keep_policy_in with omitempty
	if !swag.IsZero(m.KeepPolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_not
	if m.KeepPolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not\":null")
		first = false
	}

	// handle non nullable field keep_policy_not_in with omitempty
	if !swag.IsZero(m.KeepPolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_value
	if m.KeepPolicyValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":null")
		first = false
	}

	// handle nullable field keep_policy_value_gt
	if m.KeepPolicyValueGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gt\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gt\":null")
		first = false
	}

	// handle nullable field keep_policy_value_gte
	if m.KeepPolicyValueGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gte\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gte\":null")
		first = false
	}

	// handle non nullable field keep_policy_value_in with omitempty
	if !swag.IsZero(m.KeepPolicyValueIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_value_lt
	if m.KeepPolicyValueLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lt\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lt\":null")
		first = false
	}

	// handle nullable field keep_policy_value_lte
	if m.KeepPolicyValueLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lte\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lte\":null")
		first = false
	}

	// handle nullable field keep_policy_value_not
	if m.KeepPolicyValueNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not\":null")
		first = false
	}

	// handle non nullable field keep_policy_value_not_in with omitempty
	if !swag.IsZero(m.KeepPolicyValueNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status
	if m.LastExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":null")
		first = false
	}

	// handle non nullable field last_execute_status_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message
	if m.LastExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_contains
	if m.LastExecuteStatusMessageContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_contains\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_contains\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_ends_with
	if m.LastExecuteStatusMessageEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_ends_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_gt
	if m.LastExecuteStatusMessageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gt\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_gte
	if m.LastExecuteStatusMessageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_status_message_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusMessageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message_lt
	if m.LastExecuteStatusMessageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lt\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_lte
	if m.LastExecuteStatusMessageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lte\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not
	if m.LastExecuteStatusMessageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not_contains
	if m.LastExecuteStatusMessageNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_contains\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_contains\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not_ends_with
	if m.LastExecuteStatusMessageNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_ends_with\":null")
		first = false
	}

	// handle non nullable field last_execute_status_message_not_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusMessageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message_not_starts_with
	if m.LastExecuteStatusMessageNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_starts_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_starts_with
	if m.LastExecuteStatusMessageStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_starts_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_not
	if m.LastExecuteStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not\":null")
		first = false
	}

	// handle non nullable field last_execute_status_not_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_success_job_count
	if m.LastExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_gt
	if m.LastExecuteSuccessJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_gte
	if m.LastExecuteSuccessJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_success_job_count_in with omitempty
	if !swag.IsZero(m.LastExecuteSuccessJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_success_job_count_lt
	if m.LastExecuteSuccessJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_lte
	if m.LastExecuteSuccessJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_not
	if m.LastExecuteSuccessJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_execute_success_job_count_not_in with omitempty
	if !swag.IsZero(m.LastExecuteSuccessJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_total_job_count
	if m.LastExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_gt
	if m.LastExecuteTotalJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_gte
	if m.LastExecuteTotalJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_total_job_count_in with omitempty
	if !swag.IsZero(m.LastExecuteTotalJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_total_job_count_lt
	if m.LastExecuteTotalJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_lte
	if m.LastExecuteTotalJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_not
	if m.LastExecuteTotalJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_execute_total_job_count_not_in with omitempty
	if !swag.IsZero(m.LastExecuteTotalJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field last_executed_at_gt
	if m.LastExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":null")
		first = false
	}

	// handle nullable field last_executed_at_gte
	if m.LastExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":null")
		first = false
	}

	// handle non nullable field last_executed_at_in with omitempty
	if !swag.IsZero(m.LastExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_executed_at_lt
	if m.LastExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":null")
		first = false
	}

	// handle nullable field last_executed_at_lte
	if m.LastExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":null")
		first = false
	}

	// handle nullable field last_executed_at_not
	if m.LastExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":null")
		first = false
	}

	// handle non nullable field last_executed_at_not_in with omitempty
	if !swag.IsZero(m.LastExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status
	if m.LastManualExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message
	if m.LastManualExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_contains
	if m.LastManualExecuteStatusMessageContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_contains\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_contains\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_ends_with
	if m.LastManualExecuteStatusMessageEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_ends_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_gt
	if m.LastManualExecuteStatusMessageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_gte
	if m.LastManualExecuteStatusMessageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_message_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusMessageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message_lt
	if m.LastManualExecuteStatusMessageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_lte
	if m.LastManualExecuteStatusMessageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not
	if m.LastManualExecuteStatusMessageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_contains
	if m.LastManualExecuteStatusMessageNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_contains\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_contains\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_ends_with
	if m.LastManualExecuteStatusMessageNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_ends_with\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_message_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusMessageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_starts_with
	if m.LastManualExecuteStatusMessageNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_starts_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_starts_with
	if m.LastManualExecuteStatusMessageStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_starts_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_not
	if m.LastManualExecuteStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count
	if m.LastManualExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_gt
	if m.LastManualExecuteSuccessJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_gte
	if m.LastManualExecuteSuccessJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_success_job_count_in with omitempty
	if !swag.IsZero(m.LastManualExecuteSuccessJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_lt
	if m.LastManualExecuteSuccessJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_lte
	if m.LastManualExecuteSuccessJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_not
	if m.LastManualExecuteSuccessJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_success_job_count_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteSuccessJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count
	if m.LastManualExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_gt
	if m.LastManualExecuteTotalJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_gte
	if m.LastManualExecuteTotalJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_total_job_count_in with omitempty
	if !swag.IsZero(m.LastManualExecuteTotalJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_lt
	if m.LastManualExecuteTotalJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_lte
	if m.LastManualExecuteTotalJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_not
	if m.LastManualExecuteTotalJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_total_job_count_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteTotalJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_executed_at
	if m.LastManualExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_gt
	if m.LastManualExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gt\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_gte
	if m.LastManualExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_executed_at_in with omitempty
	if !swag.IsZero(m.LastManualExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_executed_at_lt
	if m.LastManualExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lt\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_lte
	if m.LastManualExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lte\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_not
	if m.LastManualExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not\":null")
		first = false
	}

	// handle non nullable field last_manual_executed_at_not_in with omitempty
	if !swag.IsZero(m.LastManualExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field logical_size
	if m.LogicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":")
		bytes, err := swag.WriteJSON(m.LogicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":null")
		first = false
	}

	// handle nullable field logical_size_gt
	if m.LogicalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gt\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gt\":null")
		first = false
	}

	// handle nullable field logical_size_gte
	if m.LogicalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gte\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gte\":null")
		first = false
	}

	// handle non nullable field logical_size_in with omitempty
	if !swag.IsZero(m.LogicalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_in\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field logical_size_lt
	if m.LogicalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lt\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lt\":null")
		first = false
	}

	// handle nullable field logical_size_lte
	if m.LogicalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lte\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lte\":null")
		first = false
	}

	// handle nullable field logical_size_not
	if m.LogicalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not\":null")
		first = false
	}

	// handle non nullable field logical_size_not_in with omitempty
	if !swag.IsZero(m.LogicalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not_in\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field next_execute_time
	if m.NextExecuteTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time\":null")
		first = false
	}

	// handle nullable field next_execute_time_gt
	if m.NextExecuteTimeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_gt\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTimeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_gt\":null")
		first = false
	}

	// handle nullable field next_execute_time_gte
	if m.NextExecuteTimeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_gte\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTimeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_gte\":null")
		first = false
	}

	// handle non nullable field next_execute_time_in with omitempty
	if !swag.IsZero(m.NextExecuteTimeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_in\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field next_execute_time_lt
	if m.NextExecuteTimeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_lt\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTimeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_lt\":null")
		first = false
	}

	// handle nullable field next_execute_time_lte
	if m.NextExecuteTimeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_lte\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTimeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_lte\":null")
		first = false
	}

	// handle nullable field next_execute_time_not
	if m.NextExecuteTimeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_not\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTimeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_not\":null")
		first = false
	}

	// handle non nullable field next_execute_time_not_in with omitempty
	if !swag.IsZero(m.NextExecuteTimeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time_not_in\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTimeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle non nullable field phase_in with omitempty
	if !swag.IsZero(m.PhaseIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_in\":")
		bytes, err := swag.WriteJSON(m.PhaseIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field phase_not
	if m.PhaseNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":")
		bytes, err := swag.WriteJSON(m.PhaseNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhaseNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":null")
		first = false
	}

	// handle non nullable field phase_not_in with omitempty
	if !swag.IsZero(m.PhaseNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not_in\":")
		bytes, err := swag.WriteJSON(m.PhaseNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field physical_size
	if m.PhysicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":")
		bytes, err := swag.WriteJSON(m.PhysicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":null")
		first = false
	}

	// handle nullable field physical_size_gt
	if m.PhysicalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gt\":null")
		first = false
	}

	// handle nullable field physical_size_gte
	if m.PhysicalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gte\":null")
		first = false
	}

	// handle non nullable field physical_size_in with omitempty
	if !swag.IsZero(m.PhysicalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field physical_size_lt
	if m.PhysicalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lt\":null")
		first = false
	}

	// handle nullable field physical_size_lte
	if m.PhysicalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lte\":null")
		first = false
	}

	// handle nullable field physical_size_not
	if m.PhysicalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not\":null")
		first = false
	}

	// handle non nullable field physical_size_not_in with omitempty
	if !swag.IsZero(m.PhysicalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type_not
	if m.SnapshotConsistentTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_not_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size_of_backup_object
	if m.ValidSizeOfBackupObject != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObject)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObject_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object\":null")
		first = false
	}

	// handle nullable field valid_size_of_backup_object_gt
	if m.ValidSizeOfBackupObjectGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_gt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObjectGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_gt\":null")
		first = false
	}

	// handle nullable field valid_size_of_backup_object_gte
	if m.ValidSizeOfBackupObjectGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_gte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObjectGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_gte\":null")
		first = false
	}

	// handle non nullable field valid_size_of_backup_object_in with omitempty
	if !swag.IsZero(m.ValidSizeOfBackupObjectIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size_of_backup_object_lt
	if m.ValidSizeOfBackupObjectLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_lt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObjectLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_lt\":null")
		first = false
	}

	// handle nullable field valid_size_of_backup_object_lte
	if m.ValidSizeOfBackupObjectLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_lte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObjectLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_lte\":null")
		first = false
	}

	// handle nullable field valid_size_of_backup_object_not
	if m.ValidSizeOfBackupObjectNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_not\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObjectNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_not\":null")
		first = false
	}

	// handle non nullable field valid_size_of_backup_object_not_in with omitempty
	if !swag.IsZero(m.ValidSizeOfBackupObjectNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object_not_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObjectNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size_of_restore_point
	if m.ValidSizeOfRestorePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point\":null")
		first = false
	}

	// handle nullable field valid_size_of_restore_point_gt
	if m.ValidSizeOfRestorePointGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_gt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePointGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_gt\":null")
		first = false
	}

	// handle nullable field valid_size_of_restore_point_gte
	if m.ValidSizeOfRestorePointGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_gte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePointGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_gte\":null")
		first = false
	}

	// handle non nullable field valid_size_of_restore_point_in with omitempty
	if !swag.IsZero(m.ValidSizeOfRestorePointIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size_of_restore_point_lt
	if m.ValidSizeOfRestorePointLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_lt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePointLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_lt\":null")
		first = false
	}

	// handle nullable field valid_size_of_restore_point_lte
	if m.ValidSizeOfRestorePointLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_lte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePointLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_lte\":null")
		first = false
	}

	// handle nullable field valid_size_of_restore_point_not
	if m.ValidSizeOfRestorePointNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_not\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePointNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_not\":null")
		first = false
	}

	// handle non nullable field valid_size_of_restore_point_not_in with omitempty
	if !swag.IsZero(m.ValidSizeOfRestorePointNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point_not_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePointNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vms_every
	if m.VmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":")
		bytes, err := swag.WriteJSON(m.VmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":null")
		first = false
	}

	// handle nullable field vms_none
	if m.VmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":")
		bytes, err := swag.WriteJSON(m.VmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":null")
		first = false
	}

	// handle nullable field vms_some
	if m.VmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":")
		bytes, err := swag.WriteJSON(m.VmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":null")
		first = false
	}

	// handle nullable field window_end
	if m.WindowEnd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":")
		bytes, err := swag.WriteJSON(m.WindowEnd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEnd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":null")
		first = false
	}

	// handle nullable field window_end_contains
	if m.WindowEndContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_contains\":")
		bytes, err := swag.WriteJSON(m.WindowEndContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_contains\":null")
		first = false
	}

	// handle nullable field window_end_ends_with
	if m.WindowEndEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_ends_with\":null")
		first = false
	}

	// handle nullable field window_end_gt
	if m.WindowEndGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gt\":")
		bytes, err := swag.WriteJSON(m.WindowEndGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gt\":null")
		first = false
	}

	// handle nullable field window_end_gte
	if m.WindowEndGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gte\":")
		bytes, err := swag.WriteJSON(m.WindowEndGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gte\":null")
		first = false
	}

	// handle non nullable field window_end_in with omitempty
	if !swag.IsZero(m.WindowEndIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_in\":")
		bytes, err := swag.WriteJSON(m.WindowEndIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end_lt
	if m.WindowEndLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lt\":")
		bytes, err := swag.WriteJSON(m.WindowEndLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lt\":null")
		first = false
	}

	// handle nullable field window_end_lte
	if m.WindowEndLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lte\":")
		bytes, err := swag.WriteJSON(m.WindowEndLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lte\":null")
		first = false
	}

	// handle nullable field window_end_not
	if m.WindowEndNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not\":")
		bytes, err := swag.WriteJSON(m.WindowEndNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not\":null")
		first = false
	}

	// handle nullable field window_end_not_contains
	if m.WindowEndNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_contains\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_contains\":null")
		first = false
	}

	// handle nullable field window_end_not_ends_with
	if m.WindowEndNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_ends_with\":null")
		first = false
	}

	// handle non nullable field window_end_not_in with omitempty
	if !swag.IsZero(m.WindowEndNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_in\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end_not_starts_with
	if m.WindowEndNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_starts_with\":null")
		first = false
	}

	// handle nullable field window_end_starts_with
	if m.WindowEndStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_starts_with\":null")
		first = false
	}

	// handle nullable field window_start
	if m.WindowStart != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":")
		bytes, err := swag.WriteJSON(m.WindowStart)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStart_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":null")
		first = false
	}

	// handle nullable field window_start_contains
	if m.WindowStartContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_contains\":")
		bytes, err := swag.WriteJSON(m.WindowStartContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_contains\":null")
		first = false
	}

	// handle nullable field window_start_ends_with
	if m.WindowStartEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_ends_with\":null")
		first = false
	}

	// handle nullable field window_start_gt
	if m.WindowStartGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gt\":")
		bytes, err := swag.WriteJSON(m.WindowStartGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gt\":null")
		first = false
	}

	// handle nullable field window_start_gte
	if m.WindowStartGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gte\":")
		bytes, err := swag.WriteJSON(m.WindowStartGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gte\":null")
		first = false
	}

	// handle non nullable field window_start_in with omitempty
	if !swag.IsZero(m.WindowStartIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_in\":")
		bytes, err := swag.WriteJSON(m.WindowStartIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_start_lt
	if m.WindowStartLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lt\":")
		bytes, err := swag.WriteJSON(m.WindowStartLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lt\":null")
		first = false
	}

	// handle nullable field window_start_lte
	if m.WindowStartLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lte\":")
		bytes, err := swag.WriteJSON(m.WindowStartLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lte\":null")
		first = false
	}

	// handle nullable field window_start_not
	if m.WindowStartNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not\":")
		bytes, err := swag.WriteJSON(m.WindowStartNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not\":null")
		first = false
	}

	// handle nullable field window_start_not_contains
	if m.WindowStartNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_contains\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_contains\":null")
		first = false
	}

	// handle nullable field window_start_not_ends_with
	if m.WindowStartNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_ends_with\":null")
		first = false
	}

	// handle non nullable field window_start_not_in with omitempty
	if !swag.IsZero(m.WindowStartNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_in\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_start_not_starts_with
	if m.WindowStartNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_starts_with\":null")
		first = false
	}

	// handle nullable field window_start_starts_with
	if m.WindowStartStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup plan where input
func (m *BackupPlanWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOptionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOptionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOptionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupStoreRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriodIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriodNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriodNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriodIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriodNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriodNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOption(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOption) { // not required
		return nil
	}

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOptionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOptionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupDelayOptionIn); i++ {

		if err := m.BackupDelayOptionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOptionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOptionNot) { // not required
		return nil
	}

	if m.BackupDelayOptionNot != nil {
		if err := m.BackupDelayOptionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOptionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOptionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupDelayOptionNotIn); i++ {

		if err := m.BackupDelayOptionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupPlanExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecutionsEvery) { // not required
		return nil
	}

	if m.BackupPlanExecutionsEvery != nil {
		if err := m.BackupPlanExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupPlanExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecutionsNone) { // not required
		return nil
	}

	if m.BackupPlanExecutionsNone != nil {
		if err := m.BackupPlanExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupPlanExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecutionsSome) { // not required
		return nil
	}

	if m.BackupPlanExecutionsSome != nil {
		if err := m.BackupPlanExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupRestorePointsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsEvery) { // not required
		return nil
	}

	if m.BackupRestorePointsEvery != nil {
		if err := m.BackupRestorePointsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupRestorePointsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsNone) { // not required
		return nil
	}

	if m.BackupRestorePointsNone != nil {
		if err := m.BackupRestorePointsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupRestorePointsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsSome) { // not required
		return nil
	}

	if m.BackupRestorePointsSome != nil {
		if err := m.BackupRestorePointsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupService(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupService) { // not required
		return nil
	}

	if m.BackupService != nil {
		if err := m.BackupService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupStoreRepository(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupStoreRepository) { // not required
		return nil
	}

	if m.BackupStoreRepository != nil {
		if err := m.BackupStoreRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_store_repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_store_repository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategy) { // not required
		return nil
	}

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyNot) { // not required
		return nil
	}

	if m.DeleteStrategyNot != nil {
		if err := m.DeleteStrategyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriod) { // not required
		return nil
	}

	if m.FullPeriod != nil {
		if err := m.FullPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriodIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriodIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FullPeriodIn); i++ {

		if err := m.FullPeriodIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriodNot(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriodNot) { // not required
		return nil
	}

	if m.FullPeriodNot != nil {
		if err := m.FullPeriodNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriodNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriodNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FullPeriodNotIn); i++ {

		if err := m.FullPeriodNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriod) { // not required
		return nil
	}

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriodIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriodIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalPeriodIn); i++ {

		if err := m.IncrementalPeriodIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriodNot(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriodNot) { // not required
		return nil
	}

	if m.IncrementalPeriodNot != nil {
		if err := m.IncrementalPeriodNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriodNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriodNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalPeriodNotIn); i++ {

		if err := m.IncrementalPeriodNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicy) { // not required
		return nil
	}

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyNot) { // not required
		return nil
	}

	if m.KeepPolicyNot != nil {
		if err := m.KeepPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatus) { // not required
		return nil
	}

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNot) { // not required
		return nil
	}

	if m.LastExecuteStatusNot != nil {
		if err := m.LastExecuteStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastManualExecuteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatus) { // not required
		return nil
	}

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastManualExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastManualExecuteStatusIn); i++ {

		if err := m.LastManualExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastManualExecuteStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusNot) { // not required
		return nil
	}

	if m.LastManualExecuteStatusNot != nil {
		if err := m.LastManualExecuteStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastManualExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastManualExecuteStatusNotIn); i++ {

		if err := m.LastManualExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validatePhaseIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validatePhaseNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNot) { // not required
		return nil
	}

	if m.PhaseNot != nil {
		if err := m.PhaseNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validatePhaseNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateSnapshotConsistentTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateSnapshotConsistentTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNot) { // not required
		return nil
	}

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateSnapshotConsistentTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup plan where input based on the context it is used
func (m *BackupPlanWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOptionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOptionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOptionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupStoreRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriodIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriodNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriodNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriodIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriodNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriodNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOption(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOptionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupDelayOptionIn); i++ {

		if err := m.BackupDelayOptionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOptionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupDelayOptionNot != nil {
		if err := m.BackupDelayOptionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOptionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupDelayOptionNotIn); i++ {

		if err := m.BackupDelayOptionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupPlanExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlanExecutionsEvery != nil {
		if err := m.BackupPlanExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupPlanExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlanExecutionsNone != nil {
		if err := m.BackupPlanExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupPlanExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlanExecutionsSome != nil {
		if err := m.BackupPlanExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupRestorePointsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsEvery != nil {
		if err := m.BackupRestorePointsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupRestorePointsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsNone != nil {
		if err := m.BackupRestorePointsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupRestorePointsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsSome != nil {
		if err := m.BackupRestorePointsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupService(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupService != nil {
		if err := m.BackupService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupStoreRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupStoreRepository != nil {
		if err := m.BackupStoreRepository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_store_repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_store_repository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategyNot != nil {
		if err := m.DeleteStrategyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.FullPeriod != nil {
		if err := m.FullPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriodIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullPeriodIn); i++ {

		if err := m.FullPeriodIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriodNot(ctx context.Context, formats strfmt.Registry) error {

	if m.FullPeriodNot != nil {
		if err := m.FullPeriodNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriodNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullPeriodNotIn); i++ {

		if err := m.FullPeriodNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriodIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalPeriodIn); i++ {

		if err := m.IncrementalPeriodIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriodNot(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalPeriodNot != nil {
		if err := m.IncrementalPeriodNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriodNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalPeriodNotIn); i++ {

		if err := m.IncrementalPeriodNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicyNot != nil {
		if err := m.KeepPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatusNot != nil {
		if err := m.LastExecuteStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastManualExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastManualExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastManualExecuteStatusIn); i++ {

		if err := m.LastManualExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastManualExecuteStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatusNot != nil {
		if err := m.LastManualExecuteStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastManualExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastManualExecuteStatusNotIn); i++ {

		if err := m.LastManualExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidatePhaseIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidatePhaseNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PhaseNot != nil {
		if err := m.PhaseNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidatePhaseNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateSnapshotConsistentTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateSnapshotConsistentTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateSnapshotConsistentTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPlanWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPlanWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupPlanWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
