// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicaVMWhereInput replica Vm where input
//
// swagger:model ReplicaVmWhereInput
type ReplicaVMWhereInput struct {

	// a n d
	AND []*ReplicaVMWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ReplicaVMWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ReplicaVMWhereInput `json:"OR,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// external cloudtower
	ExternalCloudtower *ExternalCloudTowerWhereInput `json:"external_cloudtower,omitempty"`

	// failover test replica group
	FailoverTestReplicaGroup *string `json:"failover_test_replica_group,omitempty"`

	// failover test replica group contains
	FailoverTestReplicaGroupContains *string `json:"failover_test_replica_group_contains,omitempty"`

	// failover test replica group ends with
	FailoverTestReplicaGroupEndsWith *string `json:"failover_test_replica_group_ends_with,omitempty"`

	// failover test replica group gt
	FailoverTestReplicaGroupGt *string `json:"failover_test_replica_group_gt,omitempty"`

	// failover test replica group gte
	FailoverTestReplicaGroupGte *string `json:"failover_test_replica_group_gte,omitempty"`

	// failover test replica group in
	FailoverTestReplicaGroupIn []string `json:"failover_test_replica_group_in,omitempty"`

	// failover test replica group lt
	FailoverTestReplicaGroupLt *string `json:"failover_test_replica_group_lt,omitempty"`

	// failover test replica group lte
	FailoverTestReplicaGroupLte *string `json:"failover_test_replica_group_lte,omitempty"`

	// failover test replica group not
	FailoverTestReplicaGroupNot *string `json:"failover_test_replica_group_not,omitempty"`

	// failover test replica group not contains
	FailoverTestReplicaGroupNotContains *string `json:"failover_test_replica_group_not_contains,omitempty"`

	// failover test replica group not ends with
	FailoverTestReplicaGroupNotEndsWith *string `json:"failover_test_replica_group_not_ends_with,omitempty"`

	// failover test replica group not in
	FailoverTestReplicaGroupNotIn []string `json:"failover_test_replica_group_not_in,omitempty"`

	// failover test replica group not starts with
	FailoverTestReplicaGroupNotStartsWith *string `json:"failover_test_replica_group_not_starts_with,omitempty"`

	// failover test replica group starts with
	FailoverTestReplicaGroupStartsWith *string `json:"failover_test_replica_group_starts_with,omitempty"`

	// failover test vm
	FailoverTestVM *VMWhereInput `json:"failover_test_vm,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// inbound
	Inbound *bool `json:"inbound,omitempty"`

	// inbound not
	InboundNot *bool `json:"inbound_not,omitempty"`

	// iscsi lun
	IscsiLun *IscsiLunWhereInput `json:"iscsi_lun,omitempty"`

	// origin iscsi lun
	OriginIscsiLun *IscsiLunWhereInput `json:"origin_iscsi_lun,omitempty"`

	// origin vm
	OriginVM *VMWhereInput `json:"origin_vm,omitempty"`

	// origin vm cluster local id
	OriginVMClusterLocalID *string `json:"origin_vm_cluster_local_id,omitempty"`

	// origin vm cluster local id contains
	OriginVMClusterLocalIDContains *string `json:"origin_vm_cluster_local_id_contains,omitempty"`

	// origin vm cluster local id ends with
	OriginVMClusterLocalIDEndsWith *string `json:"origin_vm_cluster_local_id_ends_with,omitempty"`

	// origin vm cluster local id gt
	OriginVMClusterLocalIDGt *string `json:"origin_vm_cluster_local_id_gt,omitempty"`

	// origin vm cluster local id gte
	OriginVMClusterLocalIDGte *string `json:"origin_vm_cluster_local_id_gte,omitempty"`

	// origin vm cluster local id in
	OriginVMClusterLocalIDIn []string `json:"origin_vm_cluster_local_id_in,omitempty"`

	// origin vm cluster local id lt
	OriginVMClusterLocalIDLt *string `json:"origin_vm_cluster_local_id_lt,omitempty"`

	// origin vm cluster local id lte
	OriginVMClusterLocalIDLte *string `json:"origin_vm_cluster_local_id_lte,omitempty"`

	// origin vm cluster local id not
	OriginVMClusterLocalIDNot *string `json:"origin_vm_cluster_local_id_not,omitempty"`

	// origin vm cluster local id not contains
	OriginVMClusterLocalIDNotContains *string `json:"origin_vm_cluster_local_id_not_contains,omitempty"`

	// origin vm cluster local id not ends with
	OriginVMClusterLocalIDNotEndsWith *string `json:"origin_vm_cluster_local_id_not_ends_with,omitempty"`

	// origin vm cluster local id not in
	OriginVMClusterLocalIDNotIn []string `json:"origin_vm_cluster_local_id_not_in,omitempty"`

	// origin vm cluster local id not starts with
	OriginVMClusterLocalIDNotStartsWith *string `json:"origin_vm_cluster_local_id_not_starts_with,omitempty"`

	// origin vm cluster local id starts with
	OriginVMClusterLocalIDStartsWith *string `json:"origin_vm_cluster_local_id_starts_with,omitempty"`

	// origin vm cluster name
	OriginVMClusterName *string `json:"origin_vm_cluster_name,omitempty"`

	// origin vm cluster name contains
	OriginVMClusterNameContains *string `json:"origin_vm_cluster_name_contains,omitempty"`

	// origin vm cluster name ends with
	OriginVMClusterNameEndsWith *string `json:"origin_vm_cluster_name_ends_with,omitempty"`

	// origin vm cluster name gt
	OriginVMClusterNameGt *string `json:"origin_vm_cluster_name_gt,omitempty"`

	// origin vm cluster name gte
	OriginVMClusterNameGte *string `json:"origin_vm_cluster_name_gte,omitempty"`

	// origin vm cluster name in
	OriginVMClusterNameIn []string `json:"origin_vm_cluster_name_in,omitempty"`

	// origin vm cluster name lt
	OriginVMClusterNameLt *string `json:"origin_vm_cluster_name_lt,omitempty"`

	// origin vm cluster name lte
	OriginVMClusterNameLte *string `json:"origin_vm_cluster_name_lte,omitempty"`

	// origin vm cluster name not
	OriginVMClusterNameNot *string `json:"origin_vm_cluster_name_not,omitempty"`

	// origin vm cluster name not contains
	OriginVMClusterNameNotContains *string `json:"origin_vm_cluster_name_not_contains,omitempty"`

	// origin vm cluster name not ends with
	OriginVMClusterNameNotEndsWith *string `json:"origin_vm_cluster_name_not_ends_with,omitempty"`

	// origin vm cluster name not in
	OriginVMClusterNameNotIn []string `json:"origin_vm_cluster_name_not_in,omitempty"`

	// origin vm cluster name not starts with
	OriginVMClusterNameNotStartsWith *string `json:"origin_vm_cluster_name_not_starts_with,omitempty"`

	// origin vm cluster name starts with
	OriginVMClusterNameStartsWith *string `json:"origin_vm_cluster_name_starts_with,omitempty"`

	// origin vm local id
	OriginVMLocalID *string `json:"origin_vm_local_id,omitempty"`

	// origin vm local id contains
	OriginVMLocalIDContains *string `json:"origin_vm_local_id_contains,omitempty"`

	// origin vm local id ends with
	OriginVMLocalIDEndsWith *string `json:"origin_vm_local_id_ends_with,omitempty"`

	// origin vm local id gt
	OriginVMLocalIDGt *string `json:"origin_vm_local_id_gt,omitempty"`

	// origin vm local id gte
	OriginVMLocalIDGte *string `json:"origin_vm_local_id_gte,omitempty"`

	// origin vm local id in
	OriginVMLocalIDIn []string `json:"origin_vm_local_id_in,omitempty"`

	// origin vm local id lt
	OriginVMLocalIDLt *string `json:"origin_vm_local_id_lt,omitempty"`

	// origin vm local id lte
	OriginVMLocalIDLte *string `json:"origin_vm_local_id_lte,omitempty"`

	// origin vm local id not
	OriginVMLocalIDNot *string `json:"origin_vm_local_id_not,omitempty"`

	// origin vm local id not contains
	OriginVMLocalIDNotContains *string `json:"origin_vm_local_id_not_contains,omitempty"`

	// origin vm local id not ends with
	OriginVMLocalIDNotEndsWith *string `json:"origin_vm_local_id_not_ends_with,omitempty"`

	// origin vm local id not in
	OriginVMLocalIDNotIn []string `json:"origin_vm_local_id_not_in,omitempty"`

	// origin vm local id not starts with
	OriginVMLocalIDNotStartsWith *string `json:"origin_vm_local_id_not_starts_with,omitempty"`

	// origin vm local id starts with
	OriginVMLocalIDStartsWith *string `json:"origin_vm_local_id_starts_with,omitempty"`

	// origin vm name
	OriginVMName *string `json:"origin_vm_name,omitempty"`

	// origin vm name contains
	OriginVMNameContains *string `json:"origin_vm_name_contains,omitempty"`

	// origin vm name ends with
	OriginVMNameEndsWith *string `json:"origin_vm_name_ends_with,omitempty"`

	// origin vm name gt
	OriginVMNameGt *string `json:"origin_vm_name_gt,omitempty"`

	// origin vm name gte
	OriginVMNameGte *string `json:"origin_vm_name_gte,omitempty"`

	// origin vm name in
	OriginVMNameIn []string `json:"origin_vm_name_in,omitempty"`

	// origin vm name lt
	OriginVMNameLt *string `json:"origin_vm_name_lt,omitempty"`

	// origin vm name lte
	OriginVMNameLte *string `json:"origin_vm_name_lte,omitempty"`

	// origin vm name not
	OriginVMNameNot *string `json:"origin_vm_name_not,omitempty"`

	// origin vm name not contains
	OriginVMNameNotContains *string `json:"origin_vm_name_not_contains,omitempty"`

	// origin vm name not ends with
	OriginVMNameNotEndsWith *string `json:"origin_vm_name_not_ends_with,omitempty"`

	// origin vm name not in
	OriginVMNameNotIn []string `json:"origin_vm_name_not_in,omitempty"`

	// origin vm name not starts with
	OriginVMNameNotStartsWith *string `json:"origin_vm_name_not_starts_with,omitempty"`

	// origin vm name starts with
	OriginVMNameStartsWith *string `json:"origin_vm_name_starts_with,omitempty"`

	// replica group
	ReplicaGroup *string `json:"replica_group,omitempty"`

	// replica group contains
	ReplicaGroupContains *string `json:"replica_group_contains,omitempty"`

	// replica group ends with
	ReplicaGroupEndsWith *string `json:"replica_group_ends_with,omitempty"`

	// replica group gt
	ReplicaGroupGt *string `json:"replica_group_gt,omitempty"`

	// replica group gte
	ReplicaGroupGte *string `json:"replica_group_gte,omitempty"`

	// replica group in
	ReplicaGroupIn []string `json:"replica_group_in,omitempty"`

	// replica group lt
	ReplicaGroupLt *string `json:"replica_group_lt,omitempty"`

	// replica group lte
	ReplicaGroupLte *string `json:"replica_group_lte,omitempty"`

	// replica group not
	ReplicaGroupNot *string `json:"replica_group_not,omitempty"`

	// replica group not contains
	ReplicaGroupNotContains *string `json:"replica_group_not_contains,omitempty"`

	// replica group not ends with
	ReplicaGroupNotEndsWith *string `json:"replica_group_not_ends_with,omitempty"`

	// replica group not in
	ReplicaGroupNotIn []string `json:"replica_group_not_in,omitempty"`

	// replica group not starts with
	ReplicaGroupNotStartsWith *string `json:"replica_group_not_starts_with,omitempty"`

	// replica group starts with
	ReplicaGroupStartsWith *string `json:"replica_group_starts_with,omitempty"`

	// replication group
	ReplicationGroup *string `json:"replication_group,omitempty"`

	// replication group contains
	ReplicationGroupContains *string `json:"replication_group_contains,omitempty"`

	// replication group ends with
	ReplicationGroupEndsWith *string `json:"replication_group_ends_with,omitempty"`

	// replication group gt
	ReplicationGroupGt *string `json:"replication_group_gt,omitempty"`

	// replication group gte
	ReplicationGroupGte *string `json:"replication_group_gte,omitempty"`

	// replication group in
	ReplicationGroupIn []string `json:"replication_group_in,omitempty"`

	// replication group lt
	ReplicationGroupLt *string `json:"replication_group_lt,omitempty"`

	// replication group lte
	ReplicationGroupLte *string `json:"replication_group_lte,omitempty"`

	// replication group not
	ReplicationGroupNot *string `json:"replication_group_not,omitempty"`

	// replication group not contains
	ReplicationGroupNotContains *string `json:"replication_group_not_contains,omitempty"`

	// replication group not ends with
	ReplicationGroupNotEndsWith *string `json:"replication_group_not_ends_with,omitempty"`

	// replication group not in
	ReplicationGroupNotIn []string `json:"replication_group_not_in,omitempty"`

	// replication group not starts with
	ReplicationGroupNotStartsWith *string `json:"replication_group_not_starts_with,omitempty"`

	// replication group starts with
	ReplicationGroupStartsWith *string `json:"replication_group_starts_with,omitempty"`

	// replication plan
	ReplicationPlan *ReplicationPlanWhereInput `json:"replication_plan,omitempty"`

	// replication service
	ReplicationService *ReplicationServiceWhereInput `json:"replication_service,omitempty"`

	// replication target executions every
	ReplicationTargetExecutionsEvery *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_every,omitempty"`

	// replication target executions none
	ReplicationTargetExecutionsNone *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_none,omitempty"`

	// replication target executions some
	ReplicationTargetExecutionsSome *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_some,omitempty"`

	// restore points every
	RestorePointsEvery *ReplicationRestorePointWhereInput `json:"restore_points_every,omitempty"`

	// restore points none
	RestorePointsNone *ReplicationRestorePointWhereInput `json:"restore_points_none,omitempty"`

	// restore points some
	RestorePointsSome *ReplicationRestorePointWhereInput `json:"restore_points_some,omitempty"`

	// state
	State *ReplicaVMState `json:"state,omitempty"`

	// state in
	StateIn []ReplicaVMState `json:"state_in,omitempty"`

	// state not
	StateNot *ReplicaVMState `json:"state_not,omitempty"`

	// state not in
	StateNotIn []ReplicaVMState `json:"state_not_in,omitempty"`

	// targets deletable
	TargetsDeletable *bool `json:"targets_deletable,omitempty"`

	// targets deletable not
	TargetsDeletableNot *bool `json:"targets_deletable_not,omitempty"`

	// type
	Type *ReplicationObjectType `json:"type,omitempty"`

	// type in
	TypeIn []ReplicationObjectType `json:"type_in,omitempty"`

	// type not
	TypeNot *ReplicationObjectType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []ReplicationObjectType `json:"type_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	MarshalOpts *ReplicaVMWhereInputMarshalOpts `json:"-"`
}

type ReplicaVMWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroup_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupContains_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupEndsWith_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupGt_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupGte_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupIn_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupLt_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupLte_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupNot_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupNotContains_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupNotEndsWith_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupNotIn_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupNotStartsWith_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroupStartsWith_Explicit_Null_When_Empty bool

	FailoverTestVM_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Inbound_Explicit_Null_When_Empty bool

	InboundNot_Explicit_Null_When_Empty bool

	IscsiLun_Explicit_Null_When_Empty bool

	OriginIscsiLun_Explicit_Null_When_Empty bool

	OriginVM_Explicit_Null_When_Empty bool

	OriginVMClusterLocalID_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDContains_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDEndsWith_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDGt_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDGte_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDIn_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDLt_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDLte_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDNot_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDNotContains_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDNotIn_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	OriginVMClusterLocalIDStartsWith_Explicit_Null_When_Empty bool

	OriginVMClusterName_Explicit_Null_When_Empty bool

	OriginVMClusterNameContains_Explicit_Null_When_Empty bool

	OriginVMClusterNameEndsWith_Explicit_Null_When_Empty bool

	OriginVMClusterNameGt_Explicit_Null_When_Empty bool

	OriginVMClusterNameGte_Explicit_Null_When_Empty bool

	OriginVMClusterNameIn_Explicit_Null_When_Empty bool

	OriginVMClusterNameLt_Explicit_Null_When_Empty bool

	OriginVMClusterNameLte_Explicit_Null_When_Empty bool

	OriginVMClusterNameNot_Explicit_Null_When_Empty bool

	OriginVMClusterNameNotContains_Explicit_Null_When_Empty bool

	OriginVMClusterNameNotEndsWith_Explicit_Null_When_Empty bool

	OriginVMClusterNameNotIn_Explicit_Null_When_Empty bool

	OriginVMClusterNameNotStartsWith_Explicit_Null_When_Empty bool

	OriginVMClusterNameStartsWith_Explicit_Null_When_Empty bool

	OriginVMLocalID_Explicit_Null_When_Empty bool

	OriginVMLocalIDContains_Explicit_Null_When_Empty bool

	OriginVMLocalIDEndsWith_Explicit_Null_When_Empty bool

	OriginVMLocalIDGt_Explicit_Null_When_Empty bool

	OriginVMLocalIDGte_Explicit_Null_When_Empty bool

	OriginVMLocalIDIn_Explicit_Null_When_Empty bool

	OriginVMLocalIDLt_Explicit_Null_When_Empty bool

	OriginVMLocalIDLte_Explicit_Null_When_Empty bool

	OriginVMLocalIDNot_Explicit_Null_When_Empty bool

	OriginVMLocalIDNotContains_Explicit_Null_When_Empty bool

	OriginVMLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	OriginVMLocalIDNotIn_Explicit_Null_When_Empty bool

	OriginVMLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	OriginVMLocalIDStartsWith_Explicit_Null_When_Empty bool

	OriginVMName_Explicit_Null_When_Empty bool

	OriginVMNameContains_Explicit_Null_When_Empty bool

	OriginVMNameEndsWith_Explicit_Null_When_Empty bool

	OriginVMNameGt_Explicit_Null_When_Empty bool

	OriginVMNameGte_Explicit_Null_When_Empty bool

	OriginVMNameIn_Explicit_Null_When_Empty bool

	OriginVMNameLt_Explicit_Null_When_Empty bool

	OriginVMNameLte_Explicit_Null_When_Empty bool

	OriginVMNameNot_Explicit_Null_When_Empty bool

	OriginVMNameNotContains_Explicit_Null_When_Empty bool

	OriginVMNameNotEndsWith_Explicit_Null_When_Empty bool

	OriginVMNameNotIn_Explicit_Null_When_Empty bool

	OriginVMNameNotStartsWith_Explicit_Null_When_Empty bool

	OriginVMNameStartsWith_Explicit_Null_When_Empty bool

	ReplicaGroup_Explicit_Null_When_Empty bool

	ReplicaGroupContains_Explicit_Null_When_Empty bool

	ReplicaGroupEndsWith_Explicit_Null_When_Empty bool

	ReplicaGroupGt_Explicit_Null_When_Empty bool

	ReplicaGroupGte_Explicit_Null_When_Empty bool

	ReplicaGroupIn_Explicit_Null_When_Empty bool

	ReplicaGroupLt_Explicit_Null_When_Empty bool

	ReplicaGroupLte_Explicit_Null_When_Empty bool

	ReplicaGroupNot_Explicit_Null_When_Empty bool

	ReplicaGroupNotContains_Explicit_Null_When_Empty bool

	ReplicaGroupNotEndsWith_Explicit_Null_When_Empty bool

	ReplicaGroupNotIn_Explicit_Null_When_Empty bool

	ReplicaGroupNotStartsWith_Explicit_Null_When_Empty bool

	ReplicaGroupStartsWith_Explicit_Null_When_Empty bool

	ReplicationGroup_Explicit_Null_When_Empty bool

	ReplicationGroupContains_Explicit_Null_When_Empty bool

	ReplicationGroupEndsWith_Explicit_Null_When_Empty bool

	ReplicationGroupGt_Explicit_Null_When_Empty bool

	ReplicationGroupGte_Explicit_Null_When_Empty bool

	ReplicationGroupIn_Explicit_Null_When_Empty bool

	ReplicationGroupLt_Explicit_Null_When_Empty bool

	ReplicationGroupLte_Explicit_Null_When_Empty bool

	ReplicationGroupNot_Explicit_Null_When_Empty bool

	ReplicationGroupNotContains_Explicit_Null_When_Empty bool

	ReplicationGroupNotEndsWith_Explicit_Null_When_Empty bool

	ReplicationGroupNotIn_Explicit_Null_When_Empty bool

	ReplicationGroupNotStartsWith_Explicit_Null_When_Empty bool

	ReplicationGroupStartsWith_Explicit_Null_When_Empty bool

	ReplicationPlan_Explicit_Null_When_Empty bool

	ReplicationService_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsEvery_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsNone_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsSome_Explicit_Null_When_Empty bool

	RestorePointsEvery_Explicit_Null_When_Empty bool

	RestorePointsNone_Explicit_Null_When_Empty bool

	RestorePointsSome_Explicit_Null_When_Empty bool

	State_Explicit_Null_When_Empty bool

	StateIn_Explicit_Null_When_Empty bool

	StateNot_Explicit_Null_When_Empty bool

	StateNotIn_Explicit_Null_When_Empty bool

	TargetsDeletable_Explicit_Null_When_Empty bool

	TargetsDeletableNot_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool
}

func (m ReplicaVMWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group
	if m.FailoverTestReplicaGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_contains
	if m.FailoverTestReplicaGroupContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_contains\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_contains\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_ends_with
	if m.FailoverTestReplicaGroupEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_ends_with\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_ends_with\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_gt
	if m.FailoverTestReplicaGroupGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_gt\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_gt\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_gte
	if m.FailoverTestReplicaGroupGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_gte\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_gte\":null")
		first = false
	}

	// handle non nullable field failover_test_replica_group_in with omitempty
	if !swag.IsZero(m.FailoverTestReplicaGroupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_in\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failover_test_replica_group_lt
	if m.FailoverTestReplicaGroupLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_lt\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_lt\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_lte
	if m.FailoverTestReplicaGroupLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_lte\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_lte\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_not
	if m.FailoverTestReplicaGroupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_not_contains
	if m.FailoverTestReplicaGroupNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_contains\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_contains\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_not_ends_with
	if m.FailoverTestReplicaGroupNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_ends_with\":null")
		first = false
	}

	// handle non nullable field failover_test_replica_group_not_in with omitempty
	if !swag.IsZero(m.FailoverTestReplicaGroupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_in\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failover_test_replica_group_not_starts_with
	if m.FailoverTestReplicaGroupNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_not_starts_with\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group_starts_with
	if m.FailoverTestReplicaGroupStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_starts_with\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroupStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroupStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group_starts_with\":null")
		first = false
	}

	// handle nullable field failover_test_vm
	if m.FailoverTestVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_vm\":")
		bytes, err := swag.WriteJSON(m.FailoverTestVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_vm\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field inbound
	if m.Inbound != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":")
		bytes, err := swag.WriteJSON(m.Inbound)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Inbound_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":null")
		first = false
	}

	// handle nullable field inbound_not
	if m.InboundNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound_not\":")
		bytes, err := swag.WriteJSON(m.InboundNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InboundNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound_not\":null")
		first = false
	}

	// handle nullable field iscsi_lun
	if m.IscsiLun != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":")
		bytes, err := swag.WriteJSON(m.IscsiLun)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLun_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":null")
		first = false
	}

	// handle nullable field origin_iscsi_lun
	if m.OriginIscsiLun != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_iscsi_lun\":")
		bytes, err := swag.WriteJSON(m.OriginIscsiLun)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginIscsiLun_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_iscsi_lun\":null")
		first = false
	}

	// handle nullable field origin_vm
	if m.OriginVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm\":")
		bytes, err := swag.WriteJSON(m.OriginVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id
	if m.OriginVMClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_contains
	if m.OriginVMClusterLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_ends_with
	if m.OriginVMClusterLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_gt
	if m.OriginVMClusterLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_gt\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_gte
	if m.OriginVMClusterLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_gte\":null")
		first = false
	}

	// handle non nullable field origin_vm_cluster_local_id_in with omitempty
	if !swag.IsZero(m.OriginVMClusterLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_lt
	if m.OriginVMClusterLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_lt\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_lte
	if m.OriginVMClusterLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_lte\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_not
	if m.OriginVMClusterLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_not_contains
	if m.OriginVMClusterLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_not_ends_with
	if m.OriginVMClusterLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field origin_vm_cluster_local_id_not_in with omitempty
	if !swag.IsZero(m.OriginVMClusterLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_not_starts_with
	if m.OriginVMClusterLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id_starts_with
	if m.OriginVMClusterLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name
	if m.OriginVMClusterName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_contains
	if m.OriginVMClusterNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_ends_with
	if m.OriginVMClusterNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_ends_with\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_gt
	if m.OriginVMClusterNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_gt\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_gt\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_gte
	if m.OriginVMClusterNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_gte\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_gte\":null")
		first = false
	}

	// handle non nullable field origin_vm_cluster_name_in with omitempty
	if !swag.IsZero(m.OriginVMClusterNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_cluster_name_lt
	if m.OriginVMClusterNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_lt\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_lt\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_lte
	if m.OriginVMClusterNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_lte\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_lte\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_not
	if m.OriginVMClusterNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_not_contains
	if m.OriginVMClusterNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_not_ends_with
	if m.OriginVMClusterNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field origin_vm_cluster_name_not_in with omitempty
	if !swag.IsZero(m.OriginVMClusterNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_cluster_name_not_starts_with
	if m.OriginVMClusterNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name_starts_with
	if m.OriginVMClusterNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id
	if m.OriginVMLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_contains
	if m.OriginVMLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_ends_with
	if m.OriginVMLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_gt
	if m.OriginVMLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_gt\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_gte
	if m.OriginVMLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_gte\":null")
		first = false
	}

	// handle non nullable field origin_vm_local_id_in with omitempty
	if !swag.IsZero(m.OriginVMLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_local_id_lt
	if m.OriginVMLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_lt\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_lte
	if m.OriginVMLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_lte\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_not
	if m.OriginVMLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_not_contains
	if m.OriginVMLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_not_ends_with
	if m.OriginVMLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field origin_vm_local_id_not_in with omitempty
	if !swag.IsZero(m.OriginVMLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_local_id_not_starts_with
	if m.OriginVMLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id_starts_with
	if m.OriginVMLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_name
	if m.OriginVMName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name\":")
		bytes, err := swag.WriteJSON(m.OriginVMName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name\":null")
		first = false
	}

	// handle nullable field origin_vm_name_contains
	if m.OriginVMNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_name_ends_with
	if m.OriginVMNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_ends_with\":null")
		first = false
	}

	// handle nullable field origin_vm_name_gt
	if m.OriginVMNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_gt\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_gt\":null")
		first = false
	}

	// handle nullable field origin_vm_name_gte
	if m.OriginVMNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_gte\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_gte\":null")
		first = false
	}

	// handle non nullable field origin_vm_name_in with omitempty
	if !swag.IsZero(m.OriginVMNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_name_lt
	if m.OriginVMNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_lt\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_lt\":null")
		first = false
	}

	// handle nullable field origin_vm_name_lte
	if m.OriginVMNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_lte\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_lte\":null")
		first = false
	}

	// handle nullable field origin_vm_name_not
	if m.OriginVMNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not\":null")
		first = false
	}

	// handle nullable field origin_vm_name_not_contains
	if m.OriginVMNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_contains\":null")
		first = false
	}

	// handle nullable field origin_vm_name_not_ends_with
	if m.OriginVMNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field origin_vm_name_not_in with omitempty
	if !swag.IsZero(m.OriginVMNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_in\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field origin_vm_name_not_starts_with
	if m.OriginVMNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field origin_vm_name_starts_with
	if m.OriginVMNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginVMNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name_starts_with\":null")
		first = false
	}

	// handle nullable field replica_group
	if m.ReplicaGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group\":null")
		first = false
	}

	// handle nullable field replica_group_contains
	if m.ReplicaGroupContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_contains\":null")
		first = false
	}

	// handle nullable field replica_group_ends_with
	if m.ReplicaGroupEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_ends_with\":null")
		first = false
	}

	// handle nullable field replica_group_gt
	if m.ReplicaGroupGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_gt\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_gt\":null")
		first = false
	}

	// handle nullable field replica_group_gte
	if m.ReplicaGroupGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_gte\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_gte\":null")
		first = false
	}

	// handle non nullable field replica_group_in with omitempty
	if !swag.IsZero(m.ReplicaGroupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_group_lt
	if m.ReplicaGroupLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_lt\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_lt\":null")
		first = false
	}

	// handle nullable field replica_group_lte
	if m.ReplicaGroupLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_lte\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_lte\":null")
		first = false
	}

	// handle nullable field replica_group_not
	if m.ReplicaGroupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not\":null")
		first = false
	}

	// handle nullable field replica_group_not_contains
	if m.ReplicaGroupNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_contains\":null")
		first = false
	}

	// handle nullable field replica_group_not_ends_with
	if m.ReplicaGroupNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_ends_with\":null")
		first = false
	}

	// handle non nullable field replica_group_not_in with omitempty
	if !swag.IsZero(m.ReplicaGroupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_group_not_starts_with
	if m.ReplicaGroupNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_not_starts_with\":null")
		first = false
	}

	// handle nullable field replica_group_starts_with
	if m.ReplicaGroupStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroupStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroupStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group_starts_with\":null")
		first = false
	}

	// handle nullable field replication_group
	if m.ReplicationGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group\":null")
		first = false
	}

	// handle nullable field replication_group_contains
	if m.ReplicationGroupContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_contains\":null")
		first = false
	}

	// handle nullable field replication_group_ends_with
	if m.ReplicationGroupEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_ends_with\":null")
		first = false
	}

	// handle nullable field replication_group_gt
	if m.ReplicationGroupGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_gt\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_gt\":null")
		first = false
	}

	// handle nullable field replication_group_gte
	if m.ReplicationGroupGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_gte\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_gte\":null")
		first = false
	}

	// handle non nullable field replication_group_in with omitempty
	if !swag.IsZero(m.ReplicationGroupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_in\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replication_group_lt
	if m.ReplicationGroupLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_lt\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_lt\":null")
		first = false
	}

	// handle nullable field replication_group_lte
	if m.ReplicationGroupLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_lte\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_lte\":null")
		first = false
	}

	// handle nullable field replication_group_not
	if m.ReplicationGroupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not\":null")
		first = false
	}

	// handle nullable field replication_group_not_contains
	if m.ReplicationGroupNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_contains\":null")
		first = false
	}

	// handle nullable field replication_group_not_ends_with
	if m.ReplicationGroupNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_ends_with\":null")
		first = false
	}

	// handle non nullable field replication_group_not_in with omitempty
	if !swag.IsZero(m.ReplicationGroupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replication_group_not_starts_with
	if m.ReplicationGroupNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_not_starts_with\":null")
		first = false
	}

	// handle nullable field replication_group_starts_with
	if m.ReplicationGroupStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroupStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroupStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group_starts_with\":null")
		first = false
	}

	// handle nullable field replication_plan
	if m.ReplicationPlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":null")
		first = false
	}

	// handle nullable field replication_service
	if m.ReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":")
		bytes, err := swag.WriteJSON(m.ReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":null")
		first = false
	}

	// handle nullable field replication_target_executions_every
	if m.ReplicationTargetExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_every\":null")
		first = false
	}

	// handle nullable field replication_target_executions_none
	if m.ReplicationTargetExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_none\":null")
		first = false
	}

	// handle nullable field replication_target_executions_some
	if m.ReplicationTargetExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_some\":null")
		first = false
	}

	// handle nullable field restore_points_every
	if m.RestorePointsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_every\":")
		bytes, err := swag.WriteJSON(m.RestorePointsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RestorePointsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_every\":null")
		first = false
	}

	// handle nullable field restore_points_none
	if m.RestorePointsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_none\":")
		bytes, err := swag.WriteJSON(m.RestorePointsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RestorePointsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_none\":null")
		first = false
	}

	// handle nullable field restore_points_some
	if m.RestorePointsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_some\":")
		bytes, err := swag.WriteJSON(m.RestorePointsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RestorePointsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points_some\":null")
		first = false
	}

	// handle nullable field state
	if m.State != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":")
		bytes, err := swag.WriteJSON(m.State)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.State_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":null")
		first = false
	}

	// handle non nullable field state_in with omitempty
	if !swag.IsZero(m.StateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_in\":")
		bytes, err := swag.WriteJSON(m.StateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field state_not
	if m.StateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not\":")
		bytes, err := swag.WriteJSON(m.StateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not\":null")
		first = false
	}

	// handle non nullable field state_not_in with omitempty
	if !swag.IsZero(m.StateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not_in\":")
		bytes, err := swag.WriteJSON(m.StateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field targets_deletable
	if m.TargetsDeletable != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable\":")
		bytes, err := swag.WriteJSON(m.TargetsDeletable)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetsDeletable_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable\":null")
		first = false
	}

	// handle nullable field targets_deletable_not
	if m.TargetsDeletableNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable_not\":")
		bytes, err := swag.WriteJSON(m.TargetsDeletableNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetsDeletableNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable_not\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replica Vm where input
func (m *ReplicaVMWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverTestVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginIscsiLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePointsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePointsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePointsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaVMWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateFailoverTestVM(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverTestVM) { // not required
		return nil
	}

	if m.FailoverTestVM != nil {
		if err := m.FailoverTestVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateIscsiLun(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLun) { // not required
		return nil
	}

	if m.IscsiLun != nil {
		if err := m.IscsiLun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateOriginIscsiLun(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginIscsiLun) { // not required
		return nil
	}

	if m.OriginIscsiLun != nil {
		if err := m.OriginIscsiLun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateOriginVM(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginVM) { // not required
		return nil
	}

	if m.OriginVM != nil {
		if err := m.OriginVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateReplicationPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlan) { // not required
		return nil
	}

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateReplicationService(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationService) { // not required
		return nil
	}

	if m.ReplicationService != nil {
		if err := m.ReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateReplicationTargetExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsEvery) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsEvery != nil {
		if err := m.ReplicationTargetExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateReplicationTargetExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsNone) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsNone != nil {
		if err := m.ReplicationTargetExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateReplicationTargetExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsSome) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsSome != nil {
		if err := m.ReplicationTargetExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateRestorePointsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePointsEvery) { // not required
		return nil
	}

	if m.RestorePointsEvery != nil {
		if err := m.RestorePointsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateRestorePointsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePointsNone) { // not required
		return nil
	}

	if m.RestorePointsNone != nil {
		if err := m.RestorePointsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateRestorePointsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePointsSome) { // not required
		return nil
	}

	if m.RestorePointsSome != nil {
		if err := m.RestorePointsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNot) { // not required
		return nil
	}

	if m.StateNot != nil {
		if err := m.StateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replica Vm where input based on the context it is used
func (m *ReplicaVMWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverTestVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginIscsiLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePointsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePointsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePointsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaVMWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateFailoverTestVM(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverTestVM != nil {
		if err := m.FailoverTestVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateIscsiLun(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLun != nil {
		if err := m.IscsiLun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateOriginIscsiLun(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginIscsiLun != nil {
		if err := m.OriginIscsiLun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateOriginVM(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginVM != nil {
		if err := m.OriginVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateReplicationPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationService != nil {
		if err := m.ReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateReplicationTargetExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsEvery != nil {
		if err := m.ReplicationTargetExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateReplicationTargetExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsNone != nil {
		if err := m.ReplicationTargetExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateReplicationTargetExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsSome != nil {
		if err := m.ReplicationTargetExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateRestorePointsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePointsEvery != nil {
		if err := m.RestorePointsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateRestorePointsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePointsNone != nil {
		if err := m.RestorePointsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateRestorePointsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePointsSome != nil {
		if err := m.RestorePointsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StateNot != nil {
		if err := m.StateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicaVMWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicaVMWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicaVMWhereInput) UnmarshalBinary(b []byte) error {
	var res ReplicaVMWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
