// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IscsiConnectionWhereInput iscsi connection where input
//
// swagger:model IscsiConnectionWhereInput
type IscsiConnectionWhereInput struct {

	// a n d
	AND []*IscsiConnectionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*IscsiConnectionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*IscsiConnectionWhereInput `json:"OR,omitempty"`

	// client port
	ClientPort *int32 `json:"client_port,omitempty"`

	// client port gt
	ClientPortGt *int32 `json:"client_port_gt,omitempty"`

	// client port gte
	ClientPortGte *int32 `json:"client_port_gte,omitempty"`

	// client port in
	ClientPortIn []int32 `json:"client_port_in,omitempty"`

	// client port lt
	ClientPortLt *int32 `json:"client_port_lt,omitempty"`

	// client port lte
	ClientPortLte *int32 `json:"client_port_lte,omitempty"`

	// client port not
	ClientPortNot *int32 `json:"client_port_not,omitempty"`

	// client port not in
	ClientPortNotIn []int32 `json:"client_port_not_in,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// initiator ip
	InitiatorIP *string `json:"initiator_ip,omitempty"`

	// initiator ip contains
	InitiatorIPContains *string `json:"initiator_ip_contains,omitempty"`

	// initiator ip ends with
	InitiatorIPEndsWith *string `json:"initiator_ip_ends_with,omitempty"`

	// initiator ip gt
	InitiatorIPGt *string `json:"initiator_ip_gt,omitempty"`

	// initiator ip gte
	InitiatorIPGte *string `json:"initiator_ip_gte,omitempty"`

	// initiator ip in
	InitiatorIPIn []string `json:"initiator_ip_in,omitempty"`

	// initiator ip lt
	InitiatorIPLt *string `json:"initiator_ip_lt,omitempty"`

	// initiator ip lte
	InitiatorIPLte *string `json:"initiator_ip_lte,omitempty"`

	// initiator ip not
	InitiatorIPNot *string `json:"initiator_ip_not,omitempty"`

	// initiator ip not contains
	InitiatorIPNotContains *string `json:"initiator_ip_not_contains,omitempty"`

	// initiator ip not ends with
	InitiatorIPNotEndsWith *string `json:"initiator_ip_not_ends_with,omitempty"`

	// initiator ip not in
	InitiatorIPNotIn []string `json:"initiator_ip_not_in,omitempty"`

	// initiator ip not starts with
	InitiatorIPNotStartsWith *string `json:"initiator_ip_not_starts_with,omitempty"`

	// initiator ip starts with
	InitiatorIPStartsWith *string `json:"initiator_ip_starts_with,omitempty"`

	// iscsi target
	IscsiTarget *IscsiTargetWhereInput `json:"iscsi_target,omitempty"`

	// nvmf subsystem
	NvmfSubsystem *NvmfSubsystemWhereInput `json:"nvmf_subsystem,omitempty"`

	// tr type
	TrType *StoreTransportType `json:"tr_type,omitempty"`

	// tr type in
	TrTypeIn []StoreTransportType `json:"tr_type_in,omitempty"`

	// tr type not
	TrTypeNot *StoreTransportType `json:"tr_type_not,omitempty"`

	// tr type not in
	TrTypeNotIn []StoreTransportType `json:"tr_type_not_in,omitempty"`

	// type
	Type *StoreConnectionType `json:"type,omitempty"`

	// type in
	TypeIn []StoreConnectionType `json:"type_in,omitempty"`

	// type not
	TypeNot *StoreConnectionType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []StoreConnectionType `json:"type_not_in,omitempty"`

	MarshalOpts *IscsiConnectionWhereInputMarshalOpts `json:"-"`
}

type IscsiConnectionWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	ClientPort_Explicit_Null_When_Empty bool

	ClientPortGt_Explicit_Null_When_Empty bool

	ClientPortGte_Explicit_Null_When_Empty bool

	ClientPortIn_Explicit_Null_When_Empty bool

	ClientPortLt_Explicit_Null_When_Empty bool

	ClientPortLte_Explicit_Null_When_Empty bool

	ClientPortNot_Explicit_Null_When_Empty bool

	ClientPortNotIn_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	InitiatorIP_Explicit_Null_When_Empty bool

	InitiatorIPContains_Explicit_Null_When_Empty bool

	InitiatorIPEndsWith_Explicit_Null_When_Empty bool

	InitiatorIPGt_Explicit_Null_When_Empty bool

	InitiatorIPGte_Explicit_Null_When_Empty bool

	InitiatorIPIn_Explicit_Null_When_Empty bool

	InitiatorIPLt_Explicit_Null_When_Empty bool

	InitiatorIPLte_Explicit_Null_When_Empty bool

	InitiatorIPNot_Explicit_Null_When_Empty bool

	InitiatorIPNotContains_Explicit_Null_When_Empty bool

	InitiatorIPNotEndsWith_Explicit_Null_When_Empty bool

	InitiatorIPNotIn_Explicit_Null_When_Empty bool

	InitiatorIPNotStartsWith_Explicit_Null_When_Empty bool

	InitiatorIPStartsWith_Explicit_Null_When_Empty bool

	IscsiTarget_Explicit_Null_When_Empty bool

	NvmfSubsystem_Explicit_Null_When_Empty bool

	TrType_Explicit_Null_When_Empty bool

	TrTypeIn_Explicit_Null_When_Empty bool

	TrTypeNot_Explicit_Null_When_Empty bool

	TrTypeNotIn_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool
}

func (m IscsiConnectionWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field client_port
	if m.ClientPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port\":")
		bytes, err := swag.WriteJSON(m.ClientPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port\":null")
		first = false
	}

	// handle nullable field client_port_gt
	if m.ClientPortGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_gt\":")
		bytes, err := swag.WriteJSON(m.ClientPortGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPortGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_gt\":null")
		first = false
	}

	// handle nullable field client_port_gte
	if m.ClientPortGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_gte\":")
		bytes, err := swag.WriteJSON(m.ClientPortGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPortGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_gte\":null")
		first = false
	}

	// handle non nullable field client_port_in with omitempty
	if !swag.IsZero(m.ClientPortIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_in\":")
		bytes, err := swag.WriteJSON(m.ClientPortIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field client_port_lt
	if m.ClientPortLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_lt\":")
		bytes, err := swag.WriteJSON(m.ClientPortLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPortLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_lt\":null")
		first = false
	}

	// handle nullable field client_port_lte
	if m.ClientPortLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_lte\":")
		bytes, err := swag.WriteJSON(m.ClientPortLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPortLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_lte\":null")
		first = false
	}

	// handle nullable field client_port_not
	if m.ClientPortNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_not\":")
		bytes, err := swag.WriteJSON(m.ClientPortNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClientPortNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_not\":null")
		first = false
	}

	// handle non nullable field client_port_not_in with omitempty
	if !swag.IsZero(m.ClientPortNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"client_port_not_in\":")
		bytes, err := swag.WriteJSON(m.ClientPortNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field initiator_ip
	if m.InitiatorIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip\":")
		bytes, err := swag.WriteJSON(m.InitiatorIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip\":null")
		first = false
	}

	// handle nullable field initiator_ip_contains
	if m.InitiatorIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_contains\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_contains\":null")
		first = false
	}

	// handle nullable field initiator_ip_ends_with
	if m.InitiatorIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_ends_with\":null")
		first = false
	}

	// handle nullable field initiator_ip_gt
	if m.InitiatorIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_gt\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_gt\":null")
		first = false
	}

	// handle nullable field initiator_ip_gte
	if m.InitiatorIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_gte\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_gte\":null")
		first = false
	}

	// handle non nullable field initiator_ip_in with omitempty
	if !swag.IsZero(m.InitiatorIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_in\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field initiator_ip_lt
	if m.InitiatorIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_lt\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_lt\":null")
		first = false
	}

	// handle nullable field initiator_ip_lte
	if m.InitiatorIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_lte\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_lte\":null")
		first = false
	}

	// handle nullable field initiator_ip_not
	if m.InitiatorIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not\":null")
		first = false
	}

	// handle nullable field initiator_ip_not_contains
	if m.InitiatorIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_contains\":null")
		first = false
	}

	// handle nullable field initiator_ip_not_ends_with
	if m.InitiatorIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field initiator_ip_not_in with omitempty
	if !swag.IsZero(m.InitiatorIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field initiator_ip_not_starts_with
	if m.InitiatorIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field initiator_ip_starts_with
	if m.InitiatorIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.InitiatorIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_ip_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_target
	if m.IscsiTarget != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target\":")
		bytes, err := swag.WriteJSON(m.IscsiTarget)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTarget_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target\":null")
		first = false
	}

	// handle nullable field nvmf_subsystem
	if m.NvmfSubsystem != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystem\":")
		bytes, err := swag.WriteJSON(m.NvmfSubsystem)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfSubsystem_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystem\":null")
		first = false
	}

	// handle nullable field tr_type
	if m.TrType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type\":")
		bytes, err := swag.WriteJSON(m.TrType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TrType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type\":null")
		first = false
	}

	// handle non nullable field tr_type_in with omitempty
	if !swag.IsZero(m.TrTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type_in\":")
		bytes, err := swag.WriteJSON(m.TrTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field tr_type_not
	if m.TrTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type_not\":")
		bytes, err := swag.WriteJSON(m.TrTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TrTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type_not\":null")
		first = false
	}

	// handle non nullable field tr_type_not_in with omitempty
	if !swag.IsZero(m.TrTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tr_type_not_in\":")
		bytes, err := swag.WriteJSON(m.TrTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this iscsi connection where input
func (m *IscsiConnectionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiConnectionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateIscsiTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTarget) { // not required
		return nil
	}

	if m.IscsiTarget != nil {
		if err := m.IscsiTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_target")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateNvmfSubsystem(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystem) { // not required
		return nil
	}

	if m.NvmfSubsystem != nil {
		if err := m.NvmfSubsystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_subsystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nvmf_subsystem")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTrType(formats strfmt.Registry) error {
	if swag.IsZero(m.TrType) { // not required
		return nil
	}

	if m.TrType != nil {
		if err := m.TrType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTrTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TrTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TrTypeIn); i++ {

		if err := m.TrTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTrTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TrTypeNot) { // not required
		return nil
	}

	if m.TrTypeNot != nil {
		if err := m.TrTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTrTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TrTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TrTypeNotIn); i++ {

		if err := m.TrTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this iscsi connection where input based on the context it is used
func (m *IscsiConnectionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateIscsiTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiTarget != nil {
		if err := m.IscsiTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_target")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateNvmfSubsystem(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfSubsystem != nil {
		if err := m.NvmfSubsystem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_subsystem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nvmf_subsystem")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTrType(ctx context.Context, formats strfmt.Registry) error {

	if m.TrType != nil {
		if err := m.TrType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTrTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrTypeIn); i++ {

		if err := m.TrTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTrTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TrTypeNot != nil {
		if err := m.TrTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTrTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrTypeNotIn); i++ {

		if err := m.TrTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tr_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tr_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiConnectionWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiConnectionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiConnectionWhereInput) UnmarshalBinary(b []byte) error {
	var res IscsiConnectionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
