// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserCreationParams user creation params
//
// swagger:model UserCreationParams
type UserCreationParams struct {

	// auth config id
	AuthConfigID *string `json:"auth_config_id,omitempty"`

	// email address
	EmailAddress *string `json:"email_address,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// ldap dn
	LdapDn *string `json:"ldap_dn,omitempty"`

	// mobile phone
	MobilePhone *string `json:"mobile_phone,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	Password *string `json:"password,omitempty"`

	// role id
	// Required: true
	RoleID *string `json:"role_id"`

	// source
	Source *UserSource `json:"source,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`

	MarshalOpts *UserCreationParamsMarshalOpts `json:"-"`
}

type UserCreationParamsMarshalOpts struct {
	AuthConfigID_Explicit_Null_When_Empty bool

	EmailAddress_Explicit_Null_When_Empty bool

	Internal_Explicit_Null_When_Empty bool

	LdapDn_Explicit_Null_When_Empty bool

	MobilePhone_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Password_Explicit_Null_When_Empty bool

	RoleID_Explicit_Null_When_Empty bool

	Source_Explicit_Null_When_Empty bool

	Username_Explicit_Null_When_Empty bool
}

func (m UserCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field auth_config_id
	if m.AuthConfigID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id\":")
		bytes, err := swag.WriteJSON(m.AuthConfigID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id\":null")
		first = false
	}

	// handle nullable field email_address
	if m.EmailAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address\":")
		bytes, err := swag.WriteJSON(m.EmailAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address\":null")
		first = false
	}

	// handle nullable field internal
	if m.Internal != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":")
		bytes, err := swag.WriteJSON(m.Internal)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Internal_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":null")
		first = false
	}

	// handle nullable field ldap_dn
	if m.LdapDn != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn\":")
		bytes, err := swag.WriteJSON(m.LdapDn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDn_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn\":null")
		first = false
	}

	// handle nullable field mobile_phone
	if m.MobilePhone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone\":")
		bytes, err := swag.WriteJSON(m.MobilePhone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field password
	if m.Password != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password\":")
		bytes, err := swag.WriteJSON(m.Password)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Password_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password\":null")
		first = false
	}

	// handle nullable field role_id
	if m.RoleID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_id\":")
		bytes, err := swag.WriteJSON(m.RoleID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RoleID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_id\":null")
		first = false
	}

	// handle nullable field source
	if m.Source != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source\":")
		bytes, err := swag.WriteJSON(m.Source)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Source_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source\":null")
		first = false
	}

	// handle nullable field username
	if m.Username != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":")
		bytes, err := swag.WriteJSON(m.Username)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Username_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this user creation params
func (m *UserCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserCreationParams) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("role_id", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *UserCreationParams) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *UserCreationParams) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user creation params based on the context it is used
func (m *UserCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserCreationParams) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserCreationParams) UnmarshalBinary(b []byte) error {
	var res UserCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
