// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedReplicationNetworkInformation nested replication network information
//
// swagger:model NestedReplicationNetworkInformation
type NestedReplicationNetworkInformation struct {

	// cluster local id
	// Required: true
	ClusterLocalID *string `json:"cluster_local_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// network ids
	NetworkIds []string `json:"network_ids,omitempty"`

	// vds name
	VdsName *string `json:"vds_name,omitempty"`

	// vlan id
	VlanID *int32 `json:"vlan_id,omitempty"`

	// vlan local id
	// Required: true
	VlanLocalID *string `json:"vlan_local_id"`

	// vlan mode type
	// Required: true
	VlanModeType *VlanModeType `json:"vlan_mode_type"`

	// vlan name
	// Required: true
	VlanName *string `json:"vlan_name"`

	MarshalOpts *NestedReplicationNetworkInformationMarshalOpts `json:"-"`
}

type NestedReplicationNetworkInformationMarshalOpts struct {
	ClusterLocalID_Explicit_Null_When_Empty bool

	ClusterName_Explicit_Null_When_Empty bool

	NetworkIds_Explicit_Null_When_Empty bool

	VdsName_Explicit_Null_When_Empty bool

	VlanID_Explicit_Null_When_Empty bool

	VlanLocalID_Explicit_Null_When_Empty bool

	VlanModeType_Explicit_Null_When_Empty bool

	VlanName_Explicit_Null_When_Empty bool
}

func (m NestedReplicationNetworkInformation) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field cluster_name
	if m.ClusterName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_name\":")
		bytes, err := swag.WriteJSON(m.ClusterName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_name\":null")
		first = false
	}

	// handle non nullable field network_ids with omitempty
	if !swag.IsZero(m.NetworkIds) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_ids\":")
		bytes, err := swag.WriteJSON(m.NetworkIds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vds_name
	if m.VdsName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_name\":")
		bytes, err := swag.WriteJSON(m.VdsName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VdsName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_name\":null")
		first = false
	}

	// handle nullable field vlan_id
	if m.VlanID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":")
		bytes, err := swag.WriteJSON(m.VlanID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":null")
		first = false
	}

	// handle nullable field vlan_local_id
	if m.VlanLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":")
		bytes, err := swag.WriteJSON(m.VlanLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":null")
		first = false
	}

	// handle nullable field vlan_mode_type
	if m.VlanModeType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_mode_type\":")
		bytes, err := swag.WriteJSON(m.VlanModeType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanModeType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_mode_type\":null")
		first = false
	}

	// handle nullable field vlan_name
	if m.VlanName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_name\":")
		bytes, err := swag.WriteJSON(m.VlanName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_name\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested replication network information
func (m *NestedReplicationNetworkInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanModeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedReplicationNetworkInformation) validateClusterLocalID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_local_id", "body", m.ClusterLocalID); err != nil {
		return err
	}

	return nil
}

func (m *NestedReplicationNetworkInformation) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *NestedReplicationNetworkInformation) validateVlanLocalID(formats strfmt.Registry) error {

	if err := validate.Required("vlan_local_id", "body", m.VlanLocalID); err != nil {
		return err
	}

	return nil
}

func (m *NestedReplicationNetworkInformation) validateVlanModeType(formats strfmt.Registry) error {

	if err := validate.Required("vlan_mode_type", "body", m.VlanModeType); err != nil {
		return err
	}

	if err := validate.Required("vlan_mode_type", "body", m.VlanModeType); err != nil {
		return err
	}

	if m.VlanModeType != nil {
		if err := m.VlanModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedReplicationNetworkInformation) validateVlanName(formats strfmt.Registry) error {

	if err := validate.Required("vlan_name", "body", m.VlanName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested replication network information based on the context it is used
func (m *NestedReplicationNetworkInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlanModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedReplicationNetworkInformation) contextValidateVlanModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanModeType != nil {
		if err := m.VlanModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_mode_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedReplicationNetworkInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedReplicationNetworkInformation) UnmarshalBinary(b []byte) error {
	var res NestedReplicationNetworkInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
