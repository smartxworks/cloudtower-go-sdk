// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedMetroCheckItem nested metro check item
//
// swagger:model NestedMetroCheckItem
type NestedMetroCheckItem struct {

	// critical
	// Required: true
	Critical []string `json:"critical"`

	// info
	// Required: true
	Info []string `json:"info"`

	// key
	// Required: true
	Key *string `json:"key"`

	// labels
	// Required: true
	Labels interface{} `json:"labels"`

	// notice
	// Required: true
	Notice []string `json:"notice"`

	// status
	// Required: true
	Status *MetroCheckStatusEnum `json:"status"`

	MarshalOpts *NestedMetroCheckItemMarshalOpts `json:"-"`
}

type NestedMetroCheckItemMarshalOpts struct {
	Critical_Explicit_Null_When_Empty bool

	Info_Explicit_Null_When_Empty bool

	Key_Explicit_Null_When_Empty bool

	Notice_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool
}

func (m NestedMetroCheckItem) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field critical without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"critical\":")
		bytes, err := swag.WriteJSON(m.Critical)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field info without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"info\":")
		bytes, err := swag.WriteJSON(m.Info)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field key
	if m.Key != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":")
		bytes, err := swag.WriteJSON(m.Key)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Key_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":null")
		first = false
	}

	// handle non nullable field labels with omitempty
	if swag.IsZero(m.Labels) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field notice without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"notice\":")
		bytes, err := swag.WriteJSON(m.Notice)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested metro check item
func (m *NestedMetroCheckItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMetroCheckItem) validateCritical(formats strfmt.Registry) error {

	if err := validate.Required("critical", "body", m.Critical); err != nil {
		return err
	}

	return nil
}

func (m *NestedMetroCheckItem) validateInfo(formats strfmt.Registry) error {

	if err := validate.Required("info", "body", m.Info); err != nil {
		return err
	}

	return nil
}

func (m *NestedMetroCheckItem) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *NestedMetroCheckItem) validateLabels(formats strfmt.Registry) error {

	if m.Labels == nil {
		return errors.Required("labels", "body", nil)
	}

	return nil
}

func (m *NestedMetroCheckItem) validateNotice(formats strfmt.Registry) error {

	if err := validate.Required("notice", "body", m.Notice); err != nil {
		return err
	}

	return nil
}

func (m *NestedMetroCheckItem) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested metro check item based on the context it is used
func (m *NestedMetroCheckItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMetroCheckItem) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedMetroCheckItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedMetroCheckItem) UnmarshalBinary(b []byte) error {
	var res NestedMetroCheckItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
