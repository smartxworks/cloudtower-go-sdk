// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EcpLicenseOrderByInput ecp license order by input
//
// swagger:model EcpLicenseOrderByInput
type EcpLicenseOrderByInput string

func NewEcpLicenseOrderByInput(value EcpLicenseOrderByInput) *EcpLicenseOrderByInput {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EcpLicenseOrderByInput.
func (m EcpLicenseOrderByInput) Pointer() *EcpLicenseOrderByInput {
	return &m
}

const (

	// EcpLicenseOrderByInputClusterLocalIDASC captures enum value "cluster_local_id_ASC"
	EcpLicenseOrderByInputClusterLocalIDASC EcpLicenseOrderByInput = "cluster_local_id_ASC"

	// EcpLicenseOrderByInputClusterLocalIDDESC captures enum value "cluster_local_id_DESC"
	EcpLicenseOrderByInputClusterLocalIDDESC EcpLicenseOrderByInput = "cluster_local_id_DESC"

	// EcpLicenseOrderByInputEcpEditionASC captures enum value "ecp_edition_ASC"
	EcpLicenseOrderByInputEcpEditionASC EcpLicenseOrderByInput = "ecp_edition_ASC"

	// EcpLicenseOrderByInputEcpEditionDESC captures enum value "ecp_edition_DESC"
	EcpLicenseOrderByInputEcpEditionDESC EcpLicenseOrderByInput = "ecp_edition_DESC"

	// EcpLicenseOrderByInputExpireDateASC captures enum value "expire_date_ASC"
	EcpLicenseOrderByInputExpireDateASC EcpLicenseOrderByInput = "expire_date_ASC"

	// EcpLicenseOrderByInputExpireDateDESC captures enum value "expire_date_DESC"
	EcpLicenseOrderByInputExpireDateDESC EcpLicenseOrderByInput = "expire_date_DESC"

	// EcpLicenseOrderByInputHasMetroxASC captures enum value "has_metrox_ASC"
	EcpLicenseOrderByInputHasMetroxASC EcpLicenseOrderByInput = "has_metrox_ASC"

	// EcpLicenseOrderByInputHasMetroxDESC captures enum value "has_metrox_DESC"
	EcpLicenseOrderByInputHasMetroxDESC EcpLicenseOrderByInput = "has_metrox_DESC"

	// EcpLicenseOrderByInputHasRemoteBackupASC captures enum value "has_remote_backup_ASC"
	EcpLicenseOrderByInputHasRemoteBackupASC EcpLicenseOrderByInput = "has_remote_backup_ASC"

	// EcpLicenseOrderByInputHasRemoteBackupDESC captures enum value "has_remote_backup_DESC"
	EcpLicenseOrderByInputHasRemoteBackupDESC EcpLicenseOrderByInput = "has_remote_backup_DESC"

	// EcpLicenseOrderByInputIDASC captures enum value "id_ASC"
	EcpLicenseOrderByInputIDASC EcpLicenseOrderByInput = "id_ASC"

	// EcpLicenseOrderByInputIDDESC captures enum value "id_DESC"
	EcpLicenseOrderByInputIDDESC EcpLicenseOrderByInput = "id_DESC"

	// EcpLicenseOrderByInputLicenseTypeASC captures enum value "license_type_ASC"
	EcpLicenseOrderByInputLicenseTypeASC EcpLicenseOrderByInput = "license_type_ASC"

	// EcpLicenseOrderByInputLicenseTypeDESC captures enum value "license_type_DESC"
	EcpLicenseOrderByInputLicenseTypeDESC EcpLicenseOrderByInput = "license_type_DESC"

	// EcpLicenseOrderByInputMaxCoreNumASC captures enum value "max_core_num_ASC"
	EcpLicenseOrderByInputMaxCoreNumASC EcpLicenseOrderByInput = "max_core_num_ASC"

	// EcpLicenseOrderByInputMaxCoreNumDESC captures enum value "max_core_num_DESC"
	EcpLicenseOrderByInputMaxCoreNumDESC EcpLicenseOrderByInput = "max_core_num_DESC"

	// EcpLicenseOrderByInputMaxPhysicalDataCapacityASC captures enum value "max_physical_data_capacity_ASC"
	EcpLicenseOrderByInputMaxPhysicalDataCapacityASC EcpLicenseOrderByInput = "max_physical_data_capacity_ASC"

	// EcpLicenseOrderByInputMaxPhysicalDataCapacityDESC captures enum value "max_physical_data_capacity_DESC"
	EcpLicenseOrderByInputMaxPhysicalDataCapacityDESC EcpLicenseOrderByInput = "max_physical_data_capacity_DESC"

	// EcpLicenseOrderByInputOriginalCodeASC captures enum value "original_code_ASC"
	EcpLicenseOrderByInputOriginalCodeASC EcpLicenseOrderByInput = "original_code_ASC"

	// EcpLicenseOrderByInputOriginalCodeDESC captures enum value "original_code_DESC"
	EcpLicenseOrderByInputOriginalCodeDESC EcpLicenseOrderByInput = "original_code_DESC"

	// EcpLicenseOrderByInputProductNameASC captures enum value "product_name_ASC"
	EcpLicenseOrderByInputProductNameASC EcpLicenseOrderByInput = "product_name_ASC"

	// EcpLicenseOrderByInputProductNameDESC captures enum value "product_name_DESC"
	EcpLicenseOrderByInputProductNameDESC EcpLicenseOrderByInput = "product_name_DESC"

	// EcpLicenseOrderByInputSerialASC captures enum value "serial_ASC"
	EcpLicenseOrderByInputSerialASC EcpLicenseOrderByInput = "serial_ASC"

	// EcpLicenseOrderByInputSerialDESC captures enum value "serial_DESC"
	EcpLicenseOrderByInputSerialDESC EcpLicenseOrderByInput = "serial_DESC"

	// EcpLicenseOrderByInputSignDateASC captures enum value "sign_date_ASC"
	EcpLicenseOrderByInputSignDateASC EcpLicenseOrderByInput = "sign_date_ASC"

	// EcpLicenseOrderByInputSignDateDESC captures enum value "sign_date_DESC"
	EcpLicenseOrderByInputSignDateDESC EcpLicenseOrderByInput = "sign_date_DESC"

	// EcpLicenseOrderByInputSubscriptionExpireDateASC captures enum value "subscription_expire_date_ASC"
	EcpLicenseOrderByInputSubscriptionExpireDateASC EcpLicenseOrderByInput = "subscription_expire_date_ASC"

	// EcpLicenseOrderByInputSubscriptionExpireDateDESC captures enum value "subscription_expire_date_DESC"
	EcpLicenseOrderByInputSubscriptionExpireDateDESC EcpLicenseOrderByInput = "subscription_expire_date_DESC"

	// EcpLicenseOrderByInputSubscriptionStartDateASC captures enum value "subscription_start_date_ASC"
	EcpLicenseOrderByInputSubscriptionStartDateASC EcpLicenseOrderByInput = "subscription_start_date_ASC"

	// EcpLicenseOrderByInputSubscriptionStartDateDESC captures enum value "subscription_start_date_DESC"
	EcpLicenseOrderByInputSubscriptionStartDateDESC EcpLicenseOrderByInput = "subscription_start_date_DESC"

	// EcpLicenseOrderByInputVendorASC captures enum value "vendor_ASC"
	EcpLicenseOrderByInputVendorASC EcpLicenseOrderByInput = "vendor_ASC"

	// EcpLicenseOrderByInputVendorDESC captures enum value "vendor_DESC"
	EcpLicenseOrderByInputVendorDESC EcpLicenseOrderByInput = "vendor_DESC"

	// EcpLicenseOrderByInputVersionASC captures enum value "version_ASC"
	EcpLicenseOrderByInputVersionASC EcpLicenseOrderByInput = "version_ASC"

	// EcpLicenseOrderByInputVersionDESC captures enum value "version_DESC"
	EcpLicenseOrderByInputVersionDESC EcpLicenseOrderByInput = "version_DESC"
)

// for schema
var ecpLicenseOrderByInputEnum []interface{}

func init() {
	var res []EcpLicenseOrderByInput
	if err := json.Unmarshal([]byte(`["cluster_local_id_ASC","cluster_local_id_DESC","ecp_edition_ASC","ecp_edition_DESC","expire_date_ASC","expire_date_DESC","has_metrox_ASC","has_metrox_DESC","has_remote_backup_ASC","has_remote_backup_DESC","id_ASC","id_DESC","license_type_ASC","license_type_DESC","max_core_num_ASC","max_core_num_DESC","max_physical_data_capacity_ASC","max_physical_data_capacity_DESC","original_code_ASC","original_code_DESC","product_name_ASC","product_name_DESC","serial_ASC","serial_DESC","sign_date_ASC","sign_date_DESC","subscription_expire_date_ASC","subscription_expire_date_DESC","subscription_start_date_ASC","subscription_start_date_DESC","vendor_ASC","vendor_DESC","version_ASC","version_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ecpLicenseOrderByInputEnum = append(ecpLicenseOrderByInputEnum, v)
	}
}

func (m EcpLicenseOrderByInput) validateEcpLicenseOrderByInputEnum(path, location string, value EcpLicenseOrderByInput) error {
	if err := validate.EnumCase(path, location, value, ecpLicenseOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ecp license order by input
func (m EcpLicenseOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEcpLicenseOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ecp license order by input based on context it is used
func (m EcpLicenseOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
