// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupPlanPhase backup plan phase
//
// swagger:model BackupPlanPhase
type BackupPlanPhase string

func NewBackupPlanPhase(value BackupPlanPhase) *BackupPlanPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupPlanPhase.
func (m BackupPlanPhase) Pointer() *BackupPlanPhase {
	return &m
}

const (

	// BackupPlanPhaseINVALID captures enum value "INVALID"
	BackupPlanPhaseINVALID BackupPlanPhase = "INVALID"

	// BackupPlanPhasePAUSED captures enum value "PAUSED"
	BackupPlanPhasePAUSED BackupPlanPhase = "PAUSED"

	// BackupPlanPhaseSCHEDULING captures enum value "SCHEDULING"
	BackupPlanPhaseSCHEDULING BackupPlanPhase = "SCHEDULING"

	// BackupPlanPhaseSTOPPED captures enum value "STOPPED"
	BackupPlanPhaseSTOPPED BackupPlanPhase = "STOPPED"

	// BackupPlanPhaseVALIDATING captures enum value "VALIDATING"
	BackupPlanPhaseVALIDATING BackupPlanPhase = "VALIDATING"

	// BackupPlanPhaseWAITINGSCHEDULE captures enum value "WAITING_SCHEDULE"
	BackupPlanPhaseWAITINGSCHEDULE BackupPlanPhase = "WAITING_SCHEDULE"
)

// for schema
var backupPlanPhaseEnum []interface{}

func init() {
	var res []BackupPlanPhase
	if err := json.Unmarshal([]byte(`["INVALID","PAUSED","SCHEDULING","STOPPED","VALIDATING","WAITING_SCHEDULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPlanPhaseEnum = append(backupPlanPhaseEnum, v)
	}
}

func (m BackupPlanPhase) validateBackupPlanPhaseEnum(path, location string, value BackupPlanPhase) error {
	if err := validate.EnumCase(path, location, value, backupPlanPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup plan phase
func (m BackupPlanPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupPlanPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup plan phase based on context it is used
func (m BackupPlanPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
