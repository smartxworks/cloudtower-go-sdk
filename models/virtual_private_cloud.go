// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloud virtual private cloud
//
// swagger:model VirtualPrivateCloud
type VirtualPrivateCloud struct {

	// associate external subnet num
	AssociateExternalSubnetNum *int32 `json:"associate_external_subnet_num,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// isolation policies
	IsolationPolicies []*NestedVirtualPrivateCloudIsolationPolicy `json:"isolation_policies,omitempty"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// mtu
	Mtu *int32 `json:"mtu,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// route tables
	RouteTables []*NestedVirtualPrivateCloudRouteTable `json:"route_tables,omitempty"`

	// security groups
	SecurityGroups []*NestedVirtualPrivateCloudSecurityGroup `json:"security_groups,omitempty"`

	// security policies
	SecurityPolicies []*NestedVirtualPrivateCloudSecurityPolicy `json:"security_policies,omitempty"`

	// subnets
	Subnets []*NestedVirtualPrivateCloudSubnet `json:"subnets,omitempty"`

	// vpc service
	// Required: true
	VpcService *NestedVirtualPrivateCloudService `json:"vpc_service"`

	MarshalOpts *VirtualPrivateCloudMarshalOpts `json:"-"`
}

type VirtualPrivateCloudMarshalOpts struct {
	AssociateExternalSubnetNum_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IsolationPolicies_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	Mtu_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	RouteTables_Explicit_Null_When_Empty bool

	SecurityGroups_Explicit_Null_When_Empty bool

	SecurityPolicies_Explicit_Null_When_Empty bool

	Subnets_Explicit_Null_When_Empty bool

	VpcService_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloud) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field associate_external_subnet_num
	if m.AssociateExternalSubnetNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle non nullable field isolation_policies with omitempty
	if swag.IsZero(m.IsolationPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies\":")
		bytes, err := swag.WriteJSON(m.IsolationPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field mtu
	if m.Mtu != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":")
		bytes, err := swag.WriteJSON(m.Mtu)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mtu_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field route_tables with omitempty
	if swag.IsZero(m.RouteTables) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables\":")
		bytes, err := swag.WriteJSON(m.RouteTables)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field security_groups with omitempty
	if swag.IsZero(m.SecurityGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups\":")
		bytes, err := swag.WriteJSON(m.SecurityGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field security_policies with omitempty
	if swag.IsZero(m.SecurityPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies\":")
		bytes, err := swag.WriteJSON(m.SecurityPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field subnets with omitempty
	if swag.IsZero(m.Subnets) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets\":")
		bytes, err := swag.WriteJSON(m.Subnets)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vpc_service
	if m.VpcService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":")
		bytes, err := swag.WriteJSON(m.VpcService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud
func (m *VirtualPrivateCloud) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloud) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloud) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloud) validateIsolationPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.IsolationPolicies); i++ {
		if swag.IsZero(m.IsolationPolicies[i]) { // not required
			continue
		}

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloud) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloud) validateRouteTables(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteTables) { // not required
		return nil
	}

	for i := 0; i < len(m.RouteTables); i++ {
		if swag.IsZero(m.RouteTables[i]) { // not required
			continue
		}

		if m.RouteTables[i] != nil {
			if err := m.RouteTables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("route_tables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("route_tables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) validateSecurityGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) validateSecurityPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityPolicies); i++ {
		if swag.IsZero(m.SecurityPolicies[i]) { // not required
			continue
		}

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) validateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) validateVpcService(formats strfmt.Registry) error {

	if err := validate.Required("vpc_service", "body", m.VpcService); err != nil {
		return err
	}

	if m.VpcService != nil {
		if err := m.VpcService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud based on the context it is used
func (m *VirtualPrivateCloud) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteTables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloud) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateIsolationPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IsolationPolicies); i++ {

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateRouteTables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RouteTables); i++ {

		if m.RouteTables[i] != nil {
			if err := m.RouteTables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("route_tables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("route_tables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateSecurityGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityGroups); i++ {

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateSecurityPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityPolicies); i++ {

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subnets); i++ {

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloud) contextValidateVpcService(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcService != nil {
		if err := m.VpcService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloud) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloud) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloud
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
