// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Label label
//
// swagger:model Label
type Label struct {

	// cluster num
	ClusterNum *int32 `json:"cluster_num,omitempty"`

	// clusters
	Clusters []*NestedCluster `json:"clusters,omitempty"`

	// consistency group num
	ConsistencyGroupNum *int32 `json:"consistency_group_num,omitempty"`

	// consistency group snapshot num
	ConsistencyGroupSnapshotNum *int32 `json:"consistency_group_snapshot_num,omitempty"`

	// consistency group snapshots
	ConsistencyGroupSnapshots []*NestedConsistencyGroupSnapshot `json:"consistency_group_snapshots,omitempty"`

	// consistency groups
	ConsistencyGroups []*NestedConsistencyGroup `json:"consistency_groups,omitempty"`

	// content library image num
	ContentLibraryImageNum *int32 `json:"content_library_image_num,omitempty"`

	// content library images
	ContentLibraryImages []*NestedContentLibraryImage `json:"content_library_images,omitempty"`

	// content library vm template num
	ContentLibraryVMTemplateNum *int32 `json:"content_library_vm_template_num,omitempty"`

	// content library vm templates
	ContentLibraryVMTemplates []*NestedContentLibraryVMTemplate `json:"content_library_vm_templates,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// datacenter num
	DatacenterNum *int32 `json:"datacenter_num,omitempty"`

	// datacenters
	Datacenters []*NestedDatacenter `json:"datacenters,omitempty"`

	// disk num
	DiskNum *int32 `json:"disk_num,omitempty"`

	// disks
	Disks []*NestedDisk `json:"disks,omitempty"`

	// elf image num
	ElfImageNum *int32 `json:"elf_image_num,omitempty"`

	// elf images
	ElfImages []*NestedElfImage `json:"elf_images,omitempty"`

	// gpu device num
	GpuDeviceNum *int32 `json:"gpu_device_num,omitempty"`

	// gpu devices
	GpuDevices []*NestedGpuDevice `json:"gpu_devices,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// hosts
	Hosts []*NestedHost `json:"hosts,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// iscsi lun num
	IscsiLunNum *int32 `json:"iscsi_lun_num,omitempty"`

	// iscsi lun snapshot num
	IscsiLunSnapshotNum *int32 `json:"iscsi_lun_snapshot_num,omitempty"`

	// iscsi lun snapshots
	IscsiLunSnapshots []*NestedIscsiLunSnapshot `json:"iscsi_lun_snapshots,omitempty"`

	// iscsi luns
	IscsiLuns []*NestedIscsiLun `json:"iscsi_luns,omitempty"`

	// iscsi target num
	IscsiTargetNum *int32 `json:"iscsi_target_num,omitempty"`

	// iscsi targets
	IscsiTargets []*NestedIscsiTarget `json:"iscsi_targets,omitempty"`

	// isolation policies
	IsolationPolicies []*NestedIsolationPolicy `json:"isolation_policies,omitempty"`

	// isolation policy num
	IsolationPolicyNum *int32 `json:"isolation_policy_num,omitempty"`

	// key
	// Required: true
	Key *string `json:"key"`

	// namespace group num
	NamespaceGroupNum *int32 `json:"namespace_group_num,omitempty"`

	// namespace groups
	NamespaceGroups []*NestedNamespaceGroup `json:"namespace_groups,omitempty"`

	// nfs export num
	NfsExportNum *int32 `json:"nfs_export_num,omitempty"`

	// nfs exports
	NfsExports []*NestedNfsExport `json:"nfs_exports,omitempty"`

	// nfs inode num
	NfsInodeNum *int32 `json:"nfs_inode_num,omitempty"`

	// nfs inodes
	NfsInodes []*NestedNfsInode `json:"nfs_inodes,omitempty"`

	// nic num
	NicNum *int32 `json:"nic_num,omitempty"`

	// nics
	Nics []*NestedNic `json:"nics,omitempty"`

	// nvmf namespace num
	NvmfNamespaceNum *int32 `json:"nvmf_namespace_num,omitempty"`

	// nvmf namespace snapshot num
	NvmfNamespaceSnapshotNum *int32 `json:"nvmf_namespace_snapshot_num,omitempty"`

	// nvmf namespace snapshots
	NvmfNamespaceSnapshots []*NestedNvmfNamespaceSnapshot `json:"nvmf_namespace_snapshots,omitempty"`

	// nvmf namespaces
	NvmfNamespaces []*NestedNvmfNamespace `json:"nvmf_namespaces,omitempty"`

	// nvmf subsystem num
	NvmfSubsystemNum *int32 `json:"nvmf_subsystem_num,omitempty"`

	// nvmf subsystems
	NvmfSubsystems []*NestedNvmfSubsystem `json:"nvmf_subsystems,omitempty"`

	// security policies
	SecurityPolicies []*NestedSecurityPolicy `json:"security_policies,omitempty"`

	// security policy num
	SecurityPolicyNum *int32 `json:"security_policy_num,omitempty"`

	// system vlan num
	SystemVlanNum *int32 `json:"system_vlan_num,omitempty"`

	// total num
	TotalNum *int32 `json:"total_num,omitempty"`

	// value
	Value *string `json:"value,omitempty"`

	// vds num
	VdsNum *int32 `json:"vds_num,omitempty"`

	// vdses
	Vdses []*NestedVds `json:"vdses,omitempty"`

	// vlans
	Vlans []*NestedVlan `json:"vlans,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm snapshot num
	VMSnapshotNum *int32 `json:"vm_snapshot_num,omitempty"`

	// vm snapshots
	VMSnapshots []*NestedVMSnapshot `json:"vm_snapshots,omitempty"`

	// vm template num
	VMTemplateNum *int32 `json:"vm_template_num,omitempty"`

	// vm templates
	VMTemplates []*NestedVMTemplate `json:"vm_templates,omitempty"`

	// vm vlan num
	VMVlanNum *int32 `json:"vm_vlan_num,omitempty"`

	// vm volume num
	VMVolumeNum *int32 `json:"vm_volume_num,omitempty"`

	// vm volume snapshot num
	VMVolumeSnapshotNum *int32 `json:"vm_volume_snapshot_num,omitempty"`

	// vm volume snapshots
	VMVolumeSnapshots []*NestedVMVolumeSnapshot `json:"vm_volume_snapshots,omitempty"`

	// vm volumes
	VMVolumes []*NestedVMVolume `json:"vm_volumes,omitempty"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	MarshalOpts *LabelMarshalOpts `json:"-"`
}

type LabelMarshalOpts struct {
	ClusterNum_Explicit_Null_When_Empty bool

	Clusters_Explicit_Null_When_Empty bool

	ConsistencyGroupNum_Explicit_Null_When_Empty bool

	ConsistencyGroupSnapshotNum_Explicit_Null_When_Empty bool

	ConsistencyGroupSnapshots_Explicit_Null_When_Empty bool

	ConsistencyGroups_Explicit_Null_When_Empty bool

	ContentLibraryImageNum_Explicit_Null_When_Empty bool

	ContentLibraryImages_Explicit_Null_When_Empty bool

	ContentLibraryVMTemplateNum_Explicit_Null_When_Empty bool

	ContentLibraryVMTemplates_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	DatacenterNum_Explicit_Null_When_Empty bool

	Datacenters_Explicit_Null_When_Empty bool

	DiskNum_Explicit_Null_When_Empty bool

	Disks_Explicit_Null_When_Empty bool

	ElfImageNum_Explicit_Null_When_Empty bool

	ElfImages_Explicit_Null_When_Empty bool

	GpuDeviceNum_Explicit_Null_When_Empty bool

	GpuDevices_Explicit_Null_When_Empty bool

	HostNum_Explicit_Null_When_Empty bool

	Hosts_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IscsiLunNum_Explicit_Null_When_Empty bool

	IscsiLunSnapshotNum_Explicit_Null_When_Empty bool

	IscsiLunSnapshots_Explicit_Null_When_Empty bool

	IscsiLuns_Explicit_Null_When_Empty bool

	IscsiTargetNum_Explicit_Null_When_Empty bool

	IscsiTargets_Explicit_Null_When_Empty bool

	IsolationPolicies_Explicit_Null_When_Empty bool

	IsolationPolicyNum_Explicit_Null_When_Empty bool

	Key_Explicit_Null_When_Empty bool

	NamespaceGroupNum_Explicit_Null_When_Empty bool

	NamespaceGroups_Explicit_Null_When_Empty bool

	NfsExportNum_Explicit_Null_When_Empty bool

	NfsExports_Explicit_Null_When_Empty bool

	NfsInodeNum_Explicit_Null_When_Empty bool

	NfsInodes_Explicit_Null_When_Empty bool

	NicNum_Explicit_Null_When_Empty bool

	Nics_Explicit_Null_When_Empty bool

	NvmfNamespaceNum_Explicit_Null_When_Empty bool

	NvmfNamespaceSnapshotNum_Explicit_Null_When_Empty bool

	NvmfNamespaceSnapshots_Explicit_Null_When_Empty bool

	NvmfNamespaces_Explicit_Null_When_Empty bool

	NvmfSubsystemNum_Explicit_Null_When_Empty bool

	NvmfSubsystems_Explicit_Null_When_Empty bool

	SecurityPolicies_Explicit_Null_When_Empty bool

	SecurityPolicyNum_Explicit_Null_When_Empty bool

	SystemVlanNum_Explicit_Null_When_Empty bool

	TotalNum_Explicit_Null_When_Empty bool

	Value_Explicit_Null_When_Empty bool

	VdsNum_Explicit_Null_When_Empty bool

	Vdses_Explicit_Null_When_Empty bool

	Vlans_Explicit_Null_When_Empty bool

	VMNum_Explicit_Null_When_Empty bool

	VMSnapshotNum_Explicit_Null_When_Empty bool

	VMSnapshots_Explicit_Null_When_Empty bool

	VMTemplateNum_Explicit_Null_When_Empty bool

	VMTemplates_Explicit_Null_When_Empty bool

	VMVlanNum_Explicit_Null_When_Empty bool

	VMVolumeNum_Explicit_Null_When_Empty bool

	VMVolumeSnapshotNum_Explicit_Null_When_Empty bool

	VMVolumeSnapshots_Explicit_Null_When_Empty bool

	VMVolumes_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m Label) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_num
	if m.ClusterNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num\":")
		bytes, err := swag.WriteJSON(m.ClusterNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num\":null")
		first = false
	}

	// handle non nullable field clusters with omitempty
	if swag.IsZero(m.Clusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field consistency_group_num
	if m.ConsistencyGroupNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_num\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroupNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroupNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_num\":null")
		first = false
	}

	// handle nullable field consistency_group_snapshot_num
	if m.ConsistencyGroupSnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_snapshot_num\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroupSnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroupSnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_snapshot_num\":null")
		first = false
	}

	// handle non nullable field consistency_group_snapshots with omitempty
	if swag.IsZero(m.ConsistencyGroupSnapshots) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_snapshots\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroupSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field consistency_groups with omitempty
	if swag.IsZero(m.ConsistencyGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_groups\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field content_library_image_num
	if m.ContentLibraryImageNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_image_num\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryImageNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryImageNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_image_num\":null")
		first = false
	}

	// handle non nullable field content_library_images with omitempty
	if swag.IsZero(m.ContentLibraryImages) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_images\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field content_library_vm_template_num
	if m.ContentLibraryVMTemplateNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_vm_template_num\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryVMTemplateNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryVMTemplateNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_vm_template_num\":null")
		first = false
	}

	// handle non nullable field content_library_vm_templates with omitempty
	if swag.IsZero(m.ContentLibraryVMTemplates) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_vm_templates\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryVMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field datacenter_num
	if m.DatacenterNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenter_num\":")
		bytes, err := swag.WriteJSON(m.DatacenterNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DatacenterNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenter_num\":null")
		first = false
	}

	// handle non nullable field datacenters with omitempty
	if swag.IsZero(m.Datacenters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":")
		bytes, err := swag.WriteJSON(m.Datacenters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field disk_num
	if m.DiskNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_num\":")
		bytes, err := swag.WriteJSON(m.DiskNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_num\":null")
		first = false
	}

	// handle non nullable field disks with omitempty
	if swag.IsZero(m.Disks) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":")
		bytes, err := swag.WriteJSON(m.Disks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field elf_image_num
	if m.ElfImageNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image_num\":")
		bytes, err := swag.WriteJSON(m.ElfImageNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfImageNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image_num\":null")
		first = false
	}

	// handle non nullable field elf_images with omitempty
	if swag.IsZero(m.ElfImages) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_images\":")
		bytes, err := swag.WriteJSON(m.ElfImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gpu_device_num
	if m.GpuDeviceNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gpu_device_num\":")
		bytes, err := swag.WriteJSON(m.GpuDeviceNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GpuDeviceNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gpu_device_num\":null")
		first = false
	}

	// handle non nullable field gpu_devices with omitempty
	if swag.IsZero(m.GpuDevices) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gpu_devices\":")
		bytes, err := swag.WriteJSON(m.GpuDevices)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field host_num
	if m.HostNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":")
		bytes, err := swag.WriteJSON(m.HostNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":null")
		first = false
	}

	// handle non nullable field hosts with omitempty
	if swag.IsZero(m.Hosts) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":")
		bytes, err := swag.WriteJSON(m.Hosts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field iscsi_lun_num
	if m.IscsiLunNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_num\":")
		bytes, err := swag.WriteJSON(m.IscsiLunNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_num\":null")
		first = false
	}

	// handle nullable field iscsi_lun_snapshot_num
	if m.IscsiLunSnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_snapshot_num\":")
		bytes, err := swag.WriteJSON(m.IscsiLunSnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunSnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_snapshot_num\":null")
		first = false
	}

	// handle non nullable field iscsi_lun_snapshots with omitempty
	if swag.IsZero(m.IscsiLunSnapshots) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_snapshots\":")
		bytes, err := swag.WriteJSON(m.IscsiLunSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field iscsi_luns with omitempty
	if swag.IsZero(m.IscsiLuns) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns\":")
		bytes, err := swag.WriteJSON(m.IscsiLuns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_target_num
	if m.IscsiTargetNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_num\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_num\":null")
		first = false
	}

	// handle non nullable field iscsi_targets with omitempty
	if swag.IsZero(m.IscsiTargets) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_targets\":")
		bytes, err := swag.WriteJSON(m.IscsiTargets)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field isolation_policies with omitempty
	if swag.IsZero(m.IsolationPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies\":")
		bytes, err := swag.WriteJSON(m.IsolationPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field isolation_policy_num
	if m.IsolationPolicyNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policy_num\":")
		bytes, err := swag.WriteJSON(m.IsolationPolicyNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsolationPolicyNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policy_num\":null")
		first = false
	}

	// handle nullable field key
	if m.Key != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":")
		bytes, err := swag.WriteJSON(m.Key)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Key_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":null")
		first = false
	}

	// handle nullable field namespace_group_num
	if m.NamespaceGroupNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_group_num\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroupNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroupNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_group_num\":null")
		first = false
	}

	// handle non nullable field namespace_groups with omitempty
	if swag.IsZero(m.NamespaceGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_export_num
	if m.NfsExportNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_export_num\":")
		bytes, err := swag.WriteJSON(m.NfsExportNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsExportNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_export_num\":null")
		first = false
	}

	// handle non nullable field nfs_exports with omitempty
	if swag.IsZero(m.NfsExports) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_exports\":")
		bytes, err := swag.WriteJSON(m.NfsExports)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_inode_num
	if m.NfsInodeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_inode_num\":")
		bytes, err := swag.WriteJSON(m.NfsInodeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsInodeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_inode_num\":null")
		first = false
	}

	// handle non nullable field nfs_inodes with omitempty
	if swag.IsZero(m.NfsInodes) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_inodes\":")
		bytes, err := swag.WriteJSON(m.NfsInodes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nic_num
	if m.NicNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_num\":")
		bytes, err := swag.WriteJSON(m.NicNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_num\":null")
		first = false
	}

	// handle non nullable field nics with omitempty
	if swag.IsZero(m.Nics) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":")
		bytes, err := swag.WriteJSON(m.Nics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nvmf_namespace_num
	if m.NvmfNamespaceNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_num\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaceNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaceNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_num\":null")
		first = false
	}

	// handle nullable field nvmf_namespace_snapshot_num
	if m.NvmfNamespaceSnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_snapshot_num\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaceSnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaceSnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_snapshot_num\":null")
		first = false
	}

	// handle non nullable field nvmf_namespace_snapshots with omitempty
	if swag.IsZero(m.NvmfNamespaceSnapshots) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_snapshots\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaceSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field nvmf_namespaces with omitempty
	if swag.IsZero(m.NvmfNamespaces) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespaces\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaces)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nvmf_subsystem_num
	if m.NvmfSubsystemNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystem_num\":")
		bytes, err := swag.WriteJSON(m.NvmfSubsystemNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfSubsystemNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystem_num\":null")
		first = false
	}

	// handle non nullable field nvmf_subsystems with omitempty
	if swag.IsZero(m.NvmfSubsystems) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystems\":")
		bytes, err := swag.WriteJSON(m.NvmfSubsystems)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field security_policies with omitempty
	if swag.IsZero(m.SecurityPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies\":")
		bytes, err := swag.WriteJSON(m.SecurityPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field security_policy_num
	if m.SecurityPolicyNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policy_num\":")
		bytes, err := swag.WriteJSON(m.SecurityPolicyNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityPolicyNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policy_num\":null")
		first = false
	}

	// handle nullable field system_vlan_num
	if m.SystemVlanNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_vlan_num\":")
		bytes, err := swag.WriteJSON(m.SystemVlanNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemVlanNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_vlan_num\":null")
		first = false
	}

	// handle nullable field total_num
	if m.TotalNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_num\":")
		bytes, err := swag.WriteJSON(m.TotalNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_num\":null")
		first = false
	}

	// handle nullable field value
	if m.Value != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":")
		bytes, err := swag.WriteJSON(m.Value)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Value_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":null")
		first = false
	}

	// handle nullable field vds_num
	if m.VdsNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_num\":")
		bytes, err := swag.WriteJSON(m.VdsNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VdsNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_num\":null")
		first = false
	}

	// handle non nullable field vdses with omitempty
	if swag.IsZero(m.Vdses) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":")
		bytes, err := swag.WriteJSON(m.Vdses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field vlans with omitempty
	if swag.IsZero(m.Vlans) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlans\":")
		bytes, err := swag.WriteJSON(m.Vlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_num
	if m.VMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":")
		bytes, err := swag.WriteJSON(m.VMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":null")
		first = false
	}

	// handle nullable field vm_snapshot_num
	if m.VMSnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_snapshot_num\":")
		bytes, err := swag.WriteJSON(m.VMSnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMSnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_snapshot_num\":null")
		first = false
	}

	// handle non nullable field vm_snapshots with omitempty
	if swag.IsZero(m.VMSnapshots) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_snapshots\":")
		bytes, err := swag.WriteJSON(m.VMSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_template_num
	if m.VMTemplateNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_template_num\":")
		bytes, err := swag.WriteJSON(m.VMTemplateNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMTemplateNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_template_num\":null")
		first = false
	}

	// handle non nullable field vm_templates with omitempty
	if swag.IsZero(m.VMTemplates) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_templates\":")
		bytes, err := swag.WriteJSON(m.VMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_vlan_num
	if m.VMVlanNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_vlan_num\":")
		bytes, err := swag.WriteJSON(m.VMVlanNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVlanNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_vlan_num\":null")
		first = false
	}

	// handle nullable field vm_volume_num
	if m.VMVolumeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_num\":")
		bytes, err := swag.WriteJSON(m.VMVolumeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_num\":null")
		first = false
	}

	// handle nullable field vm_volume_snapshot_num
	if m.VMVolumeSnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshot_num\":")
		bytes, err := swag.WriteJSON(m.VMVolumeSnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeSnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshot_num\":null")
		first = false
	}

	// handle non nullable field vm_volume_snapshots with omitempty
	if swag.IsZero(m.VMVolumeSnapshots) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshots\":")
		bytes, err := swag.WriteJSON(m.VMVolumeSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field vm_volumes with omitempty
	if swag.IsZero(m.VMVolumes) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volumes\":")
		bytes, err := swag.WriteJSON(m.VMVolumes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field vms with omitempty
	if swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this label
func (m *Label) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateConsistencyGroupSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroupSnapshots); i++ {
		if swag.IsZero(m.ConsistencyGroupSnapshots[i]) { // not required
			continue
		}

		if m.ConsistencyGroupSnapshots[i] != nil {
			if err := m.ConsistencyGroupSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateConsistencyGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroups); i++ {
		if swag.IsZero(m.ConsistencyGroups[i]) { // not required
			continue
		}

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateContentLibraryImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImages) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentLibraryImages); i++ {
		if swag.IsZero(m.ContentLibraryImages[i]) { // not required
			continue
		}

		if m.ContentLibraryImages[i] != nil {
			if err := m.ContentLibraryImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateContentLibraryVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentLibraryVMTemplates); i++ {
		if swag.IsZero(m.ContentLibraryVMTemplates[i]) { // not required
			continue
		}

		if m.ContentLibraryVMTemplates[i] != nil {
			if err := m.ContentLibraryVMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateElfImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImages) { // not required
		return nil
	}

	for i := 0; i < len(m.ElfImages); i++ {
		if swag.IsZero(m.ElfImages[i]) { // not required
			continue
		}

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateGpuDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.GpuDevices); i++ {
		if swag.IsZero(m.GpuDevices[i]) { // not required
			continue
		}

		if m.GpuDevices[i] != nil {
			if err := m.GpuDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateIscsiLunSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLunSnapshots); i++ {
		if swag.IsZero(m.IscsiLunSnapshots[i]) { // not required
			continue
		}

		if m.IscsiLunSnapshots[i] != nil {
			if err := m.IscsiLunSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLuns); i++ {
		if swag.IsZero(m.IscsiLuns[i]) { // not required
			continue
		}

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIscsiTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiTargets); i++ {
		if swag.IsZero(m.IscsiTargets[i]) { // not required
			continue
		}

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIsolationPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.IsolationPolicies); i++ {
		if swag.IsZero(m.IsolationPolicies[i]) { // not required
			continue
		}

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateNamespaceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceGroups); i++ {
		if swag.IsZero(m.NamespaceGroups[i]) { // not required
			continue
		}

		if m.NamespaceGroups[i] != nil {
			if err := m.NamespaceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNfsExports(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExports) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsExports); i++ {
		if swag.IsZero(m.NfsExports[i]) { // not required
			continue
		}

		if m.NfsExports[i] != nil {
			if err := m.NfsExports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNfsInodes(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodes) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsInodes); i++ {
		if swag.IsZero(m.NfsInodes[i]) { // not required
			continue
		}

		if m.NfsInodes[i] != nil {
			if err := m.NfsInodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfNamespaceSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfNamespaceSnapshots); i++ {
		if swag.IsZero(m.NvmfNamespaceSnapshots[i]) { // not required
			continue
		}

		if m.NvmfNamespaceSnapshots[i] != nil {
			if err := m.NvmfNamespaceSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfNamespaces); i++ {
		if swag.IsZero(m.NvmfNamespaces[i]) { // not required
			continue
		}

		if m.NvmfNamespaces[i] != nil {
			if err := m.NvmfNamespaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfSubsystems(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystems) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfSubsystems); i++ {
		if swag.IsZero(m.NvmfSubsystems[i]) { // not required
			continue
		}

		if m.NvmfSubsystems[i] != nil {
			if err := m.NvmfSubsystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateSecurityPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityPolicies); i++ {
		if swag.IsZero(m.SecurityPolicies[i]) { // not required
			continue
		}

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	for i := 0; i < len(m.Vdses); i++ {
		if swag.IsZero(m.Vdses[i]) { // not required
			continue
		}

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	for i := 0; i < len(m.Vlans); i++ {
		if swag.IsZero(m.Vlans[i]) { // not required
			continue
		}

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMSnapshots); i++ {
		if swag.IsZero(m.VMSnapshots[i]) { // not required
			continue
		}

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VMTemplates); i++ {
		if swag.IsZero(m.VMTemplates[i]) { // not required
			continue
		}

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMVolumeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumeSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVolumeSnapshots); i++ {
		if swag.IsZero(m.VMVolumeSnapshots[i]) { // not required
			continue
		}

		if m.VMVolumeSnapshots[i] != nil {
			if err := m.VMVolumeSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVolumes); i++ {
		if swag.IsZero(m.VMVolumes[i]) { // not required
			continue
		}

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this label based on the context it is used
func (m *Label) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpuDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateConsistencyGroupSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroupSnapshots); i++ {

		if m.ConsistencyGroupSnapshots[i] != nil {
			if err := m.ConsistencyGroupSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateConsistencyGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroups); i++ {

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateContentLibraryImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContentLibraryImages); i++ {

		if m.ContentLibraryImages[i] != nil {
			if err := m.ContentLibraryImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateContentLibraryVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContentLibraryVMTemplates); i++ {

		if m.ContentLibraryVMTemplates[i] != nil {
			if err := m.ContentLibraryVMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_library_vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateElfImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElfImages); i++ {

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateGpuDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GpuDevices); i++ {

		if m.GpuDevices[i] != nil {
			if err := m.GpuDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gpu_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiLunSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLunSnapshots); i++ {

		if m.IscsiLunSnapshots[i] != nil {
			if err := m.IscsiLunSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLuns); i++ {

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiTargets); i++ {

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIsolationPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IsolationPolicies); i++ {

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNamespaceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamespaceGroups); i++ {

		if m.NamespaceGroups[i] != nil {
			if err := m.NamespaceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNfsExports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsExports); i++ {

		if m.NfsExports[i] != nil {
			if err := m.NfsExports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNfsInodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsInodes); i++ {

		if m.NfsInodes[i] != nil {
			if err := m.NfsInodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfNamespaceSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfNamespaceSnapshots); i++ {

		if m.NvmfNamespaceSnapshots[i] != nil {
			if err := m.NvmfNamespaceSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfNamespaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfNamespaces); i++ {

		if m.NvmfNamespaces[i] != nil {
			if err := m.NvmfNamespaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfSubsystems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfSubsystems); i++ {

		if m.NvmfSubsystems[i] != nil {
			if err := m.NvmfSubsystems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateSecurityPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityPolicies); i++ {

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vdses); i++ {

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vlans); i++ {

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMSnapshots); i++ {

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMTemplates); i++ {

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMVolumeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVolumeSnapshots); i++ {

		if m.VMVolumeSnapshots[i] != nil {
			if err := m.VMVolumeSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volume_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVolumes); i++ {

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Label) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Label) UnmarshalBinary(b []byte) error {
	var res Label
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
