// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMExportFileFile Vm export file file
//
// swagger:model VmExportFileFile
type VMExportFileFile struct {

	// file name
	// Required: true
	FileName *string `json:"fileName"`

	// file secret
	// Required: true
	FileSecret *string `json:"fileSecret"`

	// file size
	// Required: true
	FileSize *int64 `json:"fileSize"`

	// file UUID
	// Required: true
	FileUUID *string `json:"fileUUID"`

	// md5
	// Required: true
	Md5 *string `json:"md5"`

	// type
	// Required: true
	Type *VMExportFileType `json:"type"`

	MarshalOpts *VMExportFileFileMarshalOpts `json:"-"`
}

type VMExportFileFileMarshalOpts struct {
	FileName_Explicit_Null_When_Empty bool

	FileSecret_Explicit_Null_When_Empty bool

	FileSize_Explicit_Null_When_Empty bool

	FileUUID_Explicit_Null_When_Empty bool

	Md5_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool
}

func (m VMExportFileFile) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field fileName
	if m.FileName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileName\":")
		bytes, err := swag.WriteJSON(m.FileName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FileName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileName\":null")
		first = false
	}

	// handle nullable field fileSecret
	if m.FileSecret != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileSecret\":")
		bytes, err := swag.WriteJSON(m.FileSecret)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FileSecret_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileSecret\":null")
		first = false
	}

	// handle nullable field fileSize
	if m.FileSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileSize\":")
		bytes, err := swag.WriteJSON(m.FileSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FileSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileSize\":null")
		first = false
	}

	// handle nullable field fileUUID
	if m.FileUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileUUID\":")
		bytes, err := swag.WriteJSON(m.FileUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FileUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"fileUUID\":null")
		first = false
	}

	// handle nullable field md5
	if m.Md5 != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"md5\":")
		bytes, err := swag.WriteJSON(m.Md5)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Md5_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"md5\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm export file file
func (m *VMExportFileFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMd5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMExportFileFile) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *VMExportFileFile) validateFileSecret(formats strfmt.Registry) error {

	if err := validate.Required("fileSecret", "body", m.FileSecret); err != nil {
		return err
	}

	return nil
}

func (m *VMExportFileFile) validateFileSize(formats strfmt.Registry) error {

	if err := validate.Required("fileSize", "body", m.FileSize); err != nil {
		return err
	}

	return nil
}

func (m *VMExportFileFile) validateFileUUID(formats strfmt.Registry) error {

	if err := validate.Required("fileUUID", "body", m.FileUUID); err != nil {
		return err
	}

	return nil
}

func (m *VMExportFileFile) validateMd5(formats strfmt.Registry) error {

	if err := validate.Required("md5", "body", m.Md5); err != nil {
		return err
	}

	return nil
}

func (m *VMExportFileFile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm export file file based on the context it is used
func (m *VMExportFileFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMExportFileFile) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMExportFileFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMExportFileFile) UnmarshalBinary(b []byte) error {
	var res VMExportFileFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
