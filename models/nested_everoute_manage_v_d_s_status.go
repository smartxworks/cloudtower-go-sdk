// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteManageVDSStatus nested everoute manage v d s status
//
// swagger:model NestedEverouteManageVDSStatus
type NestedEverouteManageVDSStatus struct {

	// message
	Message *string `json:"message,omitempty"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// reason
	Reason *string `json:"reason,omitempty"`

	// retry count
	RetryCount *int32 `json:"retryCount,omitempty"`

	// vds
	Vds *NestedVds `json:"vds,omitempty"`

	// vds ID
	// Required: true
	VdsID *string `json:"vdsID"`

	MarshalOpts *NestedEverouteManageVDSStatusMarshalOpts `json:"-"`
}

type NestedEverouteManageVDSStatusMarshalOpts struct {
	Message_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	Reason_Explicit_Null_When_Empty bool

	RetryCount_Explicit_Null_When_Empty bool

	Vds_Explicit_Null_When_Empty bool

	VdsID_Explicit_Null_When_Empty bool
}

func (m NestedEverouteManageVDSStatus) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field reason
	if m.Reason != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":")
		bytes, err := swag.WriteJSON(m.Reason)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Reason_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":null")
		first = false
	}

	// handle nullable field retryCount
	if m.RetryCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retryCount\":")
		bytes, err := swag.WriteJSON(m.RetryCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retryCount\":null")
		first = false
	}

	// handle nullable field vds
	if m.Vds != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":")
		bytes, err := swag.WriteJSON(m.Vds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vds_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":null")
		first = false
	}

	// handle nullable field vdsID
	if m.VdsID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdsID\":")
		bytes, err := swag.WriteJSON(m.VdsID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VdsID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdsID\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested everoute manage v d s status
func (m *NestedEverouteManageVDSStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteManageVDSStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateVds(formats strfmt.Registry) error {
	if swag.IsZero(m.Vds) { // not required
		return nil
	}

	if m.Vds != nil {
		if err := m.Vds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateVdsID(formats strfmt.Registry) error {

	if err := validate.Required("vdsID", "body", m.VdsID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested everoute manage v d s status based on the context it is used
func (m *NestedEverouteManageVDSStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteManageVDSStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) contextValidateVds(ctx context.Context, formats strfmt.Registry) error {

	if m.Vds != nil {
		if err := m.Vds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteManageVDSStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteManageVDSStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteManageVDSStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
