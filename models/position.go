// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Position position
//
// swagger:model Position
type Position struct {

	// typename
	// Enum: [position]
	Typename *string `json:"__typename,omitempty"`

	// column
	Column *int32 `json:"column,omitempty"`

	// row
	Row *int32 `json:"row,omitempty"`

	MarshalOpts *PositionMarshalOpts `json:"-"`
}

type PositionMarshalOpts struct {
	Typename_Explicit_Null_When_Empty bool

	Column_Explicit_Null_When_Empty bool

	Row_Explicit_Null_When_Empty bool
}

func (m Position) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field __typename
	if m.Typename != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":")
		bytes, err := swag.WriteJSON(m.Typename)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Typename_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":null")
		first = false
	}

	// handle nullable field column
	if m.Column != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"column\":")
		bytes, err := swag.WriteJSON(m.Column)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Column_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"column\":null")
		first = false
	}

	// handle nullable field row
	if m.Row != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"row\":")
		bytes, err := swag.WriteJSON(m.Row)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Row_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"row\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this position
func (m *Position) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var positionTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["position"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionTypeTypenamePropEnum = append(positionTypeTypenamePropEnum, v)
	}
}

const (

	// PositionTypenamePosition captures enum value "position"
	PositionTypenamePosition string = "position"
)

// prop value enum
func (m *Position) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, positionTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Position) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this position based on context it is used
func (m *Position) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Position) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Position) UnmarshalBinary(b []byte) error {
	var res Position
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
