// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertNotifier alert notifier
//
// swagger:model AlertNotifier
type AlertNotifier struct {

	// clusters
	Clusters []*NestedCluster `json:"clusters,omitempty"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// email from
	EmailFrom *string `json:"email_from,omitempty"`

	// email tos
	// Required: true
	EmailTos []string `json:"email_tos"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// language code
	LanguageCode *NotifierLanguageCode `json:"language_code,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// notice severities
	// Required: true
	NoticeSeverities []string `json:"notice_severities"`

	// security mode
	SecurityMode *NotifierSecurityMode `json:"security_mode,omitempty"`

	// smtp server config
	SMTPServerConfig *NestedSMTPServer `json:"smtp_server_config,omitempty"`

	// smtp server host
	SMTPServerHost *string `json:"smtp_server_host,omitempty"`

	// smtp server port
	SMTPServerPort *int32 `json:"smtp_server_port,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	MarshalOpts *AlertNotifierMarshalOpts `json:"-"`
}

type AlertNotifierMarshalOpts struct {
	Clusters_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	EmailFrom_Explicit_Null_When_Empty bool

	EmailTos_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LanguageCode_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NoticeSeverities_Explicit_Null_When_Empty bool

	SecurityMode_Explicit_Null_When_Empty bool

	SMTPServerConfig_Explicit_Null_When_Empty bool

	SMTPServerHost_Explicit_Null_When_Empty bool

	SMTPServerPort_Explicit_Null_When_Empty bool

	Username_Explicit_Null_When_Empty bool
}

func (m AlertNotifier) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field clusters with omitempty
	if swag.IsZero(m.Clusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field email_from
	if m.EmailFrom != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":")
		bytes, err := swag.WriteJSON(m.EmailFrom)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFrom_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":null")
		first = false
	}

	// handle non nullable field email_tos without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"email_tos\":")
	{
		bytes, err := swag.WriteJSON(m.EmailTos)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field language_code
	if m.LanguageCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":")
		bytes, err := swag.WriteJSON(m.LanguageCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LanguageCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field notice_severities without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"notice_severities\":")
	{
		bytes, err := swag.WriteJSON(m.NoticeSeverities)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field security_mode
	if m.SecurityMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode\":")
		bytes, err := swag.WriteJSON(m.SecurityMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode\":null")
		first = false
	}

	// handle nullable field smtp_server_config
	if m.SMTPServerConfig != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_config\":")
		bytes, err := swag.WriteJSON(m.SMTPServerConfig)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerConfig_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_config\":null")
		first = false
	}

	// handle nullable field smtp_server_host
	if m.SMTPServerHost != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHost)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHost_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host\":null")
		first = false
	}

	// handle nullable field smtp_server_port
	if m.SMTPServerPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port\":null")
		first = false
	}

	// handle nullable field username
	if m.Username != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":")
		bytes, err := swag.WriteJSON(m.Username)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Username_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this alert notifier
func (m *AlertNotifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailTos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeSeverities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPServerConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifier) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifier) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifier) validateEmailTos(formats strfmt.Registry) error {

	if err := validate.Required("email_tos", "body", m.EmailTos); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifier) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifier) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	if m.LanguageCode != nil {
		if err := m.LanguageCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) validateNoticeSeverities(formats strfmt.Registry) error {

	if err := validate.Required("notice_severities", "body", m.NoticeSeverities); err != nil {
		return err
	}

	return nil
}

func (m *AlertNotifier) validateSecurityMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityMode) { // not required
		return nil
	}

	if m.SecurityMode != nil {
		if err := m.SecurityMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) validateSMTPServerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SMTPServerConfig) { // not required
		return nil
	}

	if m.SMTPServerConfig != nil {
		if err := m.SMTPServerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp_server_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp_server_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert notifier based on the context it is used
func (m *AlertNotifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSMTPServerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifier) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifier) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCode != nil {
		if err := m.LanguageCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) contextValidateSecurityMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityMode != nil {
		if err := m.SecurityMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifier) contextValidateSMTPServerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTPServerConfig != nil {
		if err := m.SMTPServerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp_server_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp_server_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertNotifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertNotifier) UnmarshalBinary(b []byte) error {
	var res AlertNotifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
