// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alert alert
//
// swagger:model Alert
type Alert struct {

	// alert rule
	AlertRule *NestedAlertRule `json:"alert_rule,omitempty"`

	// cause
	// Required: true
	Cause *string `json:"cause"`

	// cluster
	Cluster *NestedCluster `json:"cluster,omitempty"`

	// create time
	CreateTime *string `json:"create_time,omitempty"`

	// disk
	Disk *NestedDisk `json:"disk,omitempty"`

	// ended
	// Required: true
	Ended *bool `json:"ended"`

	// host
	Host *NestedHost `json:"host,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact
	// Required: true
	Impact *string `json:"impact"`

	// labels
	// Required: true
	Labels interface{} `json:"labels"`

	// local create time
	// Required: true
	LocalCreateTime *string `json:"local_create_time"`

	// local end time
	// Required: true
	LocalEndTime *string `json:"local_end_time"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// local start time
	// Required: true
	LocalStartTime *string `json:"local_start_time"`

	// local update time
	// Required: true
	LocalUpdateTime *string `json:"local_update_time"`

	// message
	// Required: true
	Message *string `json:"message"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// threshold
	// Required: true
	Threshold *float64 `json:"threshold"`

	// value
	// Required: true
	Value *float64 `json:"value"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	MarshalOpts *AlertMarshalOpts `json:"-"`
}

type AlertMarshalOpts struct {
	AlertRule_Explicit_Null_When_Empty bool

	Cause_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	CreateTime_Explicit_Null_When_Empty bool

	Disk_Explicit_Null_When_Empty bool

	Ended_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Impact_Explicit_Null_When_Empty bool

	LocalCreateTime_Explicit_Null_When_Empty bool

	LocalEndTime_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalStartTime_Explicit_Null_When_Empty bool

	LocalUpdateTime_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	Severity_Explicit_Null_When_Empty bool

	Solution_Explicit_Null_When_Empty bool

	Threshold_Explicit_Null_When_Empty bool

	Value_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m Alert) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field alert_rule
	if m.AlertRule != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"alert_rule\":")
		bytes, err := swag.WriteJSON(m.AlertRule)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AlertRule_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"alert_rule\":null")
		first = false
	}

	// handle nullable field cause
	if m.Cause != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cause\":")
		bytes, err := swag.WriteJSON(m.Cause)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cause_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cause\":null")
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field create_time
	if m.CreateTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"create_time\":")
		bytes, err := swag.WriteJSON(m.CreateTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreateTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"create_time\":null")
		first = false
	}

	// handle nullable field disk
	if m.Disk != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":")
		bytes, err := swag.WriteJSON(m.Disk)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disk_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":null")
		first = false
	}

	// handle nullable field ended
	if m.Ended != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ended\":")
		bytes, err := swag.WriteJSON(m.Ended)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ended_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ended\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field impact
	if m.Impact != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"impact\":")
		bytes, err := swag.WriteJSON(m.Impact)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Impact_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"impact\":null")
		first = false
	}

	// handle non nullable field labels with omitempty
	if swag.IsZero(m.Labels) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_create_time
	if m.LocalCreateTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_create_time\":")
		bytes, err := swag.WriteJSON(m.LocalCreateTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreateTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_create_time\":null")
		first = false
	}

	// handle nullable field local_end_time
	if m.LocalEndTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_end_time\":")
		bytes, err := swag.WriteJSON(m.LocalEndTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalEndTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_end_time\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_start_time
	if m.LocalStartTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_start_time\":")
		bytes, err := swag.WriteJSON(m.LocalStartTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalStartTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_start_time\":null")
		first = false
	}

	// handle nullable field local_update_time
	if m.LocalUpdateTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_update_time\":")
		bytes, err := swag.WriteJSON(m.LocalUpdateTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdateTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_update_time\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field severity
	if m.Severity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"severity\":")
		bytes, err := swag.WriteJSON(m.Severity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Severity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"severity\":null")
		first = false
	}

	// handle nullable field solution
	if m.Solution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"solution\":")
		bytes, err := swag.WriteJSON(m.Solution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Solution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"solution\":null")
		first = false
	}

	// handle nullable field threshold
	if m.Threshold != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"threshold\":")
		bytes, err := swag.WriteJSON(m.Threshold)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Threshold_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"threshold\":null")
		first = false
	}

	// handle nullable field value
	if m.Value != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":")
		bytes, err := swag.WriteJSON(m.Value)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Value_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":null")
		first = false
	}

	// handle non nullable field vms with omitempty
	if swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) validateAlertRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertRule) { // not required
		return nil
	}

	if m.AlertRule != nil {
		if err := m.AlertRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alert_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alert_rule")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateCause(formats strfmt.Registry) error {

	if err := validate.Required("cause", "body", m.Cause); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateEnded(formats strfmt.Registry) error {

	if err := validate.Required("ended", "body", m.Ended); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLabels(formats strfmt.Registry) error {

	if m.Labels == nil {
		return errors.Required("labels", "body", nil)
	}

	return nil
}

func (m *Alert) validateLocalCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("local_create_time", "body", m.LocalCreateTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalEndTime(formats strfmt.Registry) error {

	if err := validate.Required("local_end_time", "body", m.LocalEndTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalStartTime(formats strfmt.Registry) error {

	if err := validate.Required("local_start_time", "body", m.LocalStartTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("local_update_time", "body", m.LocalUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this alert based on the context it is used
func (m *Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) contextValidateAlertRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertRule != nil {
		if err := m.AlertRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alert_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alert_rule")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
