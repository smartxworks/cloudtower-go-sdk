// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BrickTopo brick topo
//
// swagger:model BrickTopo
type BrickTopo struct {

	// capacity
	// Required: true
	Capacity *NestedCapacity `json:"capacity"`

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// cluster topo
	ClusterTopo *NestedClusterTopo `json:"cluster_topo,omitempty"`

	// disk layout
	DiskLayout *NestedBrickDiskLayout `json:"disk_layout,omitempty"`

	// height
	// Required: true
	Height *int32 `json:"height"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// model
	Model *string `json:"model,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// node topoes
	NodeTopoes []*NestedNodeTopo `json:"node_topoes,omitempty"`

	// position
	// Required: true
	Position *int32 `json:"position"`

	// power layout
	PowerLayout *Direction `json:"power_layout,omitempty"`

	// power position
	PowerPosition *PowerPosition `json:"power_position,omitempty"`

	// powers
	Powers []*NestedBrickPower `json:"powers,omitempty"`

	// rack topo
	RackTopo *NestedRackTopo `json:"rack_topo,omitempty"`

	// tag position in brick
	TagPositionInBrick []*NestedTagPosition `json:"tag_position_in_brick,omitempty"`

	MarshalOpts *BrickTopoMarshalOpts `json:"-"`
}

type BrickTopoMarshalOpts struct {
	Capacity_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	ClusterTopo_Explicit_Null_When_Empty bool

	DiskLayout_Explicit_Null_When_Empty bool

	Height_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NodeTopoes_Explicit_Null_When_Empty bool

	Position_Explicit_Null_When_Empty bool

	PowerLayout_Explicit_Null_When_Empty bool

	PowerPosition_Explicit_Null_When_Empty bool

	Powers_Explicit_Null_When_Empty bool

	RackTopo_Explicit_Null_When_Empty bool

	TagPositionInBrick_Explicit_Null_When_Empty bool
}

func (m BrickTopo) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field capacity
	if m.Capacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":")
		bytes, err := swag.WriteJSON(m.Capacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Capacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":null")
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field cluster_topo
	if m.ClusterTopo != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo\":")
		bytes, err := swag.WriteJSON(m.ClusterTopo)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterTopo_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo\":null")
		first = false
	}

	// handle nullable field disk_layout
	if m.DiskLayout != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_layout\":")
		bytes, err := swag.WriteJSON(m.DiskLayout)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskLayout_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_layout\":null")
		first = false
	}

	// handle nullable field height
	if m.Height != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height\":")
		bytes, err := swag.WriteJSON(m.Height)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Height_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field node_topoes with omitempty
	if !swag.IsZero(m.NodeTopoes) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes\":")
		bytes, err := swag.WriteJSON(m.NodeTopoes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field position
	if m.Position != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":")
		bytes, err := swag.WriteJSON(m.Position)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Position_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":null")
		first = false
	}

	// handle nullable field power_layout
	if m.PowerLayout != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout\":")
		bytes, err := swag.WriteJSON(m.PowerLayout)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerLayout_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout\":null")
		first = false
	}

	// handle nullable field power_position
	if m.PowerPosition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position\":")
		bytes, err := swag.WriteJSON(m.PowerPosition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerPosition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position\":null")
		first = false
	}

	// handle non nullable field powers with omitempty
	if !swag.IsZero(m.Powers) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"powers\":")
		bytes, err := swag.WriteJSON(m.Powers)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field rack_topo
	if m.RackTopo != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rack_topo\":")
		bytes, err := swag.WriteJSON(m.RackTopo)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RackTopo_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rack_topo\":null")
		first = false
	}

	// handle non nullable field tag_position_in_brick with omitempty
	if !swag.IsZero(m.TagPositionInBrick) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tag_position_in_brick\":")
		bytes, err := swag.WriteJSON(m.TagPositionInBrick)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this brick topo
func (m *BrickTopo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTopo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackTopo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagPositionInBrick(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopo) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateClusterTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterTopo) { // not required
		return nil
	}

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateDiskLayout(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskLayout) { // not required
		return nil
	}

	if m.DiskLayout != nil {
		if err := m.DiskLayout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateNodeTopoes(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoes) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTopoes); i++ {
		if swag.IsZero(m.NodeTopoes[i]) { // not required
			continue
		}

		if m.NodeTopoes[i] != nil {
			if err := m.NodeTopoes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validatePowerLayout(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayout) { // not required
		return nil
	}

	if m.PowerLayout != nil {
		if err := m.PowerLayout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validatePowerPosition(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPosition) { // not required
		return nil
	}

	if m.PowerPosition != nil {
		if err := m.PowerPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validatePowers(formats strfmt.Registry) error {
	if swag.IsZero(m.Powers) { // not required
		return nil
	}

	for i := 0; i < len(m.Powers); i++ {
		if swag.IsZero(m.Powers[i]) { // not required
			continue
		}

		if m.Powers[i] != nil {
			if err := m.Powers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("powers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) validateRackTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.RackTopo) { // not required
		return nil
	}

	if m.RackTopo != nil {
		if err := m.RackTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateTagPositionInBrick(formats strfmt.Registry) error {
	if swag.IsZero(m.TagPositionInBrick) { // not required
		return nil
	}

	for i := 0; i < len(m.TagPositionInBrick); i++ {
		if swag.IsZero(m.TagPositionInBrick[i]) { // not required
			continue
		}

		if m.TagPositionInBrick[i] != nil {
			if err := m.TagPositionInBrick[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this brick topo based on the context it is used
func (m *BrickTopo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskLayout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRackTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagPositionInBrick(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopo) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.Capacity != nil {
		if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateClusterTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateDiskLayout(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskLayout != nil {
		if err := m.DiskLayout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateNodeTopoes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeTopoes); i++ {

		if m.NodeTopoes[i] != nil {
			if err := m.NodeTopoes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) contextValidatePowerLayout(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerLayout != nil {
		if err := m.PowerLayout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidatePowerPosition(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerPosition != nil {
		if err := m.PowerPosition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidatePowers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Powers); i++ {

		if m.Powers[i] != nil {
			if err := m.Powers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("powers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) contextValidateRackTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.RackTopo != nil {
		if err := m.RackTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateTagPositionInBrick(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagPositionInBrick); i++ {

		if m.TagPositionInBrick[i] != nil {
			if err := m.TagPositionInBrick[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopo) UnmarshalBinary(b []byte) error {
	var res BrickTopo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
