// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedFrozenDisks nested frozen disks
//
// swagger:model NestedFrozenDisks
type NestedFrozenDisks struct {

	// boot
	// Required: true
	Boot *int32 `json:"boot"`

	// bus
	// Required: true
	Bus *Bus `json:"bus"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// disk name
	DiskName *string `json:"disk_name,omitempty"`

	// elf image local id
	// Required: true
	ElfImageLocalID *string `json:"elf_image_local_id"`

	// image name
	ImageName *string `json:"image_name,omitempty"`

	// index
	// Required: true
	Index *int32 `json:"index"`

	// key
	Key *int32 `json:"key,omitempty"`

	// max bandwidth
	MaxBandwidth *int64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy *VMDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops *int32 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy *VMDiskIoRestrictType `json:"max_iops_policy,omitempty"`

	// path
	// Required: true
	Path *string `json:"path"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// snapshot local id
	SnapshotLocalID *string `json:"snapshot_local_id,omitempty"`

	// storage policy uuid
	// Required: true
	StoragePolicyUUID *string `json:"storage_policy_uuid"`

	// svt image local id
	// Required: true
	SvtImageLocalID *string `json:"svt_image_local_id"`

	// type
	// Required: true
	Type *VMDiskType `json:"type"`

	// vm volume local id
	// Required: true
	VMVolumeLocalID *string `json:"vm_volume_local_id"`

	// vm volume snapshot uuid
	VMVolumeSnapshotUUID *string `json:"vm_volume_snapshot_uuid,omitempty"`

	// vm volume template uuid
	VMVolumeTemplateUUID *string `json:"vm_volume_template_uuid,omitempty"`

	MarshalOpts *NestedFrozenDisksMarshalOpts `json:"-"`
}

type NestedFrozenDisksMarshalOpts struct {
	Boot_Explicit_Null_When_Empty bool

	Bus_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	DiskName_Explicit_Null_When_Empty bool

	ElfImageLocalID_Explicit_Null_When_Empty bool

	ImageName_Explicit_Null_When_Empty bool

	Index_Explicit_Null_When_Empty bool

	Key_Explicit_Null_When_Empty bool

	MaxBandwidth_Explicit_Null_When_Empty bool

	MaxBandwidthPolicy_Explicit_Null_When_Empty bool

	MaxIops_Explicit_Null_When_Empty bool

	MaxIopsPolicy_Explicit_Null_When_Empty bool

	Path_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SnapshotLocalID_Explicit_Null_When_Empty bool

	StoragePolicyUUID_Explicit_Null_When_Empty bool

	SvtImageLocalID_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	VMVolumeLocalID_Explicit_Null_When_Empty bool

	VMVolumeSnapshotUUID_Explicit_Null_When_Empty bool

	VMVolumeTemplateUUID_Explicit_Null_When_Empty bool
}

func (m NestedFrozenDisks) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field boot
	if m.Boot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot\":")
		bytes, err := swag.WriteJSON(m.Boot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Boot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot\":null")
		first = false
	}

	// handle nullable field bus
	if m.Bus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":")
		bytes, err := swag.WriteJSON(m.Bus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":null")
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field disk_name
	if m.DiskName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_name\":")
		bytes, err := swag.WriteJSON(m.DiskName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_name\":null")
		first = false
	}

	// handle nullable field elf_image_local_id
	if m.ElfImageLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image_local_id\":")
		bytes, err := swag.WriteJSON(m.ElfImageLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfImageLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image_local_id\":null")
		first = false
	}

	// handle nullable field image_name
	if m.ImageName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"image_name\":")
		bytes, err := swag.WriteJSON(m.ImageName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ImageName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"image_name\":null")
		first = false
	}

	// handle nullable field index
	if m.Index != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"index\":")
		bytes, err := swag.WriteJSON(m.Index)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Index_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"index\":null")
		first = false
	}

	// handle nullable field key
	if m.Key != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":")
		bytes, err := swag.WriteJSON(m.Key)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Key_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":null")
		first = false
	}

	// handle nullable field max_bandwidth
	if m.MaxBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth\":null")
		first = false
	}

	// handle nullable field max_bandwidth_policy
	if m.MaxBandwidthPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy\":null")
		first = false
	}

	// handle nullable field max_iops
	if m.MaxIops != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops\":")
		bytes, err := swag.WriteJSON(m.MaxIops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIops_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops\":null")
		first = false
	}

	// handle nullable field max_iops_policy
	if m.MaxIopsPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy\":")
		bytes, err := swag.WriteJSON(m.MaxIopsPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy\":null")
		first = false
	}

	// handle nullable field path
	if m.Path != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":")
		bytes, err := swag.WriteJSON(m.Path)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Path_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":null")
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field snapshot_local_id
	if m.SnapshotLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_local_id\":")
		bytes, err := swag.WriteJSON(m.SnapshotLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_local_id\":null")
		first = false
	}

	// handle nullable field storage_policy_uuid
	if m.StoragePolicyUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_uuid\":")
		bytes, err := swag.WriteJSON(m.StoragePolicyUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StoragePolicyUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_uuid\":null")
		first = false
	}

	// handle nullable field svt_image_local_id
	if m.SvtImageLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"svt_image_local_id\":")
		bytes, err := swag.WriteJSON(m.SvtImageLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SvtImageLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"svt_image_local_id\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field vm_volume_local_id
	if m.VMVolumeLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_local_id\":")
		bytes, err := swag.WriteJSON(m.VMVolumeLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_local_id\":null")
		first = false
	}

	// handle nullable field vm_volume_snapshot_uuid
	if m.VMVolumeSnapshotUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshot_uuid\":")
		bytes, err := swag.WriteJSON(m.VMVolumeSnapshotUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeSnapshotUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshot_uuid\":null")
		first = false
	}

	// handle nullable field vm_volume_template_uuid
	if m.VMVolumeTemplateUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_template_uuid\":")
		bytes, err := swag.WriteJSON(m.VMVolumeTemplateUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeTemplateUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_template_uuid\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested frozen disks
func (m *NestedFrozenDisks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImageLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvtImageLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeLocalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedFrozenDisks) validateBoot(formats strfmt.Registry) error {

	if err := validate.Required("boot", "body", m.Boot); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) validateElfImageLocalID(formats strfmt.Registry) error {

	if err := validate.Required("elf_image_local_id", "body", m.ElfImageLocalID); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateMaxBandwidthPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicy) { // not required
		return nil
	}

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) validateMaxIopsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicy) { // not required
		return nil
	}

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateStoragePolicyUUID(formats strfmt.Registry) error {

	if err := validate.Required("storage_policy_uuid", "body", m.StoragePolicyUUID); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateSvtImageLocalID(formats strfmt.Registry) error {

	if err := validate.Required("svt_image_local_id", "body", m.SvtImageLocalID); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenDisks) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) validateVMVolumeLocalID(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume_local_id", "body", m.VMVolumeLocalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested frozen disks based on the context it is used
func (m *NestedFrozenDisks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedFrozenDisks) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) contextValidateMaxBandwidthPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) contextValidateMaxIopsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *NestedFrozenDisks) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedFrozenDisks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedFrozenDisks) UnmarshalBinary(b []byte) error {
	var res NestedFrozenDisks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
