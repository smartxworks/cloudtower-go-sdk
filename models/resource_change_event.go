// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceChangeEvent resource change event
//
// swagger:model ResourceChangeEvent
type ResourceChangeEvent struct {

	// action
	Action *string `json:"action,omitempty"`

	// created at
	CreatedAt *string `json:"created_at,omitempty"`

	// new value
	NewValue *string `json:"new_value,omitempty"`

	// old value
	OldValue *string `json:"old_value,omitempty"`

	// prev revision
	PrevRevision *string `json:"prev_revision,omitempty"`

	// resource id
	ResourceID *string `json:"resource_id,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// revision
	// Required: true
	Revision *string `json:"revision"`

	MarshalOpts *ResourceChangeEventMarshalOpts `json:"-"`
}

type ResourceChangeEventMarshalOpts struct {
	Action_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	NewValue_Explicit_Null_When_Empty bool

	OldValue_Explicit_Null_When_Empty bool

	PrevRevision_Explicit_Null_When_Empty bool

	ResourceID_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	Revision_Explicit_Null_When_Empty bool
}

func (m ResourceChangeEvent) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field action
	if m.Action != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":")
		bytes, err := swag.WriteJSON(m.Action)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Action_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":null")
		first = false
	}

	// handle nullable field created_at
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"created_at\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"created_at\":null")
		first = false
	}

	// handle nullable field new_value
	if m.NewValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"new_value\":")
		bytes, err := swag.WriteJSON(m.NewValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NewValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"new_value\":null")
		first = false
	}

	// handle nullable field old_value
	if m.OldValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"old_value\":")
		bytes, err := swag.WriteJSON(m.OldValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OldValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"old_value\":null")
		first = false
	}

	// handle nullable field prev_revision
	if m.PrevRevision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"prev_revision\":")
		bytes, err := swag.WriteJSON(m.PrevRevision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PrevRevision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"prev_revision\":null")
		first = false
	}

	// handle nullable field resource_id
	if m.ResourceID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id\":")
		bytes, err := swag.WriteJSON(m.ResourceID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle nullable field revision
	if m.Revision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"revision\":")
		bytes, err := swag.WriteJSON(m.Revision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Revision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"revision\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this resource change event
func (m *ResourceChangeEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceChangeEvent) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource change event based on context it is used
func (m *ResourceChangeEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceChangeEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceChangeEvent) UnmarshalBinary(b []byte) error {
	var res ResourceChangeEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
