// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IscsiTargetCreationParams iscsi target creation params
//
// swagger:model IscsiTargetCreationParams
type IscsiTargetCreationParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replica num
	// Required: true
	ReplicaNum *int32 `json:"replica_num"`

	// stripe num
	// Required: true
	StripeNum *int32 `json:"stripe_num"`

	// stripe size
	// Required: true
	StripeSize *int64 `json:"stripe_size"`

	// stripe size unit
	StripeSizeUnit *ByteUnit `json:"stripe_size_unit,omitempty"`

	// thin provision
	// Required: true
	ThinProvision *bool `json:"thin_provision"`

	IscsiTargetCommonParams

	MarshalOpts *IscsiTargetCreationParamsMarshalOpts `json:"-"`
}

type IscsiTargetCreationParamsMarshalOpts struct {
	ClusterID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	StripeNum_Explicit_Null_When_Empty bool

	StripeSize_Explicit_Null_When_Empty bool

	StripeSizeUnit_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IscsiTargetCreationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ClusterID *string `json:"cluster_id"`

		Name *string `json:"name"`

		ReplicaNum *int32 `json:"replica_num"`

		StripeNum *int32 `json:"stripe_num"`

		StripeSize *int64 `json:"stripe_size"`

		StripeSizeUnit *ByteUnit `json:"stripe_size_unit,omitempty"`

		ThinProvision *bool `json:"thin_provision"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ClusterID = dataAO0.ClusterID

	m.Name = dataAO0.Name

	m.ReplicaNum = dataAO0.ReplicaNum

	m.StripeNum = dataAO0.StripeNum

	m.StripeSize = dataAO0.StripeSize

	m.StripeSizeUnit = dataAO0.StripeSizeUnit

	m.ThinProvision = dataAO0.ThinProvision

	// AO1
	var aO1 IscsiTargetCommonParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IscsiTargetCommonParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IscsiTargetCreationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var b bytes.Buffer
	b.WriteString("{")
	first := true

	// handle nullable field cluster_id
	if m.ClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":")
		bytes, err := swag.WriteJSON(m.ClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle nullable field stripe_num
	if m.StripeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":")
		bytes, err := swag.WriteJSON(m.StripeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":null")
		first = false
	}

	// handle nullable field stripe_size
	if m.StripeSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":")
		bytes, err := swag.WriteJSON(m.StripeSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":null")
		first = false
	}

	// handle nullable field stripe_size_unit
	if m.StripeSizeUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_unit\":")
		bytes, err := swag.WriteJSON(m.StripeSizeUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_unit\":null")
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}
	b.WriteString("}")
	_parts = append(_parts, b.Bytes())

	aO1, err := swag.WriteJSON(m.IscsiTargetCommonParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iscsi target creation params
func (m *IscsiTargetCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThinProvision(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with IscsiTargetCommonParams
	if err := m.IscsiTargetCommonParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTargetCreationParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateReplicaNum(formats strfmt.Registry) error {

	if err := validate.Required("replica_num", "body", m.ReplicaNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateStripeNum(formats strfmt.Registry) error {

	if err := validate.Required("stripe_num", "body", m.StripeNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateStripeSize(formats strfmt.Registry) error {

	if err := validate.Required("stripe_size", "body", m.StripeSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateStripeSizeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.StripeSizeUnit) { // not required
		return nil
	}

	if m.StripeSizeUnit != nil {
		if err := m.StripeSizeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stripe_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stripe_size_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTargetCreationParams) validateThinProvision(formats strfmt.Registry) error {

	if err := validate.Required("thin_provision", "body", m.ThinProvision); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this iscsi target creation params based on the context it is used
func (m *IscsiTargetCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStripeSizeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with IscsiTargetCommonParams
	if err := m.IscsiTargetCommonParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTargetCreationParams) contextValidateStripeSizeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.StripeSizeUnit != nil {
		if err := m.StripeSizeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stripe_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stripe_size_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiTargetCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiTargetCreationParams) UnmarshalBinary(b []byte) error {
	var res IscsiTargetCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
