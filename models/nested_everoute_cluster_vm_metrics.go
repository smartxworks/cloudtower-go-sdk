// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteClusterVMMetrics nested everoute cluster VM metrics
//
// swagger:model NestedEverouteClusterVMMetrics
type NestedEverouteClusterVMMetrics struct {

	// cpu usage
	// Required: true
	CPUUsage *float64 `json:"cpuUsage"`

	// data volume usage
	// Required: true
	DataVolumeUsage *float64 `json:"dataVolumeUsage"`

	// last acquisition time
	// Required: true
	LastAcquisitionTime *string `json:"lastAcquisitionTime"`

	// memory usage
	// Required: true
	MemoryUsage *float64 `json:"memoryUsage"`

	MarshalOpts *NestedEverouteClusterVMMetricsMarshalOpts `json:"-"`
}

type NestedEverouteClusterVMMetricsMarshalOpts struct {
	CPUUsage_Explicit_Null_When_Empty bool

	DataVolumeUsage_Explicit_Null_When_Empty bool

	LastAcquisitionTime_Explicit_Null_When_Empty bool

	MemoryUsage_Explicit_Null_When_Empty bool
}

func (m NestedEverouteClusterVMMetrics) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cpuUsage
	if m.CPUUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpuUsage\":")
		bytes, err := swag.WriteJSON(m.CPUUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpuUsage\":null")
		first = false
	}

	// handle nullable field dataVolumeUsage
	if m.DataVolumeUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dataVolumeUsage\":")
		bytes, err := swag.WriteJSON(m.DataVolumeUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataVolumeUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dataVolumeUsage\":null")
		first = false
	}

	// handle nullable field lastAcquisitionTime
	if m.LastAcquisitionTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lastAcquisitionTime\":")
		bytes, err := swag.WriteJSON(m.LastAcquisitionTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastAcquisitionTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lastAcquisitionTime\":null")
		first = false
	}

	// handle nullable field memoryUsage
	if m.MemoryUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"memoryUsage\":")
		bytes, err := swag.WriteJSON(m.MemoryUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MemoryUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"memoryUsage\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested everoute cluster VM metrics
func (m *NestedEverouteClusterVMMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataVolumeUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAcquisitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteClusterVMMetrics) validateCPUUsage(formats strfmt.Registry) error {

	if err := validate.Required("cpuUsage", "body", m.CPUUsage); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterVMMetrics) validateDataVolumeUsage(formats strfmt.Registry) error {

	if err := validate.Required("dataVolumeUsage", "body", m.DataVolumeUsage); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterVMMetrics) validateLastAcquisitionTime(formats strfmt.Registry) error {

	if err := validate.Required("lastAcquisitionTime", "body", m.LastAcquisitionTime); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterVMMetrics) validateMemoryUsage(formats strfmt.Registry) error {

	if err := validate.Required("memoryUsage", "body", m.MemoryUsage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested everoute cluster VM metrics based on context it is used
func (m *NestedEverouteClusterVMMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteClusterVMMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteClusterVMMetrics) UnmarshalBinary(b []byte) error {
	var res NestedEverouteClusterVMMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
