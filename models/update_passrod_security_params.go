// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatePassrodSecurityParams update passrod security params
//
// swagger:model UpdatePassrodSecurityParams
type UpdatePassrodSecurityParams struct {

	// login miss num threshold
	LoginMissNumThreshold *int32 `json:"login_miss_num_threshold,omitempty"`

	// login miss time threshold
	LoginMissTimeThreshold *int32 `json:"login_miss_time_threshold,omitempty"`

	// password complexity
	PasswordComplexity *PasswordComplexity `json:"password_complexity,omitempty"`

	// password expire days
	PasswordExpireDays *int32 `json:"password_expire_days,omitempty"`

	MarshalOpts *UpdatePassrodSecurityParamsMarshalOpts `json:"-"`
}

type UpdatePassrodSecurityParamsMarshalOpts struct {
	LoginMissNumThreshold_Explicit_Null_When_Empty bool

	LoginMissTimeThreshold_Explicit_Null_When_Empty bool

	PasswordComplexity_Explicit_Null_When_Empty bool

	PasswordExpireDays_Explicit_Null_When_Empty bool
}

func (m UpdatePassrodSecurityParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field login_miss_num_threshold
	if m.LoginMissNumThreshold != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_num_threshold\":")
		bytes, err := swag.WriteJSON(m.LoginMissNumThreshold)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LoginMissNumThreshold_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_num_threshold\":null")
		first = false
	}

	// handle nullable field login_miss_time_threshold
	if m.LoginMissTimeThreshold != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_time_threshold\":")
		bytes, err := swag.WriteJSON(m.LoginMissTimeThreshold)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LoginMissTimeThreshold_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_time_threshold\":null")
		first = false
	}

	// handle nullable field password_complexity
	if m.PasswordComplexity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_complexity\":")
		bytes, err := swag.WriteJSON(m.PasswordComplexity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordComplexity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_complexity\":null")
		first = false
	}

	// handle nullable field password_expire_days
	if m.PasswordExpireDays != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expire_days\":")
		bytes, err := swag.WriteJSON(m.PasswordExpireDays)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordExpireDays_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expire_days\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this update passrod security params
func (m *UpdatePassrodSecurityParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePasswordComplexity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePassrodSecurityParams) validatePasswordComplexity(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordComplexity) { // not required
		return nil
	}

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update passrod security params based on the context it is used
func (m *UpdatePassrodSecurityParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePasswordComplexity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePassrodSecurityParams) contextValidatePasswordComplexity(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePassrodSecurityParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePassrodSecurityParams) UnmarshalBinary(b []byte) error {
	var res UpdatePassrodSecurityParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
