// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplicationPlanType replication plan type
//
// swagger:model ReplicationPlanType
type ReplicationPlanType string

func NewReplicationPlanType(value ReplicationPlanType) *ReplicationPlanType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplicationPlanType.
func (m ReplicationPlanType) Pointer() *ReplicationPlanType {
	return &m
}

const (

	// ReplicationPlanTypeSTORAGEVOLUME captures enum value "STORAGE_VOLUME"
	ReplicationPlanTypeSTORAGEVOLUME ReplicationPlanType = "STORAGE_VOLUME"

	// ReplicationPlanTypeVM captures enum value "VM"
	ReplicationPlanTypeVM ReplicationPlanType = "VM"
)

// for schema
var replicationPlanTypeEnum []interface{}

func init() {
	var res []ReplicationPlanType
	if err := json.Unmarshal([]byte(`["STORAGE_VOLUME","VM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationPlanTypeEnum = append(replicationPlanTypeEnum, v)
	}
}

func (m ReplicationPlanType) validateReplicationPlanTypeEnum(path, location string, value ReplicationPlanType) error {
	if err := validate.EnumCase(path, location, value, replicationPlanTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replication plan type
func (m ReplicationPlanType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplicationPlanTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replication plan type based on context it is used
func (m ReplicationPlanType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
