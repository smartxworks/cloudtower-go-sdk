// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NicWhereInput nic where input
//
// swagger:model NicWhereInput
type NicWhereInput struct {

	// a n d
	AND []*NicWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*NicWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*NicWhereInput `json:"OR,omitempty"`

	// driver
	Driver *string `json:"driver,omitempty"`

	// driver contains
	DriverContains *string `json:"driver_contains,omitempty"`

	// driver ends with
	DriverEndsWith *string `json:"driver_ends_with,omitempty"`

	// driver gt
	DriverGt *string `json:"driver_gt,omitempty"`

	// driver gte
	DriverGte *string `json:"driver_gte,omitempty"`

	// driver in
	DriverIn []string `json:"driver_in,omitempty"`

	// driver lt
	DriverLt *string `json:"driver_lt,omitempty"`

	// driver lte
	DriverLte *string `json:"driver_lte,omitempty"`

	// driver not
	DriverNot *string `json:"driver_not,omitempty"`

	// driver not contains
	DriverNotContains *string `json:"driver_not_contains,omitempty"`

	// driver not ends with
	DriverNotEndsWith *string `json:"driver_not_ends_with,omitempty"`

	// driver not in
	DriverNotIn []string `json:"driver_not_in,omitempty"`

	// driver not starts with
	DriverNotStartsWith *string `json:"driver_not_starts_with,omitempty"`

	// driver starts with
	DriverStartsWith *string `json:"driver_starts_with,omitempty"`

	// driver state
	DriverState *NicDriverState `json:"driver_state,omitempty"`

	// driver state in
	DriverStateIn []NicDriverState `json:"driver_state_in,omitempty"`

	// driver state not
	DriverStateNot *NicDriverState `json:"driver_state_not,omitempty"`

	// driver state not in
	DriverStateNotIn []NicDriverState `json:"driver_state_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// gateway ip
	GatewayIP *string `json:"gateway_ip,omitempty"`

	// gateway ip contains
	GatewayIPContains *string `json:"gateway_ip_contains,omitempty"`

	// gateway ip ends with
	GatewayIPEndsWith *string `json:"gateway_ip_ends_with,omitempty"`

	// gateway ip gt
	GatewayIPGt *string `json:"gateway_ip_gt,omitempty"`

	// gateway ip gte
	GatewayIPGte *string `json:"gateway_ip_gte,omitempty"`

	// gateway ip in
	GatewayIPIn []string `json:"gateway_ip_in,omitempty"`

	// gateway ip lt
	GatewayIPLt *string `json:"gateway_ip_lt,omitempty"`

	// gateway ip lte
	GatewayIPLte *string `json:"gateway_ip_lte,omitempty"`

	// gateway ip not
	GatewayIPNot *string `json:"gateway_ip_not,omitempty"`

	// gateway ip not contains
	GatewayIPNotContains *string `json:"gateway_ip_not_contains,omitempty"`

	// gateway ip not ends with
	GatewayIPNotEndsWith *string `json:"gateway_ip_not_ends_with,omitempty"`

	// gateway ip not in
	GatewayIPNotIn []string `json:"gateway_ip_not_in,omitempty"`

	// gateway ip not starts with
	GatewayIPNotStartsWith *string `json:"gateway_ip_not_starts_with,omitempty"`

	// gateway ip starts with
	GatewayIPStartsWith *string `json:"gateway_ip_starts_with,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// ibdev
	Ibdev *string `json:"ibdev,omitempty"`

	// ibdev contains
	IbdevContains *string `json:"ibdev_contains,omitempty"`

	// ibdev ends with
	IbdevEndsWith *string `json:"ibdev_ends_with,omitempty"`

	// ibdev gt
	IbdevGt *string `json:"ibdev_gt,omitempty"`

	// ibdev gte
	IbdevGte *string `json:"ibdev_gte,omitempty"`

	// ibdev in
	IbdevIn []string `json:"ibdev_in,omitempty"`

	// ibdev lt
	IbdevLt *string `json:"ibdev_lt,omitempty"`

	// ibdev lte
	IbdevLte *string `json:"ibdev_lte,omitempty"`

	// ibdev not
	IbdevNot *string `json:"ibdev_not,omitempty"`

	// ibdev not contains
	IbdevNotContains *string `json:"ibdev_not_contains,omitempty"`

	// ibdev not ends with
	IbdevNotEndsWith *string `json:"ibdev_not_ends_with,omitempty"`

	// ibdev not in
	IbdevNotIn []string `json:"ibdev_not_in,omitempty"`

	// ibdev not starts with
	IbdevNotStartsWith *string `json:"ibdev_not_starts_with,omitempty"`

	// ibdev starts with
	IbdevStartsWith *string `json:"ibdev_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iommu status
	IommuStatus *IommuStatus `json:"iommu_status,omitempty"`

	// iommu status in
	IommuStatusIn []IommuStatus `json:"iommu_status_in,omitempty"`

	// iommu status not
	IommuStatusNot *IommuStatus `json:"iommu_status_not,omitempty"`

	// iommu status not in
	IommuStatusNotIn []IommuStatus `json:"iommu_status_not_in,omitempty"`

	// ip address
	IPAddress *string `json:"ip_address,omitempty"`

	// ip address contains
	IPAddressContains *string `json:"ip_address_contains,omitempty"`

	// ip address ends with
	IPAddressEndsWith *string `json:"ip_address_ends_with,omitempty"`

	// ip address gt
	IPAddressGt *string `json:"ip_address_gt,omitempty"`

	// ip address gte
	IPAddressGte *string `json:"ip_address_gte,omitempty"`

	// ip address in
	IPAddressIn []string `json:"ip_address_in,omitempty"`

	// ip address lt
	IPAddressLt *string `json:"ip_address_lt,omitempty"`

	// ip address lte
	IPAddressLte *string `json:"ip_address_lte,omitempty"`

	// ip address not
	IPAddressNot *string `json:"ip_address_not,omitempty"`

	// ip address not contains
	IPAddressNotContains *string `json:"ip_address_not_contains,omitempty"`

	// ip address not ends with
	IPAddressNotEndsWith *string `json:"ip_address_not_ends_with,omitempty"`

	// ip address not in
	IPAddressNotIn []string `json:"ip_address_not_in,omitempty"`

	// ip address not starts with
	IPAddressNotStartsWith *string `json:"ip_address_not_starts_with,omitempty"`

	// ip address starts with
	IPAddressStartsWith *string `json:"ip_address_starts_with,omitempty"`

	// is sriov
	IsSriov *bool `json:"is_sriov,omitempty"`

	// is sriov not
	IsSriovNot *bool `json:"is_sriov_not,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// mac address
	MacAddress *string `json:"mac_address,omitempty"`

	// mac address contains
	MacAddressContains *string `json:"mac_address_contains,omitempty"`

	// mac address ends with
	MacAddressEndsWith *string `json:"mac_address_ends_with,omitempty"`

	// mac address gt
	MacAddressGt *string `json:"mac_address_gt,omitempty"`

	// mac address gte
	MacAddressGte *string `json:"mac_address_gte,omitempty"`

	// mac address in
	MacAddressIn []string `json:"mac_address_in,omitempty"`

	// mac address lt
	MacAddressLt *string `json:"mac_address_lt,omitempty"`

	// mac address lte
	MacAddressLte *string `json:"mac_address_lte,omitempty"`

	// mac address not
	MacAddressNot *string `json:"mac_address_not,omitempty"`

	// mac address not contains
	MacAddressNotContains *string `json:"mac_address_not_contains,omitempty"`

	// mac address not ends with
	MacAddressNotEndsWith *string `json:"mac_address_not_ends_with,omitempty"`

	// mac address not in
	MacAddressNotIn []string `json:"mac_address_not_in,omitempty"`

	// mac address not starts with
	MacAddressNotStartsWith *string `json:"mac_address_not_starts_with,omitempty"`

	// mac address starts with
	MacAddressStartsWith *string `json:"mac_address_starts_with,omitempty"`

	// max vf num
	MaxVfNum *int32 `json:"max_vf_num,omitempty"`

	// max vf num gt
	MaxVfNumGt *int32 `json:"max_vf_num_gt,omitempty"`

	// max vf num gte
	MaxVfNumGte *int32 `json:"max_vf_num_gte,omitempty"`

	// max vf num in
	MaxVfNumIn []int32 `json:"max_vf_num_in,omitempty"`

	// max vf num lt
	MaxVfNumLt *int32 `json:"max_vf_num_lt,omitempty"`

	// max vf num lte
	MaxVfNumLte *int32 `json:"max_vf_num_lte,omitempty"`

	// max vf num not
	MaxVfNumNot *int32 `json:"max_vf_num_not,omitempty"`

	// max vf num not in
	MaxVfNumNotIn []int32 `json:"max_vf_num_not_in,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// mtu
	Mtu *int32 `json:"mtu,omitempty"`

	// mtu gt
	MtuGt *int32 `json:"mtu_gt,omitempty"`

	// mtu gte
	MtuGte *int32 `json:"mtu_gte,omitempty"`

	// mtu in
	MtuIn []int32 `json:"mtu_in,omitempty"`

	// mtu lt
	MtuLt *int32 `json:"mtu_lt,omitempty"`

	// mtu lte
	MtuLte *int32 `json:"mtu_lte,omitempty"`

	// mtu not
	MtuNot *int32 `json:"mtu_not,omitempty"`

	// mtu not in
	MtuNotIn []int32 `json:"mtu_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nic uuid
	NicUUID *string `json:"nic_uuid,omitempty"`

	// nic uuid contains
	NicUUIDContains *string `json:"nic_uuid_contains,omitempty"`

	// nic uuid ends with
	NicUUIDEndsWith *string `json:"nic_uuid_ends_with,omitempty"`

	// nic uuid gt
	NicUUIDGt *string `json:"nic_uuid_gt,omitempty"`

	// nic uuid gte
	NicUUIDGte *string `json:"nic_uuid_gte,omitempty"`

	// nic uuid in
	NicUUIDIn []string `json:"nic_uuid_in,omitempty"`

	// nic uuid lt
	NicUUIDLt *string `json:"nic_uuid_lt,omitempty"`

	// nic uuid lte
	NicUUIDLte *string `json:"nic_uuid_lte,omitempty"`

	// nic uuid not
	NicUUIDNot *string `json:"nic_uuid_not,omitempty"`

	// nic uuid not contains
	NicUUIDNotContains *string `json:"nic_uuid_not_contains,omitempty"`

	// nic uuid not ends with
	NicUUIDNotEndsWith *string `json:"nic_uuid_not_ends_with,omitempty"`

	// nic uuid not in
	NicUUIDNotIn []string `json:"nic_uuid_not_in,omitempty"`

	// nic uuid not starts with
	NicUUIDNotStartsWith *string `json:"nic_uuid_not_starts_with,omitempty"`

	// nic uuid starts with
	NicUUIDStartsWith *string `json:"nic_uuid_starts_with,omitempty"`

	// physical
	Physical *bool `json:"physical,omitempty"`

	// physical not
	PhysicalNot *bool `json:"physical_not,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// rdma enabled not
	RdmaEnabledNot *bool `json:"rdma_enabled_not,omitempty"`

	// running
	Running *bool `json:"running,omitempty"`

	// running not
	RunningNot *bool `json:"running_not,omitempty"`

	// speed
	Speed *int64 `json:"speed,omitempty"`

	// speed gt
	SpeedGt *int64 `json:"speed_gt,omitempty"`

	// speed gte
	SpeedGte *int64 `json:"speed_gte,omitempty"`

	// speed in
	SpeedIn []int64 `json:"speed_in,omitempty"`

	// speed lt
	SpeedLt *int64 `json:"speed_lt,omitempty"`

	// speed lte
	SpeedLte *int64 `json:"speed_lte,omitempty"`

	// speed not
	SpeedNot *int64 `json:"speed_not,omitempty"`

	// speed not in
	SpeedNotIn []int64 `json:"speed_not_in,omitempty"`

	// subnet mask
	SubnetMask *string `json:"subnet_mask,omitempty"`

	// subnet mask contains
	SubnetMaskContains *string `json:"subnet_mask_contains,omitempty"`

	// subnet mask ends with
	SubnetMaskEndsWith *string `json:"subnet_mask_ends_with,omitempty"`

	// subnet mask gt
	SubnetMaskGt *string `json:"subnet_mask_gt,omitempty"`

	// subnet mask gte
	SubnetMaskGte *string `json:"subnet_mask_gte,omitempty"`

	// subnet mask in
	SubnetMaskIn []string `json:"subnet_mask_in,omitempty"`

	// subnet mask lt
	SubnetMaskLt *string `json:"subnet_mask_lt,omitempty"`

	// subnet mask lte
	SubnetMaskLte *string `json:"subnet_mask_lte,omitempty"`

	// subnet mask not
	SubnetMaskNot *string `json:"subnet_mask_not,omitempty"`

	// subnet mask not contains
	SubnetMaskNotContains *string `json:"subnet_mask_not_contains,omitempty"`

	// subnet mask not ends with
	SubnetMaskNotEndsWith *string `json:"subnet_mask_not_ends_with,omitempty"`

	// subnet mask not in
	SubnetMaskNotIn []string `json:"subnet_mask_not_in,omitempty"`

	// subnet mask not starts with
	SubnetMaskNotStartsWith *string `json:"subnet_mask_not_starts_with,omitempty"`

	// subnet mask starts with
	SubnetMaskStartsWith *string `json:"subnet_mask_starts_with,omitempty"`

	// total vf num
	TotalVfNum *int32 `json:"total_vf_num,omitempty"`

	// total vf num gt
	TotalVfNumGt *int32 `json:"total_vf_num_gt,omitempty"`

	// total vf num gte
	TotalVfNumGte *int32 `json:"total_vf_num_gte,omitempty"`

	// total vf num in
	TotalVfNumIn []int32 `json:"total_vf_num_in,omitempty"`

	// total vf num lt
	TotalVfNumLt *int32 `json:"total_vf_num_lt,omitempty"`

	// total vf num lte
	TotalVfNumLte *int32 `json:"total_vf_num_lte,omitempty"`

	// total vf num not
	TotalVfNumNot *int32 `json:"total_vf_num_not,omitempty"`

	// total vf num not in
	TotalVfNumNotIn []int32 `json:"total_vf_num_not_in,omitempty"`

	// type
	Type *NetworkType `json:"type,omitempty"`

	// type in
	TypeIn []NetworkType `json:"type_in,omitempty"`

	// type not
	TypeNot *NetworkType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []NetworkType `json:"type_not_in,omitempty"`

	// up
	Up *bool `json:"up,omitempty"`

	// up not
	UpNot *bool `json:"up_not,omitempty"`

	// used vf num
	UsedVfNum *int32 `json:"used_vf_num,omitempty"`

	// used vf num gt
	UsedVfNumGt *int32 `json:"used_vf_num_gt,omitempty"`

	// used vf num gte
	UsedVfNumGte *int32 `json:"used_vf_num_gte,omitempty"`

	// used vf num in
	UsedVfNumIn []int32 `json:"used_vf_num_in,omitempty"`

	// used vf num lt
	UsedVfNumLt *int32 `json:"used_vf_num_lt,omitempty"`

	// used vf num lte
	UsedVfNumLte *int32 `json:"used_vf_num_lte,omitempty"`

	// used vf num not
	UsedVfNumNot *int32 `json:"used_vf_num_not,omitempty"`

	// used vf num not in
	UsedVfNumNotIn []int32 `json:"used_vf_num_not_in,omitempty"`

	// user usage
	UserUsage *NicUserUsage `json:"user_usage,omitempty"`

	// user usage in
	UserUsageIn []NicUserUsage `json:"user_usage_in,omitempty"`

	// user usage not
	UserUsageNot *NicUserUsage `json:"user_usage_not,omitempty"`

	// user usage not in
	UserUsageNotIn []NicUserUsage `json:"user_usage_not_in,omitempty"`

	// vds
	Vds *VdsWhereInput `json:"vds,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`

	MarshalOpts *NicWhereInputMarshalOpts `json:"-"`
}

type NicWhereInputMarshalOpts struct {
	Driver_Explicit_Null_When_Empty bool

	DriverContains_Explicit_Null_When_Empty bool

	DriverEndsWith_Explicit_Null_When_Empty bool

	DriverGt_Explicit_Null_When_Empty bool

	DriverGte_Explicit_Null_When_Empty bool

	DriverLt_Explicit_Null_When_Empty bool

	DriverLte_Explicit_Null_When_Empty bool

	DriverNot_Explicit_Null_When_Empty bool

	DriverNotContains_Explicit_Null_When_Empty bool

	DriverNotEndsWith_Explicit_Null_When_Empty bool

	DriverNotStartsWith_Explicit_Null_When_Empty bool

	DriverStartsWith_Explicit_Null_When_Empty bool

	DriverState_Explicit_Null_When_Empty bool

	DriverStateNot_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	GatewayIP_Explicit_Null_When_Empty bool

	GatewayIPContains_Explicit_Null_When_Empty bool

	GatewayIPEndsWith_Explicit_Null_When_Empty bool

	GatewayIPGt_Explicit_Null_When_Empty bool

	GatewayIPGte_Explicit_Null_When_Empty bool

	GatewayIPLt_Explicit_Null_When_Empty bool

	GatewayIPLte_Explicit_Null_When_Empty bool

	GatewayIPNot_Explicit_Null_When_Empty bool

	GatewayIPNotContains_Explicit_Null_When_Empty bool

	GatewayIPNotEndsWith_Explicit_Null_When_Empty bool

	GatewayIPNotStartsWith_Explicit_Null_When_Empty bool

	GatewayIPStartsWith_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	Ibdev_Explicit_Null_When_Empty bool

	IbdevContains_Explicit_Null_When_Empty bool

	IbdevEndsWith_Explicit_Null_When_Empty bool

	IbdevGt_Explicit_Null_When_Empty bool

	IbdevGte_Explicit_Null_When_Empty bool

	IbdevLt_Explicit_Null_When_Empty bool

	IbdevLte_Explicit_Null_When_Empty bool

	IbdevNot_Explicit_Null_When_Empty bool

	IbdevNotContains_Explicit_Null_When_Empty bool

	IbdevNotEndsWith_Explicit_Null_When_Empty bool

	IbdevNotStartsWith_Explicit_Null_When_Empty bool

	IbdevStartsWith_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IommuStatus_Explicit_Null_When_Empty bool

	IommuStatusNot_Explicit_Null_When_Empty bool

	IPAddress_Explicit_Null_When_Empty bool

	IPAddressContains_Explicit_Null_When_Empty bool

	IPAddressEndsWith_Explicit_Null_When_Empty bool

	IPAddressGt_Explicit_Null_When_Empty bool

	IPAddressGte_Explicit_Null_When_Empty bool

	IPAddressLt_Explicit_Null_When_Empty bool

	IPAddressLte_Explicit_Null_When_Empty bool

	IPAddressNot_Explicit_Null_When_Empty bool

	IPAddressNotContains_Explicit_Null_When_Empty bool

	IPAddressNotEndsWith_Explicit_Null_When_Empty bool

	IPAddressNotStartsWith_Explicit_Null_When_Empty bool

	IPAddressStartsWith_Explicit_Null_When_Empty bool

	IsSriov_Explicit_Null_When_Empty bool

	IsSriovNot_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	MacAddress_Explicit_Null_When_Empty bool

	MacAddressContains_Explicit_Null_When_Empty bool

	MacAddressEndsWith_Explicit_Null_When_Empty bool

	MacAddressGt_Explicit_Null_When_Empty bool

	MacAddressGte_Explicit_Null_When_Empty bool

	MacAddressLt_Explicit_Null_When_Empty bool

	MacAddressLte_Explicit_Null_When_Empty bool

	MacAddressNot_Explicit_Null_When_Empty bool

	MacAddressNotContains_Explicit_Null_When_Empty bool

	MacAddressNotEndsWith_Explicit_Null_When_Empty bool

	MacAddressNotStartsWith_Explicit_Null_When_Empty bool

	MacAddressStartsWith_Explicit_Null_When_Empty bool

	MaxVfNum_Explicit_Null_When_Empty bool

	MaxVfNumGt_Explicit_Null_When_Empty bool

	MaxVfNumGte_Explicit_Null_When_Empty bool

	MaxVfNumLt_Explicit_Null_When_Empty bool

	MaxVfNumLte_Explicit_Null_When_Empty bool

	MaxVfNumNot_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	ModelContains_Explicit_Null_When_Empty bool

	ModelEndsWith_Explicit_Null_When_Empty bool

	ModelGt_Explicit_Null_When_Empty bool

	ModelGte_Explicit_Null_When_Empty bool

	ModelLt_Explicit_Null_When_Empty bool

	ModelLte_Explicit_Null_When_Empty bool

	ModelNot_Explicit_Null_When_Empty bool

	ModelNotContains_Explicit_Null_When_Empty bool

	ModelNotEndsWith_Explicit_Null_When_Empty bool

	ModelNotStartsWith_Explicit_Null_When_Empty bool

	ModelStartsWith_Explicit_Null_When_Empty bool

	Mtu_Explicit_Null_When_Empty bool

	MtuGt_Explicit_Null_When_Empty bool

	MtuGte_Explicit_Null_When_Empty bool

	MtuLt_Explicit_Null_When_Empty bool

	MtuLte_Explicit_Null_When_Empty bool

	MtuNot_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NicUUID_Explicit_Null_When_Empty bool

	NicUUIDContains_Explicit_Null_When_Empty bool

	NicUUIDEndsWith_Explicit_Null_When_Empty bool

	NicUUIDGt_Explicit_Null_When_Empty bool

	NicUUIDGte_Explicit_Null_When_Empty bool

	NicUUIDLt_Explicit_Null_When_Empty bool

	NicUUIDLte_Explicit_Null_When_Empty bool

	NicUUIDNot_Explicit_Null_When_Empty bool

	NicUUIDNotContains_Explicit_Null_When_Empty bool

	NicUUIDNotEndsWith_Explicit_Null_When_Empty bool

	NicUUIDNotStartsWith_Explicit_Null_When_Empty bool

	NicUUIDStartsWith_Explicit_Null_When_Empty bool

	Physical_Explicit_Null_When_Empty bool

	PhysicalNot_Explicit_Null_When_Empty bool

	RdmaEnabled_Explicit_Null_When_Empty bool

	RdmaEnabledNot_Explicit_Null_When_Empty bool

	Running_Explicit_Null_When_Empty bool

	RunningNot_Explicit_Null_When_Empty bool

	Speed_Explicit_Null_When_Empty bool

	SpeedGt_Explicit_Null_When_Empty bool

	SpeedGte_Explicit_Null_When_Empty bool

	SpeedLt_Explicit_Null_When_Empty bool

	SpeedLte_Explicit_Null_When_Empty bool

	SpeedNot_Explicit_Null_When_Empty bool

	SubnetMask_Explicit_Null_When_Empty bool

	SubnetMaskContains_Explicit_Null_When_Empty bool

	SubnetMaskEndsWith_Explicit_Null_When_Empty bool

	SubnetMaskGt_Explicit_Null_When_Empty bool

	SubnetMaskGte_Explicit_Null_When_Empty bool

	SubnetMaskLt_Explicit_Null_When_Empty bool

	SubnetMaskLte_Explicit_Null_When_Empty bool

	SubnetMaskNot_Explicit_Null_When_Empty bool

	SubnetMaskNotContains_Explicit_Null_When_Empty bool

	SubnetMaskNotEndsWith_Explicit_Null_When_Empty bool

	SubnetMaskNotStartsWith_Explicit_Null_When_Empty bool

	SubnetMaskStartsWith_Explicit_Null_When_Empty bool

	TotalVfNum_Explicit_Null_When_Empty bool

	TotalVfNumGt_Explicit_Null_When_Empty bool

	TotalVfNumGte_Explicit_Null_When_Empty bool

	TotalVfNumLt_Explicit_Null_When_Empty bool

	TotalVfNumLte_Explicit_Null_When_Empty bool

	TotalVfNumNot_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	Up_Explicit_Null_When_Empty bool

	UpNot_Explicit_Null_When_Empty bool

	UsedVfNum_Explicit_Null_When_Empty bool

	UsedVfNumGt_Explicit_Null_When_Empty bool

	UsedVfNumGte_Explicit_Null_When_Empty bool

	UsedVfNumLt_Explicit_Null_When_Empty bool

	UsedVfNumLte_Explicit_Null_When_Empty bool

	UsedVfNumNot_Explicit_Null_When_Empty bool

	UserUsage_Explicit_Null_When_Empty bool

	UserUsageNot_Explicit_Null_When_Empty bool

	Vds_Explicit_Null_When_Empty bool

	VmsEvery_Explicit_Null_When_Empty bool

	VmsNone_Explicit_Null_When_Empty bool

	VmsSome_Explicit_Null_When_Empty bool
}

func (m NicWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field driver
	if m.Driver != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver\":")
		bytes, err := swag.WriteJSON(m.Driver)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Driver_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver\":null")
		first = false
	}

	// handle nullable field driver_contains
	if m.DriverContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_contains\":")
		bytes, err := swag.WriteJSON(m.DriverContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_contains\":null")
		first = false
	}

	// handle nullable field driver_ends_with
	if m.DriverEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_ends_with\":")
		bytes, err := swag.WriteJSON(m.DriverEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_ends_with\":null")
		first = false
	}

	// handle nullable field driver_gt
	if m.DriverGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_gt\":")
		bytes, err := swag.WriteJSON(m.DriverGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_gt\":null")
		first = false
	}

	// handle nullable field driver_gte
	if m.DriverGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_gte\":")
		bytes, err := swag.WriteJSON(m.DriverGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_gte\":null")
		first = false
	}

	// handle non nullable field driver_in with omitempty
	if swag.IsZero(m.DriverIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_in\":")
		bytes, err := swag.WriteJSON(m.DriverIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field driver_lt
	if m.DriverLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_lt\":")
		bytes, err := swag.WriteJSON(m.DriverLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_lt\":null")
		first = false
	}

	// handle nullable field driver_lte
	if m.DriverLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_lte\":")
		bytes, err := swag.WriteJSON(m.DriverLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_lte\":null")
		first = false
	}

	// handle nullable field driver_not
	if m.DriverNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not\":")
		bytes, err := swag.WriteJSON(m.DriverNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not\":null")
		first = false
	}

	// handle nullable field driver_not_contains
	if m.DriverNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_contains\":")
		bytes, err := swag.WriteJSON(m.DriverNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_contains\":null")
		first = false
	}

	// handle nullable field driver_not_ends_with
	if m.DriverNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DriverNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_ends_with\":null")
		first = false
	}

	// handle non nullable field driver_not_in with omitempty
	if swag.IsZero(m.DriverNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_in\":")
		bytes, err := swag.WriteJSON(m.DriverNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field driver_not_starts_with
	if m.DriverNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DriverNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_not_starts_with\":null")
		first = false
	}

	// handle nullable field driver_starts_with
	if m.DriverStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_starts_with\":")
		bytes, err := swag.WriteJSON(m.DriverStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_starts_with\":null")
		first = false
	}

	// handle nullable field driver_state
	if m.DriverState != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state\":")
		bytes, err := swag.WriteJSON(m.DriverState)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverState_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state\":null")
		first = false
	}

	// handle non nullable field driver_state_in with omitempty
	if swag.IsZero(m.DriverStateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state_in\":")
		bytes, err := swag.WriteJSON(m.DriverStateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field driver_state_not
	if m.DriverStateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state_not\":")
		bytes, err := swag.WriteJSON(m.DriverStateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DriverStateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state_not\":null")
		first = false
	}

	// handle non nullable field driver_state_not_in with omitempty
	if swag.IsZero(m.DriverStateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"driver_state_not_in\":")
		bytes, err := swag.WriteJSON(m.DriverStateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip
	if m.GatewayIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip\":")
		bytes, err := swag.WriteJSON(m.GatewayIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip\":null")
		first = false
	}

	// handle nullable field gateway_ip_contains
	if m.GatewayIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_contains\":")
		bytes, err := swag.WriteJSON(m.GatewayIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_contains\":null")
		first = false
	}

	// handle nullable field gateway_ip_ends_with
	if m.GatewayIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_ends_with\":null")
		first = false
	}

	// handle nullable field gateway_ip_gt
	if m.GatewayIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gt\":")
		bytes, err := swag.WriteJSON(m.GatewayIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gt\":null")
		first = false
	}

	// handle nullable field gateway_ip_gte
	if m.GatewayIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gte\":")
		bytes, err := swag.WriteJSON(m.GatewayIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gte\":null")
		first = false
	}

	// handle non nullable field gateway_ip_in with omitempty
	if swag.IsZero(m.GatewayIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_in\":")
		bytes, err := swag.WriteJSON(m.GatewayIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip_lt
	if m.GatewayIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lt\":")
		bytes, err := swag.WriteJSON(m.GatewayIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lt\":null")
		first = false
	}

	// handle nullable field gateway_ip_lte
	if m.GatewayIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lte\":")
		bytes, err := swag.WriteJSON(m.GatewayIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lte\":null")
		first = false
	}

	// handle nullable field gateway_ip_not
	if m.GatewayIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not\":null")
		first = false
	}

	// handle nullable field gateway_ip_not_contains
	if m.GatewayIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_contains\":null")
		first = false
	}

	// handle nullable field gateway_ip_not_ends_with
	if m.GatewayIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field gateway_ip_not_in with omitempty
	if swag.IsZero(m.GatewayIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip_not_starts_with
	if m.GatewayIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field gateway_ip_starts_with
	if m.GatewayIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_starts_with\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field ibdev
	if m.Ibdev != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev\":")
		bytes, err := swag.WriteJSON(m.Ibdev)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ibdev_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev\":null")
		first = false
	}

	// handle nullable field ibdev_contains
	if m.IbdevContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_contains\":")
		bytes, err := swag.WriteJSON(m.IbdevContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_contains\":null")
		first = false
	}

	// handle nullable field ibdev_ends_with
	if m.IbdevEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_ends_with\":")
		bytes, err := swag.WriteJSON(m.IbdevEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_ends_with\":null")
		first = false
	}

	// handle nullable field ibdev_gt
	if m.IbdevGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_gt\":")
		bytes, err := swag.WriteJSON(m.IbdevGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_gt\":null")
		first = false
	}

	// handle nullable field ibdev_gte
	if m.IbdevGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_gte\":")
		bytes, err := swag.WriteJSON(m.IbdevGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_gte\":null")
		first = false
	}

	// handle non nullable field ibdev_in with omitempty
	if swag.IsZero(m.IbdevIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_in\":")
		bytes, err := swag.WriteJSON(m.IbdevIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ibdev_lt
	if m.IbdevLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_lt\":")
		bytes, err := swag.WriteJSON(m.IbdevLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_lt\":null")
		first = false
	}

	// handle nullable field ibdev_lte
	if m.IbdevLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_lte\":")
		bytes, err := swag.WriteJSON(m.IbdevLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_lte\":null")
		first = false
	}

	// handle nullable field ibdev_not
	if m.IbdevNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not\":")
		bytes, err := swag.WriteJSON(m.IbdevNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not\":null")
		first = false
	}

	// handle nullable field ibdev_not_contains
	if m.IbdevNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_contains\":")
		bytes, err := swag.WriteJSON(m.IbdevNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_contains\":null")
		first = false
	}

	// handle nullable field ibdev_not_ends_with
	if m.IbdevNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IbdevNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_ends_with\":null")
		first = false
	}

	// handle non nullable field ibdev_not_in with omitempty
	if swag.IsZero(m.IbdevNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_in\":")
		bytes, err := swag.WriteJSON(m.IbdevNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ibdev_not_starts_with
	if m.IbdevNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IbdevNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_not_starts_with\":null")
		first = false
	}

	// handle nullable field ibdev_starts_with
	if m.IbdevStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_starts_with\":")
		bytes, err := swag.WriteJSON(m.IbdevStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IbdevStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ibdev_starts_with\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field iommu_status
	if m.IommuStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status\":")
		bytes, err := swag.WriteJSON(m.IommuStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IommuStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status\":null")
		first = false
	}

	// handle non nullable field iommu_status_in with omitempty
	if swag.IsZero(m.IommuStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_in\":")
		bytes, err := swag.WriteJSON(m.IommuStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iommu_status_not
	if m.IommuStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not\":")
		bytes, err := swag.WriteJSON(m.IommuStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IommuStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not\":null")
		first = false
	}

	// handle non nullable field iommu_status_not_in with omitempty
	if swag.IsZero(m.IommuStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iommu_status_not_in\":")
		bytes, err := swag.WriteJSON(m.IommuStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_address
	if m.IPAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":")
		bytes, err := swag.WriteJSON(m.IPAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":null")
		first = false
	}

	// handle nullable field ip_address_contains
	if m.IPAddressContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_contains\":")
		bytes, err := swag.WriteJSON(m.IPAddressContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_contains\":null")
		first = false
	}

	// handle nullable field ip_address_ends_with
	if m.IPAddressEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_ends_with\":null")
		first = false
	}

	// handle nullable field ip_address_gt
	if m.IPAddressGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gt\":")
		bytes, err := swag.WriteJSON(m.IPAddressGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gt\":null")
		first = false
	}

	// handle nullable field ip_address_gte
	if m.IPAddressGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gte\":")
		bytes, err := swag.WriteJSON(m.IPAddressGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gte\":null")
		first = false
	}

	// handle non nullable field ip_address_in with omitempty
	if swag.IsZero(m.IPAddressIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_in\":")
		bytes, err := swag.WriteJSON(m.IPAddressIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_address_lt
	if m.IPAddressLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lt\":")
		bytes, err := swag.WriteJSON(m.IPAddressLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lt\":null")
		first = false
	}

	// handle nullable field ip_address_lte
	if m.IPAddressLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lte\":")
		bytes, err := swag.WriteJSON(m.IPAddressLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lte\":null")
		first = false
	}

	// handle nullable field ip_address_not
	if m.IPAddressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not\":")
		bytes, err := swag.WriteJSON(m.IPAddressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not\":null")
		first = false
	}

	// handle nullable field ip_address_not_contains
	if m.IPAddressNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_contains\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_contains\":null")
		first = false
	}

	// handle nullable field ip_address_not_ends_with
	if m.IPAddressNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_ends_with\":null")
		first = false
	}

	// handle non nullable field ip_address_not_in with omitempty
	if swag.IsZero(m.IPAddressNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_in\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_address_not_starts_with
	if m.IPAddressNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_starts_with\":null")
		first = false
	}

	// handle nullable field ip_address_starts_with
	if m.IPAddressStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_starts_with\":null")
		first = false
	}

	// handle nullable field is_sriov
	if m.IsSriov != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_sriov\":")
		bytes, err := swag.WriteJSON(m.IsSriov)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsSriov_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_sriov\":null")
		first = false
	}

	// handle nullable field is_sriov_not
	if m.IsSriovNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_sriov_not\":")
		bytes, err := swag.WriteJSON(m.IsSriovNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsSriovNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_sriov_not\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field mac_address
	if m.MacAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":")
		bytes, err := swag.WriteJSON(m.MacAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":null")
		first = false
	}

	// handle nullable field mac_address_contains
	if m.MacAddressContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_contains\":")
		bytes, err := swag.WriteJSON(m.MacAddressContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_contains\":null")
		first = false
	}

	// handle nullable field mac_address_ends_with
	if m.MacAddressEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_ends_with\":")
		bytes, err := swag.WriteJSON(m.MacAddressEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_ends_with\":null")
		first = false
	}

	// handle nullable field mac_address_gt
	if m.MacAddressGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_gt\":")
		bytes, err := swag.WriteJSON(m.MacAddressGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_gt\":null")
		first = false
	}

	// handle nullable field mac_address_gte
	if m.MacAddressGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_gte\":")
		bytes, err := swag.WriteJSON(m.MacAddressGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_gte\":null")
		first = false
	}

	// handle non nullable field mac_address_in with omitempty
	if swag.IsZero(m.MacAddressIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_in\":")
		bytes, err := swag.WriteJSON(m.MacAddressIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mac_address_lt
	if m.MacAddressLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_lt\":")
		bytes, err := swag.WriteJSON(m.MacAddressLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_lt\":null")
		first = false
	}

	// handle nullable field mac_address_lte
	if m.MacAddressLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_lte\":")
		bytes, err := swag.WriteJSON(m.MacAddressLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_lte\":null")
		first = false
	}

	// handle nullable field mac_address_not
	if m.MacAddressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not\":")
		bytes, err := swag.WriteJSON(m.MacAddressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not\":null")
		first = false
	}

	// handle nullable field mac_address_not_contains
	if m.MacAddressNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_contains\":")
		bytes, err := swag.WriteJSON(m.MacAddressNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_contains\":null")
		first = false
	}

	// handle nullable field mac_address_not_ends_with
	if m.MacAddressNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MacAddressNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_ends_with\":null")
		first = false
	}

	// handle non nullable field mac_address_not_in with omitempty
	if swag.IsZero(m.MacAddressNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_in\":")
		bytes, err := swag.WriteJSON(m.MacAddressNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mac_address_not_starts_with
	if m.MacAddressNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MacAddressNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_not_starts_with\":null")
		first = false
	}

	// handle nullable field mac_address_starts_with
	if m.MacAddressStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_starts_with\":")
		bytes, err := swag.WriteJSON(m.MacAddressStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddressStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address_starts_with\":null")
		first = false
	}

	// handle nullable field max_vf_num
	if m.MaxVfNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num\":")
		bytes, err := swag.WriteJSON(m.MaxVfNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num\":null")
		first = false
	}

	// handle nullable field max_vf_num_gt
	if m.MaxVfNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_gt\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_gt\":null")
		first = false
	}

	// handle nullable field max_vf_num_gte
	if m.MaxVfNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_gte\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_gte\":null")
		first = false
	}

	// handle non nullable field max_vf_num_in with omitempty
	if swag.IsZero(m.MaxVfNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_in\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_vf_num_lt
	if m.MaxVfNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_lt\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_lt\":null")
		first = false
	}

	// handle nullable field max_vf_num_lte
	if m.MaxVfNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_lte\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_lte\":null")
		first = false
	}

	// handle nullable field max_vf_num_not
	if m.MaxVfNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_not\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxVfNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_not\":null")
		first = false
	}

	// handle non nullable field max_vf_num_not_in with omitempty
	if swag.IsZero(m.MaxVfNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_vf_num_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxVfNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field model_contains
	if m.ModelContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":")
		bytes, err := swag.WriteJSON(m.ModelContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":null")
		first = false
	}

	// handle nullable field model_ends_with
	if m.ModelEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":null")
		first = false
	}

	// handle nullable field model_gt
	if m.ModelGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":")
		bytes, err := swag.WriteJSON(m.ModelGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":null")
		first = false
	}

	// handle nullable field model_gte
	if m.ModelGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":")
		bytes, err := swag.WriteJSON(m.ModelGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":null")
		first = false
	}

	// handle non nullable field model_in with omitempty
	if swag.IsZero(m.ModelIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_in\":")
		bytes, err := swag.WriteJSON(m.ModelIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_lt
	if m.ModelLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":")
		bytes, err := swag.WriteJSON(m.ModelLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":null")
		first = false
	}

	// handle nullable field model_lte
	if m.ModelLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":")
		bytes, err := swag.WriteJSON(m.ModelLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":null")
		first = false
	}

	// handle nullable field model_not
	if m.ModelNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":")
		bytes, err := swag.WriteJSON(m.ModelNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":null")
		first = false
	}

	// handle nullable field model_not_contains
	if m.ModelNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":")
		bytes, err := swag.WriteJSON(m.ModelNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":null")
		first = false
	}

	// handle nullable field model_not_ends_with
	if m.ModelNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":null")
		first = false
	}

	// handle non nullable field model_not_in with omitempty
	if swag.IsZero(m.ModelNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_in\":")
		bytes, err := swag.WriteJSON(m.ModelNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_not_starts_with
	if m.ModelNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":null")
		first = false
	}

	// handle nullable field model_starts_with
	if m.ModelStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":null")
		first = false
	}

	// handle nullable field mtu
	if m.Mtu != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":")
		bytes, err := swag.WriteJSON(m.Mtu)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mtu_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":null")
		first = false
	}

	// handle nullable field mtu_gt
	if m.MtuGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gt\":")
		bytes, err := swag.WriteJSON(m.MtuGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gt\":null")
		first = false
	}

	// handle nullable field mtu_gte
	if m.MtuGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gte\":")
		bytes, err := swag.WriteJSON(m.MtuGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gte\":null")
		first = false
	}

	// handle non nullable field mtu_in with omitempty
	if swag.IsZero(m.MtuIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_in\":")
		bytes, err := swag.WriteJSON(m.MtuIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mtu_lt
	if m.MtuLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lt\":")
		bytes, err := swag.WriteJSON(m.MtuLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lt\":null")
		first = false
	}

	// handle nullable field mtu_lte
	if m.MtuLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lte\":")
		bytes, err := swag.WriteJSON(m.MtuLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lte\":null")
		first = false
	}

	// handle nullable field mtu_not
	if m.MtuNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not\":")
		bytes, err := swag.WriteJSON(m.MtuNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not\":null")
		first = false
	}

	// handle non nullable field mtu_not_in with omitempty
	if swag.IsZero(m.MtuNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not_in\":")
		bytes, err := swag.WriteJSON(m.MtuNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field nic_uuid
	if m.NicUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid\":")
		bytes, err := swag.WriteJSON(m.NicUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid\":null")
		first = false
	}

	// handle nullable field nic_uuid_contains
	if m.NicUUIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_contains\":")
		bytes, err := swag.WriteJSON(m.NicUUIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_contains\":null")
		first = false
	}

	// handle nullable field nic_uuid_ends_with
	if m.NicUUIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_ends_with\":")
		bytes, err := swag.WriteJSON(m.NicUUIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_ends_with\":null")
		first = false
	}

	// handle nullable field nic_uuid_gt
	if m.NicUUIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_gt\":")
		bytes, err := swag.WriteJSON(m.NicUUIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_gt\":null")
		first = false
	}

	// handle nullable field nic_uuid_gte
	if m.NicUUIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_gte\":")
		bytes, err := swag.WriteJSON(m.NicUUIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_gte\":null")
		first = false
	}

	// handle non nullable field nic_uuid_in with omitempty
	if swag.IsZero(m.NicUUIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_in\":")
		bytes, err := swag.WriteJSON(m.NicUUIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nic_uuid_lt
	if m.NicUUIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_lt\":")
		bytes, err := swag.WriteJSON(m.NicUUIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_lt\":null")
		first = false
	}

	// handle nullable field nic_uuid_lte
	if m.NicUUIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_lte\":")
		bytes, err := swag.WriteJSON(m.NicUUIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_lte\":null")
		first = false
	}

	// handle nullable field nic_uuid_not
	if m.NicUUIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not\":")
		bytes, err := swag.WriteJSON(m.NicUUIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not\":null")
		first = false
	}

	// handle nullable field nic_uuid_not_contains
	if m.NicUUIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_contains\":")
		bytes, err := swag.WriteJSON(m.NicUUIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_contains\":null")
		first = false
	}

	// handle nullable field nic_uuid_not_ends_with
	if m.NicUUIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NicUUIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_ends_with\":null")
		first = false
	}

	// handle non nullable field nic_uuid_not_in with omitempty
	if swag.IsZero(m.NicUUIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_in\":")
		bytes, err := swag.WriteJSON(m.NicUUIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nic_uuid_not_starts_with
	if m.NicUUIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NicUUIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_not_starts_with\":null")
		first = false
	}

	// handle nullable field nic_uuid_starts_with
	if m.NicUUIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_starts_with\":")
		bytes, err := swag.WriteJSON(m.NicUUIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicUUIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_uuid_starts_with\":null")
		first = false
	}

	// handle nullable field physical
	if m.Physical != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical\":")
		bytes, err := swag.WriteJSON(m.Physical)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Physical_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical\":null")
		first = false
	}

	// handle nullable field physical_not
	if m.PhysicalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_not\":")
		bytes, err := swag.WriteJSON(m.PhysicalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_not\":null")
		first = false
	}

	// handle nullable field rdma_enabled
	if m.RdmaEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":")
		bytes, err := swag.WriteJSON(m.RdmaEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RdmaEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":null")
		first = false
	}

	// handle nullable field rdma_enabled_not
	if m.RdmaEnabledNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled_not\":")
		bytes, err := swag.WriteJSON(m.RdmaEnabledNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RdmaEnabledNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled_not\":null")
		first = false
	}

	// handle nullable field running
	if m.Running != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running\":")
		bytes, err := swag.WriteJSON(m.Running)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Running_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running\":null")
		first = false
	}

	// handle nullable field running_not
	if m.RunningNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_not\":")
		bytes, err := swag.WriteJSON(m.RunningNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RunningNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_not\":null")
		first = false
	}

	// handle nullable field speed
	if m.Speed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed\":")
		bytes, err := swag.WriteJSON(m.Speed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Speed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed\":null")
		first = false
	}

	// handle nullable field speed_gt
	if m.SpeedGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_gt\":")
		bytes, err := swag.WriteJSON(m.SpeedGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SpeedGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_gt\":null")
		first = false
	}

	// handle nullable field speed_gte
	if m.SpeedGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_gte\":")
		bytes, err := swag.WriteJSON(m.SpeedGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SpeedGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_gte\":null")
		first = false
	}

	// handle non nullable field speed_in with omitempty
	if swag.IsZero(m.SpeedIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_in\":")
		bytes, err := swag.WriteJSON(m.SpeedIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field speed_lt
	if m.SpeedLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_lt\":")
		bytes, err := swag.WriteJSON(m.SpeedLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SpeedLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_lt\":null")
		first = false
	}

	// handle nullable field speed_lte
	if m.SpeedLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_lte\":")
		bytes, err := swag.WriteJSON(m.SpeedLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SpeedLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_lte\":null")
		first = false
	}

	// handle nullable field speed_not
	if m.SpeedNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_not\":")
		bytes, err := swag.WriteJSON(m.SpeedNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SpeedNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_not\":null")
		first = false
	}

	// handle non nullable field speed_not_in with omitempty
	if swag.IsZero(m.SpeedNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed_not_in\":")
		bytes, err := swag.WriteJSON(m.SpeedNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnet_mask
	if m.SubnetMask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask\":")
		bytes, err := swag.WriteJSON(m.SubnetMask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask\":null")
		first = false
	}

	// handle nullable field subnet_mask_contains
	if m.SubnetMaskContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_contains\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_contains\":null")
		first = false
	}

	// handle nullable field subnet_mask_ends_with
	if m.SubnetMaskEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_ends_with\":null")
		first = false
	}

	// handle nullable field subnet_mask_gt
	if m.SubnetMaskGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_gt\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_gt\":null")
		first = false
	}

	// handle nullable field subnet_mask_gte
	if m.SubnetMaskGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_gte\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_gte\":null")
		first = false
	}

	// handle non nullable field subnet_mask_in with omitempty
	if swag.IsZero(m.SubnetMaskIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_in\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnet_mask_lt
	if m.SubnetMaskLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_lt\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_lt\":null")
		first = false
	}

	// handle nullable field subnet_mask_lte
	if m.SubnetMaskLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_lte\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_lte\":null")
		first = false
	}

	// handle nullable field subnet_mask_not
	if m.SubnetMaskNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not\":null")
		first = false
	}

	// handle nullable field subnet_mask_not_contains
	if m.SubnetMaskNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_contains\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_contains\":null")
		first = false
	}

	// handle nullable field subnet_mask_not_ends_with
	if m.SubnetMaskNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_ends_with\":null")
		first = false
	}

	// handle non nullable field subnet_mask_not_in with omitempty
	if swag.IsZero(m.SubnetMaskNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_in\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnet_mask_not_starts_with
	if m.SubnetMaskNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_not_starts_with\":null")
		first = false
	}

	// handle nullable field subnet_mask_starts_with
	if m.SubnetMaskStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubnetMaskStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMaskStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask_starts_with\":null")
		first = false
	}

	// handle nullable field total_vf_num
	if m.TotalVfNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num\":")
		bytes, err := swag.WriteJSON(m.TotalVfNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num\":null")
		first = false
	}

	// handle nullable field total_vf_num_gt
	if m.TotalVfNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gt\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gt\":null")
		first = false
	}

	// handle nullable field total_vf_num_gte
	if m.TotalVfNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gte\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_gte\":null")
		first = false
	}

	// handle non nullable field total_vf_num_in with omitempty
	if swag.IsZero(m.TotalVfNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_in\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_vf_num_lt
	if m.TotalVfNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lt\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lt\":null")
		first = false
	}

	// handle nullable field total_vf_num_lte
	if m.TotalVfNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lte\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_lte\":null")
		first = false
	}

	// handle nullable field total_vf_num_not
	if m.TotalVfNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalVfNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not\":null")
		first = false
	}

	// handle non nullable field total_vf_num_not_in with omitempty
	if swag.IsZero(m.TotalVfNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_vf_num_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalVfNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field up
	if m.Up != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up\":")
		bytes, err := swag.WriteJSON(m.Up)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Up_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up\":null")
		first = false
	}

	// handle nullable field up_not
	if m.UpNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up_not\":")
		bytes, err := swag.WriteJSON(m.UpNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up_not\":null")
		first = false
	}

	// handle nullable field used_vf_num
	if m.UsedVfNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num\":")
		bytes, err := swag.WriteJSON(m.UsedVfNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num\":null")
		first = false
	}

	// handle nullable field used_vf_num_gt
	if m.UsedVfNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gt\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gt\":null")
		first = false
	}

	// handle nullable field used_vf_num_gte
	if m.UsedVfNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gte\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_gte\":null")
		first = false
	}

	// handle non nullable field used_vf_num_in with omitempty
	if swag.IsZero(m.UsedVfNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_in\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_vf_num_lt
	if m.UsedVfNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lt\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lt\":null")
		first = false
	}

	// handle nullable field used_vf_num_lte
	if m.UsedVfNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lte\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_lte\":null")
		first = false
	}

	// handle nullable field used_vf_num_not
	if m.UsedVfNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedVfNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not\":null")
		first = false
	}

	// handle non nullable field used_vf_num_not_in with omitempty
	if swag.IsZero(m.UsedVfNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_vf_num_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedVfNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field user_usage
	if m.UserUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage\":")
		bytes, err := swag.WriteJSON(m.UserUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UserUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage\":null")
		first = false
	}

	// handle non nullable field user_usage_in with omitempty
	if swag.IsZero(m.UserUsageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_in\":")
		bytes, err := swag.WriteJSON(m.UserUsageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field user_usage_not
	if m.UserUsageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not\":")
		bytes, err := swag.WriteJSON(m.UserUsageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UserUsageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not\":null")
		first = false
	}

	// handle non nullable field user_usage_not_in with omitempty
	if swag.IsZero(m.UserUsageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user_usage_not_in\":")
		bytes, err := swag.WriteJSON(m.UserUsageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vds
	if m.Vds != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":")
		bytes, err := swag.WriteJSON(m.Vds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vds_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":null")
		first = false
	}

	// handle nullable field vms_every
	if m.VmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":")
		bytes, err := swag.WriteJSON(m.VmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":null")
		first = false
	}

	// handle nullable field vms_none
	if m.VmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":")
		bytes, err := swag.WriteJSON(m.VmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":null")
		first = false
	}

	// handle nullable field vms_some
	if m.VmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":")
		bytes, err := swag.WriteJSON(m.VmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nic where input
func (m *NicWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIommuStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NicWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) validateDriverState(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverState) { // not required
		return nil
	}

	if m.DriverState != nil {
		if err := m.DriverState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateDriverStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DriverStateIn); i++ {

		if err := m.DriverStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateDriverStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateNot) { // not required
		return nil
	}

	if m.DriverStateNot != nil {
		if err := m.DriverStateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateDriverStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DriverStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DriverStateNotIn); i++ {

		if err := m.DriverStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateIommuStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatus) { // not required
		return nil
	}

	if m.IommuStatus != nil {
		if err := m.IommuStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateIommuStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IommuStatusIn); i++ {

		if err := m.IommuStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateIommuStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusNot) { // not required
		return nil
	}

	if m.IommuStatusNot != nil {
		if err := m.IommuStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateIommuStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IommuStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IommuStatusNotIn); i++ {

		if err := m.IommuStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateUserUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsage) { // not required
		return nil
	}

	if m.UserUsage != nil {
		if err := m.UserUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateUserUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateUserUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNot) { // not required
		return nil
	}

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateUserUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) validateVds(formats strfmt.Registry) error {
	if swag.IsZero(m.Vds) { // not required
		return nil
	}

	if m.Vds != nil {
		if err := m.Vds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nic where input based on the context it is used
func (m *NicWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriverStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIommuStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NicWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverState(ctx context.Context, formats strfmt.Registry) error {

	if m.DriverState != nil {
		if err := m.DriverState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriverStateIn); i++ {

		if err := m.DriverStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.DriverStateNot != nil {
		if err := m.DriverStateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateDriverStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DriverStateNotIn); i++ {

		if err := m.DriverStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driver_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateIommuStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.IommuStatus != nil {
		if err := m.IommuStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateIommuStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IommuStatusIn); i++ {

		if err := m.IommuStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateIommuStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.IommuStatusNot != nil {
		if err := m.IommuStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateIommuStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IommuStatusNotIn); i++ {

		if err := m.IommuStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iommu_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsage != nil {
		if err := m.UserUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageIn); i++ {

		if err := m.UserUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsageNot != nil {
		if err := m.UserUsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateUserUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserUsageNotIn); i++ {

		if err := m.UserUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NicWhereInput) contextValidateVds(ctx context.Context, formats strfmt.Registry) error {

	if m.Vds != nil {
		if err := m.Vds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *NicWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NicWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NicWhereInput) UnmarshalBinary(b []byte) error {
	var res NicWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
