// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VlanWhereInput vlan where input
//
// swagger:model VlanWhereInput
type VlanWhereInput struct {

	// a n d
	AND []*VlanWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VlanWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VlanWhereInput `json:"OR,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// gateway ip
	GatewayIP *string `json:"gateway_ip,omitempty"`

	// gateway ip contains
	GatewayIPContains *string `json:"gateway_ip_contains,omitempty"`

	// gateway ip ends with
	GatewayIPEndsWith *string `json:"gateway_ip_ends_with,omitempty"`

	// gateway ip gt
	GatewayIPGt *string `json:"gateway_ip_gt,omitempty"`

	// gateway ip gte
	GatewayIPGte *string `json:"gateway_ip_gte,omitempty"`

	// gateway ip in
	GatewayIPIn []string `json:"gateway_ip_in,omitempty"`

	// gateway ip lt
	GatewayIPLt *string `json:"gateway_ip_lt,omitempty"`

	// gateway ip lte
	GatewayIPLte *string `json:"gateway_ip_lte,omitempty"`

	// gateway ip not
	GatewayIPNot *string `json:"gateway_ip_not,omitempty"`

	// gateway ip not contains
	GatewayIPNotContains *string `json:"gateway_ip_not_contains,omitempty"`

	// gateway ip not ends with
	GatewayIPNotEndsWith *string `json:"gateway_ip_not_ends_with,omitempty"`

	// gateway ip not in
	GatewayIPNotIn []string `json:"gateway_ip_not_in,omitempty"`

	// gateway ip not starts with
	GatewayIPNotStartsWith *string `json:"gateway_ip_not_starts_with,omitempty"`

	// gateway ip starts with
	GatewayIPStartsWith *string `json:"gateway_ip_starts_with,omitempty"`

	// gateway subnetmask
	GatewaySubnetmask *string `json:"gateway_subnetmask,omitempty"`

	// gateway subnetmask contains
	GatewaySubnetmaskContains *string `json:"gateway_subnetmask_contains,omitempty"`

	// gateway subnetmask ends with
	GatewaySubnetmaskEndsWith *string `json:"gateway_subnetmask_ends_with,omitempty"`

	// gateway subnetmask gt
	GatewaySubnetmaskGt *string `json:"gateway_subnetmask_gt,omitempty"`

	// gateway subnetmask gte
	GatewaySubnetmaskGte *string `json:"gateway_subnetmask_gte,omitempty"`

	// gateway subnetmask in
	GatewaySubnetmaskIn []string `json:"gateway_subnetmask_in,omitempty"`

	// gateway subnetmask lt
	GatewaySubnetmaskLt *string `json:"gateway_subnetmask_lt,omitempty"`

	// gateway subnetmask lte
	GatewaySubnetmaskLte *string `json:"gateway_subnetmask_lte,omitempty"`

	// gateway subnetmask not
	GatewaySubnetmaskNot *string `json:"gateway_subnetmask_not,omitempty"`

	// gateway subnetmask not contains
	GatewaySubnetmaskNotContains *string `json:"gateway_subnetmask_not_contains,omitempty"`

	// gateway subnetmask not ends with
	GatewaySubnetmaskNotEndsWith *string `json:"gateway_subnetmask_not_ends_with,omitempty"`

	// gateway subnetmask not in
	GatewaySubnetmaskNotIn []string `json:"gateway_subnetmask_not_in,omitempty"`

	// gateway subnetmask not starts with
	GatewaySubnetmaskNotStartsWith *string `json:"gateway_subnetmask_not_starts_with,omitempty"`

	// gateway subnetmask starts with
	GatewaySubnetmaskStartsWith *string `json:"gateway_subnetmask_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// mode type
	ModeType *VlanModeType `json:"mode_type,omitempty"`

	// mode type in
	ModeTypeIn []VlanModeType `json:"mode_type_in,omitempty"`

	// mode type not
	ModeTypeNot *VlanModeType `json:"mode_type_not,omitempty"`

	// mode type not in
	ModeTypeNotIn []VlanModeType `json:"mode_type_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// qos burst
	QosBurst *float64 `json:"qos_burst,omitempty"`

	// qos burst gt
	QosBurstGt *float64 `json:"qos_burst_gt,omitempty"`

	// qos burst gte
	QosBurstGte *float64 `json:"qos_burst_gte,omitempty"`

	// qos burst in
	QosBurstIn []float64 `json:"qos_burst_in,omitempty"`

	// qos burst lt
	QosBurstLt *float64 `json:"qos_burst_lt,omitempty"`

	// qos burst lte
	QosBurstLte *float64 `json:"qos_burst_lte,omitempty"`

	// qos burst not
	QosBurstNot *float64 `json:"qos_burst_not,omitempty"`

	// qos burst not in
	QosBurstNotIn []float64 `json:"qos_burst_not_in,omitempty"`

	// qos max bandwidth
	QosMaxBandwidth *float64 `json:"qos_max_bandwidth,omitempty"`

	// qos max bandwidth gt
	QosMaxBandwidthGt *float64 `json:"qos_max_bandwidth_gt,omitempty"`

	// qos max bandwidth gte
	QosMaxBandwidthGte *float64 `json:"qos_max_bandwidth_gte,omitempty"`

	// qos max bandwidth in
	QosMaxBandwidthIn []float64 `json:"qos_max_bandwidth_in,omitempty"`

	// qos max bandwidth lt
	QosMaxBandwidthLt *float64 `json:"qos_max_bandwidth_lt,omitempty"`

	// qos max bandwidth lte
	QosMaxBandwidthLte *float64 `json:"qos_max_bandwidth_lte,omitempty"`

	// qos max bandwidth not
	QosMaxBandwidthNot *float64 `json:"qos_max_bandwidth_not,omitempty"`

	// qos max bandwidth not in
	QosMaxBandwidthNotIn []float64 `json:"qos_max_bandwidth_not_in,omitempty"`

	// qos min bandwidth
	QosMinBandwidth *float64 `json:"qos_min_bandwidth,omitempty"`

	// qos min bandwidth gt
	QosMinBandwidthGt *float64 `json:"qos_min_bandwidth_gt,omitempty"`

	// qos min bandwidth gte
	QosMinBandwidthGte *float64 `json:"qos_min_bandwidth_gte,omitempty"`

	// qos min bandwidth in
	QosMinBandwidthIn []float64 `json:"qos_min_bandwidth_in,omitempty"`

	// qos min bandwidth lt
	QosMinBandwidthLt *float64 `json:"qos_min_bandwidth_lt,omitempty"`

	// qos min bandwidth lte
	QosMinBandwidthLte *float64 `json:"qos_min_bandwidth_lte,omitempty"`

	// qos min bandwidth not
	QosMinBandwidthNot *float64 `json:"qos_min_bandwidth_not,omitempty"`

	// qos min bandwidth not in
	QosMinBandwidthNotIn []float64 `json:"qos_min_bandwidth_not_in,omitempty"`

	// qos priority
	QosPriority *int32 `json:"qos_priority,omitempty"`

	// qos priority gt
	QosPriorityGt *int32 `json:"qos_priority_gt,omitempty"`

	// qos priority gte
	QosPriorityGte *int32 `json:"qos_priority_gte,omitempty"`

	// qos priority in
	QosPriorityIn []int32 `json:"qos_priority_in,omitempty"`

	// qos priority lt
	QosPriorityLt *int32 `json:"qos_priority_lt,omitempty"`

	// qos priority lte
	QosPriorityLte *int32 `json:"qos_priority_lte,omitempty"`

	// qos priority not
	QosPriorityNot *int32 `json:"qos_priority_not,omitempty"`

	// qos priority not in
	QosPriorityNotIn []int32 `json:"qos_priority_not_in,omitempty"`

	// subnetmask
	Subnetmask *string `json:"subnetmask,omitempty"`

	// subnetmask contains
	SubnetmaskContains *string `json:"subnetmask_contains,omitempty"`

	// subnetmask ends with
	SubnetmaskEndsWith *string `json:"subnetmask_ends_with,omitempty"`

	// subnetmask gt
	SubnetmaskGt *string `json:"subnetmask_gt,omitempty"`

	// subnetmask gte
	SubnetmaskGte *string `json:"subnetmask_gte,omitempty"`

	// subnetmask in
	SubnetmaskIn []string `json:"subnetmask_in,omitempty"`

	// subnetmask lt
	SubnetmaskLt *string `json:"subnetmask_lt,omitempty"`

	// subnetmask lte
	SubnetmaskLte *string `json:"subnetmask_lte,omitempty"`

	// subnetmask not
	SubnetmaskNot *string `json:"subnetmask_not,omitempty"`

	// subnetmask not contains
	SubnetmaskNotContains *string `json:"subnetmask_not_contains,omitempty"`

	// subnetmask not ends with
	SubnetmaskNotEndsWith *string `json:"subnetmask_not_ends_with,omitempty"`

	// subnetmask not in
	SubnetmaskNotIn []string `json:"subnetmask_not_in,omitempty"`

	// subnetmask not starts with
	SubnetmaskNotStartsWith *string `json:"subnetmask_not_starts_with,omitempty"`

	// subnetmask starts with
	SubnetmaskStartsWith *string `json:"subnetmask_starts_with,omitempty"`

	// type
	Type *NetworkType `json:"type,omitempty"`

	// type in
	TypeIn []NetworkType `json:"type_in,omitempty"`

	// type not
	TypeNot *NetworkType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []NetworkType `json:"type_not_in,omitempty"`

	// vds
	Vds *VdsWhereInput `json:"vds,omitempty"`

	// vlan id
	VlanID *int32 `json:"vlan_id,omitempty"`

	// vlan id gt
	VlanIDGt *int32 `json:"vlan_id_gt,omitempty"`

	// vlan id gte
	VlanIDGte *int32 `json:"vlan_id_gte,omitempty"`

	// vlan id in
	VlanIDIn []int32 `json:"vlan_id_in,omitempty"`

	// vlan id lt
	VlanIDLt *int32 `json:"vlan_id_lt,omitempty"`

	// vlan id lte
	VlanIDLte *int32 `json:"vlan_id_lte,omitempty"`

	// vlan id not
	VlanIDNot *int32 `json:"vlan_id_not,omitempty"`

	// vlan id not in
	VlanIDNotIn []int32 `json:"vlan_id_not_in,omitempty"`

	// vm nics every
	VMNicsEvery *VMNicWhereInput `json:"vm_nics_every,omitempty"`

	// vm nics none
	VMNicsNone *VMNicWhereInput `json:"vm_nics_none,omitempty"`

	// vm nics some
	VMNicsSome *VMNicWhereInput `json:"vm_nics_some,omitempty"`

	MarshalOpts *VlanWhereInputMarshalOpts `json:"-"`
}

type VlanWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	GatewayIP_Explicit_Null_When_Empty bool

	GatewayIPContains_Explicit_Null_When_Empty bool

	GatewayIPEndsWith_Explicit_Null_When_Empty bool

	GatewayIPGt_Explicit_Null_When_Empty bool

	GatewayIPGte_Explicit_Null_When_Empty bool

	GatewayIPIn_Explicit_Null_When_Empty bool

	GatewayIPLt_Explicit_Null_When_Empty bool

	GatewayIPLte_Explicit_Null_When_Empty bool

	GatewayIPNot_Explicit_Null_When_Empty bool

	GatewayIPNotContains_Explicit_Null_When_Empty bool

	GatewayIPNotEndsWith_Explicit_Null_When_Empty bool

	GatewayIPNotIn_Explicit_Null_When_Empty bool

	GatewayIPNotStartsWith_Explicit_Null_When_Empty bool

	GatewayIPStartsWith_Explicit_Null_When_Empty bool

	GatewaySubnetmask_Explicit_Null_When_Empty bool

	GatewaySubnetmaskContains_Explicit_Null_When_Empty bool

	GatewaySubnetmaskEndsWith_Explicit_Null_When_Empty bool

	GatewaySubnetmaskGt_Explicit_Null_When_Empty bool

	GatewaySubnetmaskGte_Explicit_Null_When_Empty bool

	GatewaySubnetmaskIn_Explicit_Null_When_Empty bool

	GatewaySubnetmaskLt_Explicit_Null_When_Empty bool

	GatewaySubnetmaskLte_Explicit_Null_When_Empty bool

	GatewaySubnetmaskNot_Explicit_Null_When_Empty bool

	GatewaySubnetmaskNotContains_Explicit_Null_When_Empty bool

	GatewaySubnetmaskNotEndsWith_Explicit_Null_When_Empty bool

	GatewaySubnetmaskNotIn_Explicit_Null_When_Empty bool

	GatewaySubnetmaskNotStartsWith_Explicit_Null_When_Empty bool

	GatewaySubnetmaskStartsWith_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	ModeType_Explicit_Null_When_Empty bool

	ModeTypeIn_Explicit_Null_When_Empty bool

	ModeTypeNot_Explicit_Null_When_Empty bool

	ModeTypeNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	QosBurst_Explicit_Null_When_Empty bool

	QosBurstGt_Explicit_Null_When_Empty bool

	QosBurstGte_Explicit_Null_When_Empty bool

	QosBurstIn_Explicit_Null_When_Empty bool

	QosBurstLt_Explicit_Null_When_Empty bool

	QosBurstLte_Explicit_Null_When_Empty bool

	QosBurstNot_Explicit_Null_When_Empty bool

	QosBurstNotIn_Explicit_Null_When_Empty bool

	QosMaxBandwidth_Explicit_Null_When_Empty bool

	QosMaxBandwidthGt_Explicit_Null_When_Empty bool

	QosMaxBandwidthGte_Explicit_Null_When_Empty bool

	QosMaxBandwidthIn_Explicit_Null_When_Empty bool

	QosMaxBandwidthLt_Explicit_Null_When_Empty bool

	QosMaxBandwidthLte_Explicit_Null_When_Empty bool

	QosMaxBandwidthNot_Explicit_Null_When_Empty bool

	QosMaxBandwidthNotIn_Explicit_Null_When_Empty bool

	QosMinBandwidth_Explicit_Null_When_Empty bool

	QosMinBandwidthGt_Explicit_Null_When_Empty bool

	QosMinBandwidthGte_Explicit_Null_When_Empty bool

	QosMinBandwidthIn_Explicit_Null_When_Empty bool

	QosMinBandwidthLt_Explicit_Null_When_Empty bool

	QosMinBandwidthLte_Explicit_Null_When_Empty bool

	QosMinBandwidthNot_Explicit_Null_When_Empty bool

	QosMinBandwidthNotIn_Explicit_Null_When_Empty bool

	QosPriority_Explicit_Null_When_Empty bool

	QosPriorityGt_Explicit_Null_When_Empty bool

	QosPriorityGte_Explicit_Null_When_Empty bool

	QosPriorityIn_Explicit_Null_When_Empty bool

	QosPriorityLt_Explicit_Null_When_Empty bool

	QosPriorityLte_Explicit_Null_When_Empty bool

	QosPriorityNot_Explicit_Null_When_Empty bool

	QosPriorityNotIn_Explicit_Null_When_Empty bool

	Subnetmask_Explicit_Null_When_Empty bool

	SubnetmaskContains_Explicit_Null_When_Empty bool

	SubnetmaskEndsWith_Explicit_Null_When_Empty bool

	SubnetmaskGt_Explicit_Null_When_Empty bool

	SubnetmaskGte_Explicit_Null_When_Empty bool

	SubnetmaskIn_Explicit_Null_When_Empty bool

	SubnetmaskLt_Explicit_Null_When_Empty bool

	SubnetmaskLte_Explicit_Null_When_Empty bool

	SubnetmaskNot_Explicit_Null_When_Empty bool

	SubnetmaskNotContains_Explicit_Null_When_Empty bool

	SubnetmaskNotEndsWith_Explicit_Null_When_Empty bool

	SubnetmaskNotIn_Explicit_Null_When_Empty bool

	SubnetmaskNotStartsWith_Explicit_Null_When_Empty bool

	SubnetmaskStartsWith_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	Vds_Explicit_Null_When_Empty bool

	VlanID_Explicit_Null_When_Empty bool

	VlanIDGt_Explicit_Null_When_Empty bool

	VlanIDGte_Explicit_Null_When_Empty bool

	VlanIDIn_Explicit_Null_When_Empty bool

	VlanIDLt_Explicit_Null_When_Empty bool

	VlanIDLte_Explicit_Null_When_Empty bool

	VlanIDNot_Explicit_Null_When_Empty bool

	VlanIDNotIn_Explicit_Null_When_Empty bool

	VMNicsEvery_Explicit_Null_When_Empty bool

	VMNicsNone_Explicit_Null_When_Empty bool

	VMNicsSome_Explicit_Null_When_Empty bool
}

func (m VlanWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip
	if m.GatewayIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip\":")
		bytes, err := swag.WriteJSON(m.GatewayIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip\":null")
		first = false
	}

	// handle nullable field gateway_ip_contains
	if m.GatewayIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_contains\":")
		bytes, err := swag.WriteJSON(m.GatewayIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_contains\":null")
		first = false
	}

	// handle nullable field gateway_ip_ends_with
	if m.GatewayIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_ends_with\":null")
		first = false
	}

	// handle nullable field gateway_ip_gt
	if m.GatewayIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gt\":")
		bytes, err := swag.WriteJSON(m.GatewayIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gt\":null")
		first = false
	}

	// handle nullable field gateway_ip_gte
	if m.GatewayIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gte\":")
		bytes, err := swag.WriteJSON(m.GatewayIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_gte\":null")
		first = false
	}

	// handle non nullable field gateway_ip_in with omitempty
	if swag.IsZero(m.GatewayIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_in\":")
		bytes, err := swag.WriteJSON(m.GatewayIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip_lt
	if m.GatewayIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lt\":")
		bytes, err := swag.WriteJSON(m.GatewayIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lt\":null")
		first = false
	}

	// handle nullable field gateway_ip_lte
	if m.GatewayIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lte\":")
		bytes, err := swag.WriteJSON(m.GatewayIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_lte\":null")
		first = false
	}

	// handle nullable field gateway_ip_not
	if m.GatewayIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not\":null")
		first = false
	}

	// handle nullable field gateway_ip_not_contains
	if m.GatewayIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_contains\":null")
		first = false
	}

	// handle nullable field gateway_ip_not_ends_with
	if m.GatewayIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field gateway_ip_not_in with omitempty
	if swag.IsZero(m.GatewayIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_ip_not_starts_with
	if m.GatewayIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field gateway_ip_starts_with
	if m.GatewayIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewayIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewayIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_ip_starts_with\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask
	if m.GatewaySubnetmask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_contains
	if m.GatewaySubnetmaskContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_contains\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_contains\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_ends_with
	if m.GatewaySubnetmaskEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_ends_with\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_gt
	if m.GatewaySubnetmaskGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_gt\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_gt\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_gte
	if m.GatewaySubnetmaskGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_gte\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_gte\":null")
		first = false
	}

	// handle non nullable field gateway_subnetmask_in with omitempty
	if swag.IsZero(m.GatewaySubnetmaskIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_in\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_subnetmask_lt
	if m.GatewaySubnetmaskLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_lt\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_lt\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_lte
	if m.GatewaySubnetmaskLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_lte\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_lte\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_not
	if m.GatewaySubnetmaskNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_not_contains
	if m.GatewaySubnetmaskNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_contains\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_contains\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_not_ends_with
	if m.GatewaySubnetmaskNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_ends_with\":null")
		first = false
	}

	// handle non nullable field gateway_subnetmask_not_in with omitempty
	if swag.IsZero(m.GatewaySubnetmaskNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_in\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field gateway_subnetmask_not_starts_with
	if m.GatewaySubnetmaskNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_not_starts_with\":null")
		first = false
	}

	// handle nullable field gateway_subnetmask_starts_with
	if m.GatewaySubnetmaskStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_starts_with\":")
		bytes, err := swag.WriteJSON(m.GatewaySubnetmaskStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GatewaySubnetmaskStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway_subnetmask_starts_with\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field mode_type
	if m.ModeType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type\":")
		bytes, err := swag.WriteJSON(m.ModeType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModeType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type\":null")
		first = false
	}

	// handle non nullable field mode_type_in with omitempty
	if swag.IsZero(m.ModeTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type_in\":")
		bytes, err := swag.WriteJSON(m.ModeTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mode_type_not
	if m.ModeTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type_not\":")
		bytes, err := swag.WriteJSON(m.ModeTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModeTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type_not\":null")
		first = false
	}

	// handle non nullable field mode_type_not_in with omitempty
	if swag.IsZero(m.ModeTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type_not_in\":")
		bytes, err := swag.WriteJSON(m.ModeTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field qos_burst
	if m.QosBurst != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst\":")
		bytes, err := swag.WriteJSON(m.QosBurst)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurst_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst\":null")
		first = false
	}

	// handle nullable field qos_burst_gt
	if m.QosBurstGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_gt\":")
		bytes, err := swag.WriteJSON(m.QosBurstGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_gt\":null")
		first = false
	}

	// handle nullable field qos_burst_gte
	if m.QosBurstGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_gte\":")
		bytes, err := swag.WriteJSON(m.QosBurstGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_gte\":null")
		first = false
	}

	// handle non nullable field qos_burst_in with omitempty
	if swag.IsZero(m.QosBurstIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_in\":")
		bytes, err := swag.WriteJSON(m.QosBurstIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_burst_lt
	if m.QosBurstLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_lt\":")
		bytes, err := swag.WriteJSON(m.QosBurstLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_lt\":null")
		first = false
	}

	// handle nullable field qos_burst_lte
	if m.QosBurstLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_lte\":")
		bytes, err := swag.WriteJSON(m.QosBurstLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_lte\":null")
		first = false
	}

	// handle nullable field qos_burst_not
	if m.QosBurstNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_not\":")
		bytes, err := swag.WriteJSON(m.QosBurstNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_not\":null")
		first = false
	}

	// handle non nullable field qos_burst_not_in with omitempty
	if swag.IsZero(m.QosBurstNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_not_in\":")
		bytes, err := swag.WriteJSON(m.QosBurstNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_max_bandwidth
	if m.QosMaxBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth_gt
	if m.QosMaxBandwidthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_gt\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_gt\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth_gte
	if m.QosMaxBandwidthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_gte\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_gte\":null")
		first = false
	}

	// handle non nullable field qos_max_bandwidth_in with omitempty
	if swag.IsZero(m.QosMaxBandwidthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_in\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_max_bandwidth_lt
	if m.QosMaxBandwidthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_lt\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_lt\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth_lte
	if m.QosMaxBandwidthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_lte\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_lte\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth_not
	if m.QosMaxBandwidthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_not\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_not\":null")
		first = false
	}

	// handle non nullable field qos_max_bandwidth_not_in with omitempty
	if swag.IsZero(m.QosMaxBandwidthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_not_in\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_min_bandwidth
	if m.QosMinBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth_gt
	if m.QosMinBandwidthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_gt\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_gt\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth_gte
	if m.QosMinBandwidthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_gte\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_gte\":null")
		first = false
	}

	// handle non nullable field qos_min_bandwidth_in with omitempty
	if swag.IsZero(m.QosMinBandwidthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_in\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_min_bandwidth_lt
	if m.QosMinBandwidthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_lt\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_lt\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth_lte
	if m.QosMinBandwidthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_lte\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_lte\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth_not
	if m.QosMinBandwidthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_not\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_not\":null")
		first = false
	}

	// handle non nullable field qos_min_bandwidth_not_in with omitempty
	if swag.IsZero(m.QosMinBandwidthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_not_in\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_priority
	if m.QosPriority != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority\":")
		bytes, err := swag.WriteJSON(m.QosPriority)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriority_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority\":null")
		first = false
	}

	// handle nullable field qos_priority_gt
	if m.QosPriorityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_gt\":")
		bytes, err := swag.WriteJSON(m.QosPriorityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriorityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_gt\":null")
		first = false
	}

	// handle nullable field qos_priority_gte
	if m.QosPriorityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_gte\":")
		bytes, err := swag.WriteJSON(m.QosPriorityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriorityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_gte\":null")
		first = false
	}

	// handle non nullable field qos_priority_in with omitempty
	if swag.IsZero(m.QosPriorityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_in\":")
		bytes, err := swag.WriteJSON(m.QosPriorityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_priority_lt
	if m.QosPriorityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_lt\":")
		bytes, err := swag.WriteJSON(m.QosPriorityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriorityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_lt\":null")
		first = false
	}

	// handle nullable field qos_priority_lte
	if m.QosPriorityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_lte\":")
		bytes, err := swag.WriteJSON(m.QosPriorityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriorityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_lte\":null")
		first = false
	}

	// handle nullable field qos_priority_not
	if m.QosPriorityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_not\":")
		bytes, err := swag.WriteJSON(m.QosPriorityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriorityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_not\":null")
		first = false
	}

	// handle non nullable field qos_priority_not_in with omitempty
	if swag.IsZero(m.QosPriorityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority_not_in\":")
		bytes, err := swag.WriteJSON(m.QosPriorityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnetmask
	if m.Subnetmask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask\":")
		bytes, err := swag.WriteJSON(m.Subnetmask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Subnetmask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask\":null")
		first = false
	}

	// handle nullable field subnetmask_contains
	if m.SubnetmaskContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_contains\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_contains\":null")
		first = false
	}

	// handle nullable field subnetmask_ends_with
	if m.SubnetmaskEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_ends_with\":null")
		first = false
	}

	// handle nullable field subnetmask_gt
	if m.SubnetmaskGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_gt\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_gt\":null")
		first = false
	}

	// handle nullable field subnetmask_gte
	if m.SubnetmaskGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_gte\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_gte\":null")
		first = false
	}

	// handle non nullable field subnetmask_in with omitempty
	if swag.IsZero(m.SubnetmaskIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_in\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnetmask_lt
	if m.SubnetmaskLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_lt\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_lt\":null")
		first = false
	}

	// handle nullable field subnetmask_lte
	if m.SubnetmaskLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_lte\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_lte\":null")
		first = false
	}

	// handle nullable field subnetmask_not
	if m.SubnetmaskNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not\":null")
		first = false
	}

	// handle nullable field subnetmask_not_contains
	if m.SubnetmaskNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_contains\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_contains\":null")
		first = false
	}

	// handle nullable field subnetmask_not_ends_with
	if m.SubnetmaskNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_ends_with\":null")
		first = false
	}

	// handle non nullable field subnetmask_not_in with omitempty
	if swag.IsZero(m.SubnetmaskNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_in\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subnetmask_not_starts_with
	if m.SubnetmaskNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_not_starts_with\":null")
		first = false
	}

	// handle nullable field subnetmask_starts_with
	if m.SubnetmaskStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_starts_with\":")
		bytes, err := swag.WriteJSON(m.SubnetmaskStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetmaskStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnetmask_starts_with\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vds
	if m.Vds != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":")
		bytes, err := swag.WriteJSON(m.Vds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vds_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds\":null")
		first = false
	}

	// handle nullable field vlan_id
	if m.VlanID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":")
		bytes, err := swag.WriteJSON(m.VlanID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":null")
		first = false
	}

	// handle nullable field vlan_id_gt
	if m.VlanIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_gt\":")
		bytes, err := swag.WriteJSON(m.VlanIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_gt\":null")
		first = false
	}

	// handle nullable field vlan_id_gte
	if m.VlanIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_gte\":")
		bytes, err := swag.WriteJSON(m.VlanIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_gte\":null")
		first = false
	}

	// handle non nullable field vlan_id_in with omitempty
	if swag.IsZero(m.VlanIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_in\":")
		bytes, err := swag.WriteJSON(m.VlanIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vlan_id_lt
	if m.VlanIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_lt\":")
		bytes, err := swag.WriteJSON(m.VlanIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_lt\":null")
		first = false
	}

	// handle nullable field vlan_id_lte
	if m.VlanIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_lte\":")
		bytes, err := swag.WriteJSON(m.VlanIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_lte\":null")
		first = false
	}

	// handle nullable field vlan_id_not
	if m.VlanIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_not\":")
		bytes, err := swag.WriteJSON(m.VlanIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_not\":null")
		first = false
	}

	// handle non nullable field vlan_id_not_in with omitempty
	if swag.IsZero(m.VlanIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id_not_in\":")
		bytes, err := swag.WriteJSON(m.VlanIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_nics_every
	if m.VMNicsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_every\":")
		bytes, err := swag.WriteJSON(m.VMNicsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_every\":null")
		first = false
	}

	// handle nullable field vm_nics_none
	if m.VMNicsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_none\":")
		bytes, err := swag.WriteJSON(m.VMNicsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_none\":null")
		first = false
	}

	// handle nullable field vm_nics_some
	if m.VMNicsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_some\":")
		bytes, err := swag.WriteJSON(m.VMNicsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_nics_some\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this vlan where input
func (m *VlanWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModeTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateModeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeType) { // not required
		return nil
	}

	if m.ModeType != nil {
		if err := m.ModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateModeTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ModeTypeIn); i++ {

		if err := m.ModeTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateModeTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeTypeNot) { // not required
		return nil
	}

	if m.ModeTypeNot != nil {
		if err := m.ModeTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateModeTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ModeTypeNotIn); i++ {

		if err := m.ModeTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) validateVds(formats strfmt.Registry) error {
	if swag.IsZero(m.Vds) { // not required
		return nil
	}

	if m.Vds != nil {
		if err := m.Vds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateVMNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsEvery) { // not required
		return nil
	}

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateVMNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsNone) { // not required
		return nil
	}

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) validateVMNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsSome) { // not required
		return nil
	}

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vlan where input based on the context it is used
func (m *VlanWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModeTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeType != nil {
		if err := m.ModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateModeTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModeTypeIn); i++ {

		if err := m.ModeTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateModeTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeTypeNot != nil {
		if err := m.ModeTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateModeTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModeTypeNotIn); i++ {

		if err := m.ModeTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VlanWhereInput) contextValidateVds(ctx context.Context, formats strfmt.Registry) error {

	if m.Vds != nil {
		if err := m.Vds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vds")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateVMNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateVMNicsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *VlanWhereInput) contextValidateVMNicsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_nics_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VlanWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlanWhereInput) UnmarshalBinary(b []byte) error {
	var res VlanWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
