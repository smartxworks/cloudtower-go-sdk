// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EverouteLicenseWhereInput everoute license where input
//
// swagger:model EverouteLicenseWhereInput
type EverouteLicenseWhereInput struct {

	// a n d
	AND []*EverouteLicenseWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*EverouteLicenseWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*EverouteLicenseWhereInput `json:"OR,omitempty"`

	// code
	Code *string `json:"code,omitempty"`

	// code contains
	CodeContains *string `json:"code_contains,omitempty"`

	// code ends with
	CodeEndsWith *string `json:"code_ends_with,omitempty"`

	// code gt
	CodeGt *string `json:"code_gt,omitempty"`

	// code gte
	CodeGte *string `json:"code_gte,omitempty"`

	// code in
	CodeIn []string `json:"code_in,omitempty"`

	// code lt
	CodeLt *string `json:"code_lt,omitempty"`

	// code lte
	CodeLte *string `json:"code_lte,omitempty"`

	// code not
	CodeNot *string `json:"code_not,omitempty"`

	// code not contains
	CodeNotContains *string `json:"code_not_contains,omitempty"`

	// code not ends with
	CodeNotEndsWith *string `json:"code_not_ends_with,omitempty"`

	// code not in
	CodeNotIn []string `json:"code_not_in,omitempty"`

	// code not starts with
	CodeNotStartsWith *string `json:"code_not_starts_with,omitempty"`

	// code starts with
	CodeStartsWith *string `json:"code_starts_with,omitempty"`

	// expire date
	ExpireDate *string `json:"expire_date,omitempty"`

	// expire date gt
	ExpireDateGt *string `json:"expire_date_gt,omitempty"`

	// expire date gte
	ExpireDateGte *string `json:"expire_date_gte,omitempty"`

	// expire date in
	ExpireDateIn []string `json:"expire_date_in,omitempty"`

	// expire date lt
	ExpireDateLt *string `json:"expire_date_lt,omitempty"`

	// expire date lte
	ExpireDateLte *string `json:"expire_date_lte,omitempty"`

	// expire date not
	ExpireDateNot *string `json:"expire_date_not,omitempty"`

	// expire date not in
	ExpireDateNotIn []string `json:"expire_date_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// max socket num
	MaxSocketNum *int32 `json:"max_socket_num,omitempty"`

	// max socket num gt
	MaxSocketNumGt *int32 `json:"max_socket_num_gt,omitempty"`

	// max socket num gte
	MaxSocketNumGte *int32 `json:"max_socket_num_gte,omitempty"`

	// max socket num in
	MaxSocketNumIn []int32 `json:"max_socket_num_in,omitempty"`

	// max socket num lt
	MaxSocketNumLt *int32 `json:"max_socket_num_lt,omitempty"`

	// max socket num lte
	MaxSocketNumLte *int32 `json:"max_socket_num_lte,omitempty"`

	// max socket num not
	MaxSocketNumNot *int32 `json:"max_socket_num_not,omitempty"`

	// max socket num not in
	MaxSocketNumNotIn []int32 `json:"max_socket_num_not_in,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// serial contains
	SerialContains *string `json:"serial_contains,omitempty"`

	// serial ends with
	SerialEndsWith *string `json:"serial_ends_with,omitempty"`

	// serial gt
	SerialGt *string `json:"serial_gt,omitempty"`

	// serial gte
	SerialGte *string `json:"serial_gte,omitempty"`

	// serial in
	SerialIn []string `json:"serial_in,omitempty"`

	// serial lt
	SerialLt *string `json:"serial_lt,omitempty"`

	// serial lte
	SerialLte *string `json:"serial_lte,omitempty"`

	// serial not
	SerialNot *string `json:"serial_not,omitempty"`

	// serial not contains
	SerialNotContains *string `json:"serial_not_contains,omitempty"`

	// serial not ends with
	SerialNotEndsWith *string `json:"serial_not_ends_with,omitempty"`

	// serial not in
	SerialNotIn []string `json:"serial_not_in,omitempty"`

	// serial not starts with
	SerialNotStartsWith *string `json:"serial_not_starts_with,omitempty"`

	// serial starts with
	SerialStartsWith *string `json:"serial_starts_with,omitempty"`

	// sign date
	SignDate *string `json:"sign_date,omitempty"`

	// sign date gt
	SignDateGt *string `json:"sign_date_gt,omitempty"`

	// sign date gte
	SignDateGte *string `json:"sign_date_gte,omitempty"`

	// sign date in
	SignDateIn []string `json:"sign_date_in,omitempty"`

	// sign date lt
	SignDateLt *string `json:"sign_date_lt,omitempty"`

	// sign date lte
	SignDateLte *string `json:"sign_date_lte,omitempty"`

	// sign date not
	SignDateNot *string `json:"sign_date_not,omitempty"`

	// sign date not in
	SignDateNotIn []string `json:"sign_date_not_in,omitempty"`

	// software edition
	SoftwareEdition *SoftwareEdition `json:"software_edition,omitempty"`

	// software edition in
	SoftwareEditionIn []SoftwareEdition `json:"software_edition_in,omitempty"`

	// software edition not
	SoftwareEditionNot *SoftwareEdition `json:"software_edition_not,omitempty"`

	// software edition not in
	SoftwareEditionNotIn []SoftwareEdition `json:"software_edition_not_in,omitempty"`

	// type
	Type *LicenseType `json:"type,omitempty"`

	// type in
	TypeIn []LicenseType `json:"type_in,omitempty"`

	// type not
	TypeNot *LicenseType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []LicenseType `json:"type_not_in,omitempty"`

	// uid
	UID *string `json:"uid,omitempty"`

	// uid contains
	UIDContains *string `json:"uid_contains,omitempty"`

	// uid ends with
	UIDEndsWith *string `json:"uid_ends_with,omitempty"`

	// uid gt
	UIDGt *string `json:"uid_gt,omitempty"`

	// uid gte
	UIDGte *string `json:"uid_gte,omitempty"`

	// uid in
	UIDIn []string `json:"uid_in,omitempty"`

	// uid lt
	UIDLt *string `json:"uid_lt,omitempty"`

	// uid lte
	UIDLte *string `json:"uid_lte,omitempty"`

	// uid not
	UIDNot *string `json:"uid_not,omitempty"`

	// uid not contains
	UIDNotContains *string `json:"uid_not_contains,omitempty"`

	// uid not ends with
	UIDNotEndsWith *string `json:"uid_not_ends_with,omitempty"`

	// uid not in
	UIDNotIn []string `json:"uid_not_in,omitempty"`

	// uid not starts with
	UIDNotStartsWith *string `json:"uid_not_starts_with,omitempty"`

	// uid starts with
	UIDStartsWith *string `json:"uid_starts_with,omitempty"`

	MarshalOpts *EverouteLicenseWhereInputMarshalOpts `json:"-"`
}

type EverouteLicenseWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Code_Explicit_Null_When_Empty bool

	CodeContains_Explicit_Null_When_Empty bool

	CodeEndsWith_Explicit_Null_When_Empty bool

	CodeGt_Explicit_Null_When_Empty bool

	CodeGte_Explicit_Null_When_Empty bool

	CodeIn_Explicit_Null_When_Empty bool

	CodeLt_Explicit_Null_When_Empty bool

	CodeLte_Explicit_Null_When_Empty bool

	CodeNot_Explicit_Null_When_Empty bool

	CodeNotContains_Explicit_Null_When_Empty bool

	CodeNotEndsWith_Explicit_Null_When_Empty bool

	CodeNotIn_Explicit_Null_When_Empty bool

	CodeNotStartsWith_Explicit_Null_When_Empty bool

	CodeStartsWith_Explicit_Null_When_Empty bool

	ExpireDate_Explicit_Null_When_Empty bool

	ExpireDateGt_Explicit_Null_When_Empty bool

	ExpireDateGte_Explicit_Null_When_Empty bool

	ExpireDateIn_Explicit_Null_When_Empty bool

	ExpireDateLt_Explicit_Null_When_Empty bool

	ExpireDateLte_Explicit_Null_When_Empty bool

	ExpireDateNot_Explicit_Null_When_Empty bool

	ExpireDateNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	MaxSocketNum_Explicit_Null_When_Empty bool

	MaxSocketNumGt_Explicit_Null_When_Empty bool

	MaxSocketNumGte_Explicit_Null_When_Empty bool

	MaxSocketNumIn_Explicit_Null_When_Empty bool

	MaxSocketNumLt_Explicit_Null_When_Empty bool

	MaxSocketNumLte_Explicit_Null_When_Empty bool

	MaxSocketNumNot_Explicit_Null_When_Empty bool

	MaxSocketNumNotIn_Explicit_Null_When_Empty bool

	Serial_Explicit_Null_When_Empty bool

	SerialContains_Explicit_Null_When_Empty bool

	SerialEndsWith_Explicit_Null_When_Empty bool

	SerialGt_Explicit_Null_When_Empty bool

	SerialGte_Explicit_Null_When_Empty bool

	SerialIn_Explicit_Null_When_Empty bool

	SerialLt_Explicit_Null_When_Empty bool

	SerialLte_Explicit_Null_When_Empty bool

	SerialNot_Explicit_Null_When_Empty bool

	SerialNotContains_Explicit_Null_When_Empty bool

	SerialNotEndsWith_Explicit_Null_When_Empty bool

	SerialNotIn_Explicit_Null_When_Empty bool

	SerialNotStartsWith_Explicit_Null_When_Empty bool

	SerialStartsWith_Explicit_Null_When_Empty bool

	SignDate_Explicit_Null_When_Empty bool

	SignDateGt_Explicit_Null_When_Empty bool

	SignDateGte_Explicit_Null_When_Empty bool

	SignDateIn_Explicit_Null_When_Empty bool

	SignDateLt_Explicit_Null_When_Empty bool

	SignDateLte_Explicit_Null_When_Empty bool

	SignDateNot_Explicit_Null_When_Empty bool

	SignDateNotIn_Explicit_Null_When_Empty bool

	SoftwareEdition_Explicit_Null_When_Empty bool

	SoftwareEditionIn_Explicit_Null_When_Empty bool

	SoftwareEditionNot_Explicit_Null_When_Empty bool

	SoftwareEditionNotIn_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	UID_Explicit_Null_When_Empty bool

	UIDContains_Explicit_Null_When_Empty bool

	UIDEndsWith_Explicit_Null_When_Empty bool

	UIDGt_Explicit_Null_When_Empty bool

	UIDGte_Explicit_Null_When_Empty bool

	UIDIn_Explicit_Null_When_Empty bool

	UIDLt_Explicit_Null_When_Empty bool

	UIDLte_Explicit_Null_When_Empty bool

	UIDNot_Explicit_Null_When_Empty bool

	UIDNotContains_Explicit_Null_When_Empty bool

	UIDNotEndsWith_Explicit_Null_When_Empty bool

	UIDNotIn_Explicit_Null_When_Empty bool

	UIDNotStartsWith_Explicit_Null_When_Empty bool

	UIDStartsWith_Explicit_Null_When_Empty bool
}

func (m EverouteLicenseWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field code
	if m.Code != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code\":")
		bytes, err := swag.WriteJSON(m.Code)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Code_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code\":null")
		first = false
	}

	// handle nullable field code_contains
	if m.CodeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_contains\":")
		bytes, err := swag.WriteJSON(m.CodeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_contains\":null")
		first = false
	}

	// handle nullable field code_ends_with
	if m.CodeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_ends_with\":")
		bytes, err := swag.WriteJSON(m.CodeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_ends_with\":null")
		first = false
	}

	// handle nullable field code_gt
	if m.CodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_gt\":")
		bytes, err := swag.WriteJSON(m.CodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_gt\":null")
		first = false
	}

	// handle nullable field code_gte
	if m.CodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_gte\":")
		bytes, err := swag.WriteJSON(m.CodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_gte\":null")
		first = false
	}

	// handle non nullable field code_in with omitempty
	if swag.IsZero(m.CodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_in\":")
		bytes, err := swag.WriteJSON(m.CodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field code_lt
	if m.CodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_lt\":")
		bytes, err := swag.WriteJSON(m.CodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_lt\":null")
		first = false
	}

	// handle nullable field code_lte
	if m.CodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_lte\":")
		bytes, err := swag.WriteJSON(m.CodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_lte\":null")
		first = false
	}

	// handle nullable field code_not
	if m.CodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not\":")
		bytes, err := swag.WriteJSON(m.CodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not\":null")
		first = false
	}

	// handle nullable field code_not_contains
	if m.CodeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_contains\":")
		bytes, err := swag.WriteJSON(m.CodeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_contains\":null")
		first = false
	}

	// handle nullable field code_not_ends_with
	if m.CodeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.CodeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_ends_with\":null")
		first = false
	}

	// handle non nullable field code_not_in with omitempty
	if swag.IsZero(m.CodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_in\":")
		bytes, err := swag.WriteJSON(m.CodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field code_not_starts_with
	if m.CodeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.CodeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_not_starts_with\":null")
		first = false
	}

	// handle nullable field code_starts_with
	if m.CodeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_starts_with\":")
		bytes, err := swag.WriteJSON(m.CodeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CodeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code_starts_with\":null")
		first = false
	}

	// handle nullable field expire_date
	if m.ExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":")
		bytes, err := swag.WriteJSON(m.ExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":null")
		first = false
	}

	// handle nullable field expire_date_gt
	if m.ExpireDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":null")
		first = false
	}

	// handle nullable field expire_date_gte
	if m.ExpireDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":null")
		first = false
	}

	// handle non nullable field expire_date_in with omitempty
	if swag.IsZero(m.ExpireDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field expire_date_lt
	if m.ExpireDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":null")
		first = false
	}

	// handle nullable field expire_date_lte
	if m.ExpireDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":null")
		first = false
	}

	// handle nullable field expire_date_not
	if m.ExpireDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":null")
		first = false
	}

	// handle non nullable field expire_date_not_in with omitempty
	if swag.IsZero(m.ExpireDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field max_socket_num
	if m.MaxSocketNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num\":null")
		first = false
	}

	// handle nullable field max_socket_num_gt
	if m.MaxSocketNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_gt\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_gt\":null")
		first = false
	}

	// handle nullable field max_socket_num_gte
	if m.MaxSocketNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_gte\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_gte\":null")
		first = false
	}

	// handle non nullable field max_socket_num_in with omitempty
	if swag.IsZero(m.MaxSocketNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_in\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_socket_num_lt
	if m.MaxSocketNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_lt\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_lt\":null")
		first = false
	}

	// handle nullable field max_socket_num_lte
	if m.MaxSocketNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_lte\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_lte\":null")
		first = false
	}

	// handle nullable field max_socket_num_not
	if m.MaxSocketNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_not\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxSocketNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_not\":null")
		first = false
	}

	// handle non nullable field max_socket_num_not_in with omitempty
	if swag.IsZero(m.MaxSocketNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_socket_num_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxSocketNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial
	if m.Serial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":")
		bytes, err := swag.WriteJSON(m.Serial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Serial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":null")
		first = false
	}

	// handle nullable field serial_contains
	if m.SerialContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":")
		bytes, err := swag.WriteJSON(m.SerialContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":null")
		first = false
	}

	// handle nullable field serial_ends_with
	if m.SerialEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":null")
		first = false
	}

	// handle nullable field serial_gt
	if m.SerialGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":")
		bytes, err := swag.WriteJSON(m.SerialGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":null")
		first = false
	}

	// handle nullable field serial_gte
	if m.SerialGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":")
		bytes, err := swag.WriteJSON(m.SerialGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":null")
		first = false
	}

	// handle non nullable field serial_in with omitempty
	if swag.IsZero(m.SerialIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_in\":")
		bytes, err := swag.WriteJSON(m.SerialIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_lt
	if m.SerialLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":")
		bytes, err := swag.WriteJSON(m.SerialLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":null")
		first = false
	}

	// handle nullable field serial_lte
	if m.SerialLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":")
		bytes, err := swag.WriteJSON(m.SerialLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":null")
		first = false
	}

	// handle nullable field serial_not
	if m.SerialNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":")
		bytes, err := swag.WriteJSON(m.SerialNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":null")
		first = false
	}

	// handle nullable field serial_not_contains
	if m.SerialNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":")
		bytes, err := swag.WriteJSON(m.SerialNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":null")
		first = false
	}

	// handle nullable field serial_not_ends_with
	if m.SerialNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":null")
		first = false
	}

	// handle non nullable field serial_not_in with omitempty
	if swag.IsZero(m.SerialNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_in\":")
		bytes, err := swag.WriteJSON(m.SerialNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_not_starts_with
	if m.SerialNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":null")
		first = false
	}

	// handle nullable field serial_starts_with
	if m.SerialStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":null")
		first = false
	}

	// handle nullable field sign_date
	if m.SignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":")
		bytes, err := swag.WriteJSON(m.SignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":null")
		first = false
	}

	// handle nullable field sign_date_gt
	if m.SignDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":")
		bytes, err := swag.WriteJSON(m.SignDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":null")
		first = false
	}

	// handle nullable field sign_date_gte
	if m.SignDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":")
		bytes, err := swag.WriteJSON(m.SignDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":null")
		first = false
	}

	// handle non nullable field sign_date_in with omitempty
	if swag.IsZero(m.SignDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_in\":")
		bytes, err := swag.WriteJSON(m.SignDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field sign_date_lt
	if m.SignDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":")
		bytes, err := swag.WriteJSON(m.SignDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":null")
		first = false
	}

	// handle nullable field sign_date_lte
	if m.SignDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":")
		bytes, err := swag.WriteJSON(m.SignDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":null")
		first = false
	}

	// handle nullable field sign_date_not
	if m.SignDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":")
		bytes, err := swag.WriteJSON(m.SignDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":null")
		first = false
	}

	// handle non nullable field sign_date_not_in with omitempty
	if swag.IsZero(m.SignDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not_in\":")
		bytes, err := swag.WriteJSON(m.SignDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field software_edition
	if m.SoftwareEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":")
		bytes, err := swag.WriteJSON(m.SoftwareEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":null")
		first = false
	}

	// handle non nullable field software_edition_in with omitempty
	if swag.IsZero(m.SoftwareEditionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_in\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field software_edition_not
	if m.SoftwareEditionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEditionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not\":null")
		first = false
	}

	// handle non nullable field software_edition_not_in with omitempty
	if swag.IsZero(m.SoftwareEditionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not_in\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field uid
	if m.UID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid\":")
		bytes, err := swag.WriteJSON(m.UID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid\":null")
		first = false
	}

	// handle nullable field uid_contains
	if m.UIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_contains\":")
		bytes, err := swag.WriteJSON(m.UIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_contains\":null")
		first = false
	}

	// handle nullable field uid_ends_with
	if m.UIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_ends_with\":")
		bytes, err := swag.WriteJSON(m.UIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_ends_with\":null")
		first = false
	}

	// handle nullable field uid_gt
	if m.UIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_gt\":")
		bytes, err := swag.WriteJSON(m.UIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_gt\":null")
		first = false
	}

	// handle nullable field uid_gte
	if m.UIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_gte\":")
		bytes, err := swag.WriteJSON(m.UIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_gte\":null")
		first = false
	}

	// handle non nullable field uid_in with omitempty
	if swag.IsZero(m.UIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_in\":")
		bytes, err := swag.WriteJSON(m.UIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field uid_lt
	if m.UIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_lt\":")
		bytes, err := swag.WriteJSON(m.UIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_lt\":null")
		first = false
	}

	// handle nullable field uid_lte
	if m.UIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_lte\":")
		bytes, err := swag.WriteJSON(m.UIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_lte\":null")
		first = false
	}

	// handle nullable field uid_not
	if m.UIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not\":")
		bytes, err := swag.WriteJSON(m.UIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not\":null")
		first = false
	}

	// handle nullable field uid_not_contains
	if m.UIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_contains\":")
		bytes, err := swag.WriteJSON(m.UIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_contains\":null")
		first = false
	}

	// handle nullable field uid_not_ends_with
	if m.UIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_ends_with\":null")
		first = false
	}

	// handle non nullable field uid_not_in with omitempty
	if swag.IsZero(m.UIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_in\":")
		bytes, err := swag.WriteJSON(m.UIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field uid_not_starts_with
	if m.UIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_not_starts_with\":null")
		first = false
	}

	// handle nullable field uid_starts_with
	if m.UIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_starts_with\":")
		bytes, err := swag.WriteJSON(m.UIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"uid_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this everoute license where input
func (m *EverouteLicenseWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EverouteLicenseWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateSoftwareEdition(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEdition) { // not required
		return nil
	}

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateSoftwareEditionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateSoftwareEditionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionNot) { // not required
		return nil
	}

	if m.SoftwareEditionNot != nil {
		if err := m.SoftwareEditionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateSoftwareEditionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this everoute license where input based on the context it is used
func (m *EverouteLicenseWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateSoftwareEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateSoftwareEditionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateSoftwareEditionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEditionNot != nil {
		if err := m.SoftwareEditionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateSoftwareEditionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteLicenseWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EverouteLicenseWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EverouteLicenseWhereInput) UnmarshalBinary(b []byte) error {
	var res EverouteLicenseWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
