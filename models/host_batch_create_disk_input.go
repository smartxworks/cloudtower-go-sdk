// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostBatchCreateDiskInput host batch create disk input
//
// swagger:model HostBatchCreateDiskInput
type HostBatchCreateDiskInput struct {

	// drive
	// Required: true
	Drive *string `json:"drive"`

	// function
	Function *DiskFunction `json:"function,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// type
	Type *DiskType `json:"type,omitempty"`

	MarshalOpts *HostBatchCreateDiskInputMarshalOpts `json:"-"`
}

type HostBatchCreateDiskInputMarshalOpts struct {
	Drive_Explicit_Null_When_Empty bool

	Function_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool
}

func (m HostBatchCreateDiskInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field drive
	if m.Drive != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"drive\":")
		bytes, err := swag.WriteJSON(m.Drive)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Drive_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"drive\":null")
		first = false
	}

	// handle nullable field function
	if m.Function != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function\":")
		bytes, err := swag.WriteJSON(m.Function)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Function_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function\":null")
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this host batch create disk input
func (m *HostBatchCreateDiskInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostBatchCreateDiskInput) validateDrive(formats strfmt.Registry) error {

	if err := validate.Required("drive", "body", m.Drive); err != nil {
		return err
	}

	return nil
}

func (m *HostBatchCreateDiskInput) validateFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.Function) { // not required
		return nil
	}

	if m.Function != nil {
		if err := m.Function.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function")
			}
			return err
		}
	}

	return nil
}

func (m *HostBatchCreateDiskInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this host batch create disk input based on the context it is used
func (m *HostBatchCreateDiskInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostBatchCreateDiskInput) contextValidateFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.Function != nil {
		if err := m.Function.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function")
			}
			return err
		}
	}

	return nil
}

func (m *HostBatchCreateDiskInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostBatchCreateDiskInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostBatchCreateDiskInput) UnmarshalBinary(b []byte) error {
	var res HostBatchCreateDiskInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
