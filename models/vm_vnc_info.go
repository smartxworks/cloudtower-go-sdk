// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMVncInfo Vm vnc info
//
// swagger:model VmVncInfo
type VMVncInfo struct {

	// cluster ip
	// Required: true
	ClusterIP *string `json:"cluster_ip"`

	// direct
	Direct *string `json:"direct,omitempty"`

	// redirect
	// Required: true
	Redirect *string `json:"redirect"`

	// terminal
	// Required: true
	Terminal *string `json:"terminal"`

	// vm
	// Required: true
	VM *VM `json:"vm"`

	MarshalOpts *VMVncInfoMarshalOpts `json:"-"`
}

type VMVncInfoMarshalOpts struct {
	ClusterIP_Explicit_Null_When_Empty bool

	Direct_Explicit_Null_When_Empty bool

	Redirect_Explicit_Null_When_Empty bool

	Terminal_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool
}

func (m VMVncInfo) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_ip
	if m.ClusterIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_ip\":")
		bytes, err := swag.WriteJSON(m.ClusterIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_ip\":null")
		first = false
	}

	// handle nullable field direct
	if m.Direct != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"direct\":")
		bytes, err := swag.WriteJSON(m.Direct)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Direct_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"direct\":null")
		first = false
	}

	// handle nullable field redirect
	if m.Redirect != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"redirect\":")
		bytes, err := swag.WriteJSON(m.Redirect)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Redirect_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"redirect\":null")
		first = false
	}

	// handle nullable field terminal
	if m.Terminal != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"terminal\":")
		bytes, err := swag.WriteJSON(m.Terminal)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Terminal_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"terminal\":null")
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm vnc info
func (m *VMVncInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVncInfo) validateClusterIP(formats strfmt.Registry) error {

	if err := validate.Required("cluster_ip", "body", m.ClusterIP); err != nil {
		return err
	}

	return nil
}

func (m *VMVncInfo) validateRedirect(formats strfmt.Registry) error {

	if err := validate.Required("redirect", "body", m.Redirect); err != nil {
		return err
	}

	return nil
}

func (m *VMVncInfo) validateTerminal(formats strfmt.Registry) error {

	if err := validate.Required("terminal", "body", m.Terminal); err != nil {
		return err
	}

	return nil
}

func (m *VMVncInfo) validateVM(formats strfmt.Registry) error {

	if err := validate.Required("vm", "body", m.VM); err != nil {
		return err
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm vnc info based on the context it is used
func (m *VMVncInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVncInfo) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMVncInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMVncInfo) UnmarshalBinary(b []byte) error {
	var res VMVncInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
