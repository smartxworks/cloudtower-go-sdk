// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadTaskWhereInput upload task where input
//
// swagger:model UploadTaskWhereInput
type UploadTaskWhereInput struct {

	// a n d
	AND []*UploadTaskWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*UploadTaskWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*UploadTaskWhereInput `json:"OR,omitempty"`

	// chunk size
	ChunkSize *int64 `json:"chunk_size,omitempty"`

	// chunk size gt
	ChunkSizeGt *int64 `json:"chunk_size_gt,omitempty"`

	// chunk size gte
	ChunkSizeGte *int64 `json:"chunk_size_gte,omitempty"`

	// chunk size in
	ChunkSizeIn []int64 `json:"chunk_size_in,omitempty"`

	// chunk size lt
	ChunkSizeLt *int64 `json:"chunk_size_lt,omitempty"`

	// chunk size lte
	ChunkSizeLte *int64 `json:"chunk_size_lte,omitempty"`

	// chunk size not
	ChunkSizeNot *int64 `json:"chunk_size_not,omitempty"`

	// chunk size not in
	ChunkSizeNotIn []int64 `json:"chunk_size_not_in,omitempty"`

	// current chunk
	CurrentChunk *int32 `json:"current_chunk,omitempty"`

	// current chunk gt
	CurrentChunkGt *int32 `json:"current_chunk_gt,omitempty"`

	// current chunk gte
	CurrentChunkGte *int32 `json:"current_chunk_gte,omitempty"`

	// current chunk in
	CurrentChunkIn []int32 `json:"current_chunk_in,omitempty"`

	// current chunk lt
	CurrentChunkLt *int32 `json:"current_chunk_lt,omitempty"`

	// current chunk lte
	CurrentChunkLte *int32 `json:"current_chunk_lte,omitempty"`

	// current chunk not
	CurrentChunkNot *int32 `json:"current_chunk_not,omitempty"`

	// current chunk not in
	CurrentChunkNotIn []int32 `json:"current_chunk_not_in,omitempty"`

	// finished at
	FinishedAt *string `json:"finished_at,omitempty"`

	// finished at gt
	FinishedAtGt *string `json:"finished_at_gt,omitempty"`

	// finished at gte
	FinishedAtGte *string `json:"finished_at_gte,omitempty"`

	// finished at in
	FinishedAtIn []string `json:"finished_at_in,omitempty"`

	// finished at lt
	FinishedAtLt *string `json:"finished_at_lt,omitempty"`

	// finished at lte
	FinishedAtLte *string `json:"finished_at_lte,omitempty"`

	// finished at not
	FinishedAtNot *string `json:"finished_at_not,omitempty"`

	// finished at not in
	FinishedAtNotIn []string `json:"finished_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// resource type
	ResourceType *UploadResourceType `json:"resource_type,omitempty"`

	// resource type in
	ResourceTypeIn []UploadResourceType `json:"resource_type_in,omitempty"`

	// resource type not
	ResourceTypeNot *UploadResourceType `json:"resource_type_not,omitempty"`

	// resource type not in
	ResourceTypeNotIn []UploadResourceType `json:"resource_type_not_in,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// status
	Status *UploadTaskStatus `json:"status,omitempty"`

	// status in
	StatusIn []UploadTaskStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *UploadTaskStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []UploadTaskStatus `json:"status_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	MarshalOpts *UploadTaskWhereInputMarshalOpts `json:"-"`
}

type UploadTaskWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	ChunkSize_Explicit_Null_When_Empty bool

	ChunkSizeGt_Explicit_Null_When_Empty bool

	ChunkSizeGte_Explicit_Null_When_Empty bool

	ChunkSizeIn_Explicit_Null_When_Empty bool

	ChunkSizeLt_Explicit_Null_When_Empty bool

	ChunkSizeLte_Explicit_Null_When_Empty bool

	ChunkSizeNot_Explicit_Null_When_Empty bool

	ChunkSizeNotIn_Explicit_Null_When_Empty bool

	CurrentChunk_Explicit_Null_When_Empty bool

	CurrentChunkGt_Explicit_Null_When_Empty bool

	CurrentChunkGte_Explicit_Null_When_Empty bool

	CurrentChunkIn_Explicit_Null_When_Empty bool

	CurrentChunkLt_Explicit_Null_When_Empty bool

	CurrentChunkLte_Explicit_Null_When_Empty bool

	CurrentChunkNot_Explicit_Null_When_Empty bool

	CurrentChunkNotIn_Explicit_Null_When_Empty bool

	FinishedAt_Explicit_Null_When_Empty bool

	FinishedAtGt_Explicit_Null_When_Empty bool

	FinishedAtGte_Explicit_Null_When_Empty bool

	FinishedAtIn_Explicit_Null_When_Empty bool

	FinishedAtLt_Explicit_Null_When_Empty bool

	FinishedAtLte_Explicit_Null_When_Empty bool

	FinishedAtNot_Explicit_Null_When_Empty bool

	FinishedAtNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	ResourceTypeIn_Explicit_Null_When_Empty bool

	ResourceTypeNot_Explicit_Null_When_Empty bool

	ResourceTypeNotIn_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SizeGt_Explicit_Null_When_Empty bool

	SizeGte_Explicit_Null_When_Empty bool

	SizeIn_Explicit_Null_When_Empty bool

	SizeLt_Explicit_Null_When_Empty bool

	SizeLte_Explicit_Null_When_Empty bool

	SizeNot_Explicit_Null_When_Empty bool

	SizeNotIn_Explicit_Null_When_Empty bool

	StartedAt_Explicit_Null_When_Empty bool

	StartedAtGt_Explicit_Null_When_Empty bool

	StartedAtGte_Explicit_Null_When_Empty bool

	StartedAtIn_Explicit_Null_When_Empty bool

	StartedAtLt_Explicit_Null_When_Empty bool

	StartedAtLte_Explicit_Null_When_Empty bool

	StartedAtNot_Explicit_Null_When_Empty bool

	StartedAtNotIn_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool
}

func (m UploadTaskWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field chunk_size
	if m.ChunkSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size\":")
		bytes, err := swag.WriteJSON(m.ChunkSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size\":null")
		first = false
	}

	// handle nullable field chunk_size_gt
	if m.ChunkSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_gt\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_gt\":null")
		first = false
	}

	// handle nullable field chunk_size_gte
	if m.ChunkSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_gte\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_gte\":null")
		first = false
	}

	// handle non nullable field chunk_size_in with omitempty
	if !swag.IsZero(m.ChunkSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_in\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field chunk_size_lt
	if m.ChunkSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_lt\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_lt\":null")
		first = false
	}

	// handle nullable field chunk_size_lte
	if m.ChunkSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_lte\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_lte\":null")
		first = false
	}

	// handle nullable field chunk_size_not
	if m.ChunkSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_not\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_not\":null")
		first = false
	}

	// handle non nullable field chunk_size_not_in with omitempty
	if !swag.IsZero(m.ChunkSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_size_not_in\":")
		bytes, err := swag.WriteJSON(m.ChunkSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field current_chunk
	if m.CurrentChunk != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk\":")
		bytes, err := swag.WriteJSON(m.CurrentChunk)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunk_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk\":null")
		first = false
	}

	// handle nullable field current_chunk_gt
	if m.CurrentChunkGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_gt\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunkGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_gt\":null")
		first = false
	}

	// handle nullable field current_chunk_gte
	if m.CurrentChunkGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_gte\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunkGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_gte\":null")
		first = false
	}

	// handle non nullable field current_chunk_in with omitempty
	if !swag.IsZero(m.CurrentChunkIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_in\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field current_chunk_lt
	if m.CurrentChunkLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_lt\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunkLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_lt\":null")
		first = false
	}

	// handle nullable field current_chunk_lte
	if m.CurrentChunkLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_lte\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunkLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_lte\":null")
		first = false
	}

	// handle nullable field current_chunk_not
	if m.CurrentChunkNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_not\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentChunkNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_not\":null")
		first = false
	}

	// handle non nullable field current_chunk_not_in with omitempty
	if !swag.IsZero(m.CurrentChunkNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_chunk_not_in\":")
		bytes, err := swag.WriteJSON(m.CurrentChunkNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at
	if m.FinishedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":")
		bytes, err := swag.WriteJSON(m.FinishedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":null")
		first = false
	}

	// handle nullable field finished_at_gt
	if m.FinishedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":null")
		first = false
	}

	// handle nullable field finished_at_gte
	if m.FinishedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":null")
		first = false
	}

	// handle non nullable field finished_at_in with omitempty
	if !swag.IsZero(m.FinishedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at_lt
	if m.FinishedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":null")
		first = false
	}

	// handle nullable field finished_at_lte
	if m.FinishedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":null")
		first = false
	}

	// handle nullable field finished_at_not
	if m.FinishedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":null")
		first = false
	}

	// handle non nullable field finished_at_not_in with omitempty
	if !swag.IsZero(m.FinishedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle non nullable field resource_type_in with omitempty
	if !swag.IsZero(m.ResourceTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_type_not
	if m.ResourceTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":null")
		first = false
	}

	// handle non nullable field resource_type_not_in with omitempty
	if !swag.IsZero(m.ResourceTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_gt
	if m.SizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":")
		bytes, err := swag.WriteJSON(m.SizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":null")
		first = false
	}

	// handle nullable field size_gte
	if m.SizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":")
		bytes, err := swag.WriteJSON(m.SizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":null")
		first = false
	}

	// handle non nullable field size_in with omitempty
	if !swag.IsZero(m.SizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_in\":")
		bytes, err := swag.WriteJSON(m.SizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size_lt
	if m.SizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":")
		bytes, err := swag.WriteJSON(m.SizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":null")
		first = false
	}

	// handle nullable field size_lte
	if m.SizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":")
		bytes, err := swag.WriteJSON(m.SizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":null")
		first = false
	}

	// handle nullable field size_not
	if m.SizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":")
		bytes, err := swag.WriteJSON(m.SizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":null")
		first = false
	}

	// handle non nullable field size_not_in with omitempty
	if !swag.IsZero(m.SizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not_in\":")
		bytes, err := swag.WriteJSON(m.SizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at
	if m.StartedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":")
		bytes, err := swag.WriteJSON(m.StartedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":null")
		first = false
	}

	// handle nullable field started_at_gt
	if m.StartedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":")
		bytes, err := swag.WriteJSON(m.StartedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":null")
		first = false
	}

	// handle nullable field started_at_gte
	if m.StartedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":")
		bytes, err := swag.WriteJSON(m.StartedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":null")
		first = false
	}

	// handle non nullable field started_at_in with omitempty
	if !swag.IsZero(m.StartedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at_lt
	if m.StartedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":")
		bytes, err := swag.WriteJSON(m.StartedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":null")
		first = false
	}

	// handle nullable field started_at_lte
	if m.StartedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":")
		bytes, err := swag.WriteJSON(m.StartedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":null")
		first = false
	}

	// handle nullable field started_at_not
	if m.StartedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":")
		bytes, err := swag.WriteJSON(m.StartedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":null")
		first = false
	}

	// handle non nullable field started_at_not_in with omitempty
	if !swag.IsZero(m.StartedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this upload task where input
func (m *UploadTaskWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadTaskWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) validateResourceTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceTypeIn); i++ {

		if err := m.ResourceTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateResourceTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceTypeNot) { // not required
		return nil
	}

	if m.ResourceTypeNot != nil {
		if err := m.ResourceTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) validateResourceTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceTypeNotIn); i++ {

		if err := m.ResourceTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this upload task where input based on the context it is used
func (m *UploadTaskWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadTaskWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceType != nil {
		if err := m.ResourceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateResourceTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceTypeIn); i++ {

		if err := m.ResourceTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateResourceTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceTypeNot != nil {
		if err := m.ResourceTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateResourceTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceTypeNotIn); i++ {

		if err := m.ResourceTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *UploadTaskWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UploadTaskWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadTaskWhereInput) UnmarshalBinary(b []byte) error {
	var res UploadTaskWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
