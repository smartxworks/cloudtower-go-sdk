// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntityFilter entity filter
//
// swagger:model EntityFilter
type EntityFilter struct {

	// apply to all clusters
	ApplyToAllClusters *bool `json:"apply_to_all_clusters,omitempty"`

	// clusters
	Clusters []*NestedCluster `json:"clusters,omitempty"`

	// entity type
	// Required: true
	EntityType *EntityType `json:"entity_type"`

	// exclude ids
	// Required: true
	ExcludeIds []string `json:"exclude_ids"`

	// exec failed cluster
	ExecFailedCluster []*NestedCluster `json:"exec_failed_cluster,omitempty"`

	// filter error
	// Required: true
	FilterError []string `json:"filter_error"`

	// filter status
	// Required: true
	FilterStatus *FilterStatus `json:"filter_status"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ids
	// Required: true
	Ids []string `json:"ids"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// preset
	Preset *string `json:"preset,omitempty"`

	// rules
	// Required: true
	Rules []*NestedFilterRule `json:"rules"`

	MarshalOpts *EntityFilterMarshalOpts `json:"-"`
}

type EntityFilterMarshalOpts struct {
	ApplyToAllClusters_Explicit_Null_When_Empty bool

	EntityType_Explicit_Null_When_Empty bool

	FilterStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Preset_Explicit_Null_When_Empty bool
}

func (m EntityFilter) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field apply_to_all_clusters
	if m.ApplyToAllClusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters\":")
		bytes, err := swag.WriteJSON(m.ApplyToAllClusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ApplyToAllClusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters\":null")
		first = false
	}

	// handle non nullable field clusters with omitempty
	if swag.IsZero(m.Clusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entity_type
	if m.EntityType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type\":")
		bytes, err := swag.WriteJSON(m.EntityType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type\":null")
		first = false
	}

	// handle non nullable field exclude_ids without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"exclude_ids\":")
	bytes, err := swag.WriteJSON(m.ExcludeIds)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	// handle non nullable field exec_failed_cluster with omitempty
	if swag.IsZero(m.ExecFailedCluster) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster\":")
		bytes, err := swag.WriteJSON(m.ExecFailedCluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field filter_error without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"filter_error\":")
	bytes, err := swag.WriteJSON(m.FilterError)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	// handle nullable field filter_status
	if m.FilterStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status\":")
		bytes, err := swag.WriteJSON(m.FilterStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FilterStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle non nullable field ids without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"ids\":")
	bytes, err := swag.WriteJSON(m.Ids)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field preset
	if m.Preset != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":")
		bytes, err := swag.WriteJSON(m.Preset)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Preset_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":null")
		first = false
	}

	// handle non nullable field rules without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"rules\":")
	bytes, err := swag.WriteJSON(m.Rules)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this entity filter
func (m *EntityFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecFailedCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityFilter) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilter) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	if m.EntityType != nil {
		if err := m.EntityType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilter) validateExcludeIds(formats strfmt.Registry) error {

	if err := validate.Required("exclude_ids", "body", m.ExcludeIds); err != nil {
		return err
	}

	return nil
}

func (m *EntityFilter) validateExecFailedCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecFailedCluster) { // not required
		return nil
	}

	for i := 0; i < len(m.ExecFailedCluster); i++ {
		if swag.IsZero(m.ExecFailedCluster[i]) { // not required
			continue
		}

		if m.ExecFailedCluster[i] != nil {
			if err := m.ExecFailedCluster[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exec_failed_cluster" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exec_failed_cluster" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilter) validateFilterError(formats strfmt.Registry) error {

	if err := validate.Required("filter_error", "body", m.FilterError); err != nil {
		return err
	}

	return nil
}

func (m *EntityFilter) validateFilterStatus(formats strfmt.Registry) error {

	if err := validate.Required("filter_status", "body", m.FilterStatus); err != nil {
		return err
	}

	if err := validate.Required("filter_status", "body", m.FilterStatus); err != nil {
		return err
	}

	if m.FilterStatus != nil {
		if err := m.FilterStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EntityFilter) validateIds(formats strfmt.Registry) error {

	if err := validate.Required("ids", "body", m.Ids); err != nil {
		return err
	}

	return nil
}

func (m *EntityFilter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EntityFilter) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this entity filter based on the context it is used
func (m *EntityFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecFailedCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityFilter) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilter) contextValidateEntityType(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityType != nil {
		if err := m.EntityType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilter) contextValidateExecFailedCluster(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecFailedCluster); i++ {

		if m.ExecFailedCluster[i] != nil {
			if err := m.ExecFailedCluster[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exec_failed_cluster" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exec_failed_cluster" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilter) contextValidateFilterStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterStatus != nil {
		if err := m.FilterStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilter) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {
			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityFilter) UnmarshalBinary(b []byte) error {
	var res EntityFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
