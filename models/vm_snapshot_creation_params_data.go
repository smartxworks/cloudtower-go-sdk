// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMSnapshotCreationParamsData Vm snapshot creation params data
//
// swagger:model VmSnapshotCreationParamsData
type VMSnapshotCreationParamsData struct {

	// consistent type
	ConsistentType *ConsistentType `json:"consistent_type,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// vm id
	// Required: true
	VMID *string `json:"vm_id"`

	MarshalOpts *VMSnapshotCreationParamsDataMarshalOpts `json:"-"`
}

type VMSnapshotCreationParamsDataMarshalOpts struct {
	ConsistentType_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	VMID_Explicit_Null_When_Empty bool
}

func (m VMSnapshotCreationParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field consistent_type
	if m.ConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistent_type\":")
		bytes, err := swag.WriteJSON(m.ConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistent_type\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field vm_id
	if m.VMID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_id\":")
		bytes, err := swag.WriteJSON(m.VMID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm snapshot creation params data
func (m *VMSnapshotCreationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotCreationParamsData) validateConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistentType) { // not required
		return nil
	}

	if m.ConsistentType != nil {
		if err := m.ConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshotCreationParamsData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotCreationParamsData) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("vm_id", "body", m.VMID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Vm snapshot creation params data based on the context it is used
func (m *VMSnapshotCreationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotCreationParamsData) contextValidateConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistentType != nil {
		if err := m.ConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistent_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotCreationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotCreationParamsData) UnmarshalBinary(b []byte) error {
	var res VMSnapshotCreationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
