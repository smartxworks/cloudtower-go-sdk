// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplicationObjectType replication object type
//
// swagger:model ReplicationObjectType
type ReplicationObjectType string

func NewReplicationObjectType(value ReplicationObjectType) *ReplicationObjectType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplicationObjectType.
func (m ReplicationObjectType) Pointer() *ReplicationObjectType {
	return &m
}

const (

	// ReplicationObjectTypeCONSISTENCYGROUP captures enum value "CONSISTENCY_GROUP"
	ReplicationObjectTypeCONSISTENCYGROUP ReplicationObjectType = "CONSISTENCY_GROUP"

	// ReplicationObjectTypeISCSILUN captures enum value "ISCSI_LUN"
	ReplicationObjectTypeISCSILUN ReplicationObjectType = "ISCSI_LUN"

	// ReplicationObjectTypeNVMFNAMESPACE captures enum value "NVMF_NAMESPACE"
	ReplicationObjectTypeNVMFNAMESPACE ReplicationObjectType = "NVMF_NAMESPACE"

	// ReplicationObjectTypeVM captures enum value "VM"
	ReplicationObjectTypeVM ReplicationObjectType = "VM"
)

// for schema
var replicationObjectTypeEnum []interface{}

func init() {
	var res []ReplicationObjectType
	if err := json.Unmarshal([]byte(`["CONSISTENCY_GROUP","ISCSI_LUN","NVMF_NAMESPACE","VM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationObjectTypeEnum = append(replicationObjectTypeEnum, v)
	}
}

func (m ReplicationObjectType) validateReplicationObjectTypeEnum(path, location string, value ReplicationObjectType) error {
	if err := validate.EnumCase(path, location, value, replicationObjectTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replication object type
func (m ReplicationObjectType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplicationObjectTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replication object type based on context it is used
func (m ReplicationObjectType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
