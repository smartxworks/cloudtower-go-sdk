// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationVMSpecDefinition application Vm spec definition
//
// swagger:model ApplicationVmSpecDefinition
type ApplicationVMSpecDefinition struct {

	// group
	Group *string `json:"group,omitempty"`

	// instances
	Instances []*ApplicationVMSpec `json:"instances,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// placement
	Placement *ApplicationVMSpecPlacement `json:"placement,omitempty"`

	// template
	Template *ApplicationVMSpec `json:"template,omitempty"`

	// vm affinity
	VMAffinity *ApplicationVMSpecAffinityPolicy `json:"vmAffinity,omitempty"`

	MarshalOpts *ApplicationVMSpecDefinitionMarshalOpts `json:"-"`
}

type ApplicationVMSpecDefinitionMarshalOpts struct {
	Group_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Placement_Explicit_Null_When_Empty bool

	Template_Explicit_Null_When_Empty bool

	VMAffinity_Explicit_Null_When_Empty bool
}

func (m ApplicationVMSpecDefinition) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field group
	if m.Group != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"group\":")
		bytes, err := swag.WriteJSON(m.Group)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Group_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"group\":null")
		first = false
	}

	// handle non nullable field instances with omitempty
	if swag.IsZero(m.Instances) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"instances\":")
		bytes, err := swag.WriteJSON(m.Instances)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field placement
	if m.Placement != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placement\":")
		bytes, err := swag.WriteJSON(m.Placement)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Placement_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"placement\":null")
		first = false
	}

	// handle nullable field template
	if m.Template != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"template\":")
		bytes, err := swag.WriteJSON(m.Template)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Template_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"template\":null")
		first = false
	}

	// handle nullable field vmAffinity
	if m.VMAffinity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmAffinity\":")
		bytes, err := swag.WriteJSON(m.VMAffinity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMAffinity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmAffinity\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this application Vm spec definition
func (m *ApplicationVMSpecDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMAffinity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpecDefinition) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpecDefinition) validatePlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if m.Placement != nil {
		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecDefinition) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecDefinition) validateVMAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.VMAffinity) { // not required
		return nil
	}

	if m.VMAffinity != nil {
		if err := m.VMAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmAffinity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application Vm spec definition based on the context it is used
func (m *ApplicationVMSpecDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpecDefinition) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {
			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationVMSpecDefinition) contextValidatePlacement(ctx context.Context, formats strfmt.Registry) error {

	if m.Placement != nil {
		if err := m.Placement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecDefinition) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {
		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecDefinition) contextValidateVMAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.VMAffinity != nil {
		if err := m.VMAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmAffinity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationVMSpecDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationVMSpecDefinition) UnmarshalBinary(b []byte) error {
	var res ApplicationVMSpecDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
