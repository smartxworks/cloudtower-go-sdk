// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupTargetExecutionWhereInput backup target execution where input
//
// swagger:model BackupTargetExecutionWhereInput
type BackupTargetExecutionWhereInput struct {

	// a n d
	AND []*BackupTargetExecutionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupTargetExecutionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupTargetExecutionWhereInput `json:"OR,omitempty"`

	// backup group
	BackupGroup *string `json:"backup_group,omitempty"`

	// backup group contains
	BackupGroupContains *string `json:"backup_group_contains,omitempty"`

	// backup group ends with
	BackupGroupEndsWith *string `json:"backup_group_ends_with,omitempty"`

	// backup group gt
	BackupGroupGt *string `json:"backup_group_gt,omitempty"`

	// backup group gte
	BackupGroupGte *string `json:"backup_group_gte,omitempty"`

	// backup group in
	BackupGroupIn []string `json:"backup_group_in,omitempty"`

	// backup group lt
	BackupGroupLt *string `json:"backup_group_lt,omitempty"`

	// backup group lte
	BackupGroupLte *string `json:"backup_group_lte,omitempty"`

	// backup group not
	BackupGroupNot *string `json:"backup_group_not,omitempty"`

	// backup group not contains
	BackupGroupNotContains *string `json:"backup_group_not_contains,omitempty"`

	// backup group not ends with
	BackupGroupNotEndsWith *string `json:"backup_group_not_ends_with,omitempty"`

	// backup group not in
	BackupGroupNotIn []string `json:"backup_group_not_in,omitempty"`

	// backup group not starts with
	BackupGroupNotStartsWith *string `json:"backup_group_not_starts_with,omitempty"`

	// backup group starts with
	BackupGroupStartsWith *string `json:"backup_group_starts_with,omitempty"`

	// backup plan execution
	BackupPlanExecution *BackupPlanExecutionWhereInput `json:"backup_plan_execution,omitempty"`

	// backup restore point
	BackupRestorePoint *BackupRestorePointWhereInput `json:"backup_restore_point,omitempty"`

	// cluster local id
	ClusterLocalID *string `json:"cluster_local_id,omitempty"`

	// cluster local id contains
	ClusterLocalIDContains *string `json:"cluster_local_id_contains,omitempty"`

	// cluster local id ends with
	ClusterLocalIDEndsWith *string `json:"cluster_local_id_ends_with,omitempty"`

	// cluster local id gt
	ClusterLocalIDGt *string `json:"cluster_local_id_gt,omitempty"`

	// cluster local id gte
	ClusterLocalIDGte *string `json:"cluster_local_id_gte,omitempty"`

	// cluster local id in
	ClusterLocalIDIn []string `json:"cluster_local_id_in,omitempty"`

	// cluster local id lt
	ClusterLocalIDLt *string `json:"cluster_local_id_lt,omitempty"`

	// cluster local id lte
	ClusterLocalIDLte *string `json:"cluster_local_id_lte,omitempty"`

	// cluster local id not
	ClusterLocalIDNot *string `json:"cluster_local_id_not,omitempty"`

	// cluster local id not contains
	ClusterLocalIDNotContains *string `json:"cluster_local_id_not_contains,omitempty"`

	// cluster local id not ends with
	ClusterLocalIDNotEndsWith *string `json:"cluster_local_id_not_ends_with,omitempty"`

	// cluster local id not in
	ClusterLocalIDNotIn []string `json:"cluster_local_id_not_in,omitempty"`

	// cluster local id not starts with
	ClusterLocalIDNotStartsWith *string `json:"cluster_local_id_not_starts_with,omitempty"`

	// cluster local id starts with
	ClusterLocalIDStartsWith *string `json:"cluster_local_id_starts_with,omitempty"`

	// duration
	Duration *int32 `json:"duration,omitempty"`

	// duration gt
	DurationGt *int32 `json:"duration_gt,omitempty"`

	// duration gte
	DurationGte *int32 `json:"duration_gte,omitempty"`

	// duration in
	DurationIn []int32 `json:"duration_in,omitempty"`

	// duration lt
	DurationLt *int32 `json:"duration_lt,omitempty"`

	// duration lte
	DurationLte *int32 `json:"duration_lte,omitempty"`

	// duration not
	DurationNot *int32 `json:"duration_not,omitempty"`

	// duration not in
	DurationNotIn []int32 `json:"duration_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// executed at
	ExecutedAt *string `json:"executed_at,omitempty"`

	// executed at gt
	ExecutedAtGt *string `json:"executed_at_gt,omitempty"`

	// executed at gte
	ExecutedAtGte *string `json:"executed_at_gte,omitempty"`

	// executed at in
	ExecutedAtIn []string `json:"executed_at_in,omitempty"`

	// executed at lt
	ExecutedAtLt *string `json:"executed_at_lt,omitempty"`

	// executed at lte
	ExecutedAtLte *string `json:"executed_at_lte,omitempty"`

	// executed at not
	ExecutedAtNot *string `json:"executed_at_not,omitempty"`

	// executed at not in
	ExecutedAtNotIn []string `json:"executed_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// parent backup
	ParentBackup *string `json:"parent_backup,omitempty"`

	// parent backup contains
	ParentBackupContains *string `json:"parent_backup_contains,omitempty"`

	// parent backup ends with
	ParentBackupEndsWith *string `json:"parent_backup_ends_with,omitempty"`

	// parent backup gt
	ParentBackupGt *string `json:"parent_backup_gt,omitempty"`

	// parent backup gte
	ParentBackupGte *string `json:"parent_backup_gte,omitempty"`

	// parent backup in
	ParentBackupIn []string `json:"parent_backup_in,omitempty"`

	// parent backup lt
	ParentBackupLt *string `json:"parent_backup_lt,omitempty"`

	// parent backup lte
	ParentBackupLte *string `json:"parent_backup_lte,omitempty"`

	// parent backup not
	ParentBackupNot *string `json:"parent_backup_not,omitempty"`

	// parent backup not contains
	ParentBackupNotContains *string `json:"parent_backup_not_contains,omitempty"`

	// parent backup not ends with
	ParentBackupNotEndsWith *string `json:"parent_backup_not_ends_with,omitempty"`

	// parent backup not in
	ParentBackupNotIn []string `json:"parent_backup_not_in,omitempty"`

	// parent backup not starts with
	ParentBackupNotStartsWith *string `json:"parent_backup_not_starts_with,omitempty"`

	// parent backup starts with
	ParentBackupStartsWith *string `json:"parent_backup_starts_with,omitempty"`

	// read bytes
	ReadBytes *int64 `json:"read_bytes,omitempty"`

	// read bytes gt
	ReadBytesGt *int64 `json:"read_bytes_gt,omitempty"`

	// read bytes gte
	ReadBytesGte *int64 `json:"read_bytes_gte,omitempty"`

	// read bytes in
	ReadBytesIn []int64 `json:"read_bytes_in,omitempty"`

	// read bytes lt
	ReadBytesLt *int64 `json:"read_bytes_lt,omitempty"`

	// read bytes lte
	ReadBytesLte *int64 `json:"read_bytes_lte,omitempty"`

	// read bytes not
	ReadBytesNot *int64 `json:"read_bytes_not,omitempty"`

	// read bytes not in
	ReadBytesNotIn []int64 `json:"read_bytes_not_in,omitempty"`

	// retry times
	RetryTimes *int32 `json:"retry_times,omitempty"`

	// retry times gt
	RetryTimesGt *int32 `json:"retry_times_gt,omitempty"`

	// retry times gte
	RetryTimesGte *int32 `json:"retry_times_gte,omitempty"`

	// retry times in
	RetryTimesIn []int32 `json:"retry_times_in,omitempty"`

	// retry times lt
	RetryTimesLt *int32 `json:"retry_times_lt,omitempty"`

	// retry times lte
	RetryTimesLte *int32 `json:"retry_times_lte,omitempty"`

	// retry times not
	RetryTimesNot *int32 `json:"retry_times_not,omitempty"`

	// retry times not in
	RetryTimesNotIn []int32 `json:"retry_times_not_in,omitempty"`

	// status
	Status *BackupExecutionStatus `json:"status,omitempty"`

	// status in
	StatusIn []BackupExecutionStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *BackupExecutionStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupExecutionStatus `json:"status_not_in,omitempty"`

	// total bytes
	TotalBytes *int64 `json:"total_bytes,omitempty"`

	// total bytes gt
	TotalBytesGt *int64 `json:"total_bytes_gt,omitempty"`

	// total bytes gte
	TotalBytesGte *int64 `json:"total_bytes_gte,omitempty"`

	// total bytes in
	TotalBytesIn []int64 `json:"total_bytes_in,omitempty"`

	// total bytes lt
	TotalBytesLt *int64 `json:"total_bytes_lt,omitempty"`

	// total bytes lte
	TotalBytesLte *int64 `json:"total_bytes_lte,omitempty"`

	// total bytes not
	TotalBytesNot *int64 `json:"total_bytes_not,omitempty"`

	// total bytes not in
	TotalBytesNotIn []int64 `json:"total_bytes_not_in,omitempty"`

	// type
	Type *BackupExecutionType `json:"type,omitempty"`

	// type in
	TypeIn []BackupExecutionType `json:"type_in,omitempty"`

	// type not
	TypeNot *BackupExecutionType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupExecutionType `json:"type_not_in,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	// vm local id
	VMLocalID *string `json:"vm_local_id,omitempty"`

	// vm local id contains
	VMLocalIDContains *string `json:"vm_local_id_contains,omitempty"`

	// vm local id ends with
	VMLocalIDEndsWith *string `json:"vm_local_id_ends_with,omitempty"`

	// vm local id gt
	VMLocalIDGt *string `json:"vm_local_id_gt,omitempty"`

	// vm local id gte
	VMLocalIDGte *string `json:"vm_local_id_gte,omitempty"`

	// vm local id in
	VMLocalIDIn []string `json:"vm_local_id_in,omitempty"`

	// vm local id lt
	VMLocalIDLt *string `json:"vm_local_id_lt,omitempty"`

	// vm local id lte
	VMLocalIDLte *string `json:"vm_local_id_lte,omitempty"`

	// vm local id not
	VMLocalIDNot *string `json:"vm_local_id_not,omitempty"`

	// vm local id not contains
	VMLocalIDNotContains *string `json:"vm_local_id_not_contains,omitempty"`

	// vm local id not ends with
	VMLocalIDNotEndsWith *string `json:"vm_local_id_not_ends_with,omitempty"`

	// vm local id not in
	VMLocalIDNotIn []string `json:"vm_local_id_not_in,omitempty"`

	// vm local id not starts with
	VMLocalIDNotStartsWith *string `json:"vm_local_id_not_starts_with,omitempty"`

	// vm local id starts with
	VMLocalIDStartsWith *string `json:"vm_local_id_starts_with,omitempty"`

	// vm name
	VMName *string `json:"vm_name,omitempty"`

	// vm name contains
	VMNameContains *string `json:"vm_name_contains,omitempty"`

	// vm name ends with
	VMNameEndsWith *string `json:"vm_name_ends_with,omitempty"`

	// vm name gt
	VMNameGt *string `json:"vm_name_gt,omitempty"`

	// vm name gte
	VMNameGte *string `json:"vm_name_gte,omitempty"`

	// vm name in
	VMNameIn []string `json:"vm_name_in,omitempty"`

	// vm name lt
	VMNameLt *string `json:"vm_name_lt,omitempty"`

	// vm name lte
	VMNameLte *string `json:"vm_name_lte,omitempty"`

	// vm name not
	VMNameNot *string `json:"vm_name_not,omitempty"`

	// vm name not contains
	VMNameNotContains *string `json:"vm_name_not_contains,omitempty"`

	// vm name not ends with
	VMNameNotEndsWith *string `json:"vm_name_not_ends_with,omitempty"`

	// vm name not in
	VMNameNotIn []string `json:"vm_name_not_in,omitempty"`

	// vm name not starts with
	VMNameNotStartsWith *string `json:"vm_name_not_starts_with,omitempty"`

	// vm name starts with
	VMNameStartsWith *string `json:"vm_name_starts_with,omitempty"`

	MarshalOpts *BackupTargetExecutionWhereInputMarshalOpts `json:"-"`
}

type BackupTargetExecutionWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	BackupGroup_Explicit_Null_When_Empty bool

	BackupGroupContains_Explicit_Null_When_Empty bool

	BackupGroupEndsWith_Explicit_Null_When_Empty bool

	BackupGroupGt_Explicit_Null_When_Empty bool

	BackupGroupGte_Explicit_Null_When_Empty bool

	BackupGroupIn_Explicit_Null_When_Empty bool

	BackupGroupLt_Explicit_Null_When_Empty bool

	BackupGroupLte_Explicit_Null_When_Empty bool

	BackupGroupNot_Explicit_Null_When_Empty bool

	BackupGroupNotContains_Explicit_Null_When_Empty bool

	BackupGroupNotEndsWith_Explicit_Null_When_Empty bool

	BackupGroupNotIn_Explicit_Null_When_Empty bool

	BackupGroupNotStartsWith_Explicit_Null_When_Empty bool

	BackupGroupStartsWith_Explicit_Null_When_Empty bool

	BackupPlanExecution_Explicit_Null_When_Empty bool

	BackupRestorePoint_Explicit_Null_When_Empty bool

	ClusterLocalID_Explicit_Null_When_Empty bool

	ClusterLocalIDContains_Explicit_Null_When_Empty bool

	ClusterLocalIDEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDGt_Explicit_Null_When_Empty bool

	ClusterLocalIDGte_Explicit_Null_When_Empty bool

	ClusterLocalIDIn_Explicit_Null_When_Empty bool

	ClusterLocalIDLt_Explicit_Null_When_Empty bool

	ClusterLocalIDLte_Explicit_Null_When_Empty bool

	ClusterLocalIDNot_Explicit_Null_When_Empty bool

	ClusterLocalIDNotContains_Explicit_Null_When_Empty bool

	ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDNotIn_Explicit_Null_When_Empty bool

	ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDStartsWith_Explicit_Null_When_Empty bool

	Duration_Explicit_Null_When_Empty bool

	DurationGt_Explicit_Null_When_Empty bool

	DurationGte_Explicit_Null_When_Empty bool

	DurationIn_Explicit_Null_When_Empty bool

	DurationLt_Explicit_Null_When_Empty bool

	DurationLte_Explicit_Null_When_Empty bool

	DurationNot_Explicit_Null_When_Empty bool

	DurationNotIn_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ExecutedAt_Explicit_Null_When_Empty bool

	ExecutedAtGt_Explicit_Null_When_Empty bool

	ExecutedAtGte_Explicit_Null_When_Empty bool

	ExecutedAtIn_Explicit_Null_When_Empty bool

	ExecutedAtLt_Explicit_Null_When_Empty bool

	ExecutedAtLte_Explicit_Null_When_Empty bool

	ExecutedAtNot_Explicit_Null_When_Empty bool

	ExecutedAtNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	ParentBackup_Explicit_Null_When_Empty bool

	ParentBackupContains_Explicit_Null_When_Empty bool

	ParentBackupEndsWith_Explicit_Null_When_Empty bool

	ParentBackupGt_Explicit_Null_When_Empty bool

	ParentBackupGte_Explicit_Null_When_Empty bool

	ParentBackupIn_Explicit_Null_When_Empty bool

	ParentBackupLt_Explicit_Null_When_Empty bool

	ParentBackupLte_Explicit_Null_When_Empty bool

	ParentBackupNot_Explicit_Null_When_Empty bool

	ParentBackupNotContains_Explicit_Null_When_Empty bool

	ParentBackupNotEndsWith_Explicit_Null_When_Empty bool

	ParentBackupNotIn_Explicit_Null_When_Empty bool

	ParentBackupNotStartsWith_Explicit_Null_When_Empty bool

	ParentBackupStartsWith_Explicit_Null_When_Empty bool

	ReadBytes_Explicit_Null_When_Empty bool

	ReadBytesGt_Explicit_Null_When_Empty bool

	ReadBytesGte_Explicit_Null_When_Empty bool

	ReadBytesIn_Explicit_Null_When_Empty bool

	ReadBytesLt_Explicit_Null_When_Empty bool

	ReadBytesLte_Explicit_Null_When_Empty bool

	ReadBytesNot_Explicit_Null_When_Empty bool

	ReadBytesNotIn_Explicit_Null_When_Empty bool

	RetryTimes_Explicit_Null_When_Empty bool

	RetryTimesGt_Explicit_Null_When_Empty bool

	RetryTimesGte_Explicit_Null_When_Empty bool

	RetryTimesIn_Explicit_Null_When_Empty bool

	RetryTimesLt_Explicit_Null_When_Empty bool

	RetryTimesLte_Explicit_Null_When_Empty bool

	RetryTimesNot_Explicit_Null_When_Empty bool

	RetryTimesNotIn_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	TotalBytes_Explicit_Null_When_Empty bool

	TotalBytesGt_Explicit_Null_When_Empty bool

	TotalBytesGte_Explicit_Null_When_Empty bool

	TotalBytesIn_Explicit_Null_When_Empty bool

	TotalBytesLt_Explicit_Null_When_Empty bool

	TotalBytesLte_Explicit_Null_When_Empty bool

	TotalBytesNot_Explicit_Null_When_Empty bool

	TotalBytesNotIn_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool

	VMLocalID_Explicit_Null_When_Empty bool

	VMLocalIDContains_Explicit_Null_When_Empty bool

	VMLocalIDEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDGt_Explicit_Null_When_Empty bool

	VMLocalIDGte_Explicit_Null_When_Empty bool

	VMLocalIDIn_Explicit_Null_When_Empty bool

	VMLocalIDLt_Explicit_Null_When_Empty bool

	VMLocalIDLte_Explicit_Null_When_Empty bool

	VMLocalIDNot_Explicit_Null_When_Empty bool

	VMLocalIDNotContains_Explicit_Null_When_Empty bool

	VMLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDNotIn_Explicit_Null_When_Empty bool

	VMLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	VMLocalIDStartsWith_Explicit_Null_When_Empty bool

	VMName_Explicit_Null_When_Empty bool

	VMNameContains_Explicit_Null_When_Empty bool

	VMNameEndsWith_Explicit_Null_When_Empty bool

	VMNameGt_Explicit_Null_When_Empty bool

	VMNameGte_Explicit_Null_When_Empty bool

	VMNameIn_Explicit_Null_When_Empty bool

	VMNameLt_Explicit_Null_When_Empty bool

	VMNameLte_Explicit_Null_When_Empty bool

	VMNameNot_Explicit_Null_When_Empty bool

	VMNameNotContains_Explicit_Null_When_Empty bool

	VMNameNotEndsWith_Explicit_Null_When_Empty bool

	VMNameNotIn_Explicit_Null_When_Empty bool

	VMNameNotStartsWith_Explicit_Null_When_Empty bool

	VMNameStartsWith_Explicit_Null_When_Empty bool
}

func (m BackupTargetExecutionWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_group
	if m.BackupGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group\":")
		bytes, err := swag.WriteJSON(m.BackupGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group\":null")
		first = false
	}

	// handle nullable field backup_group_contains
	if m.BackupGroupContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_contains\":")
		bytes, err := swag.WriteJSON(m.BackupGroupContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_contains\":null")
		first = false
	}

	// handle nullable field backup_group_ends_with
	if m.BackupGroupEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_ends_with\":")
		bytes, err := swag.WriteJSON(m.BackupGroupEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_ends_with\":null")
		first = false
	}

	// handle nullable field backup_group_gt
	if m.BackupGroupGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_gt\":")
		bytes, err := swag.WriteJSON(m.BackupGroupGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_gt\":null")
		first = false
	}

	// handle nullable field backup_group_gte
	if m.BackupGroupGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_gte\":")
		bytes, err := swag.WriteJSON(m.BackupGroupGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_gte\":null")
		first = false
	}

	// handle non nullable field backup_group_in with omitempty
	if !swag.IsZero(m.BackupGroupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_in\":")
		bytes, err := swag.WriteJSON(m.BackupGroupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_group_lt
	if m.BackupGroupLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_lt\":")
		bytes, err := swag.WriteJSON(m.BackupGroupLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_lt\":null")
		first = false
	}

	// handle nullable field backup_group_lte
	if m.BackupGroupLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_lte\":")
		bytes, err := swag.WriteJSON(m.BackupGroupLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_lte\":null")
		first = false
	}

	// handle nullable field backup_group_not
	if m.BackupGroupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not\":")
		bytes, err := swag.WriteJSON(m.BackupGroupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not\":null")
		first = false
	}

	// handle nullable field backup_group_not_contains
	if m.BackupGroupNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_contains\":")
		bytes, err := swag.WriteJSON(m.BackupGroupNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_contains\":null")
		first = false
	}

	// handle nullable field backup_group_not_ends_with
	if m.BackupGroupNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.BackupGroupNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_ends_with\":null")
		first = false
	}

	// handle non nullable field backup_group_not_in with omitempty
	if !swag.IsZero(m.BackupGroupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_in\":")
		bytes, err := swag.WriteJSON(m.BackupGroupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_group_not_starts_with
	if m.BackupGroupNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.BackupGroupNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_not_starts_with\":null")
		first = false
	}

	// handle nullable field backup_group_starts_with
	if m.BackupGroupStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_starts_with\":")
		bytes, err := swag.WriteJSON(m.BackupGroupStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupGroupStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_group_starts_with\":null")
		first = false
	}

	// handle nullable field backup_plan_execution
	if m.BackupPlanExecution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_execution\":")
		bytes, err := swag.WriteJSON(m.BackupPlanExecution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlanExecution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_execution\":null")
		first = false
	}

	// handle nullable field backup_restore_point
	if m.BackupRestorePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point\":null")
		first = false
	}

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field cluster_local_id_contains
	if m.ClusterLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_ends_with
	if m.ClusterLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gt
	if m.ClusterLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gte
	if m.ClusterLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_lt
	if m.ClusterLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_lte
	if m.ClusterLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not
	if m.ClusterLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_contains
	if m.ClusterLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_ends_with
	if m.ClusterLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_not_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_not_starts_with
	if m.ClusterLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_starts_with
	if m.ClusterLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field duration
	if m.Duration != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration\":")
		bytes, err := swag.WriteJSON(m.Duration)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Duration_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration\":null")
		first = false
	}

	// handle nullable field duration_gt
	if m.DurationGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_gt\":")
		bytes, err := swag.WriteJSON(m.DurationGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DurationGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_gt\":null")
		first = false
	}

	// handle nullable field duration_gte
	if m.DurationGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_gte\":")
		bytes, err := swag.WriteJSON(m.DurationGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DurationGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_gte\":null")
		first = false
	}

	// handle non nullable field duration_in with omitempty
	if !swag.IsZero(m.DurationIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_in\":")
		bytes, err := swag.WriteJSON(m.DurationIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field duration_lt
	if m.DurationLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_lt\":")
		bytes, err := swag.WriteJSON(m.DurationLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DurationLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_lt\":null")
		first = false
	}

	// handle nullable field duration_lte
	if m.DurationLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_lte\":")
		bytes, err := swag.WriteJSON(m.DurationLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DurationLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_lte\":null")
		first = false
	}

	// handle nullable field duration_not
	if m.DurationNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_not\":")
		bytes, err := swag.WriteJSON(m.DurationNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DurationNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_not\":null")
		first = false
	}

	// handle non nullable field duration_not_in with omitempty
	if !swag.IsZero(m.DurationNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"duration_not_in\":")
		bytes, err := swag.WriteJSON(m.DurationNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field executed_at
	if m.ExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at\":")
		bytes, err := swag.WriteJSON(m.ExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at\":null")
		first = false
	}

	// handle nullable field executed_at_gt
	if m.ExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_gt\":null")
		first = false
	}

	// handle nullable field executed_at_gte
	if m.ExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_gte\":null")
		first = false
	}

	// handle non nullable field executed_at_in with omitempty
	if !swag.IsZero(m.ExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_in\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field executed_at_lt
	if m.ExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_lt\":null")
		first = false
	}

	// handle nullable field executed_at_lte
	if m.ExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_lte\":null")
		first = false
	}

	// handle nullable field executed_at_not
	if m.ExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_not\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_not\":null")
		first = false
	}

	// handle non nullable field executed_at_not_in with omitempty
	if !swag.IsZero(m.ExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.ExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field parent_backup
	if m.ParentBackup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup\":")
		bytes, err := swag.WriteJSON(m.ParentBackup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup\":null")
		first = false
	}

	// handle nullable field parent_backup_contains
	if m.ParentBackupContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_contains\":")
		bytes, err := swag.WriteJSON(m.ParentBackupContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_contains\":null")
		first = false
	}

	// handle nullable field parent_backup_ends_with
	if m.ParentBackupEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentBackupEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_ends_with\":null")
		first = false
	}

	// handle nullable field parent_backup_gt
	if m.ParentBackupGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_gt\":")
		bytes, err := swag.WriteJSON(m.ParentBackupGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_gt\":null")
		first = false
	}

	// handle nullable field parent_backup_gte
	if m.ParentBackupGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_gte\":")
		bytes, err := swag.WriteJSON(m.ParentBackupGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_gte\":null")
		first = false
	}

	// handle non nullable field parent_backup_in with omitempty
	if !swag.IsZero(m.ParentBackupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_in\":")
		bytes, err := swag.WriteJSON(m.ParentBackupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_backup_lt
	if m.ParentBackupLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_lt\":")
		bytes, err := swag.WriteJSON(m.ParentBackupLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_lt\":null")
		first = false
	}

	// handle nullable field parent_backup_lte
	if m.ParentBackupLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_lte\":")
		bytes, err := swag.WriteJSON(m.ParentBackupLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_lte\":null")
		first = false
	}

	// handle nullable field parent_backup_not
	if m.ParentBackupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not\":")
		bytes, err := swag.WriteJSON(m.ParentBackupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not\":null")
		first = false
	}

	// handle nullable field parent_backup_not_contains
	if m.ParentBackupNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_contains\":")
		bytes, err := swag.WriteJSON(m.ParentBackupNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_contains\":null")
		first = false
	}

	// handle nullable field parent_backup_not_ends_with
	if m.ParentBackupNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentBackupNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_ends_with\":null")
		first = false
	}

	// handle non nullable field parent_backup_not_in with omitempty
	if !swag.IsZero(m.ParentBackupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_in\":")
		bytes, err := swag.WriteJSON(m.ParentBackupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_backup_not_starts_with
	if m.ParentBackupNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentBackupNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_not_starts_with\":null")
		first = false
	}

	// handle nullable field parent_backup_starts_with
	if m.ParentBackupStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentBackupStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentBackupStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_backup_starts_with\":null")
		first = false
	}

	// handle nullable field read_bytes
	if m.ReadBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes\":")
		bytes, err := swag.WriteJSON(m.ReadBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes\":null")
		first = false
	}

	// handle nullable field read_bytes_gt
	if m.ReadBytesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_gt\":")
		bytes, err := swag.WriteJSON(m.ReadBytesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_gt\":null")
		first = false
	}

	// handle nullable field read_bytes_gte
	if m.ReadBytesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_gte\":")
		bytes, err := swag.WriteJSON(m.ReadBytesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_gte\":null")
		first = false
	}

	// handle non nullable field read_bytes_in with omitempty
	if !swag.IsZero(m.ReadBytesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_in\":")
		bytes, err := swag.WriteJSON(m.ReadBytesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field read_bytes_lt
	if m.ReadBytesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_lt\":")
		bytes, err := swag.WriteJSON(m.ReadBytesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_lt\":null")
		first = false
	}

	// handle nullable field read_bytes_lte
	if m.ReadBytesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_lte\":")
		bytes, err := swag.WriteJSON(m.ReadBytesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_lte\":null")
		first = false
	}

	// handle nullable field read_bytes_not
	if m.ReadBytesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_not\":")
		bytes, err := swag.WriteJSON(m.ReadBytesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReadBytesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_not\":null")
		first = false
	}

	// handle non nullable field read_bytes_not_in with omitempty
	if !swag.IsZero(m.ReadBytesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"read_bytes_not_in\":")
		bytes, err := swag.WriteJSON(m.ReadBytesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field retry_times
	if m.RetryTimes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times\":")
		bytes, err := swag.WriteJSON(m.RetryTimes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times\":null")
		first = false
	}

	// handle nullable field retry_times_gt
	if m.RetryTimesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_gt\":")
		bytes, err := swag.WriteJSON(m.RetryTimesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_gt\":null")
		first = false
	}

	// handle nullable field retry_times_gte
	if m.RetryTimesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_gte\":")
		bytes, err := swag.WriteJSON(m.RetryTimesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_gte\":null")
		first = false
	}

	// handle non nullable field retry_times_in with omitempty
	if !swag.IsZero(m.RetryTimesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_in\":")
		bytes, err := swag.WriteJSON(m.RetryTimesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field retry_times_lt
	if m.RetryTimesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_lt\":")
		bytes, err := swag.WriteJSON(m.RetryTimesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_lt\":null")
		first = false
	}

	// handle nullable field retry_times_lte
	if m.RetryTimesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_lte\":")
		bytes, err := swag.WriteJSON(m.RetryTimesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_lte\":null")
		first = false
	}

	// handle nullable field retry_times_not
	if m.RetryTimesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_not\":")
		bytes, err := swag.WriteJSON(m.RetryTimesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryTimesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_not\":null")
		first = false
	}

	// handle non nullable field retry_times_not_in with omitempty
	if !swag.IsZero(m.RetryTimesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_times_not_in\":")
		bytes, err := swag.WriteJSON(m.RetryTimesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_bytes
	if m.TotalBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes\":")
		bytes, err := swag.WriteJSON(m.TotalBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes\":null")
		first = false
	}

	// handle nullable field total_bytes_gt
	if m.TotalBytesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_gt\":")
		bytes, err := swag.WriteJSON(m.TotalBytesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_gt\":null")
		first = false
	}

	// handle nullable field total_bytes_gte
	if m.TotalBytesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_gte\":")
		bytes, err := swag.WriteJSON(m.TotalBytesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_gte\":null")
		first = false
	}

	// handle non nullable field total_bytes_in with omitempty
	if !swag.IsZero(m.TotalBytesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_in\":")
		bytes, err := swag.WriteJSON(m.TotalBytesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_bytes_lt
	if m.TotalBytesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_lt\":")
		bytes, err := swag.WriteJSON(m.TotalBytesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_lt\":null")
		first = false
	}

	// handle nullable field total_bytes_lte
	if m.TotalBytesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_lte\":")
		bytes, err := swag.WriteJSON(m.TotalBytesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_lte\":null")
		first = false
	}

	// handle nullable field total_bytes_not
	if m.TotalBytesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_not\":")
		bytes, err := swag.WriteJSON(m.TotalBytesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalBytesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_not\":null")
		first = false
	}

	// handle non nullable field total_bytes_not_in with omitempty
	if !swag.IsZero(m.TotalBytesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_bytes_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalBytesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	// handle nullable field vm_local_id
	if m.VMLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":")
		bytes, err := swag.WriteJSON(m.VMLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":null")
		first = false
	}

	// handle nullable field vm_local_id_contains
	if m.VMLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_ends_with
	if m.VMLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_gt
	if m.VMLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":null")
		first = false
	}

	// handle nullable field vm_local_id_gte
	if m.VMLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":null")
		first = false
	}

	// handle non nullable field vm_local_id_in with omitempty
	if !swag.IsZero(m.VMLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_lt
	if m.VMLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":null")
		first = false
	}

	// handle nullable field vm_local_id_lte
	if m.VMLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":null")
		first = false
	}

	// handle nullable field vm_local_id_not
	if m.VMLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_contains
	if m.VMLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_ends_with
	if m.VMLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_local_id_not_in with omitempty
	if !swag.IsZero(m.VMLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_not_starts_with
	if m.VMLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_starts_with
	if m.VMLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name
	if m.VMName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":")
		bytes, err := swag.WriteJSON(m.VMName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":null")
		first = false
	}

	// handle nullable field vm_name_contains
	if m.VMNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":null")
		first = false
	}

	// handle nullable field vm_name_ends_with
	if m.VMNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":null")
		first = false
	}

	// handle nullable field vm_name_gt
	if m.VMNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":")
		bytes, err := swag.WriteJSON(m.VMNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":null")
		first = false
	}

	// handle nullable field vm_name_gte
	if m.VMNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":")
		bytes, err := swag.WriteJSON(m.VMNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":null")
		first = false
	}

	// handle non nullable field vm_name_in with omitempty
	if !swag.IsZero(m.VMNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_in\":")
		bytes, err := swag.WriteJSON(m.VMNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_lt
	if m.VMNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":")
		bytes, err := swag.WriteJSON(m.VMNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":null")
		first = false
	}

	// handle nullable field vm_name_lte
	if m.VMNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":")
		bytes, err := swag.WriteJSON(m.VMNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":null")
		first = false
	}

	// handle nullable field vm_name_not
	if m.VMNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":")
		bytes, err := swag.WriteJSON(m.VMNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":null")
		first = false
	}

	// handle nullable field vm_name_not_contains
	if m.VMNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":null")
		first = false
	}

	// handle nullable field vm_name_not_ends_with
	if m.VMNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_name_not_in with omitempty
	if !swag.IsZero(m.VMNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_in\":")
		bytes, err := swag.WriteJSON(m.VMNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_not_starts_with
	if m.VMNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name_starts_with
	if m.VMNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup target execution where input
func (m *BackupTargetExecutionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTargetExecutionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateBackupPlanExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecution) { // not required
		return nil
	}

	if m.BackupPlanExecution != nil {
		if err := m.BackupPlanExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateBackupRestorePoint(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePoint) { // not required
		return nil
	}

	if m.BackupRestorePoint != nil {
		if err := m.BackupRestorePoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup target execution where input based on the context it is used
func (m *BackupTargetExecutionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateBackupPlanExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlanExecution != nil {
		if err := m.BackupPlanExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateBackupRestorePoint(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePoint != nil {
		if err := m.BackupRestorePoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupTargetExecutionWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupTargetExecutionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupTargetExecutionWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupTargetExecutionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
