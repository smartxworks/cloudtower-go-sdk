// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EcpLicense ecp license
//
// swagger:model EcpLicense
type EcpLicense struct {

	// cluster
	Cluster *NestedCluster `json:"cluster,omitempty"`

	// cluster local id
	// Required: true
	ClusterLocalID *string `json:"cluster_local_id"`

	// ecp edition
	// Required: true
	EcpEdition *EcpEdition `json:"ecp_edition"`

	// expire date
	ExpireDate *string `json:"expire_date,omitempty"`

	// has metrox
	HasMetrox *bool `json:"has_metrox,omitempty"`

	// has remote backup
	HasRemoteBackup *bool `json:"has_remote_backup,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// license type
	LicenseType *LicenseType `json:"license_type,omitempty"`

	// max core num
	// Required: true
	MaxCoreNum *int32 `json:"max_core_num"`

	// max physical data capacity
	MaxPhysicalDataCapacity *float64 `json:"max_physical_data_capacity,omitempty"`

	// original code
	OriginalCode *string `json:"original_code,omitempty"`

	// product name
	// Required: true
	ProductName *string `json:"product_name"`

	// serial
	// Required: true
	Serial *string `json:"serial"`

	// sign date
	// Required: true
	SignDate *string `json:"sign_date"`

	// subscription expire date
	SubscriptionExpireDate *string `json:"subscription_expire_date,omitempty"`

	// subscription start date
	SubscriptionStartDate *string `json:"subscription_start_date,omitempty"`

	// vendor
	Vendor *string `json:"vendor,omitempty"`

	// version
	// Required: true
	Version *int32 `json:"version"`

	MarshalOpts *EcpLicenseMarshalOpts `json:"-"`
}

type EcpLicenseMarshalOpts struct {
	Cluster_Explicit_Null_When_Empty bool

	ClusterLocalID_Explicit_Null_When_Empty bool

	EcpEdition_Explicit_Null_When_Empty bool

	ExpireDate_Explicit_Null_When_Empty bool

	HasMetrox_Explicit_Null_When_Empty bool

	HasRemoteBackup_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LicenseType_Explicit_Null_When_Empty bool

	MaxCoreNum_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacity_Explicit_Null_When_Empty bool

	OriginalCode_Explicit_Null_When_Empty bool

	ProductName_Explicit_Null_When_Empty bool

	Serial_Explicit_Null_When_Empty bool

	SignDate_Explicit_Null_When_Empty bool

	SubscriptionExpireDate_Explicit_Null_When_Empty bool

	SubscriptionStartDate_Explicit_Null_When_Empty bool

	Vendor_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool
}

func (m EcpLicense) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field ecp_edition
	if m.EcpEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition\":")
		bytes, err := swag.WriteJSON(m.EcpEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcpEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition\":null")
		first = false
	}

	// handle nullable field expire_date
	if m.ExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":")
		bytes, err := swag.WriteJSON(m.ExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":null")
		first = false
	}

	// handle nullable field has_metrox
	if m.HasMetrox != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":")
		bytes, err := swag.WriteJSON(m.HasMetrox)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasMetrox_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":null")
		first = false
	}

	// handle nullable field has_remote_backup
	if m.HasRemoteBackup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup\":")
		bytes, err := swag.WriteJSON(m.HasRemoteBackup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasRemoteBackup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field license_type
	if m.LicenseType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":")
		bytes, err := swag.WriteJSON(m.LicenseType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":null")
		first = false
	}

	// handle nullable field max_core_num
	if m.MaxCoreNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity
	if m.MaxPhysicalDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":null")
		first = false
	}

	// handle nullable field original_code
	if m.OriginalCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code\":")
		bytes, err := swag.WriteJSON(m.OriginalCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code\":null")
		first = false
	}

	// handle nullable field product_name
	if m.ProductName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name\":")
		bytes, err := swag.WriteJSON(m.ProductName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name\":null")
		first = false
	}

	// handle nullable field serial
	if m.Serial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":")
		bytes, err := swag.WriteJSON(m.Serial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Serial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":null")
		first = false
	}

	// handle nullable field sign_date
	if m.SignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":")
		bytes, err := swag.WriteJSON(m.SignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":null")
		first = false
	}

	// handle nullable field subscription_expire_date
	if m.SubscriptionExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date\":null")
		first = false
	}

	// handle nullable field subscription_start_date
	if m.SubscriptionStartDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date\":null")
		first = false
	}

	// handle nullable field vendor
	if m.Vendor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor\":")
		bytes, err := swag.WriteJSON(m.Vendor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vendor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this ecp license
func (m *EcpLicense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCoreNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EcpLicense) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicense) validateClusterLocalID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_local_id", "body", m.ClusterLocalID); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateEcpEdition(formats strfmt.Registry) error {

	if err := validate.Required("ecp_edition", "body", m.EcpEdition); err != nil {
		return err
	}

	if err := validate.Required("ecp_edition", "body", m.EcpEdition); err != nil {
		return err
	}

	if m.EcpEdition != nil {
		if err := m.EcpEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicense) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateLicenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	if m.LicenseType != nil {
		if err := m.LicenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicense) validateMaxCoreNum(formats strfmt.Registry) error {

	if err := validate.Required("max_core_num", "body", m.MaxCoreNum); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("product_name", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", m.Serial); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateSignDate(formats strfmt.Registry) error {

	if err := validate.Required("sign_date", "body", m.SignDate); err != nil {
		return err
	}

	return nil
}

func (m *EcpLicense) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ecp license based on the context it is used
func (m *EcpLicense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EcpLicense) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicense) contextValidateEcpEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.EcpEdition != nil {
		if err := m.EcpEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicense) contextValidateLicenseType(ctx context.Context, formats strfmt.Registry) error {

	if m.LicenseType != nil {
		if err := m.LicenseType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EcpLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EcpLicense) UnmarshalBinary(b []byte) error {
	var res EcpLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
