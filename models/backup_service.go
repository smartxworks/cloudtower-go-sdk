// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupService backup service
//
// swagger:model BackupService
type BackupService struct {

	// application
	Application *NestedCloudTowerApplication `json:"application,omitempty"`

	// backup clusters
	BackupClusters []*NestedCluster `json:"backup_clusters,omitempty"`

	// backup network gateway
	BackupNetworkGateway *string `json:"backup_network_gateway,omitempty"`

	// backup network ip
	BackupNetworkIP *string `json:"backup_network_ip,omitempty"`

	// backup network subnet mask
	BackupNetworkSubnetMask *string `json:"backup_network_subnet_mask,omitempty"`

	// backup network type
	BackupNetworkType *BackupServiceNetworkType `json:"backup_network_type,omitempty"`

	// backup network vlan
	BackupNetworkVlan *string `json:"backup_network_vlan,omitempty"`

	// backup plans
	BackupPlans []*NestedBackupPlan `json:"backup_plans,omitempty"`

	// backup rd iops max
	BackupRdIopsMax *int64 `json:"backup_rd_iops_max,omitempty"`

	// backup store repositories
	BackupStoreRepositories []*NestedBackupStoreRepository `json:"backup_store_repositories,omitempty"`

	// backup wr iops max
	BackupWrIopsMax *int64 `json:"backup_wr_iops_max,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// kube config
	// Required: true
	KubeConfig *string `json:"kube_config"`

	// management network gateway
	ManagementNetworkGateway *string `json:"management_network_gateway,omitempty"`

	// management network ip
	ManagementNetworkIP *string `json:"management_network_ip,omitempty"`

	// management network subnet mask
	ManagementNetworkSubnetMask *string `json:"management_network_subnet_mask,omitempty"`

	// management network vlan
	ManagementNetworkVlan *string `json:"management_network_vlan,omitempty"`

	// max job retry times
	MaxJobRetryTimes *int32 `json:"max_job_retry_times,omitempty"`

	// max parallel backup jobs
	MaxParallelBackupJobs *int32 `json:"max_parallel_backup_jobs,omitempty"`

	// max parallel restore jobs
	MaxParallelRestoreJobs *int32 `json:"max_parallel_restore_jobs,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// network status
	NetworkStatus []*NestedBackupServiceNetworkStatus `json:"network_status,omitempty"`

	// restore rd iops max
	RestoreRdIopsMax *int64 `json:"restore_rd_iops_max,omitempty"`

	// restore wr iops max
	RestoreWrIopsMax *int64 `json:"restore_wr_iops_max,omitempty"`

	// retry interval
	RetryInterval *int32 `json:"retry_interval,omitempty"`

	// running vm
	RunningVM *NestedVM `json:"running_vm,omitempty"`

	// status
	Status *BackupServiceStatus `json:"status,omitempty"`

	// storage network gateway
	StorageNetworkGateway *string `json:"storage_network_gateway,omitempty"`

	// storage network ip
	StorageNetworkIP *string `json:"storage_network_ip,omitempty"`

	// storage network subnet mask
	StorageNetworkSubnetMask *string `json:"storage_network_subnet_mask,omitempty"`

	// storage network type
	StorageNetworkType *BackupServiceNetworkType `json:"storage_network_type,omitempty"`

	// storage network vlan
	StorageNetworkVlan *string `json:"storage_network_vlan,omitempty"`

	MarshalOpts *BackupServiceMarshalOpts `json:"-"`
}

type BackupServiceMarshalOpts struct {
	Application_Explicit_Null_When_Empty bool

	BackupClusters_Explicit_Null_When_Empty bool

	BackupNetworkGateway_Explicit_Null_When_Empty bool

	BackupNetworkIP_Explicit_Null_When_Empty bool

	BackupNetworkSubnetMask_Explicit_Null_When_Empty bool

	BackupNetworkType_Explicit_Null_When_Empty bool

	BackupNetworkVlan_Explicit_Null_When_Empty bool

	BackupPlans_Explicit_Null_When_Empty bool

	BackupRdIopsMax_Explicit_Null_When_Empty bool

	BackupStoreRepositories_Explicit_Null_When_Empty bool

	BackupWrIopsMax_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	KubeConfig_Explicit_Null_When_Empty bool

	ManagementNetworkGateway_Explicit_Null_When_Empty bool

	ManagementNetworkIP_Explicit_Null_When_Empty bool

	ManagementNetworkSubnetMask_Explicit_Null_When_Empty bool

	ManagementNetworkVlan_Explicit_Null_When_Empty bool

	MaxJobRetryTimes_Explicit_Null_When_Empty bool

	MaxParallelBackupJobs_Explicit_Null_When_Empty bool

	MaxParallelRestoreJobs_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NetworkStatus_Explicit_Null_When_Empty bool

	RestoreRdIopsMax_Explicit_Null_When_Empty bool

	RestoreWrIopsMax_Explicit_Null_When_Empty bool

	RetryInterval_Explicit_Null_When_Empty bool

	RunningVM_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StorageNetworkGateway_Explicit_Null_When_Empty bool

	StorageNetworkIP_Explicit_Null_When_Empty bool

	StorageNetworkSubnetMask_Explicit_Null_When_Empty bool

	StorageNetworkType_Explicit_Null_When_Empty bool

	StorageNetworkVlan_Explicit_Null_When_Empty bool
}

func (m BackupService) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field application
	if m.Application != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":")
		bytes, err := swag.WriteJSON(m.Application)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Application_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":null")
		first = false
	}

	// handle non nullable field backup_clusters with omitempty
	if !swag.IsZero(m.BackupClusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_clusters\":")
		bytes, err := swag.WriteJSON(m.BackupClusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_network_gateway
	if m.BackupNetworkGateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_gateway\":")
		bytes, err := swag.WriteJSON(m.BackupNetworkGateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupNetworkGateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_gateway\":null")
		first = false
	}

	// handle nullable field backup_network_ip
	if m.BackupNetworkIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_ip\":")
		bytes, err := swag.WriteJSON(m.BackupNetworkIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupNetworkIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_ip\":null")
		first = false
	}

	// handle nullable field backup_network_subnet_mask
	if m.BackupNetworkSubnetMask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_subnet_mask\":")
		bytes, err := swag.WriteJSON(m.BackupNetworkSubnetMask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupNetworkSubnetMask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_subnet_mask\":null")
		first = false
	}

	// handle nullable field backup_network_type
	if m.BackupNetworkType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_type\":")
		bytes, err := swag.WriteJSON(m.BackupNetworkType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupNetworkType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_type\":null")
		first = false
	}

	// handle nullable field backup_network_vlan
	if m.BackupNetworkVlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_vlan\":")
		bytes, err := swag.WriteJSON(m.BackupNetworkVlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupNetworkVlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_network_vlan\":null")
		first = false
	}

	// handle non nullable field backup_plans with omitempty
	if !swag.IsZero(m.BackupPlans) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans\":")
		bytes, err := swag.WriteJSON(m.BackupPlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_rd_iops_max
	if m.BackupRdIopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_rd_iops_max\":")
		bytes, err := swag.WriteJSON(m.BackupRdIopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRdIopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_rd_iops_max\":null")
		first = false
	}

	// handle non nullable field backup_store_repositories with omitempty
	if !swag.IsZero(m.BackupStoreRepositories) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repositories\":")
		bytes, err := swag.WriteJSON(m.BackupStoreRepositories)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_wr_iops_max
	if m.BackupWrIopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_wr_iops_max\":")
		bytes, err := swag.WriteJSON(m.BackupWrIopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupWrIopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_wr_iops_max\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field kube_config
	if m.KubeConfig != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":")
		bytes, err := swag.WriteJSON(m.KubeConfig)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfig_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":null")
		first = false
	}

	// handle nullable field management_network_gateway
	if m.ManagementNetworkGateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_gateway\":")
		bytes, err := swag.WriteJSON(m.ManagementNetworkGateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementNetworkGateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_gateway\":null")
		first = false
	}

	// handle nullable field management_network_ip
	if m.ManagementNetworkIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_ip\":")
		bytes, err := swag.WriteJSON(m.ManagementNetworkIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementNetworkIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_ip\":null")
		first = false
	}

	// handle nullable field management_network_subnet_mask
	if m.ManagementNetworkSubnetMask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_subnet_mask\":")
		bytes, err := swag.WriteJSON(m.ManagementNetworkSubnetMask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementNetworkSubnetMask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_subnet_mask\":null")
		first = false
	}

	// handle nullable field management_network_vlan
	if m.ManagementNetworkVlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_vlan\":")
		bytes, err := swag.WriteJSON(m.ManagementNetworkVlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementNetworkVlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network_vlan\":null")
		first = false
	}

	// handle nullable field max_job_retry_times
	if m.MaxJobRetryTimes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_job_retry_times\":")
		bytes, err := swag.WriteJSON(m.MaxJobRetryTimes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxJobRetryTimes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_job_retry_times\":null")
		first = false
	}

	// handle nullable field max_parallel_backup_jobs
	if m.MaxParallelBackupJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_parallel_backup_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxParallelBackupJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxParallelBackupJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_parallel_backup_jobs\":null")
		first = false
	}

	// handle nullable field max_parallel_restore_jobs
	if m.MaxParallelRestoreJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_parallel_restore_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxParallelRestoreJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxParallelRestoreJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_parallel_restore_jobs\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field network_status with omitempty
	if !swag.IsZero(m.NetworkStatus) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_status\":")
		bytes, err := swag.WriteJSON(m.NetworkStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field restore_rd_iops_max
	if m.RestoreRdIopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_rd_iops_max\":")
		bytes, err := swag.WriteJSON(m.RestoreRdIopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RestoreRdIopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_rd_iops_max\":null")
		first = false
	}

	// handle nullable field restore_wr_iops_max
	if m.RestoreWrIopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_wr_iops_max\":")
		bytes, err := swag.WriteJSON(m.RestoreWrIopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RestoreWrIopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_wr_iops_max\":null")
		first = false
	}

	// handle nullable field retry_interval
	if m.RetryInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":")
		bytes, err := swag.WriteJSON(m.RetryInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":null")
		first = false
	}

	// handle nullable field running_vm
	if m.RunningVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_vm\":")
		bytes, err := swag.WriteJSON(m.RunningVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RunningVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_vm\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle nullable field storage_network_gateway
	if m.StorageNetworkGateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_gateway\":")
		bytes, err := swag.WriteJSON(m.StorageNetworkGateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetworkGateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_gateway\":null")
		first = false
	}

	// handle nullable field storage_network_ip
	if m.StorageNetworkIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_ip\":")
		bytes, err := swag.WriteJSON(m.StorageNetworkIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetworkIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_ip\":null")
		first = false
	}

	// handle nullable field storage_network_subnet_mask
	if m.StorageNetworkSubnetMask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_subnet_mask\":")
		bytes, err := swag.WriteJSON(m.StorageNetworkSubnetMask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetworkSubnetMask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_subnet_mask\":null")
		first = false
	}

	// handle nullable field storage_network_type
	if m.StorageNetworkType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_type\":")
		bytes, err := swag.WriteJSON(m.StorageNetworkType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetworkType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_type\":null")
		first = false
	}

	// handle nullable field storage_network_vlan
	if m.StorageNetworkVlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_vlan\":")
		bytes, err := swag.WriteJSON(m.StorageNetworkVlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetworkVlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network_vlan\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup service
func (m *BackupService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupStoreRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupService) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) validateBackupClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupClusters); i++ {
		if swag.IsZero(m.BackupClusters[i]) { // not required
			continue
		}

		if m.BackupClusters[i] != nil {
			if err := m.BackupClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) validateBackupNetworkType(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupNetworkType) { // not required
		return nil
	}

	if m.BackupNetworkType != nil {
		if err := m.BackupNetworkType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_network_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_network_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) validateBackupPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlans) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupPlans); i++ {
		if swag.IsZero(m.BackupPlans[i]) { // not required
			continue
		}

		if m.BackupPlans[i] != nil {
			if err := m.BackupPlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) validateBackupStoreRepositories(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupStoreRepositories) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupStoreRepositories); i++ {
		if swag.IsZero(m.BackupStoreRepositories[i]) { // not required
			continue
		}

		if m.BackupStoreRepositories[i] != nil {
			if err := m.BackupStoreRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_store_repositories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_store_repositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BackupService) validateKubeConfig(formats strfmt.Registry) error {

	if err := validate.Required("kube_config", "body", m.KubeConfig); err != nil {
		return err
	}

	return nil
}

func (m *BackupService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupService) validateNetworkStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkStatus); i++ {
		if swag.IsZero(m.NetworkStatus[i]) { // not required
			continue
		}

		if m.NetworkStatus[i] != nil {
			if err := m.NetworkStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("network_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) validateRunningVM(formats strfmt.Registry) error {
	if swag.IsZero(m.RunningVM) { // not required
		return nil
	}

	if m.RunningVM != nil {
		if err := m.RunningVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("running_vm")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) validateStorageNetworkType(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageNetworkType) { // not required
		return nil
	}

	if m.StorageNetworkType != nil {
		if err := m.StorageNetworkType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_network_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_network_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup service based on the context it is used
func (m *BackupService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupNetworkType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupStoreRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunningVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageNetworkType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupService) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {
		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) contextValidateBackupClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupClusters); i++ {

		if m.BackupClusters[i] != nil {
			if err := m.BackupClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) contextValidateBackupNetworkType(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupNetworkType != nil {
		if err := m.BackupNetworkType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_network_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_network_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) contextValidateBackupPlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupPlans); i++ {

		if m.BackupPlans[i] != nil {
			if err := m.BackupPlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) contextValidateBackupStoreRepositories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupStoreRepositories); i++ {

		if m.BackupStoreRepositories[i] != nil {
			if err := m.BackupStoreRepositories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_store_repositories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_store_repositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) contextValidateNetworkStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkStatus); i++ {

		if m.NetworkStatus[i] != nil {
			if err := m.NetworkStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("network_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupService) contextValidateRunningVM(ctx context.Context, formats strfmt.Registry) error {

	if m.RunningVM != nil {
		if err := m.RunningVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("running_vm")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupService) contextValidateStorageNetworkType(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageNetworkType != nil {
		if err := m.StorageNetworkType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_network_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_network_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupService) UnmarshalBinary(b []byte) error {
	var res BackupService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
