// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMDiskParams Vm disk params
//
// swagger:model VmDiskParams
type VMDiskParams struct {

	// mount cd roms
	MountCdRoms []*VMCdRomParams `json:"mount_cd_roms,omitempty"`

	// mount disks
	MountDisks []*MountDisksParams `json:"mount_disks,omitempty"`

	// mount new create disks
	MountNewCreateDisks []*MountNewCreateDisksParams `json:"mount_new_create_disks,omitempty"`

	MarshalOpts *VMDiskParamsMarshalOpts `json:"-"`
}

type VMDiskParamsMarshalOpts struct {
}

func (m VMDiskParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field mount_cd_roms with omitempty
	if swag.IsZero(m.MountCdRoms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mount_cd_roms\":")
		bytes, err := swag.WriteJSON(m.MountCdRoms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field mount_disks with omitempty
	if swag.IsZero(m.MountDisks) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mount_disks\":")
		bytes, err := swag.WriteJSON(m.MountDisks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field mount_new_create_disks with omitempty
	if swag.IsZero(m.MountNewCreateDisks) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mount_new_create_disks\":")
		bytes, err := swag.WriteJSON(m.MountNewCreateDisks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm disk params
func (m *VMDiskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountCdRoms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountNewCreateDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskParams) validateMountCdRoms(formats strfmt.Registry) error {
	if swag.IsZero(m.MountCdRoms) { // not required
		return nil
	}

	for i := 0; i < len(m.MountCdRoms); i++ {
		if swag.IsZero(m.MountCdRoms[i]) { // not required
			continue
		}

		if m.MountCdRoms[i] != nil {
			if err := m.MountCdRoms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_cd_roms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_cd_roms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskParams) validateMountDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.MountDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.MountDisks); i++ {
		if swag.IsZero(m.MountDisks[i]) { // not required
			continue
		}

		if m.MountDisks[i] != nil {
			if err := m.MountDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskParams) validateMountNewCreateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.MountNewCreateDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.MountNewCreateDisks); i++ {
		if swag.IsZero(m.MountNewCreateDisks[i]) { // not required
			continue
		}

		if m.MountNewCreateDisks[i] != nil {
			if err := m.MountNewCreateDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_new_create_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_new_create_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Vm disk params based on the context it is used
func (m *VMDiskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMountCdRoms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountNewCreateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskParams) contextValidateMountCdRoms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MountCdRoms); i++ {

		if m.MountCdRoms[i] != nil {
			if err := m.MountCdRoms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_cd_roms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_cd_roms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskParams) contextValidateMountDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MountDisks); i++ {

		if m.MountDisks[i] != nil {
			if err := m.MountDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskParams) contextValidateMountNewCreateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MountNewCreateDisks); i++ {

		if m.MountNewCreateDisks[i] != nil {
			if err := m.MountNewCreateDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mount_new_create_disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mount_new_create_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskParams) UnmarshalBinary(b []byte) error {
	var res VMDiskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
