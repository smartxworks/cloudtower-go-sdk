// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStorageInfo cluster storage info
//
// swagger:model ClusterStorageInfo
type ClusterStorageInfo struct {

	// allocable storage capacity
	AllocableStorageCapacity *AllocatableStorageCapacity `json:"allocable_storage_capacity,omitempty"`

	// failure data space
	FailureDataSpace *int64 `json:"failure_data_space,omitempty"`

	// free data space
	FreeDataSpace *int64 `json:"free_data_space,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// storage cluster
	StorageCluster []*ClusterStorageInfo `json:"storage_cluster,omitempty"`

	// stretch
	Stretch *bool `json:"stretch,omitempty"`

	// total data capacity
	TotalDataCapacity *int64 `json:"total_data_capacity,omitempty"`

	// type
	// Required: true
	Type *ClusterType `json:"type"`

	// used data space
	UsedDataSpace *int64 `json:"used_data_space,omitempty"`
}

// Validate validates this cluster storage info
func (m *ClusterStorageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocableStorageCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStorageInfo) validateAllocableStorageCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocableStorageCapacity) { // not required
		return nil
	}

	if m.AllocableStorageCapacity != nil {
		if err := m.AllocableStorageCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocable_storage_capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocable_storage_capacity")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStorageInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStorageInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStorageInfo) validateStorageCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageCluster) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageCluster); i++ {
		if swag.IsZero(m.StorageCluster[i]) { // not required
			continue
		}

		if m.StorageCluster[i] != nil {
			if err := m.StorageCluster[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storage_cluster" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storage_cluster" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStorageInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster storage info based on the context it is used
func (m *ClusterStorageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocableStorageCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStorageInfo) contextValidateAllocableStorageCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocableStorageCapacity != nil {
		if err := m.AllocableStorageCapacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocable_storage_capacity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocable_storage_capacity")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStorageInfo) contextValidateStorageCluster(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageCluster); i++ {

		if m.StorageCluster[i] != nil {
			if err := m.StorageCluster[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storage_cluster" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storage_cluster" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStorageInfo) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStorageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStorageInfo) UnmarshalBinary(b []byte) error {
	var res ClusterStorageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
