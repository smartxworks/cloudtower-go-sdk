// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplicationPlanPeriod replication plan period
//
// swagger:model ReplicationPlanPeriod
type ReplicationPlanPeriod string

func NewReplicationPlanPeriod(value ReplicationPlanPeriod) *ReplicationPlanPeriod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplicationPlanPeriod.
func (m ReplicationPlanPeriod) Pointer() *ReplicationPlanPeriod {
	return &m
}

const (

	// ReplicationPlanPeriodDAILY captures enum value "DAILY"
	ReplicationPlanPeriodDAILY ReplicationPlanPeriod = "DAILY"

	// ReplicationPlanPeriodHOURLY captures enum value "HOURLY"
	ReplicationPlanPeriodHOURLY ReplicationPlanPeriod = "HOURLY"

	// ReplicationPlanPeriodMINUTELY captures enum value "MINUTELY"
	ReplicationPlanPeriodMINUTELY ReplicationPlanPeriod = "MINUTELY"

	// ReplicationPlanPeriodMONTHLY captures enum value "MONTHLY"
	ReplicationPlanPeriodMONTHLY ReplicationPlanPeriod = "MONTHLY"

	// ReplicationPlanPeriodWEEKLY captures enum value "WEEKLY"
	ReplicationPlanPeriodWEEKLY ReplicationPlanPeriod = "WEEKLY"
)

// for schema
var replicationPlanPeriodEnum []interface{}

func init() {
	var res []ReplicationPlanPeriod
	if err := json.Unmarshal([]byte(`["DAILY","HOURLY","MINUTELY","MONTHLY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationPlanPeriodEnum = append(replicationPlanPeriodEnum, v)
	}
}

func (m ReplicationPlanPeriod) validateReplicationPlanPeriodEnum(path, location string, value ReplicationPlanPeriod) error {
	if err := validate.EnumCase(path, location, value, replicationPlanPeriodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replication plan period
func (m ReplicationPlanPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplicationPlanPeriodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replication plan period based on context it is used
func (m ReplicationPlanPeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
