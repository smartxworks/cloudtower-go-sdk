// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityGroupCreateParams security group create params
//
// swagger:model SecurityGroupCreateParams
type SecurityGroupCreateParams struct {

	// description
	Description *string `json:"description,omitempty"`

	// everoute cluster id
	// Required: true
	EverouteClusterID *string `json:"everoute_cluster_id"`

	// label groups
	// Min Items: 1
	LabelGroups []*LabelWhereInput `json:"label_groups,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// vms
	Vms *VMWhereInput `json:"vms,omitempty"`

	MarshalOpts *SecurityGroupCreateParamsMarshalOpts `json:"-"`
}

type SecurityGroupCreateParamsMarshalOpts struct {
	Description_Explicit_Null_When_Empty bool

	EverouteClusterID_Explicit_Null_When_Empty bool

	LabelGroups_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m SecurityGroupCreateParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field everoute_cluster_id
	if m.EverouteClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster_id\":")
		bytes, err := swag.WriteJSON(m.EverouteClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EverouteClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster_id\":null")
		first = false
	}

	// handle non nullable field label_groups with omitempty
	if swag.IsZero(m.LabelGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"label_groups\":")
		bytes, err := swag.WriteJSON(m.LabelGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field vms
	if m.Vms != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vms_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this security group create params
func (m *SecurityGroupCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEverouteClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupCreateParams) validateEverouteClusterID(formats strfmt.Registry) error {

	if err := validate.Required("everoute_cluster_id", "body", m.EverouteClusterID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupCreateParams) validateLabelGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelGroups) { // not required
		return nil
	}

	iLabelGroupsSize := int64(len(m.LabelGroups))

	if err := validate.MinItems("label_groups", "body", iLabelGroupsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.LabelGroups); i++ {
		if swag.IsZero(m.LabelGroups[i]) { // not required
			continue
		}

		if m.LabelGroups[i] != nil {
			if err := m.LabelGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("label_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("label_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupCreateParams) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	if m.Vms != nil {
		if err := m.Vms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security group create params based on the context it is used
func (m *SecurityGroupCreateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupCreateParams) contextValidateLabelGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelGroups); i++ {

		if m.LabelGroups[i] != nil {
			if err := m.LabelGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("label_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("label_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroupCreateParams) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	if m.Vms != nil {
		if err := m.Vms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroupCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroupCreateParams) UnmarshalBinary(b []byte) error {
	var res SecurityGroupCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
