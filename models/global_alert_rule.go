// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalAlertRule global alert rule
//
// swagger:model GlobalAlertRule
type GlobalAlertRule struct {

	// alert rules
	AlertRules []*NestedAlertRule `json:"alert_rules,omitempty"`

	// boolean
	// Required: true
	Boolean *bool `json:"boolean"`

	// cause
	// Required: true
	Cause *string `json:"cause"`

	// default thresholds
	// Required: true
	DefaultThresholds []*NestedThresholds `json:"default_thresholds"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact
	// Required: true
	Impact *string `json:"impact"`

	// message
	// Required: true
	Message *string `json:"message"`

	// name
	// Required: true
	Name *string `json:"name"`

	// object
	Object *AlertRuleObject `json:"object,omitempty"`

	// operator
	// Required: true
	Operator *string `json:"operator"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// thresholds
	// Required: true
	Thresholds []*NestedThresholds `json:"thresholds"`

	// unit
	// Required: true
	Unit *AlertRuleUnit `json:"unit"`

	MarshalOpts *GlobalAlertRuleMarshalOpts `json:"-"`
}

type GlobalAlertRuleMarshalOpts struct {
	AlertRules_Explicit_Null_When_Empty bool

	Boolean_Explicit_Null_When_Empty bool

	Cause_Explicit_Null_When_Empty bool

	DefaultThresholds_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Impact_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Object_Explicit_Null_When_Empty bool

	Operator_Explicit_Null_When_Empty bool

	Solution_Explicit_Null_When_Empty bool

	Thresholds_Explicit_Null_When_Empty bool

	Unit_Explicit_Null_When_Empty bool
}

func (m GlobalAlertRule) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field alert_rules with omitempty
	if swag.IsZero(m.AlertRules) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"alert_rules\":")
		bytes, err := swag.WriteJSON(m.AlertRules)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field boolean
	if m.Boolean != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boolean\":")
		bytes, err := swag.WriteJSON(m.Boolean)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Boolean_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boolean\":null")
		first = false
	}

	// handle nullable field cause
	if m.Cause != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cause\":")
		bytes, err := swag.WriteJSON(m.Cause)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cause_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cause\":null")
		first = false
	}

	// handle non nullable field default_thresholds without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"default_thresholds\":")
		bytes, err := swag.WriteJSON(m.DefaultThresholds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field impact
	if m.Impact != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"impact\":")
		bytes, err := swag.WriteJSON(m.Impact)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Impact_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"impact\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field object
	if m.Object != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"object\":")
		bytes, err := swag.WriteJSON(m.Object)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Object_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"object\":null")
		first = false
	}

	// handle nullable field operator
	if m.Operator != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"operator\":")
		bytes, err := swag.WriteJSON(m.Operator)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Operator_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"operator\":null")
		first = false
	}

	// handle nullable field solution
	if m.Solution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"solution\":")
		bytes, err := swag.WriteJSON(m.Solution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Solution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"solution\":null")
		first = false
	}

	// handle non nullable field thresholds without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thresholds\":")
		bytes, err := swag.WriteJSON(m.Thresholds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unit
	if m.Unit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unit\":")
		bytes, err := swag.WriteJSON(m.Unit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Unit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unit\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this global alert rule
func (m *GlobalAlertRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoolean(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalAlertRule) validateAlertRules(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertRules) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertRules); i++ {
		if swag.IsZero(m.AlertRules[i]) { // not required
			continue
		}

		if m.AlertRules[i] != nil {
			if err := m.AlertRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateBoolean(formats strfmt.Registry) error {

	if err := validate.Required("boolean", "body", m.Boolean); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateCause(formats strfmt.Registry) error {

	if err := validate.Required("cause", "body", m.Cause); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateDefaultThresholds(formats strfmt.Registry) error {

	if err := validate.Required("default_thresholds", "body", m.DefaultThresholds); err != nil {
		return err
	}

	for i := 0; i < len(m.DefaultThresholds); i++ {
		if swag.IsZero(m.DefaultThresholds[i]) { // not required
			continue
		}

		if m.DefaultThresholds[i] != nil {
			if err := m.DefaultThresholds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *GlobalAlertRule) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateThresholds(formats strfmt.Registry) error {

	if err := validate.Required("thresholds", "body", m.Thresholds); err != nil {
		return err
	}

	for i := 0; i < len(m.Thresholds); i++ {
		if swag.IsZero(m.Thresholds[i]) { // not required
			continue
		}

		if m.Thresholds[i] != nil {
			if err := m.Thresholds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this global alert rule based on the context it is used
func (m *GlobalAlertRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalAlertRule) contextValidateAlertRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertRules); i++ {

		if m.AlertRules[i] != nil {
			if err := m.AlertRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateDefaultThresholds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DefaultThresholds); i++ {

		if m.DefaultThresholds[i] != nil {
			if err := m.DefaultThresholds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {
		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *GlobalAlertRule) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Thresholds); i++ {

		if m.Thresholds[i] != nil {
			if err := m.Thresholds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {
		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalAlertRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalAlertRule) UnmarshalBinary(b []byte) error {
	var res GlobalAlertRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
