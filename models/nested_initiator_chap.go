// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedInitiatorChap nested initiator chap
//
// swagger:model NestedInitiatorChap
type NestedInitiatorChap struct {

	// chap name
	// Required: true
	ChapName *string `json:"chap_name"`

	// chap secret
	// Required: true
	ChapSecret *string `json:"chap_secret"`

	// initiator iqn
	// Required: true
	InitiatorIqn *string `json:"initiator_iqn"`

	MarshalOpts *NestedInitiatorChapMarshalOpts `json:"-"`
}

type NestedInitiatorChapMarshalOpts struct {
	ChapName_Explicit_Null_When_Empty bool

	ChapSecret_Explicit_Null_When_Empty bool

	InitiatorIqn_Explicit_Null_When_Empty bool
}

func (m NestedInitiatorChap) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field chap_name
	if m.ChapName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_name\":")
		bytes, err := swag.WriteJSON(m.ChapName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChapName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_name\":null")
		first = false
	}

	// handle nullable field chap_secret
	if m.ChapSecret != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_secret\":")
		bytes, err := swag.WriteJSON(m.ChapSecret)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChapSecret_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_secret\":null")
		first = false
	}

	// handle nullable field initiator_iqn
	if m.InitiatorIqn != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_iqn\":")
		bytes, err := swag.WriteJSON(m.InitiatorIqn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InitiatorIqn_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_iqn\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested initiator chap
func (m *NestedInitiatorChap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChapName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChapSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorIqn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedInitiatorChap) validateChapName(formats strfmt.Registry) error {

	if err := validate.Required("chap_name", "body", m.ChapName); err != nil {
		return err
	}

	return nil
}

func (m *NestedInitiatorChap) validateChapSecret(formats strfmt.Registry) error {

	if err := validate.Required("chap_secret", "body", m.ChapSecret); err != nil {
		return err
	}

	return nil
}

func (m *NestedInitiatorChap) validateInitiatorIqn(formats strfmt.Registry) error {

	if err := validate.Required("initiator_iqn", "body", m.InitiatorIqn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested initiator chap based on context it is used
func (m *NestedInitiatorChap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedInitiatorChap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedInitiatorChap) UnmarshalBinary(b []byte) error {
	var res NestedInitiatorChap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
