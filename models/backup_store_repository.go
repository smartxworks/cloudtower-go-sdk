// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupStoreRepository backup store repository
//
// swagger:model BackupStoreRepository
type BackupStoreRepository struct {

	// backup plans
	BackupPlans []*NestedBackupPlan `json:"backup_plans,omitempty"`

	// backup restore points
	BackupRestorePoints []*NestedBackupRestorePoint `json:"backup_restore_points,omitempty"`

	// backup service
	BackupService *NestedBackupService `json:"backup_service,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// description
	Description *string `json:"description,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// error code
	ErrorCode *string `json:"error_code,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// iscsi chap name
	IscsiChapName *string `json:"iscsi_chap_name,omitempty"`

	// iscsi chap secret
	IscsiChapSecret *string `json:"iscsi_chap_secret,omitempty"`

	// iscsi ip
	IscsiIP *string `json:"iscsi_ip,omitempty"`

	// iscsi lun id
	IscsiLunID *string `json:"iscsi_lun_id,omitempty"`

	// iscsi port
	IscsiPort *int32 `json:"iscsi_port,omitempty"`

	// iscsi target iqn
	IscsiTargetIqn *string `json:"iscsi_target_iqn,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// nfs path
	NfsPath *string `json:"nfs_path,omitempty"`

	// nfs server
	NfsServer *string `json:"nfs_server,omitempty"`

	// status
	// Required: true
	Status *BackupStoreStatus `json:"status"`

	// total capacity
	// Required: true
	TotalCapacity *int64 `json:"total_capacity"`

	// type
	// Required: true
	Type *BackupStoreType `json:"type"`

	// update timestamp
	UpdateTimestamp *string `json:"update_timestamp,omitempty"`

	// used data space
	// Required: true
	UsedDataSpace *int64 `json:"used_data_space"`

	// used data space usage
	UsedDataSpaceUsage *float64 `json:"used_data_space_usage,omitempty"`

	// valid data space
	ValidDataSpace *int64 `json:"valid_data_space,omitempty"`

	MarshalOpts *BackupStoreRepositoryMarshalOpts `json:"-"`
}

type BackupStoreRepositoryMarshalOpts struct {
	BackupService_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ErrorCode_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IscsiChapName_Explicit_Null_When_Empty bool

	IscsiChapSecret_Explicit_Null_When_Empty bool

	IscsiIP_Explicit_Null_When_Empty bool

	IscsiLunID_Explicit_Null_When_Empty bool

	IscsiPort_Explicit_Null_When_Empty bool

	IscsiTargetIqn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NfsPath_Explicit_Null_When_Empty bool

	NfsServer_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	TotalCapacity_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	UpdateTimestamp_Explicit_Null_When_Empty bool

	UsedDataSpace_Explicit_Null_When_Empty bool

	UsedDataSpaceUsage_Explicit_Null_When_Empty bool

	ValidDataSpace_Explicit_Null_When_Empty bool
}

func (m BackupStoreRepository) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field backup_plans with omitempty
	if swag.IsZero(m.BackupPlans) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans\":")
		bytes, err := swag.WriteJSON(m.BackupPlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field backup_restore_points with omitempty
	if swag.IsZero(m.BackupRestorePoints) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_service
	if m.BackupService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":")
		bytes, err := swag.WriteJSON(m.BackupService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field error_code
	if m.ErrorCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code\":")
		bytes, err := swag.WriteJSON(m.ErrorCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name
	if m.IscsiChapName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name\":")
		bytes, err := swag.WriteJSON(m.IscsiChapName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret
	if m.IscsiChapSecret != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecret)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecret_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret\":null")
		first = false
	}

	// handle nullable field iscsi_ip
	if m.IscsiIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip\":")
		bytes, err := swag.WriteJSON(m.IscsiIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id
	if m.IscsiLunID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id\":")
		bytes, err := swag.WriteJSON(m.IscsiLunID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id\":null")
		first = false
	}

	// handle nullable field iscsi_port
	if m.IscsiPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port\":")
		bytes, err := swag.WriteJSON(m.IscsiPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn
	if m.IscsiTargetIqn != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqn_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field nfs_path
	if m.NfsPath != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path\":")
		bytes, err := swag.WriteJSON(m.NfsPath)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPath_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path\":null")
		first = false
	}

	// handle nullable field nfs_server
	if m.NfsServer != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server\":")
		bytes, err := swag.WriteJSON(m.NfsServer)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServer_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle nullable field total_capacity
	if m.TotalCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity\":")
		bytes, err := swag.WriteJSON(m.TotalCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field update_timestamp
	if m.UpdateTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp\":null")
		first = false
	}

	// handle nullable field used_data_space
	if m.UsedDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":null")
		first = false
	}

	// handle nullable field used_data_space_usage
	if m.UsedDataSpaceUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage\":null")
		first = false
	}

	// handle nullable field valid_data_space
	if m.ValidDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup store repository
func (m *BackupStoreRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedDataSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepository) validateBackupPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlans) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupPlans); i++ {
		if swag.IsZero(m.BackupPlans[i]) { // not required
			continue
		}

		if m.BackupPlans[i] != nil {
			if err := m.BackupPlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepository) validateBackupRestorePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePoints) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupRestorePoints); i++ {
		if swag.IsZero(m.BackupRestorePoints[i]) { // not required
			continue
		}

		if m.BackupRestorePoints[i] != nil {
			if err := m.BackupRestorePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepository) validateBackupService(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupService) { // not required
		return nil
	}

	if m.BackupService != nil {
		if err := m.BackupService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BackupStoreRepository) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BackupStoreRepository) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupStoreRepository) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) validateTotalCapacity(formats strfmt.Registry) error {

	if err := validate.Required("total_capacity", "body", m.TotalCapacity); err != nil {
		return err
	}

	return nil
}

func (m *BackupStoreRepository) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) validateUsedDataSpace(formats strfmt.Registry) error {

	if err := validate.Required("used_data_space", "body", m.UsedDataSpace); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup store repository based on the context it is used
func (m *BackupStoreRepository) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepository) contextValidateBackupPlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupPlans); i++ {

		if m.BackupPlans[i] != nil {
			if err := m.BackupPlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepository) contextValidateBackupRestorePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupRestorePoints); i++ {

		if m.BackupRestorePoints[i] != nil {
			if err := m.BackupRestorePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepository) contextValidateBackupService(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupService != nil {
		if err := m.BackupService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepository) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStoreRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStoreRepository) UnmarshalBinary(b []byte) error {
	var res BackupStoreRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
