// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddLabelsToResourcesParams add labels to resources params
//
// swagger:model AddLabelsToResourcesParams
type AddLabelsToResourcesParams struct {

	// data
	// Required: true
	Data *AddLabelsToResourcesParamsData `json:"data"`

	// where
	// Required: true
	Where *LabelWhereInput `json:"where"`

	MarshalOpts *AddLabelsToResourcesParamsMarshalOpts `json:"-"`
}

type AddLabelsToResourcesParamsMarshalOpts struct {
	Data_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m AddLabelsToResourcesParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field data
	if m.Data != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Data_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this add labels to resources params
func (m *AddLabelsToResourcesParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddLabelsToResourcesParams) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add labels to resources params based on the context it is used
func (m *AddLabelsToResourcesParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddLabelsToResourcesParams) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddLabelsToResourcesParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddLabelsToResourcesParams) UnmarshalBinary(b []byte) error {
	var res AddLabelsToResourcesParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AddLabelsToResourcesParamsData add labels to resources params data
//
// swagger:model AddLabelsToResourcesParamsData
type AddLabelsToResourcesParamsData struct {

	// clusters
	Clusters *ClusterWhereInput `json:"clusters,omitempty"`

	// consistency group snapshots
	ConsistencyGroupSnapshots *ConsistencyGroupSnapshotWhereInput `json:"consistency_group_snapshots,omitempty"`

	// consistency groups
	ConsistencyGroups *ConsistencyGroupWhereInput `json:"consistency_groups,omitempty"`

	// content library images
	ContentLibraryImages *ContentLibraryImageWhereInput `json:"content_library_images,omitempty"`

	// content library vm templates
	ContentLibraryVMTemplates *ContentLibraryVMTemplateWhereInput `json:"content_library_vm_templates,omitempty"`

	// datacenters
	Datacenters *DatacenterWhereInput `json:"datacenters,omitempty"`

	// disks
	Disks *DiskWhereInput `json:"disks,omitempty"`

	// elf images
	ElfImages *ElfImageWhereInput `json:"elf_images,omitempty"`

	// gpu devices
	GpuDevices *GpuDeviceWhereInput `json:"gpu_devices,omitempty"`

	// hosts
	Hosts *HostWhereInput `json:"hosts,omitempty"`

	// iscsi lun snapshots
	IscsiLunSnapshots *IscsiLunSnapshotWhereInput `json:"iscsi_lun_snapshots,omitempty"`

	// iscsi luns
	IscsiLuns *IscsiLunWhereInput `json:"iscsi_luns,omitempty"`

	// iscsi targets
	IscsiTargets *IscsiTargetWhereInput `json:"iscsi_targets,omitempty"`

	// isolation policies
	IsolationPolicies *IsolationPolicyWhereInput `json:"isolation_policies,omitempty"`

	// namespace groups
	NamespaceGroups *NamespaceGroupWhereInput `json:"namespace_groups,omitempty"`

	// nfs exports
	NfsExports *NfsExportWhereInput `json:"nfs_exports,omitempty"`

	// nfs inodes
	NfsInodes *NfsInodeWhereInput `json:"nfs_inodes,omitempty"`

	// nics
	Nics *NicWhereInput `json:"nics,omitempty"`

	// nvmf namespace snapshots
	NvmfNamespaceSnapshots *NvmfNamespaceSnapshotWhereInput `json:"nvmf_namespace_snapshots,omitempty"`

	// nvmf namespaces
	NvmfNamespaces *NvmfNamespaceWhereInput `json:"nvmf_namespaces,omitempty"`

	// nvmf subsystems
	NvmfSubsystems *NvmfSubsystemWhereInput `json:"nvmf_subsystems,omitempty"`

	// security policies
	SecurityPolicies *SecurityPolicyWhereInput `json:"security_policies,omitempty"`

	// vdses
	Vdses *VdsWhereInput `json:"vdses,omitempty"`

	// vlans
	Vlans *VlanWhereInput `json:"vlans,omitempty"`

	// vm snapshots
	VMSnapshots *VMSnapshotWhereInput `json:"vm_snapshots,omitempty"`

	// vm templates
	VMTemplates *VMTemplateWhereInput `json:"vm_templates,omitempty"`

	// vm volume snapshots
	VMVolumeSnapshots *VMVolumeSnapshotWhereInput `json:"vm_volume_snapshots,omitempty"`

	// vm volumes
	VMVolumes *VMVolumeWhereInput `json:"vm_volumes,omitempty"`

	// vms
	Vms *VMWhereInput `json:"vms,omitempty"`

	MarshalOpts *AddLabelsToResourcesParamsDataMarshalOpts `json:"-"`
}

type AddLabelsToResourcesParamsDataMarshalOpts struct {
	Clusters_Explicit_Null_When_Empty bool

	ConsistencyGroupSnapshots_Explicit_Null_When_Empty bool

	ConsistencyGroups_Explicit_Null_When_Empty bool

	ContentLibraryImages_Explicit_Null_When_Empty bool

	ContentLibraryVMTemplates_Explicit_Null_When_Empty bool

	Datacenters_Explicit_Null_When_Empty bool

	Disks_Explicit_Null_When_Empty bool

	ElfImages_Explicit_Null_When_Empty bool

	GpuDevices_Explicit_Null_When_Empty bool

	Hosts_Explicit_Null_When_Empty bool

	IscsiLunSnapshots_Explicit_Null_When_Empty bool

	IscsiLuns_Explicit_Null_When_Empty bool

	IscsiTargets_Explicit_Null_When_Empty bool

	IsolationPolicies_Explicit_Null_When_Empty bool

	NamespaceGroups_Explicit_Null_When_Empty bool

	NfsExports_Explicit_Null_When_Empty bool

	NfsInodes_Explicit_Null_When_Empty bool

	Nics_Explicit_Null_When_Empty bool

	NvmfNamespaceSnapshots_Explicit_Null_When_Empty bool

	NvmfNamespaces_Explicit_Null_When_Empty bool

	NvmfSubsystems_Explicit_Null_When_Empty bool

	SecurityPolicies_Explicit_Null_When_Empty bool

	Vdses_Explicit_Null_When_Empty bool

	Vlans_Explicit_Null_When_Empty bool

	VMSnapshots_Explicit_Null_When_Empty bool

	VMTemplates_Explicit_Null_When_Empty bool

	VMVolumeSnapshots_Explicit_Null_When_Empty bool

	VMVolumes_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m AddLabelsToResourcesParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field clusters
	if m.Clusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Clusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":null")
		first = false
	}

	// handle nullable field consistency_group_snapshots
	if m.ConsistencyGroupSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_snapshots\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroupSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroupSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group_snapshots\":null")
		first = false
	}

	// handle nullable field consistency_groups
	if m.ConsistencyGroups != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_groups\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroups_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_groups\":null")
		first = false
	}

	// handle nullable field content_library_images
	if m.ContentLibraryImages != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_images\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryImages_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_images\":null")
		first = false
	}

	// handle nullable field content_library_vm_templates
	if m.ContentLibraryVMTemplates != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_vm_templates\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryVMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryVMTemplates_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"content_library_vm_templates\":null")
		first = false
	}

	// handle nullable field datacenters
	if m.Datacenters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":")
		bytes, err := swag.WriteJSON(m.Datacenters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Datacenters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":null")
		first = false
	}

	// handle nullable field disks
	if m.Disks != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":")
		bytes, err := swag.WriteJSON(m.Disks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disks_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":null")
		first = false
	}

	// handle nullable field elf_images
	if m.ElfImages != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_images\":")
		bytes, err := swag.WriteJSON(m.ElfImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfImages_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_images\":null")
		first = false
	}

	// handle nullable field gpu_devices
	if m.GpuDevices != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gpu_devices\":")
		bytes, err := swag.WriteJSON(m.GpuDevices)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GpuDevices_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gpu_devices\":null")
		first = false
	}

	// handle nullable field hosts
	if m.Hosts != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":")
		bytes, err := swag.WriteJSON(m.Hosts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Hosts_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":null")
		first = false
	}

	// handle nullable field iscsi_lun_snapshots
	if m.IscsiLunSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_snapshots\":")
		bytes, err := swag.WriteJSON(m.IscsiLunSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_snapshots\":null")
		first = false
	}

	// handle nullable field iscsi_luns
	if m.IscsiLuns != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns\":")
		bytes, err := swag.WriteJSON(m.IscsiLuns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLuns_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns\":null")
		first = false
	}

	// handle nullable field iscsi_targets
	if m.IscsiTargets != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_targets\":")
		bytes, err := swag.WriteJSON(m.IscsiTargets)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargets_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_targets\":null")
		first = false
	}

	// handle nullable field isolation_policies
	if m.IsolationPolicies != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies\":")
		bytes, err := swag.WriteJSON(m.IsolationPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsolationPolicies_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies\":null")
		first = false
	}

	// handle nullable field namespace_groups
	if m.NamespaceGroups != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroups_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups\":null")
		first = false
	}

	// handle nullable field nfs_exports
	if m.NfsExports != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_exports\":")
		bytes, err := swag.WriteJSON(m.NfsExports)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsExports_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_exports\":null")
		first = false
	}

	// handle nullable field nfs_inodes
	if m.NfsInodes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_inodes\":")
		bytes, err := swag.WriteJSON(m.NfsInodes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsInodes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_inodes\":null")
		first = false
	}

	// handle nullable field nics
	if m.Nics != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":")
		bytes, err := swag.WriteJSON(m.Nics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Nics_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":null")
		first = false
	}

	// handle nullable field nvmf_namespace_snapshots
	if m.NvmfNamespaceSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_snapshots\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaceSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaceSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespace_snapshots\":null")
		first = false
	}

	// handle nullable field nvmf_namespaces
	if m.NvmfNamespaces != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespaces\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaces)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaces_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_namespaces\":null")
		first = false
	}

	// handle nullable field nvmf_subsystems
	if m.NvmfSubsystems != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystems\":")
		bytes, err := swag.WriteJSON(m.NvmfSubsystems)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfSubsystems_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_subsystems\":null")
		first = false
	}

	// handle nullable field security_policies
	if m.SecurityPolicies != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies\":")
		bytes, err := swag.WriteJSON(m.SecurityPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityPolicies_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies\":null")
		first = false
	}

	// handle nullable field vdses
	if m.Vdses != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":")
		bytes, err := swag.WriteJSON(m.Vdses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vdses_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":null")
		first = false
	}

	// handle nullable field vlans
	if m.Vlans != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlans\":")
		bytes, err := swag.WriteJSON(m.Vlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vlans_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlans\":null")
		first = false
	}

	// handle nullable field vm_snapshots
	if m.VMSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_snapshots\":")
		bytes, err := swag.WriteJSON(m.VMSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_snapshots\":null")
		first = false
	}

	// handle nullable field vm_templates
	if m.VMTemplates != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_templates\":")
		bytes, err := swag.WriteJSON(m.VMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMTemplates_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_templates\":null")
		first = false
	}

	// handle nullable field vm_volume_snapshots
	if m.VMVolumeSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshots\":")
		bytes, err := swag.WriteJSON(m.VMVolumeSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumeSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume_snapshots\":null")
		first = false
	}

	// handle nullable field vm_volumes
	if m.VMVolumes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volumes\":")
		bytes, err := swag.WriteJSON(m.VMVolumes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volumes\":null")
		first = false
	}

	// handle nullable field vms
	if m.Vms != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vms_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this add labels to resources params data
func (m *AddLabelsToResourcesParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddLabelsToResourcesParamsData) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateConsistencyGroupSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshots) { // not required
		return nil
	}

	if m.ConsistencyGroupSnapshots != nil {
		if err := m.ConsistencyGroupSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "consistency_group_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "consistency_group_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateConsistencyGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroups) { // not required
		return nil
	}

	if m.ConsistencyGroups != nil {
		if err := m.ConsistencyGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "consistency_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "consistency_groups")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateContentLibraryImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImages) { // not required
		return nil
	}

	if m.ContentLibraryImages != nil {
		if err := m.ContentLibraryImages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "content_library_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "content_library_images")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateContentLibraryVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplates) { // not required
		return nil
	}

	if m.ContentLibraryVMTemplates != nil {
		if err := m.ContentLibraryVMTemplates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "content_library_vm_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "content_library_vm_templates")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	if m.Datacenters != nil {
		if err := m.Datacenters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "datacenters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "datacenters")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	if m.Disks != nil {
		if err := m.Disks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateElfImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImages) { // not required
		return nil
	}

	if m.ElfImages != nil {
		if err := m.ElfImages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "elf_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "elf_images")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateGpuDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuDevices) { // not required
		return nil
	}

	if m.GpuDevices != nil {
		if err := m.GpuDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "gpu_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "gpu_devices")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	if m.Hosts != nil {
		if err := m.Hosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateIscsiLunSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshots) { // not required
		return nil
	}

	if m.IscsiLunSnapshots != nil {
		if err := m.IscsiLunSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_lun_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_lun_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	if m.IscsiLuns != nil {
		if err := m.IscsiLuns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_luns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_luns")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateIscsiTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargets) { // not required
		return nil
	}

	if m.IscsiTargets != nil {
		if err := m.IscsiTargets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_targets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_targets")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateIsolationPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPolicies) { // not required
		return nil
	}

	if m.IsolationPolicies != nil {
		if err := m.IsolationPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "isolation_policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "isolation_policies")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNamespaceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroups) { // not required
		return nil
	}

	if m.NamespaceGroups != nil {
		if err := m.NamespaceGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "namespace_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "namespace_groups")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNfsExports(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExports) { // not required
		return nil
	}

	if m.NfsExports != nil {
		if err := m.NfsExports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nfs_exports")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nfs_exports")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNfsInodes(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodes) { // not required
		return nil
	}

	if m.NfsInodes != nil {
		if err := m.NfsInodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nfs_inodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nfs_inodes")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	if m.Nics != nil {
		if err := m.Nics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNvmfNamespaceSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshots) { // not required
		return nil
	}

	if m.NvmfNamespaceSnapshots != nil {
		if err := m.NvmfNamespaceSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_namespace_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_namespace_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNvmfNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaces) { // not required
		return nil
	}

	if m.NvmfNamespaces != nil {
		if err := m.NvmfNamespaces.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_namespaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_namespaces")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateNvmfSubsystems(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystems) { // not required
		return nil
	}

	if m.NvmfSubsystems != nil {
		if err := m.NvmfSubsystems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_subsystems")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_subsystems")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateSecurityPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPolicies) { // not required
		return nil
	}

	if m.SecurityPolicies != nil {
		if err := m.SecurityPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "security_policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "security_policies")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	if m.Vdses != nil {
		if err := m.Vdses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vdses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vdses")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	if m.Vlans != nil {
		if err := m.Vlans.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vlans")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVMSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshots) { // not required
		return nil
	}

	if m.VMSnapshots != nil {
		if err := m.VMSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	if m.VMTemplates != nil {
		if err := m.VMTemplates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_templates")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVMVolumeSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumeSnapshots) { // not required
		return nil
	}

	if m.VMVolumeSnapshots != nil {
		if err := m.VMVolumeSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_volume_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_volume_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	if m.VMVolumes != nil {
		if err := m.VMVolumes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_volumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_volumes")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	if m.Vms != nil {
		if err := m.Vms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add labels to resources params data based on the context it is used
func (m *AddLabelsToResourcesParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpuDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumeSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateConsistencyGroupSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroupSnapshots != nil {
		if err := m.ConsistencyGroupSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "consistency_group_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "consistency_group_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateConsistencyGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroups != nil {
		if err := m.ConsistencyGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "consistency_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "consistency_groups")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateContentLibraryImages(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentLibraryImages != nil {
		if err := m.ContentLibraryImages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "content_library_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "content_library_images")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateContentLibraryVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentLibraryVMTemplates != nil {
		if err := m.ContentLibraryVMTemplates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "content_library_vm_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "content_library_vm_templates")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	if m.Datacenters != nil {
		if err := m.Datacenters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "datacenters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "datacenters")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.Disks != nil {
		if err := m.Disks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateElfImages(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfImages != nil {
		if err := m.ElfImages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "elf_images")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "elf_images")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateGpuDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.GpuDevices != nil {
		if err := m.GpuDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "gpu_devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "gpu_devices")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Hosts != nil {
		if err := m.Hosts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateIscsiLunSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLunSnapshots != nil {
		if err := m.IscsiLunSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_lun_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_lun_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLuns != nil {
		if err := m.IscsiLuns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_luns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_luns")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateIscsiTargets(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiTargets != nil {
		if err := m.IscsiTargets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "iscsi_targets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "iscsi_targets")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateIsolationPolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPolicies != nil {
		if err := m.IsolationPolicies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "isolation_policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "isolation_policies")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNamespaceGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceGroups != nil {
		if err := m.NamespaceGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "namespace_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "namespace_groups")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNfsExports(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsExports != nil {
		if err := m.NfsExports.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nfs_exports")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nfs_exports")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNfsInodes(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsInodes != nil {
		if err := m.NfsInodes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nfs_inodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nfs_inodes")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	if m.Nics != nil {
		if err := m.Nics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNvmfNamespaceSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfNamespaceSnapshots != nil {
		if err := m.NvmfNamespaceSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_namespace_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_namespace_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNvmfNamespaces(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfNamespaces != nil {
		if err := m.NvmfNamespaces.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_namespaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_namespaces")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateNvmfSubsystems(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfSubsystems != nil {
		if err := m.NvmfSubsystems.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nvmf_subsystems")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nvmf_subsystems")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateSecurityPolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPolicies != nil {
		if err := m.SecurityPolicies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "security_policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "security_policies")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	if m.Vdses != nil {
		if err := m.Vdses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vdses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vdses")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlans != nil {
		if err := m.Vlans.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vlans")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVMSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.VMSnapshots != nil {
		if err := m.VMSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.VMTemplates != nil {
		if err := m.VMTemplates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_templates")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVMVolumeSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumeSnapshots != nil {
		if err := m.VMVolumeSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_volume_snapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_volume_snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumes != nil {
		if err := m.VMVolumes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vm_volumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vm_volumes")
			}
			return err
		}
	}

	return nil
}

func (m *AddLabelsToResourcesParamsData) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	if m.Vms != nil {
		if err := m.Vms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddLabelsToResourcesParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddLabelsToResourcesParamsData) UnmarshalBinary(b []byte) error {
	var res AddLabelsToResourcesParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
