// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicationPlanWhereInput replication plan where input
//
// swagger:model ReplicationPlanWhereInput
type ReplicationPlanWhereInput struct {

	// a n d
	AND []*ReplicationPlanWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ReplicationPlanWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ReplicationPlanWhereInput `json:"OR,omitempty"`

	// abort window unfinished
	AbortWindowUnfinished *bool `json:"abort_window_unfinished,omitempty"`

	// abort window unfinished not
	AbortWindowUnfinishedNot *bool `json:"abort_window_unfinished_not,omitempty"`

	// activation timestamp
	ActivationTimestamp *string `json:"activation_timestamp,omitempty"`

	// activation timestamp gt
	ActivationTimestampGt *string `json:"activation_timestamp_gt,omitempty"`

	// activation timestamp gte
	ActivationTimestampGte *string `json:"activation_timestamp_gte,omitempty"`

	// activation timestamp in
	ActivationTimestampIn []string `json:"activation_timestamp_in,omitempty"`

	// activation timestamp lt
	ActivationTimestampLt *string `json:"activation_timestamp_lt,omitempty"`

	// activation timestamp lte
	ActivationTimestampLte *string `json:"activation_timestamp_lte,omitempty"`

	// activation timestamp not
	ActivationTimestampNot *string `json:"activation_timestamp_not,omitempty"`

	// activation timestamp not in
	ActivationTimestampNotIn []string `json:"activation_timestamp_not_in,omitempty"`

	// compression
	Compression *bool `json:"compression,omitempty"`

	// compression not
	CompressionNot *bool `json:"compression_not,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// delete strategy
	DeleteStrategy *BackupPlanDeleteStrategy `json:"delete_strategy,omitempty"`

	// delete strategy in
	DeleteStrategyIn []BackupPlanDeleteStrategy `json:"delete_strategy_in,omitempty"`

	// delete strategy not
	DeleteStrategyNot *BackupPlanDeleteStrategy `json:"delete_strategy_not,omitempty"`

	// delete strategy not in
	DeleteStrategyNotIn []BackupPlanDeleteStrategy `json:"delete_strategy_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// ec k
	Eck *int32 `json:"ec_k,omitempty"`

	// ec k gt
	EckGt *int32 `json:"ec_k_gt,omitempty"`

	// ec k gte
	EckGte *int32 `json:"ec_k_gte,omitempty"`

	// ec k in
	EckIn []int32 `json:"ec_k_in,omitempty"`

	// ec k lt
	EckLt *int32 `json:"ec_k_lt,omitempty"`

	// ec k lte
	EckLte *int32 `json:"ec_k_lte,omitempty"`

	// ec k not
	EckNot *int32 `json:"ec_k_not,omitempty"`

	// ec k not in
	EckNotIn []int32 `json:"ec_k_not_in,omitempty"`

	// ec m
	Ecm *int32 `json:"ec_m,omitempty"`

	// ec m gt
	EcmGt *int32 `json:"ec_m_gt,omitempty"`

	// ec m gte
	EcmGte *int32 `json:"ec_m_gte,omitempty"`

	// ec m in
	EcmIn []int32 `json:"ec_m_in,omitempty"`

	// ec m lt
	EcmLt *int32 `json:"ec_m_lt,omitempty"`

	// ec m lte
	EcmLte *int32 `json:"ec_m_lte,omitempty"`

	// ec m not
	EcmNot *int32 `json:"ec_m_not,omitempty"`

	// ec m not in
	EcmNotIn []int32 `json:"ec_m_not_in,omitempty"`

	// enable window
	EnableWindow *bool `json:"enable_window,omitempty"`

	// enable window not
	EnableWindowNot *bool `json:"enable_window_not,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// external cloudtower
	ExternalCloudtower *ExternalCloudTowerWhereInput `json:"external_cloudtower,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// inbound
	Inbound *bool `json:"inbound,omitempty"`

	// inbound not
	InboundNot *bool `json:"inbound_not,omitempty"`

	// interval
	Interval *int32 `json:"interval,omitempty"`

	// interval gt
	IntervalGt *int32 `json:"interval_gt,omitempty"`

	// interval gte
	IntervalGte *int32 `json:"interval_gte,omitempty"`

	// interval in
	IntervalIn []int32 `json:"interval_in,omitempty"`

	// interval lt
	IntervalLt *int32 `json:"interval_lt,omitempty"`

	// interval lte
	IntervalLte *int32 `json:"interval_lte,omitempty"`

	// interval not
	IntervalNot *int32 `json:"interval_not,omitempty"`

	// interval not in
	IntervalNotIn []int32 `json:"interval_not_in,omitempty"`

	// iscsi luns every
	IscsiLunsEvery *IscsiLunWhereInput `json:"iscsi_luns_every,omitempty"`

	// iscsi luns none
	IscsiLunsNone *IscsiLunWhereInput `json:"iscsi_luns_none,omitempty"`

	// iscsi luns some
	IscsiLunsSome *IscsiLunWhereInput `json:"iscsi_luns_some,omitempty"`

	// keep mac address
	KeepMacAddress *bool `json:"keep_mac_address,omitempty"`

	// keep mac address not
	KeepMacAddressNot *bool `json:"keep_mac_address_not,omitempty"`

	// keep policy
	KeepPolicy *BackupPlanKeepPolicy `json:"keep_policy,omitempty"`

	// keep policy in
	KeepPolicyIn []BackupPlanKeepPolicy `json:"keep_policy_in,omitempty"`

	// keep policy not
	KeepPolicyNot *BackupPlanKeepPolicy `json:"keep_policy_not,omitempty"`

	// keep policy not in
	KeepPolicyNotIn []BackupPlanKeepPolicy `json:"keep_policy_not_in,omitempty"`

	// keep policy value
	KeepPolicyValue *int32 `json:"keep_policy_value,omitempty"`

	// keep policy value gt
	KeepPolicyValueGt *int32 `json:"keep_policy_value_gt,omitempty"`

	// keep policy value gte
	KeepPolicyValueGte *int32 `json:"keep_policy_value_gte,omitempty"`

	// keep policy value in
	KeepPolicyValueIn []int32 `json:"keep_policy_value_in,omitempty"`

	// keep policy value lt
	KeepPolicyValueLt *int32 `json:"keep_policy_value_lt,omitempty"`

	// keep policy value lte
	KeepPolicyValueLte *int32 `json:"keep_policy_value_lte,omitempty"`

	// keep policy value not
	KeepPolicyValueNot *int32 `json:"keep_policy_value_not,omitempty"`

	// keep policy value not in
	KeepPolicyValueNotIn []int32 `json:"keep_policy_value_not_in,omitempty"`

	// last execute status
	LastExecuteStatus *BackupPlanExecutionStatus `json:"last_execute_status,omitempty"`

	// last execute status in
	LastExecuteStatusIn []BackupPlanExecutionStatus `json:"last_execute_status_in,omitempty"`

	// last execute status message
	LastExecuteStatusMessage *string `json:"last_execute_status_message,omitempty"`

	// last execute status message contains
	LastExecuteStatusMessageContains *string `json:"last_execute_status_message_contains,omitempty"`

	// last execute status message ends with
	LastExecuteStatusMessageEndsWith *string `json:"last_execute_status_message_ends_with,omitempty"`

	// last execute status message gt
	LastExecuteStatusMessageGt *string `json:"last_execute_status_message_gt,omitempty"`

	// last execute status message gte
	LastExecuteStatusMessageGte *string `json:"last_execute_status_message_gte,omitempty"`

	// last execute status message in
	LastExecuteStatusMessageIn []string `json:"last_execute_status_message_in,omitempty"`

	// last execute status message lt
	LastExecuteStatusMessageLt *string `json:"last_execute_status_message_lt,omitempty"`

	// last execute status message lte
	LastExecuteStatusMessageLte *string `json:"last_execute_status_message_lte,omitempty"`

	// last execute status message not
	LastExecuteStatusMessageNot *string `json:"last_execute_status_message_not,omitempty"`

	// last execute status message not contains
	LastExecuteStatusMessageNotContains *string `json:"last_execute_status_message_not_contains,omitempty"`

	// last execute status message not ends with
	LastExecuteStatusMessageNotEndsWith *string `json:"last_execute_status_message_not_ends_with,omitempty"`

	// last execute status message not in
	LastExecuteStatusMessageNotIn []string `json:"last_execute_status_message_not_in,omitempty"`

	// last execute status message not starts with
	LastExecuteStatusMessageNotStartsWith *string `json:"last_execute_status_message_not_starts_with,omitempty"`

	// last execute status message starts with
	LastExecuteStatusMessageStartsWith *string `json:"last_execute_status_message_starts_with,omitempty"`

	// last execute status not
	LastExecuteStatusNot *BackupPlanExecutionStatus `json:"last_execute_status_not,omitempty"`

	// last execute status not in
	LastExecuteStatusNotIn []BackupPlanExecutionStatus `json:"last_execute_status_not_in,omitempty"`

	// last execute success job count
	LastExecuteSuccessJobCount *int32 `json:"last_execute_success_job_count,omitempty"`

	// last execute success job count gt
	LastExecuteSuccessJobCountGt *int32 `json:"last_execute_success_job_count_gt,omitempty"`

	// last execute success job count gte
	LastExecuteSuccessJobCountGte *int32 `json:"last_execute_success_job_count_gte,omitempty"`

	// last execute success job count in
	LastExecuteSuccessJobCountIn []int32 `json:"last_execute_success_job_count_in,omitempty"`

	// last execute success job count lt
	LastExecuteSuccessJobCountLt *int32 `json:"last_execute_success_job_count_lt,omitempty"`

	// last execute success job count lte
	LastExecuteSuccessJobCountLte *int32 `json:"last_execute_success_job_count_lte,omitempty"`

	// last execute success job count not
	LastExecuteSuccessJobCountNot *int32 `json:"last_execute_success_job_count_not,omitempty"`

	// last execute success job count not in
	LastExecuteSuccessJobCountNotIn []int32 `json:"last_execute_success_job_count_not_in,omitempty"`

	// last execute total job count
	LastExecuteTotalJobCount *int32 `json:"last_execute_total_job_count,omitempty"`

	// last execute total job count gt
	LastExecuteTotalJobCountGt *int32 `json:"last_execute_total_job_count_gt,omitempty"`

	// last execute total job count gte
	LastExecuteTotalJobCountGte *int32 `json:"last_execute_total_job_count_gte,omitempty"`

	// last execute total job count in
	LastExecuteTotalJobCountIn []int32 `json:"last_execute_total_job_count_in,omitempty"`

	// last execute total job count lt
	LastExecuteTotalJobCountLt *int32 `json:"last_execute_total_job_count_lt,omitempty"`

	// last execute total job count lte
	LastExecuteTotalJobCountLte *int32 `json:"last_execute_total_job_count_lte,omitempty"`

	// last execute total job count not
	LastExecuteTotalJobCountNot *int32 `json:"last_execute_total_job_count_not,omitempty"`

	// last execute total job count not in
	LastExecuteTotalJobCountNotIn []int32 `json:"last_execute_total_job_count_not_in,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last executed at gt
	LastExecutedAtGt *string `json:"last_executed_at_gt,omitempty"`

	// last executed at gte
	LastExecutedAtGte *string `json:"last_executed_at_gte,omitempty"`

	// last executed at in
	LastExecutedAtIn []string `json:"last_executed_at_in,omitempty"`

	// last executed at lt
	LastExecutedAtLt *string `json:"last_executed_at_lt,omitempty"`

	// last executed at lte
	LastExecutedAtLte *string `json:"last_executed_at_lte,omitempty"`

	// last executed at not
	LastExecutedAtNot *string `json:"last_executed_at_not,omitempty"`

	// last executed at not in
	LastExecutedAtNotIn []string `json:"last_executed_at_not_in,omitempty"`

	// last manual execute status
	LastManualExecuteStatus *BackupPlanExecutionStatus `json:"last_manual_execute_status,omitempty"`

	// last manual execute status in
	LastManualExecuteStatusIn []BackupPlanExecutionStatus `json:"last_manual_execute_status_in,omitempty"`

	// last manual execute status message
	LastManualExecuteStatusMessage *string `json:"last_manual_execute_status_message,omitempty"`

	// last manual execute status message contains
	LastManualExecuteStatusMessageContains *string `json:"last_manual_execute_status_message_contains,omitempty"`

	// last manual execute status message ends with
	LastManualExecuteStatusMessageEndsWith *string `json:"last_manual_execute_status_message_ends_with,omitempty"`

	// last manual execute status message gt
	LastManualExecuteStatusMessageGt *string `json:"last_manual_execute_status_message_gt,omitempty"`

	// last manual execute status message gte
	LastManualExecuteStatusMessageGte *string `json:"last_manual_execute_status_message_gte,omitempty"`

	// last manual execute status message in
	LastManualExecuteStatusMessageIn []string `json:"last_manual_execute_status_message_in,omitempty"`

	// last manual execute status message lt
	LastManualExecuteStatusMessageLt *string `json:"last_manual_execute_status_message_lt,omitempty"`

	// last manual execute status message lte
	LastManualExecuteStatusMessageLte *string `json:"last_manual_execute_status_message_lte,omitempty"`

	// last manual execute status message not
	LastManualExecuteStatusMessageNot *string `json:"last_manual_execute_status_message_not,omitempty"`

	// last manual execute status message not contains
	LastManualExecuteStatusMessageNotContains *string `json:"last_manual_execute_status_message_not_contains,omitempty"`

	// last manual execute status message not ends with
	LastManualExecuteStatusMessageNotEndsWith *string `json:"last_manual_execute_status_message_not_ends_with,omitempty"`

	// last manual execute status message not in
	LastManualExecuteStatusMessageNotIn []string `json:"last_manual_execute_status_message_not_in,omitempty"`

	// last manual execute status message not starts with
	LastManualExecuteStatusMessageNotStartsWith *string `json:"last_manual_execute_status_message_not_starts_with,omitempty"`

	// last manual execute status message starts with
	LastManualExecuteStatusMessageStartsWith *string `json:"last_manual_execute_status_message_starts_with,omitempty"`

	// last manual execute status not
	LastManualExecuteStatusNot *BackupPlanExecutionStatus `json:"last_manual_execute_status_not,omitempty"`

	// last manual execute status not in
	LastManualExecuteStatusNotIn []BackupPlanExecutionStatus `json:"last_manual_execute_status_not_in,omitempty"`

	// last manual execute success job count
	LastManualExecuteSuccessJobCount *int32 `json:"last_manual_execute_success_job_count,omitempty"`

	// last manual execute success job count gt
	LastManualExecuteSuccessJobCountGt *int32 `json:"last_manual_execute_success_job_count_gt,omitempty"`

	// last manual execute success job count gte
	LastManualExecuteSuccessJobCountGte *int32 `json:"last_manual_execute_success_job_count_gte,omitempty"`

	// last manual execute success job count in
	LastManualExecuteSuccessJobCountIn []int32 `json:"last_manual_execute_success_job_count_in,omitempty"`

	// last manual execute success job count lt
	LastManualExecuteSuccessJobCountLt *int32 `json:"last_manual_execute_success_job_count_lt,omitempty"`

	// last manual execute success job count lte
	LastManualExecuteSuccessJobCountLte *int32 `json:"last_manual_execute_success_job_count_lte,omitempty"`

	// last manual execute success job count not
	LastManualExecuteSuccessJobCountNot *int32 `json:"last_manual_execute_success_job_count_not,omitempty"`

	// last manual execute success job count not in
	LastManualExecuteSuccessJobCountNotIn []int32 `json:"last_manual_execute_success_job_count_not_in,omitempty"`

	// last manual execute total job count
	LastManualExecuteTotalJobCount *int32 `json:"last_manual_execute_total_job_count,omitempty"`

	// last manual execute total job count gt
	LastManualExecuteTotalJobCountGt *int32 `json:"last_manual_execute_total_job_count_gt,omitempty"`

	// last manual execute total job count gte
	LastManualExecuteTotalJobCountGte *int32 `json:"last_manual_execute_total_job_count_gte,omitempty"`

	// last manual execute total job count in
	LastManualExecuteTotalJobCountIn []int32 `json:"last_manual_execute_total_job_count_in,omitempty"`

	// last manual execute total job count lt
	LastManualExecuteTotalJobCountLt *int32 `json:"last_manual_execute_total_job_count_lt,omitempty"`

	// last manual execute total job count lte
	LastManualExecuteTotalJobCountLte *int32 `json:"last_manual_execute_total_job_count_lte,omitempty"`

	// last manual execute total job count not
	LastManualExecuteTotalJobCountNot *int32 `json:"last_manual_execute_total_job_count_not,omitempty"`

	// last manual execute total job count not in
	LastManualExecuteTotalJobCountNotIn []int32 `json:"last_manual_execute_total_job_count_not_in,omitempty"`

	// last manual executed at
	LastManualExecutedAt *string `json:"last_manual_executed_at,omitempty"`

	// last manual executed at gt
	LastManualExecutedAtGt *string `json:"last_manual_executed_at_gt,omitempty"`

	// last manual executed at gte
	LastManualExecutedAtGte *string `json:"last_manual_executed_at_gte,omitempty"`

	// last manual executed at in
	LastManualExecutedAtIn []string `json:"last_manual_executed_at_in,omitempty"`

	// last manual executed at lt
	LastManualExecutedAtLt *string `json:"last_manual_executed_at_lt,omitempty"`

	// last manual executed at lte
	LastManualExecutedAtLte *string `json:"last_manual_executed_at_lte,omitempty"`

	// last manual executed at not
	LastManualExecutedAtNot *string `json:"last_manual_executed_at_not,omitempty"`

	// last manual executed at not in
	LastManualExecutedAtNotIn []string `json:"last_manual_executed_at_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// next execution time
	NextExecutionTime *string `json:"next_execution_time,omitempty"`

	// next execution time gt
	NextExecutionTimeGt *string `json:"next_execution_time_gt,omitempty"`

	// next execution time gte
	NextExecutionTimeGte *string `json:"next_execution_time_gte,omitempty"`

	// next execution time in
	NextExecutionTimeIn []string `json:"next_execution_time_in,omitempty"`

	// next execution time lt
	NextExecutionTimeLt *string `json:"next_execution_time_lt,omitempty"`

	// next execution time lte
	NextExecutionTimeLte *string `json:"next_execution_time_lte,omitempty"`

	// next execution time not
	NextExecutionTimeNot *string `json:"next_execution_time_not,omitempty"`

	// next execution time not in
	NextExecutionTimeNotIn []string `json:"next_execution_time_not_in,omitempty"`

	// period
	Period *ReplicationPlanPeriod `json:"period,omitempty"`

	// period in
	PeriodIn []ReplicationPlanPeriod `json:"period_in,omitempty"`

	// period not
	PeriodNot *ReplicationPlanPeriod `json:"period_not,omitempty"`

	// period not in
	PeriodNotIn []ReplicationPlanPeriod `json:"period_not_in,omitempty"`

	// phase
	Phase *BackupPlanPhase `json:"phase,omitempty"`

	// phase in
	PhaseIn []BackupPlanPhase `json:"phase_in,omitempty"`

	// phase not
	PhaseNot *BackupPlanPhase `json:"phase_not,omitempty"`

	// phase not in
	PhaseNotIn []BackupPlanPhase `json:"phase_not_in,omitempty"`

	// replica name rule
	ReplicaNameRule *ReplicaNameRule `json:"replica_name_rule,omitempty"`

	// replica name rule in
	ReplicaNameRuleIn []ReplicaNameRule `json:"replica_name_rule_in,omitempty"`

	// replica name rule not
	ReplicaNameRuleNot *ReplicaNameRule `json:"replica_name_rule_not,omitempty"`

	// replica name rule not in
	ReplicaNameRuleNotIn []ReplicaNameRule `json:"replica_name_rule_not_in,omitempty"`

	// replica name setting
	ReplicaNameSetting *string `json:"replica_name_setting,omitempty"`

	// replica name setting contains
	ReplicaNameSettingContains *string `json:"replica_name_setting_contains,omitempty"`

	// replica name setting ends with
	ReplicaNameSettingEndsWith *string `json:"replica_name_setting_ends_with,omitempty"`

	// replica name setting gt
	ReplicaNameSettingGt *string `json:"replica_name_setting_gt,omitempty"`

	// replica name setting gte
	ReplicaNameSettingGte *string `json:"replica_name_setting_gte,omitempty"`

	// replica name setting in
	ReplicaNameSettingIn []string `json:"replica_name_setting_in,omitempty"`

	// replica name setting lt
	ReplicaNameSettingLt *string `json:"replica_name_setting_lt,omitempty"`

	// replica name setting lte
	ReplicaNameSettingLte *string `json:"replica_name_setting_lte,omitempty"`

	// replica name setting not
	ReplicaNameSettingNot *string `json:"replica_name_setting_not,omitempty"`

	// replica name setting not contains
	ReplicaNameSettingNotContains *string `json:"replica_name_setting_not_contains,omitempty"`

	// replica name setting not ends with
	ReplicaNameSettingNotEndsWith *string `json:"replica_name_setting_not_ends_with,omitempty"`

	// replica name setting not in
	ReplicaNameSettingNotIn []string `json:"replica_name_setting_not_in,omitempty"`

	// replica name setting not starts with
	ReplicaNameSettingNotStartsWith *string `json:"replica_name_setting_not_starts_with,omitempty"`

	// replica name setting starts with
	ReplicaNameSettingStartsWith *string `json:"replica_name_setting_starts_with,omitempty"`

	// replica num
	ReplicaNum *int32 `json:"replica_num,omitempty"`

	// replica num gt
	ReplicaNumGt *int32 `json:"replica_num_gt,omitempty"`

	// replica num gte
	ReplicaNumGte *int32 `json:"replica_num_gte,omitempty"`

	// replica num in
	ReplicaNumIn []int32 `json:"replica_num_in,omitempty"`

	// replica num lt
	ReplicaNumLt *int32 `json:"replica_num_lt,omitempty"`

	// replica num lte
	ReplicaNumLte *int32 `json:"replica_num_lte,omitempty"`

	// replica num not
	ReplicaNumNot *int32 `json:"replica_num_not,omitempty"`

	// replica num not in
	ReplicaNumNotIn []int32 `json:"replica_num_not_in,omitempty"`

	// replica vms every
	ReplicaVmsEvery *ReplicaVMWhereInput `json:"replica_vms_every,omitempty"`

	// replica vms none
	ReplicaVmsNone *ReplicaVMWhereInput `json:"replica_vms_none,omitempty"`

	// replica vms some
	ReplicaVmsSome *ReplicaVMWhereInput `json:"replica_vms_some,omitempty"`

	// replication plan executions every
	ReplicationPlanExecutionsEvery *ReplicationPlanExecutionWhereInput `json:"replication_plan_executions_every,omitempty"`

	// replication plan executions none
	ReplicationPlanExecutionsNone *ReplicationPlanExecutionWhereInput `json:"replication_plan_executions_none,omitempty"`

	// replication plan executions some
	ReplicationPlanExecutionsSome *ReplicationPlanExecutionWhereInput `json:"replication_plan_executions_some,omitempty"`

	// replication restore points every
	ReplicationRestorePointsEvery *ReplicationRestorePointWhereInput `json:"replication_restore_points_every,omitempty"`

	// replication restore points none
	ReplicationRestorePointsNone *ReplicationRestorePointWhereInput `json:"replication_restore_points_none,omitempty"`

	// replication restore points some
	ReplicationRestorePointsSome *ReplicationRestorePointWhereInput `json:"replication_restore_points_some,omitempty"`

	// replication target executions every
	ReplicationTargetExecutionsEvery *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_every,omitempty"`

	// replication target executions none
	ReplicationTargetExecutionsNone *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_none,omitempty"`

	// replication target executions some
	ReplicationTargetExecutionsSome *ReplicationTargetExecutionWhereInput `json:"replication_target_executions_some,omitempty"`

	// resiliency type
	ResiliencyType *ResiliencyType `json:"resiliency_type,omitempty"`

	// resiliency type in
	ResiliencyTypeIn []ResiliencyType `json:"resiliency_type_in,omitempty"`

	// resiliency type not
	ResiliencyTypeNot *ResiliencyType `json:"resiliency_type_not,omitempty"`

	// resiliency type not in
	ResiliencyTypeNotIn []ResiliencyType `json:"resiliency_type_not_in,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// snapshot consistent type in
	SnapshotConsistentTypeIn []ConsistentType `json:"snapshot_consistent_type_in,omitempty"`

	// snapshot consistent type not
	SnapshotConsistentTypeNot *ConsistentType `json:"snapshot_consistent_type_not,omitempty"`

	// snapshot consistent type not in
	SnapshotConsistentTypeNotIn []ConsistentType `json:"snapshot_consistent_type_not_in,omitempty"`

	// status
	Status *BackupPlanStatus `json:"status,omitempty"`

	// status in
	StatusIn []BackupPlanStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *BackupPlanStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupPlanStatus `json:"status_not_in,omitempty"`

	// storage policy
	StoragePolicy *VMVolumeElfStoragePolicyType `json:"storage_policy,omitempty"`

	// storage policy in
	StoragePolicyIn []VMVolumeElfStoragePolicyType `json:"storage_policy_in,omitempty"`

	// storage policy not
	StoragePolicyNot *VMVolumeElfStoragePolicyType `json:"storage_policy_not,omitempty"`

	// storage policy not in
	StoragePolicyNotIn []VMVolumeElfStoragePolicyType `json:"storage_policy_not_in,omitempty"`

	// target cluster
	TargetCluster *ClusterWhereInput `json:"target_cluster,omitempty"`

	// target replication service
	TargetReplicationService *ReplicationServiceWhereInput `json:"target_replication_service,omitempty"`

	// thin provision
	ThinProvision *bool `json:"thin_provision,omitempty"`

	// thin provision not
	ThinProvisionNot *bool `json:"thin_provision_not,omitempty"`

	// type
	Type *ReplicationPlanType `json:"type,omitempty"`

	// type in
	TypeIn []ReplicationPlanType `json:"type_in,omitempty"`

	// type not
	TypeNot *ReplicationPlanType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []ReplicationPlanType `json:"type_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window end contains
	WindowEndContains *string `json:"window_end_contains,omitempty"`

	// window end ends with
	WindowEndEndsWith *string `json:"window_end_ends_with,omitempty"`

	// window end gt
	WindowEndGt *string `json:"window_end_gt,omitempty"`

	// window end gte
	WindowEndGte *string `json:"window_end_gte,omitempty"`

	// window end in
	WindowEndIn []string `json:"window_end_in,omitempty"`

	// window end lt
	WindowEndLt *string `json:"window_end_lt,omitempty"`

	// window end lte
	WindowEndLte *string `json:"window_end_lte,omitempty"`

	// window end not
	WindowEndNot *string `json:"window_end_not,omitempty"`

	// window end not contains
	WindowEndNotContains *string `json:"window_end_not_contains,omitempty"`

	// window end not ends with
	WindowEndNotEndsWith *string `json:"window_end_not_ends_with,omitempty"`

	// window end not in
	WindowEndNotIn []string `json:"window_end_not_in,omitempty"`

	// window end not starts with
	WindowEndNotStartsWith *string `json:"window_end_not_starts_with,omitempty"`

	// window end starts with
	WindowEndStartsWith *string `json:"window_end_starts_with,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	// window start contains
	WindowStartContains *string `json:"window_start_contains,omitempty"`

	// window start ends with
	WindowStartEndsWith *string `json:"window_start_ends_with,omitempty"`

	// window start gt
	WindowStartGt *string `json:"window_start_gt,omitempty"`

	// window start gte
	WindowStartGte *string `json:"window_start_gte,omitempty"`

	// window start in
	WindowStartIn []string `json:"window_start_in,omitempty"`

	// window start lt
	WindowStartLt *string `json:"window_start_lt,omitempty"`

	// window start lte
	WindowStartLte *string `json:"window_start_lte,omitempty"`

	// window start not
	WindowStartNot *string `json:"window_start_not,omitempty"`

	// window start not contains
	WindowStartNotContains *string `json:"window_start_not_contains,omitempty"`

	// window start not ends with
	WindowStartNotEndsWith *string `json:"window_start_not_ends_with,omitempty"`

	// window start not in
	WindowStartNotIn []string `json:"window_start_not_in,omitempty"`

	// window start not starts with
	WindowStartNotStartsWith *string `json:"window_start_not_starts_with,omitempty"`

	// window start starts with
	WindowStartStartsWith *string `json:"window_start_starts_with,omitempty"`

	MarshalOpts *ReplicationPlanWhereInputMarshalOpts `json:"-"`
}

type ReplicationPlanWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	AbortWindowUnfinished_Explicit_Null_When_Empty bool

	AbortWindowUnfinishedNot_Explicit_Null_When_Empty bool

	ActivationTimestamp_Explicit_Null_When_Empty bool

	ActivationTimestampGt_Explicit_Null_When_Empty bool

	ActivationTimestampGte_Explicit_Null_When_Empty bool

	ActivationTimestampIn_Explicit_Null_When_Empty bool

	ActivationTimestampLt_Explicit_Null_When_Empty bool

	ActivationTimestampLte_Explicit_Null_When_Empty bool

	ActivationTimestampNot_Explicit_Null_When_Empty bool

	ActivationTimestampNotIn_Explicit_Null_When_Empty bool

	Compression_Explicit_Null_When_Empty bool

	CompressionNot_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	DeleteStrategy_Explicit_Null_When_Empty bool

	DeleteStrategyIn_Explicit_Null_When_Empty bool

	DeleteStrategyNot_Explicit_Null_When_Empty bool

	DeleteStrategyNotIn_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	Eck_Explicit_Null_When_Empty bool

	EckGt_Explicit_Null_When_Empty bool

	EckGte_Explicit_Null_When_Empty bool

	EckIn_Explicit_Null_When_Empty bool

	EckLt_Explicit_Null_When_Empty bool

	EckLte_Explicit_Null_When_Empty bool

	EckNot_Explicit_Null_When_Empty bool

	EckNotIn_Explicit_Null_When_Empty bool

	Ecm_Explicit_Null_When_Empty bool

	EcmGt_Explicit_Null_When_Empty bool

	EcmGte_Explicit_Null_When_Empty bool

	EcmIn_Explicit_Null_When_Empty bool

	EcmLt_Explicit_Null_When_Empty bool

	EcmLte_Explicit_Null_When_Empty bool

	EcmNot_Explicit_Null_When_Empty bool

	EcmNotIn_Explicit_Null_When_Empty bool

	EnableWindow_Explicit_Null_When_Empty bool

	EnableWindowNot_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Inbound_Explicit_Null_When_Empty bool

	InboundNot_Explicit_Null_When_Empty bool

	Interval_Explicit_Null_When_Empty bool

	IntervalGt_Explicit_Null_When_Empty bool

	IntervalGte_Explicit_Null_When_Empty bool

	IntervalIn_Explicit_Null_When_Empty bool

	IntervalLt_Explicit_Null_When_Empty bool

	IntervalLte_Explicit_Null_When_Empty bool

	IntervalNot_Explicit_Null_When_Empty bool

	IntervalNotIn_Explicit_Null_When_Empty bool

	IscsiLunsEvery_Explicit_Null_When_Empty bool

	IscsiLunsNone_Explicit_Null_When_Empty bool

	IscsiLunsSome_Explicit_Null_When_Empty bool

	KeepMacAddress_Explicit_Null_When_Empty bool

	KeepMacAddressNot_Explicit_Null_When_Empty bool

	KeepPolicy_Explicit_Null_When_Empty bool

	KeepPolicyIn_Explicit_Null_When_Empty bool

	KeepPolicyNot_Explicit_Null_When_Empty bool

	KeepPolicyNotIn_Explicit_Null_When_Empty bool

	KeepPolicyValue_Explicit_Null_When_Empty bool

	KeepPolicyValueGt_Explicit_Null_When_Empty bool

	KeepPolicyValueGte_Explicit_Null_When_Empty bool

	KeepPolicyValueIn_Explicit_Null_When_Empty bool

	KeepPolicyValueLt_Explicit_Null_When_Empty bool

	KeepPolicyValueLte_Explicit_Null_When_Empty bool

	KeepPolicyValueNot_Explicit_Null_When_Empty bool

	KeepPolicyValueNotIn_Explicit_Null_When_Empty bool

	LastExecuteStatus_Explicit_Null_When_Empty bool

	LastExecuteStatusIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageContains_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageEndsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageGt_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageGte_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageLt_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageLte_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNot_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotContains_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotIn_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusMessageStartsWith_Explicit_Null_When_Empty bool

	LastExecuteStatusNot_Explicit_Null_When_Empty bool

	LastExecuteStatusNotIn_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountGt_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountGte_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountIn_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountLt_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountLte_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountNot_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCountNotIn_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountGt_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountGte_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountIn_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountLt_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountLte_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountNot_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCountNotIn_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	LastExecutedAtGt_Explicit_Null_When_Empty bool

	LastExecutedAtGte_Explicit_Null_When_Empty bool

	LastExecutedAtIn_Explicit_Null_When_Empty bool

	LastExecutedAtLt_Explicit_Null_When_Empty bool

	LastExecutedAtLte_Explicit_Null_When_Empty bool

	LastExecutedAtNot_Explicit_Null_When_Empty bool

	LastExecutedAtNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatus_Explicit_Null_When_Empty bool

	LastManualExecuteStatusIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageContains_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageEndsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageGt_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageGte_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageLt_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageLte_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNot_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotContains_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessageStartsWith_Explicit_Null_When_Empty bool

	LastManualExecuteStatusNot_Explicit_Null_When_Empty bool

	LastManualExecuteStatusNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountGt_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountGte_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountIn_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountLt_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountLte_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountNot_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCountNotIn_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountGt_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountGte_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountIn_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountLt_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountLte_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountNot_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCountNotIn_Explicit_Null_When_Empty bool

	LastManualExecutedAt_Explicit_Null_When_Empty bool

	LastManualExecutedAtGt_Explicit_Null_When_Empty bool

	LastManualExecutedAtGte_Explicit_Null_When_Empty bool

	LastManualExecutedAtIn_Explicit_Null_When_Empty bool

	LastManualExecutedAtLt_Explicit_Null_When_Empty bool

	LastManualExecutedAtLte_Explicit_Null_When_Empty bool

	LastManualExecutedAtNot_Explicit_Null_When_Empty bool

	LastManualExecutedAtNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NextExecutionTime_Explicit_Null_When_Empty bool

	NextExecutionTimeGt_Explicit_Null_When_Empty bool

	NextExecutionTimeGte_Explicit_Null_When_Empty bool

	NextExecutionTimeIn_Explicit_Null_When_Empty bool

	NextExecutionTimeLt_Explicit_Null_When_Empty bool

	NextExecutionTimeLte_Explicit_Null_When_Empty bool

	NextExecutionTimeNot_Explicit_Null_When_Empty bool

	NextExecutionTimeNotIn_Explicit_Null_When_Empty bool

	Period_Explicit_Null_When_Empty bool

	PeriodIn_Explicit_Null_When_Empty bool

	PeriodNot_Explicit_Null_When_Empty bool

	PeriodNotIn_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	PhaseIn_Explicit_Null_When_Empty bool

	PhaseNot_Explicit_Null_When_Empty bool

	PhaseNotIn_Explicit_Null_When_Empty bool

	ReplicaNameRule_Explicit_Null_When_Empty bool

	ReplicaNameRuleIn_Explicit_Null_When_Empty bool

	ReplicaNameRuleNot_Explicit_Null_When_Empty bool

	ReplicaNameRuleNotIn_Explicit_Null_When_Empty bool

	ReplicaNameSetting_Explicit_Null_When_Empty bool

	ReplicaNameSettingContains_Explicit_Null_When_Empty bool

	ReplicaNameSettingEndsWith_Explicit_Null_When_Empty bool

	ReplicaNameSettingGt_Explicit_Null_When_Empty bool

	ReplicaNameSettingGte_Explicit_Null_When_Empty bool

	ReplicaNameSettingIn_Explicit_Null_When_Empty bool

	ReplicaNameSettingLt_Explicit_Null_When_Empty bool

	ReplicaNameSettingLte_Explicit_Null_When_Empty bool

	ReplicaNameSettingNot_Explicit_Null_When_Empty bool

	ReplicaNameSettingNotContains_Explicit_Null_When_Empty bool

	ReplicaNameSettingNotEndsWith_Explicit_Null_When_Empty bool

	ReplicaNameSettingNotIn_Explicit_Null_When_Empty bool

	ReplicaNameSettingNotStartsWith_Explicit_Null_When_Empty bool

	ReplicaNameSettingStartsWith_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	ReplicaNumGt_Explicit_Null_When_Empty bool

	ReplicaNumGte_Explicit_Null_When_Empty bool

	ReplicaNumIn_Explicit_Null_When_Empty bool

	ReplicaNumLt_Explicit_Null_When_Empty bool

	ReplicaNumLte_Explicit_Null_When_Empty bool

	ReplicaNumNot_Explicit_Null_When_Empty bool

	ReplicaNumNotIn_Explicit_Null_When_Empty bool

	ReplicaVmsEvery_Explicit_Null_When_Empty bool

	ReplicaVmsNone_Explicit_Null_When_Empty bool

	ReplicaVmsSome_Explicit_Null_When_Empty bool

	ReplicationPlanExecutionsEvery_Explicit_Null_When_Empty bool

	ReplicationPlanExecutionsNone_Explicit_Null_When_Empty bool

	ReplicationPlanExecutionsSome_Explicit_Null_When_Empty bool

	ReplicationRestorePointsEvery_Explicit_Null_When_Empty bool

	ReplicationRestorePointsNone_Explicit_Null_When_Empty bool

	ReplicationRestorePointsSome_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsEvery_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsNone_Explicit_Null_When_Empty bool

	ReplicationTargetExecutionsSome_Explicit_Null_When_Empty bool

	ResiliencyType_Explicit_Null_When_Empty bool

	ResiliencyTypeIn_Explicit_Null_When_Empty bool

	ResiliencyTypeNot_Explicit_Null_When_Empty bool

	ResiliencyTypeNotIn_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeIn_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNot_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNotIn_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	StoragePolicy_Explicit_Null_When_Empty bool

	StoragePolicyIn_Explicit_Null_When_Empty bool

	StoragePolicyNot_Explicit_Null_When_Empty bool

	StoragePolicyNotIn_Explicit_Null_When_Empty bool

	TargetCluster_Explicit_Null_When_Empty bool

	TargetReplicationService_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool

	ThinProvisionNot_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool

	VmsEvery_Explicit_Null_When_Empty bool

	VmsNone_Explicit_Null_When_Empty bool

	VmsSome_Explicit_Null_When_Empty bool

	WindowEnd_Explicit_Null_When_Empty bool

	WindowEndContains_Explicit_Null_When_Empty bool

	WindowEndEndsWith_Explicit_Null_When_Empty bool

	WindowEndGt_Explicit_Null_When_Empty bool

	WindowEndGte_Explicit_Null_When_Empty bool

	WindowEndIn_Explicit_Null_When_Empty bool

	WindowEndLt_Explicit_Null_When_Empty bool

	WindowEndLte_Explicit_Null_When_Empty bool

	WindowEndNot_Explicit_Null_When_Empty bool

	WindowEndNotContains_Explicit_Null_When_Empty bool

	WindowEndNotEndsWith_Explicit_Null_When_Empty bool

	WindowEndNotIn_Explicit_Null_When_Empty bool

	WindowEndNotStartsWith_Explicit_Null_When_Empty bool

	WindowEndStartsWith_Explicit_Null_When_Empty bool

	WindowStart_Explicit_Null_When_Empty bool

	WindowStartContains_Explicit_Null_When_Empty bool

	WindowStartEndsWith_Explicit_Null_When_Empty bool

	WindowStartGt_Explicit_Null_When_Empty bool

	WindowStartGte_Explicit_Null_When_Empty bool

	WindowStartIn_Explicit_Null_When_Empty bool

	WindowStartLt_Explicit_Null_When_Empty bool

	WindowStartLte_Explicit_Null_When_Empty bool

	WindowStartNot_Explicit_Null_When_Empty bool

	WindowStartNotContains_Explicit_Null_When_Empty bool

	WindowStartNotEndsWith_Explicit_Null_When_Empty bool

	WindowStartNotIn_Explicit_Null_When_Empty bool

	WindowStartNotStartsWith_Explicit_Null_When_Empty bool

	WindowStartStartsWith_Explicit_Null_When_Empty bool
}

func (m ReplicationPlanWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field abort_window_unfinished
	if m.AbortWindowUnfinished != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished\":")
		bytes, err := swag.WriteJSON(m.AbortWindowUnfinished)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AbortWindowUnfinished_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished\":null")
		first = false
	}

	// handle nullable field abort_window_unfinished_not
	if m.AbortWindowUnfinishedNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished_not\":")
		bytes, err := swag.WriteJSON(m.AbortWindowUnfinishedNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AbortWindowUnfinishedNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished_not\":null")
		first = false
	}

	// handle nullable field activation_timestamp
	if m.ActivationTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp\":null")
		first = false
	}

	// handle nullable field activation_timestamp_gt
	if m.ActivationTimestampGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_gt\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestampGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_gt\":null")
		first = false
	}

	// handle nullable field activation_timestamp_gte
	if m.ActivationTimestampGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_gte\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestampGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_gte\":null")
		first = false
	}

	// handle non nullable field activation_timestamp_in with omitempty
	if !swag.IsZero(m.ActivationTimestampIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_in\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field activation_timestamp_lt
	if m.ActivationTimestampLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_lt\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestampLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_lt\":null")
		first = false
	}

	// handle nullable field activation_timestamp_lte
	if m.ActivationTimestampLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_lte\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestampLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_lte\":null")
		first = false
	}

	// handle nullable field activation_timestamp_not
	if m.ActivationTimestampNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_not\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestampNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_not\":null")
		first = false
	}

	// handle non nullable field activation_timestamp_not_in with omitempty
	if !swag.IsZero(m.ActivationTimestampNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp_not_in\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestampNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field compression
	if m.Compression != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":")
		bytes, err := swag.WriteJSON(m.Compression)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compression_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":null")
		first = false
	}

	// handle nullable field compression_not
	if m.CompressionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_not\":")
		bytes, err := swag.WriteJSON(m.CompressionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_not\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field delete_strategy
	if m.DeleteStrategy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":null")
		first = false
	}

	// handle non nullable field delete_strategy_in with omitempty
	if !swag.IsZero(m.DeleteStrategyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_in\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field delete_strategy_not
	if m.DeleteStrategyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not\":null")
		first = false
	}

	// handle non nullable field delete_strategy_not_in with omitempty
	if !swag.IsZero(m.DeleteStrategyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy_not_in\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field ec_k
	if m.Eck != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k\":")
		bytes, err := swag.WriteJSON(m.Eck)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Eck_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k\":null")
		first = false
	}

	// handle nullable field ec_k_gt
	if m.EckGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_gt\":")
		bytes, err := swag.WriteJSON(m.EckGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EckGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_gt\":null")
		first = false
	}

	// handle nullable field ec_k_gte
	if m.EckGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_gte\":")
		bytes, err := swag.WriteJSON(m.EckGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EckGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_gte\":null")
		first = false
	}

	// handle non nullable field ec_k_in with omitempty
	if !swag.IsZero(m.EckIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_in\":")
		bytes, err := swag.WriteJSON(m.EckIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ec_k_lt
	if m.EckLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_lt\":")
		bytes, err := swag.WriteJSON(m.EckLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EckLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_lt\":null")
		first = false
	}

	// handle nullable field ec_k_lte
	if m.EckLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_lte\":")
		bytes, err := swag.WriteJSON(m.EckLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EckLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_lte\":null")
		first = false
	}

	// handle nullable field ec_k_not
	if m.EckNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_not\":")
		bytes, err := swag.WriteJSON(m.EckNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EckNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_not\":null")
		first = false
	}

	// handle non nullable field ec_k_not_in with omitempty
	if !swag.IsZero(m.EckNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k_not_in\":")
		bytes, err := swag.WriteJSON(m.EckNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ec_m
	if m.Ecm != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m\":")
		bytes, err := swag.WriteJSON(m.Ecm)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ecm_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m\":null")
		first = false
	}

	// handle nullable field ec_m_gt
	if m.EcmGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_gt\":")
		bytes, err := swag.WriteJSON(m.EcmGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcmGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_gt\":null")
		first = false
	}

	// handle nullable field ec_m_gte
	if m.EcmGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_gte\":")
		bytes, err := swag.WriteJSON(m.EcmGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcmGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_gte\":null")
		first = false
	}

	// handle non nullable field ec_m_in with omitempty
	if !swag.IsZero(m.EcmIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_in\":")
		bytes, err := swag.WriteJSON(m.EcmIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ec_m_lt
	if m.EcmLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_lt\":")
		bytes, err := swag.WriteJSON(m.EcmLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcmLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_lt\":null")
		first = false
	}

	// handle nullable field ec_m_lte
	if m.EcmLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_lte\":")
		bytes, err := swag.WriteJSON(m.EcmLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcmLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_lte\":null")
		first = false
	}

	// handle nullable field ec_m_not
	if m.EcmNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_not\":")
		bytes, err := swag.WriteJSON(m.EcmNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcmNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_not\":null")
		first = false
	}

	// handle non nullable field ec_m_not_in with omitempty
	if !swag.IsZero(m.EcmNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m_not_in\":")
		bytes, err := swag.WriteJSON(m.EcmNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field enable_window
	if m.EnableWindow != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":")
		bytes, err := swag.WriteJSON(m.EnableWindow)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindow_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":null")
		first = false
	}

	// handle nullable field enable_window_not
	if m.EnableWindowNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window_not\":")
		bytes, err := swag.WriteJSON(m.EnableWindowNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindowNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window_not\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field inbound
	if m.Inbound != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":")
		bytes, err := swag.WriteJSON(m.Inbound)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Inbound_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":null")
		first = false
	}

	// handle nullable field inbound_not
	if m.InboundNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound_not\":")
		bytes, err := swag.WriteJSON(m.InboundNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InboundNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound_not\":null")
		first = false
	}

	// handle nullable field interval
	if m.Interval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval\":")
		bytes, err := swag.WriteJSON(m.Interval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Interval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval\":null")
		first = false
	}

	// handle nullable field interval_gt
	if m.IntervalGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_gt\":")
		bytes, err := swag.WriteJSON(m.IntervalGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IntervalGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_gt\":null")
		first = false
	}

	// handle nullable field interval_gte
	if m.IntervalGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_gte\":")
		bytes, err := swag.WriteJSON(m.IntervalGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IntervalGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_gte\":null")
		first = false
	}

	// handle non nullable field interval_in with omitempty
	if !swag.IsZero(m.IntervalIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_in\":")
		bytes, err := swag.WriteJSON(m.IntervalIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field interval_lt
	if m.IntervalLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_lt\":")
		bytes, err := swag.WriteJSON(m.IntervalLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IntervalLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_lt\":null")
		first = false
	}

	// handle nullable field interval_lte
	if m.IntervalLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_lte\":")
		bytes, err := swag.WriteJSON(m.IntervalLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IntervalLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_lte\":null")
		first = false
	}

	// handle nullable field interval_not
	if m.IntervalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_not\":")
		bytes, err := swag.WriteJSON(m.IntervalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IntervalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_not\":null")
		first = false
	}

	// handle non nullable field interval_not_in with omitempty
	if !swag.IsZero(m.IntervalNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval_not_in\":")
		bytes, err := swag.WriteJSON(m.IntervalNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_luns_every
	if m.IscsiLunsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_every\":")
		bytes, err := swag.WriteJSON(m.IscsiLunsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_every\":null")
		first = false
	}

	// handle nullable field iscsi_luns_none
	if m.IscsiLunsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_none\":")
		bytes, err := swag.WriteJSON(m.IscsiLunsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_none\":null")
		first = false
	}

	// handle nullable field iscsi_luns_some
	if m.IscsiLunsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_some\":")
		bytes, err := swag.WriteJSON(m.IscsiLunsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns_some\":null")
		first = false
	}

	// handle nullable field keep_mac_address
	if m.KeepMacAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address\":")
		bytes, err := swag.WriteJSON(m.KeepMacAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepMacAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address\":null")
		first = false
	}

	// handle nullable field keep_mac_address_not
	if m.KeepMacAddressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address_not\":")
		bytes, err := swag.WriteJSON(m.KeepMacAddressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepMacAddressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address_not\":null")
		first = false
	}

	// handle nullable field keep_policy
	if m.KeepPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":")
		bytes, err := swag.WriteJSON(m.KeepPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":null")
		first = false
	}

	// handle non nullable field keep_policy_in with omitempty
	if !swag.IsZero(m.KeepPolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_not
	if m.KeepPolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not\":null")
		first = false
	}

	// handle non nullable field keep_policy_not_in with omitempty
	if !swag.IsZero(m.KeepPolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_not_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_value
	if m.KeepPolicyValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":null")
		first = false
	}

	// handle nullable field keep_policy_value_gt
	if m.KeepPolicyValueGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gt\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gt\":null")
		first = false
	}

	// handle nullable field keep_policy_value_gte
	if m.KeepPolicyValueGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gte\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_gte\":null")
		first = false
	}

	// handle non nullable field keep_policy_value_in with omitempty
	if !swag.IsZero(m.KeepPolicyValueIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy_value_lt
	if m.KeepPolicyValueLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lt\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lt\":null")
		first = false
	}

	// handle nullable field keep_policy_value_lte
	if m.KeepPolicyValueLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lte\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_lte\":null")
		first = false
	}

	// handle nullable field keep_policy_value_not
	if m.KeepPolicyValueNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValueNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not\":null")
		first = false
	}

	// handle non nullable field keep_policy_value_not_in with omitempty
	if !swag.IsZero(m.KeepPolicyValueNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value_not_in\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValueNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status
	if m.LastExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":null")
		first = false
	}

	// handle non nullable field last_execute_status_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message
	if m.LastExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_contains
	if m.LastExecuteStatusMessageContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_contains\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_contains\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_ends_with
	if m.LastExecuteStatusMessageEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_ends_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_gt
	if m.LastExecuteStatusMessageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gt\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_gte
	if m.LastExecuteStatusMessageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_status_message_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusMessageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message_lt
	if m.LastExecuteStatusMessageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lt\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_lte
	if m.LastExecuteStatusMessageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_lte\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not
	if m.LastExecuteStatusMessageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not_contains
	if m.LastExecuteStatusMessageNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_contains\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_contains\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_not_ends_with
	if m.LastExecuteStatusMessageNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_ends_with\":null")
		first = false
	}

	// handle non nullable field last_execute_status_message_not_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusMessageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_status_message_not_starts_with
	if m.LastExecuteStatusMessageNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_not_starts_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_message_starts_with
	if m.LastExecuteStatusMessageStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessageStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessageStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message_starts_with\":null")
		first = false
	}

	// handle nullable field last_execute_status_not
	if m.LastExecuteStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not\":null")
		first = false
	}

	// handle non nullable field last_execute_status_not_in with omitempty
	if !swag.IsZero(m.LastExecuteStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_success_job_count
	if m.LastExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_gt
	if m.LastExecuteSuccessJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_gte
	if m.LastExecuteSuccessJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_success_job_count_in with omitempty
	if !swag.IsZero(m.LastExecuteSuccessJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_success_job_count_lt
	if m.LastExecuteSuccessJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_lte
	if m.LastExecuteSuccessJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count_not
	if m.LastExecuteSuccessJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_execute_success_job_count_not_in with omitempty
	if !swag.IsZero(m.LastExecuteSuccessJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_total_job_count
	if m.LastExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_gt
	if m.LastExecuteTotalJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_gte
	if m.LastExecuteTotalJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_execute_total_job_count_in with omitempty
	if !swag.IsZero(m.LastExecuteTotalJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_execute_total_job_count_lt
	if m.LastExecuteTotalJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_lte
	if m.LastExecuteTotalJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count_not
	if m.LastExecuteTotalJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_execute_total_job_count_not_in with omitempty
	if !swag.IsZero(m.LastExecuteTotalJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field last_executed_at_gt
	if m.LastExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":null")
		first = false
	}

	// handle nullable field last_executed_at_gte
	if m.LastExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":null")
		first = false
	}

	// handle non nullable field last_executed_at_in with omitempty
	if !swag.IsZero(m.LastExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_executed_at_lt
	if m.LastExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":null")
		first = false
	}

	// handle nullable field last_executed_at_lte
	if m.LastExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":null")
		first = false
	}

	// handle nullable field last_executed_at_not
	if m.LastExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":null")
		first = false
	}

	// handle non nullable field last_executed_at_not_in with omitempty
	if !swag.IsZero(m.LastExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status
	if m.LastManualExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message
	if m.LastManualExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_contains
	if m.LastManualExecuteStatusMessageContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_contains\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_contains\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_ends_with
	if m.LastManualExecuteStatusMessageEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_ends_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_gt
	if m.LastManualExecuteStatusMessageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_gte
	if m.LastManualExecuteStatusMessageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_message_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusMessageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message_lt
	if m.LastManualExecuteStatusMessageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_lte
	if m.LastManualExecuteStatusMessageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not
	if m.LastManualExecuteStatusMessageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_contains
	if m.LastManualExecuteStatusMessageNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_contains\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_contains\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_ends_with
	if m.LastManualExecuteStatusMessageNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_ends_with\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_message_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusMessageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_status_message_not_starts_with
	if m.LastManualExecuteStatusMessageNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_not_starts_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message_starts_with
	if m.LastManualExecuteStatusMessageStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_starts_with\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessageStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessageStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message_starts_with\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_not
	if m.LastManualExecuteStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_status_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count
	if m.LastManualExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_gt
	if m.LastManualExecuteSuccessJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_gte
	if m.LastManualExecuteSuccessJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_success_job_count_in with omitempty
	if !swag.IsZero(m.LastManualExecuteSuccessJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_lt
	if m.LastManualExecuteSuccessJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_lte
	if m.LastManualExecuteSuccessJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count_not
	if m.LastManualExecuteSuccessJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_success_job_count_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteSuccessJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count
	if m.LastManualExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_gt
	if m.LastManualExecuteTotalJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_gte
	if m.LastManualExecuteTotalJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_total_job_count_in with omitempty
	if !swag.IsZero(m.LastManualExecuteTotalJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_lt
	if m.LastManualExecuteTotalJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lt\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_lte
	if m.LastManualExecuteTotalJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_lte\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count_not
	if m.LastManualExecuteTotalJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not\":null")
		first = false
	}

	// handle non nullable field last_manual_execute_total_job_count_not_in with omitempty
	if !swag.IsZero(m.LastManualExecuteTotalJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_executed_at
	if m.LastManualExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_gt
	if m.LastManualExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gt\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_gte
	if m.LastManualExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_gte\":null")
		first = false
	}

	// handle non nullable field last_manual_executed_at_in with omitempty
	if !swag.IsZero(m.LastManualExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_manual_executed_at_lt
	if m.LastManualExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lt\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_lte
	if m.LastManualExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_lte\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at_not
	if m.LastManualExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not\":null")
		first = false
	}

	// handle non nullable field last_manual_executed_at_not_in with omitempty
	if !swag.IsZero(m.LastManualExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field next_execution_time
	if m.NextExecutionTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time\":null")
		first = false
	}

	// handle nullable field next_execution_time_gt
	if m.NextExecutionTimeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_gt\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTimeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_gt\":null")
		first = false
	}

	// handle nullable field next_execution_time_gte
	if m.NextExecutionTimeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_gte\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTimeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_gte\":null")
		first = false
	}

	// handle non nullable field next_execution_time_in with omitempty
	if !swag.IsZero(m.NextExecutionTimeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_in\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field next_execution_time_lt
	if m.NextExecutionTimeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_lt\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTimeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_lt\":null")
		first = false
	}

	// handle nullable field next_execution_time_lte
	if m.NextExecutionTimeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_lte\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTimeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_lte\":null")
		first = false
	}

	// handle nullable field next_execution_time_not
	if m.NextExecutionTimeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_not\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTimeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_not\":null")
		first = false
	}

	// handle non nullable field next_execution_time_not_in with omitempty
	if !swag.IsZero(m.NextExecutionTimeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time_not_in\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTimeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field period
	if m.Period != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":")
		bytes, err := swag.WriteJSON(m.Period)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Period_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":null")
		first = false
	}

	// handle non nullable field period_in with omitempty
	if !swag.IsZero(m.PeriodIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period_in\":")
		bytes, err := swag.WriteJSON(m.PeriodIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field period_not
	if m.PeriodNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period_not\":")
		bytes, err := swag.WriteJSON(m.PeriodNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PeriodNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period_not\":null")
		first = false
	}

	// handle non nullable field period_not_in with omitempty
	if !swag.IsZero(m.PeriodNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period_not_in\":")
		bytes, err := swag.WriteJSON(m.PeriodNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle non nullable field phase_in with omitempty
	if !swag.IsZero(m.PhaseIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_in\":")
		bytes, err := swag.WriteJSON(m.PhaseIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field phase_not
	if m.PhaseNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":")
		bytes, err := swag.WriteJSON(m.PhaseNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhaseNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":null")
		first = false
	}

	// handle non nullable field phase_not_in with omitempty
	if !swag.IsZero(m.PhaseNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not_in\":")
		bytes, err := swag.WriteJSON(m.PhaseNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_name_rule
	if m.ReplicaNameRule != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameRule)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameRule_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule\":null")
		first = false
	}

	// handle non nullable field replica_name_rule_in with omitempty
	if !swag.IsZero(m.ReplicaNameRuleIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameRuleIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_name_rule_not
	if m.ReplicaNameRuleNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule_not\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameRuleNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameRuleNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule_not\":null")
		first = false
	}

	// handle non nullable field replica_name_rule_not_in with omitempty
	if !swag.IsZero(m.ReplicaNameRuleNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameRuleNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_name_setting
	if m.ReplicaNameSetting != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSetting)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSetting_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting\":null")
		first = false
	}

	// handle nullable field replica_name_setting_contains
	if m.ReplicaNameSettingContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_contains\":null")
		first = false
	}

	// handle nullable field replica_name_setting_ends_with
	if m.ReplicaNameSettingEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_ends_with\":null")
		first = false
	}

	// handle nullable field replica_name_setting_gt
	if m.ReplicaNameSettingGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_gt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_gt\":null")
		first = false
	}

	// handle nullable field replica_name_setting_gte
	if m.ReplicaNameSettingGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_gte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_gte\":null")
		first = false
	}

	// handle non nullable field replica_name_setting_in with omitempty
	if !swag.IsZero(m.ReplicaNameSettingIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_name_setting_lt
	if m.ReplicaNameSettingLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_lt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_lt\":null")
		first = false
	}

	// handle nullable field replica_name_setting_lte
	if m.ReplicaNameSettingLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_lte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_lte\":null")
		first = false
	}

	// handle nullable field replica_name_setting_not
	if m.ReplicaNameSettingNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not\":null")
		first = false
	}

	// handle nullable field replica_name_setting_not_contains
	if m.ReplicaNameSettingNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_contains\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_contains\":null")
		first = false
	}

	// handle nullable field replica_name_setting_not_ends_with
	if m.ReplicaNameSettingNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_ends_with\":null")
		first = false
	}

	// handle non nullable field replica_name_setting_not_in with omitempty
	if !swag.IsZero(m.ReplicaNameSettingNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_name_setting_not_starts_with
	if m.ReplicaNameSettingNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_not_starts_with\":null")
		first = false
	}

	// handle nullable field replica_name_setting_starts_with
	if m.ReplicaNameSettingStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_starts_with\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSettingStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSettingStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting_starts_with\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle nullable field replica_num_gt
	if m.ReplicaNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gt\":null")
		first = false
	}

	// handle nullable field replica_num_gte
	if m.ReplicaNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gte\":null")
		first = false
	}

	// handle non nullable field replica_num_in with omitempty
	if !swag.IsZero(m.ReplicaNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_num_lt
	if m.ReplicaNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lt\":null")
		first = false
	}

	// handle nullable field replica_num_lte
	if m.ReplicaNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lte\":null")
		first = false
	}

	// handle nullable field replica_num_not
	if m.ReplicaNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not\":null")
		first = false
	}

	// handle non nullable field replica_num_not_in with omitempty
	if !swag.IsZero(m.ReplicaNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_vms_every
	if m.ReplicaVmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_every\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_every\":null")
		first = false
	}

	// handle nullable field replica_vms_none
	if m.ReplicaVmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_none\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_none\":null")
		first = false
	}

	// handle nullable field replica_vms_some
	if m.ReplicaVmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_some\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_some\":null")
		first = false
	}

	// handle nullable field replication_plan_executions_every
	if m.ReplicationPlanExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlanExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlanExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_every\":null")
		first = false
	}

	// handle nullable field replication_plan_executions_none
	if m.ReplicationPlanExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlanExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlanExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_none\":null")
		first = false
	}

	// handle nullable field replication_plan_executions_some
	if m.ReplicationPlanExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlanExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlanExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions_some\":null")
		first = false
	}

	// handle nullable field replication_restore_points_every
	if m.ReplicationRestorePointsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationRestorePointsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationRestorePointsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_every\":null")
		first = false
	}

	// handle nullable field replication_restore_points_none
	if m.ReplicationRestorePointsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationRestorePointsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationRestorePointsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_none\":null")
		first = false
	}

	// handle nullable field replication_restore_points_some
	if m.ReplicationRestorePointsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationRestorePointsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationRestorePointsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points_some\":null")
		first = false
	}

	// handle nullable field replication_target_executions_every
	if m.ReplicationTargetExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_every\":null")
		first = false
	}

	// handle nullable field replication_target_executions_none
	if m.ReplicationTargetExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_none\":null")
		first = false
	}

	// handle nullable field replication_target_executions_some
	if m.ReplicationTargetExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions_some\":null")
		first = false
	}

	// handle nullable field resiliency_type
	if m.ResiliencyType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type\":")
		bytes, err := swag.WriteJSON(m.ResiliencyType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResiliencyType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type\":null")
		first = false
	}

	// handle non nullable field resiliency_type_in with omitempty
	if !swag.IsZero(m.ResiliencyTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type_in\":")
		bytes, err := swag.WriteJSON(m.ResiliencyTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resiliency_type_not
	if m.ResiliencyTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type_not\":")
		bytes, err := swag.WriteJSON(m.ResiliencyTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResiliencyTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type_not\":null")
		first = false
	}

	// handle non nullable field resiliency_type_not_in with omitempty
	if !swag.IsZero(m.ResiliencyTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type_not_in\":")
		bytes, err := swag.WriteJSON(m.ResiliencyTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type_not
	if m.SnapshotConsistentTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_not_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field storage_policy
	if m.StoragePolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy\":")
		bytes, err := swag.WriteJSON(m.StoragePolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StoragePolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy\":null")
		first = false
	}

	// handle non nullable field storage_policy_in with omitempty
	if !swag.IsZero(m.StoragePolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_in\":")
		bytes, err := swag.WriteJSON(m.StoragePolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field storage_policy_not
	if m.StoragePolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_not\":")
		bytes, err := swag.WriteJSON(m.StoragePolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StoragePolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_not\":null")
		first = false
	}

	// handle non nullable field storage_policy_not_in with omitempty
	if !swag.IsZero(m.StoragePolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy_not_in\":")
		bytes, err := swag.WriteJSON(m.StoragePolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field target_cluster
	if m.TargetCluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster\":")
		bytes, err := swag.WriteJSON(m.TargetCluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetCluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster\":null")
		first = false
	}

	// handle nullable field target_replication_service
	if m.TargetReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_replication_service\":")
		bytes, err := swag.WriteJSON(m.TargetReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_replication_service\":null")
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}

	// handle nullable field thin_provision_not
	if m.ThinProvisionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision_not\":")
		bytes, err := swag.WriteJSON(m.ThinProvisionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvisionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision_not\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vms_every
	if m.VmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":")
		bytes, err := swag.WriteJSON(m.VmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":null")
		first = false
	}

	// handle nullable field vms_none
	if m.VmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":")
		bytes, err := swag.WriteJSON(m.VmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":null")
		first = false
	}

	// handle nullable field vms_some
	if m.VmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":")
		bytes, err := swag.WriteJSON(m.VmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":null")
		first = false
	}

	// handle nullable field window_end
	if m.WindowEnd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":")
		bytes, err := swag.WriteJSON(m.WindowEnd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEnd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":null")
		first = false
	}

	// handle nullable field window_end_contains
	if m.WindowEndContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_contains\":")
		bytes, err := swag.WriteJSON(m.WindowEndContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_contains\":null")
		first = false
	}

	// handle nullable field window_end_ends_with
	if m.WindowEndEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_ends_with\":null")
		first = false
	}

	// handle nullable field window_end_gt
	if m.WindowEndGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gt\":")
		bytes, err := swag.WriteJSON(m.WindowEndGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gt\":null")
		first = false
	}

	// handle nullable field window_end_gte
	if m.WindowEndGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gte\":")
		bytes, err := swag.WriteJSON(m.WindowEndGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_gte\":null")
		first = false
	}

	// handle non nullable field window_end_in with omitempty
	if !swag.IsZero(m.WindowEndIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_in\":")
		bytes, err := swag.WriteJSON(m.WindowEndIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end_lt
	if m.WindowEndLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lt\":")
		bytes, err := swag.WriteJSON(m.WindowEndLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lt\":null")
		first = false
	}

	// handle nullable field window_end_lte
	if m.WindowEndLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lte\":")
		bytes, err := swag.WriteJSON(m.WindowEndLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_lte\":null")
		first = false
	}

	// handle nullable field window_end_not
	if m.WindowEndNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not\":")
		bytes, err := swag.WriteJSON(m.WindowEndNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not\":null")
		first = false
	}

	// handle nullable field window_end_not_contains
	if m.WindowEndNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_contains\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_contains\":null")
		first = false
	}

	// handle nullable field window_end_not_ends_with
	if m.WindowEndNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_ends_with\":null")
		first = false
	}

	// handle non nullable field window_end_not_in with omitempty
	if !swag.IsZero(m.WindowEndNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_in\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end_not_starts_with
	if m.WindowEndNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_not_starts_with\":null")
		first = false
	}

	// handle nullable field window_end_starts_with
	if m.WindowEndStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowEndStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEndStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end_starts_with\":null")
		first = false
	}

	// handle nullable field window_start
	if m.WindowStart != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":")
		bytes, err := swag.WriteJSON(m.WindowStart)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStart_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":null")
		first = false
	}

	// handle nullable field window_start_contains
	if m.WindowStartContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_contains\":")
		bytes, err := swag.WriteJSON(m.WindowStartContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_contains\":null")
		first = false
	}

	// handle nullable field window_start_ends_with
	if m.WindowStartEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_ends_with\":null")
		first = false
	}

	// handle nullable field window_start_gt
	if m.WindowStartGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gt\":")
		bytes, err := swag.WriteJSON(m.WindowStartGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gt\":null")
		first = false
	}

	// handle nullable field window_start_gte
	if m.WindowStartGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gte\":")
		bytes, err := swag.WriteJSON(m.WindowStartGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_gte\":null")
		first = false
	}

	// handle non nullable field window_start_in with omitempty
	if !swag.IsZero(m.WindowStartIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_in\":")
		bytes, err := swag.WriteJSON(m.WindowStartIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_start_lt
	if m.WindowStartLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lt\":")
		bytes, err := swag.WriteJSON(m.WindowStartLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lt\":null")
		first = false
	}

	// handle nullable field window_start_lte
	if m.WindowStartLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lte\":")
		bytes, err := swag.WriteJSON(m.WindowStartLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_lte\":null")
		first = false
	}

	// handle nullable field window_start_not
	if m.WindowStartNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not\":")
		bytes, err := swag.WriteJSON(m.WindowStartNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not\":null")
		first = false
	}

	// handle nullable field window_start_not_contains
	if m.WindowStartNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_contains\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_contains\":null")
		first = false
	}

	// handle nullable field window_start_not_ends_with
	if m.WindowStartNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_ends_with\":null")
		first = false
	}

	// handle non nullable field window_start_not_in with omitempty
	if !swag.IsZero(m.WindowStartNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_in\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_start_not_starts_with
	if m.WindowStartNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_not_starts_with\":null")
		first = false
	}

	// handle nullable field window_start_starts_with
	if m.WindowStartStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_starts_with\":")
		bytes, err := swag.WriteJSON(m.WindowStartStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStartStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replication plan where input
func (m *ReplicationPlanWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNameRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNameRuleIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNameRuleNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNameRuleNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlanExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlanExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlanExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRestorePointsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRestorePointsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRestorePointsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationPlanWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateDeleteStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategy) { // not required
		return nil
	}

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateDeleteStrategyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateDeleteStrategyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyNot) { // not required
		return nil
	}

	if m.DeleteStrategyNot != nil {
		if err := m.DeleteStrategyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateDeleteStrategyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateIscsiLunsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsEvery) { // not required
		return nil
	}

	if m.IscsiLunsEvery != nil {
		if err := m.IscsiLunsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateIscsiLunsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsNone) { // not required
		return nil
	}

	if m.IscsiLunsNone != nil {
		if err := m.IscsiLunsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateIscsiLunsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsSome) { // not required
		return nil
	}

	if m.IscsiLunsSome != nil {
		if err := m.IscsiLunsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateKeepPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicy) { // not required
		return nil
	}

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateKeepPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateKeepPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyNot) { // not required
		return nil
	}

	if m.KeepPolicyNot != nil {
		if err := m.KeepPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateKeepPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastExecuteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatus) { // not required
		return nil
	}

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastExecuteStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNot) { // not required
		return nil
	}

	if m.LastExecuteStatusNot != nil {
		if err := m.LastExecuteStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastManualExecuteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatus) { // not required
		return nil
	}

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastManualExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastManualExecuteStatusIn); i++ {

		if err := m.LastManualExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastManualExecuteStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusNot) { // not required
		return nil
	}

	if m.LastManualExecuteStatusNot != nil {
		if err := m.LastManualExecuteStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateLastManualExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastManualExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastManualExecuteStatusNotIn); i++ {

		if err := m.LastManualExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePeriodIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PeriodIn); i++ {

		if err := m.PeriodIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePeriodNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodNot) { // not required
		return nil
	}

	if m.PeriodNot != nil {
		if err := m.PeriodNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePeriodNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PeriodNotIn); i++ {

		if err := m.PeriodNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePhaseIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePhaseNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNot) { // not required
		return nil
	}

	if m.PhaseNot != nil {
		if err := m.PhaseNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validatePhaseNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaNameRule(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaNameRule) { // not required
		return nil
	}

	if m.ReplicaNameRule != nil {
		if err := m.ReplicaNameRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaNameRuleIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaNameRuleIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaNameRuleIn); i++ {

		if err := m.ReplicaNameRuleIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaNameRuleNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaNameRuleNot) { // not required
		return nil
	}

	if m.ReplicaNameRuleNot != nil {
		if err := m.ReplicaNameRuleNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaNameRuleNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaNameRuleNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaNameRuleNotIn); i++ {

		if err := m.ReplicaNameRuleNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsEvery) { // not required
		return nil
	}

	if m.ReplicaVmsEvery != nil {
		if err := m.ReplicaVmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsNone) { // not required
		return nil
	}

	if m.ReplicaVmsNone != nil {
		if err := m.ReplicaVmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicaVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsSome) { // not required
		return nil
	}

	if m.ReplicaVmsSome != nil {
		if err := m.ReplicaVmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationPlanExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlanExecutionsEvery) { // not required
		return nil
	}

	if m.ReplicationPlanExecutionsEvery != nil {
		if err := m.ReplicationPlanExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationPlanExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlanExecutionsNone) { // not required
		return nil
	}

	if m.ReplicationPlanExecutionsNone != nil {
		if err := m.ReplicationPlanExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationPlanExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlanExecutionsSome) { // not required
		return nil
	}

	if m.ReplicationPlanExecutionsSome != nil {
		if err := m.ReplicationPlanExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationRestorePointsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRestorePointsEvery) { // not required
		return nil
	}

	if m.ReplicationRestorePointsEvery != nil {
		if err := m.ReplicationRestorePointsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationRestorePointsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRestorePointsNone) { // not required
		return nil
	}

	if m.ReplicationRestorePointsNone != nil {
		if err := m.ReplicationRestorePointsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationRestorePointsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRestorePointsSome) { // not required
		return nil
	}

	if m.ReplicationRestorePointsSome != nil {
		if err := m.ReplicationRestorePointsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationTargetExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsEvery) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsEvery != nil {
		if err := m.ReplicationTargetExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationTargetExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsNone) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsNone != nil {
		if err := m.ReplicationTargetExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateReplicationTargetExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutionsSome) { // not required
		return nil
	}

	if m.ReplicationTargetExecutionsSome != nil {
		if err := m.ReplicationTargetExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateResiliencyType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResiliencyType) { // not required
		return nil
	}

	if m.ResiliencyType != nil {
		if err := m.ResiliencyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateResiliencyTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ResiliencyTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ResiliencyTypeIn); i++ {

		if err := m.ResiliencyTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateResiliencyTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ResiliencyTypeNot) { // not required
		return nil
	}

	if m.ResiliencyTypeNot != nil {
		if err := m.ResiliencyTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateResiliencyTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ResiliencyTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ResiliencyTypeNotIn); i++ {

		if err := m.ResiliencyTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateSnapshotConsistentTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateSnapshotConsistentTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNot) { // not required
		return nil
	}

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateSnapshotConsistentTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStoragePolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StoragePolicyIn); i++ {

		if err := m.StoragePolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStoragePolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicyNot) { // not required
		return nil
	}

	if m.StoragePolicyNot != nil {
		if err := m.StoragePolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateStoragePolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StoragePolicyNotIn); i++ {

		if err := m.StoragePolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateTargetCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetCluster) { // not required
		return nil
	}

	if m.TargetCluster != nil {
		if err := m.TargetCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateTargetReplicationService(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetReplicationService) { // not required
		return nil
	}

	if m.TargetReplicationService != nil {
		if err := m.TargetReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication plan where input based on the context it is used
func (m *ReplicationPlanWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaNameRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaNameRuleIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaNameRuleNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaNameRuleNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlanExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlanExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlanExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationRestorePointsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationRestorePointsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationRestorePointsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResiliencyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResiliencyTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResiliencyTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResiliencyTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateDeleteStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateDeleteStrategyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateDeleteStrategyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategyNot != nil {
		if err := m.DeleteStrategyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateDeleteStrategyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateIscsiLunsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLunsEvery != nil {
		if err := m.IscsiLunsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateIscsiLunsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLunsNone != nil {
		if err := m.IscsiLunsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateIscsiLunsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLunsSome != nil {
		if err := m.IscsiLunsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateKeepPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateKeepPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateKeepPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicyNot != nil {
		if err := m.KeepPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateKeepPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastExecuteStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatusNot != nil {
		if err := m.LastExecuteStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastManualExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastManualExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastManualExecuteStatusIn); i++ {

		if err := m.LastManualExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastManualExecuteStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatusNot != nil {
		if err := m.LastManualExecuteStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateLastManualExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastManualExecuteStatusNotIn); i++ {

		if err := m.LastManualExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {
		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePeriodIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PeriodIn); i++ {

		if err := m.PeriodIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePeriodNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PeriodNot != nil {
		if err := m.PeriodNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePeriodNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PeriodNotIn); i++ {

		if err := m.PeriodNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePhaseIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePhaseNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PhaseNot != nil {
		if err := m.PhaseNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidatePhaseNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaNameRule(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaNameRule != nil {
		if err := m.ReplicaNameRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaNameRuleIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaNameRuleIn); i++ {

		if err := m.ReplicaNameRuleIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaNameRuleNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaNameRuleNot != nil {
		if err := m.ReplicaNameRuleNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaNameRuleNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaNameRuleNotIn); i++ {

		if err := m.ReplicaNameRuleNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsEvery != nil {
		if err := m.ReplicaVmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsNone != nil {
		if err := m.ReplicaVmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicaVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsSome != nil {
		if err := m.ReplicaVmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationPlanExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlanExecutionsEvery != nil {
		if err := m.ReplicationPlanExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationPlanExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlanExecutionsNone != nil {
		if err := m.ReplicationPlanExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationPlanExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlanExecutionsSome != nil {
		if err := m.ReplicationPlanExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationRestorePointsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationRestorePointsEvery != nil {
		if err := m.ReplicationRestorePointsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationRestorePointsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationRestorePointsNone != nil {
		if err := m.ReplicationRestorePointsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationRestorePointsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationRestorePointsSome != nil {
		if err := m.ReplicationRestorePointsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationTargetExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsEvery != nil {
		if err := m.ReplicationTargetExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationTargetExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsNone != nil {
		if err := m.ReplicationTargetExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateReplicationTargetExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecutionsSome != nil {
		if err := m.ReplicationTargetExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateResiliencyType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResiliencyType != nil {
		if err := m.ResiliencyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateResiliencyTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResiliencyTypeIn); i++ {

		if err := m.ResiliencyTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateResiliencyTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ResiliencyTypeNot != nil {
		if err := m.ResiliencyTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateResiliencyTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResiliencyTypeNotIn); i++ {

		if err := m.ResiliencyTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateSnapshotConsistentTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateSnapshotConsistentTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateSnapshotConsistentTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStoragePolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoragePolicyIn); i++ {

		if err := m.StoragePolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStoragePolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePolicyNot != nil {
		if err := m.StoragePolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateStoragePolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoragePolicyNotIn); i++ {

		if err := m.StoragePolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateTargetCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetCluster != nil {
		if err := m.TargetCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateTargetReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetReplicationService != nil {
		if err := m.TargetReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlanWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationPlanWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationPlanWhereInput) UnmarshalBinary(b []byte) error {
	var res ReplicationPlanWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
