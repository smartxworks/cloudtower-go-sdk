// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudServiceWhereInput virtual private cloud service where input
//
// swagger:model VirtualPrivateCloudServiceWhereInput
type VirtualPrivateCloudServiceWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudServiceWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudServiceWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudServiceWhereInput `json:"OR,omitempty"`

	// cluster bindings every
	ClusterBindingsEvery *VirtualPrivateCloudClusterBindingWhereInput `json:"cluster_bindings_every,omitempty"`

	// cluster bindings none
	ClusterBindingsNone *VirtualPrivateCloudClusterBindingWhereInput `json:"cluster_bindings_none,omitempty"`

	// cluster bindings some
	ClusterBindingsSome *VirtualPrivateCloudClusterBindingWhereInput `json:"cluster_bindings_some,omitempty"`

	// edge gateway groups every
	EdgeGatewayGroupsEvery *VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"edge_gateway_groups_every,omitempty"`

	// edge gateway groups none
	EdgeGatewayGroupsNone *VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"edge_gateway_groups_none,omitempty"`

	// edge gateway groups some
	EdgeGatewayGroupsSome *VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"edge_gateway_groups_some,omitempty"`

	// edge gateways every
	EdgeGatewaysEvery *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_every,omitempty"`

	// edge gateways none
	EdgeGatewaysNone *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_none,omitempty"`

	// edge gateways some
	EdgeGatewaysSome *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateways_some,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// everoute cluster
	EverouteCluster *EverouteClusterWhereInput `json:"everoute_cluster,omitempty"`

	// external subnets every
	ExternalSubnetsEvery *VirtualPrivateCloudExternalSubnetWhereInput `json:"external_subnets_every,omitempty"`

	// external subnets none
	ExternalSubnetsNone *VirtualPrivateCloudExternalSubnetWhereInput `json:"external_subnets_none,omitempty"`

	// external subnets some
	ExternalSubnetsSome *VirtualPrivateCloudExternalSubnetWhereInput `json:"external_subnets_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// internal cidr
	InternalCidr *string `json:"internal_cidr,omitempty"`

	// internal cidr contains
	InternalCidrContains *string `json:"internal_cidr_contains,omitempty"`

	// internal cidr ends with
	InternalCidrEndsWith *string `json:"internal_cidr_ends_with,omitempty"`

	// internal cidr gt
	InternalCidrGt *string `json:"internal_cidr_gt,omitempty"`

	// internal cidr gte
	InternalCidrGte *string `json:"internal_cidr_gte,omitempty"`

	// internal cidr in
	InternalCidrIn []string `json:"internal_cidr_in,omitempty"`

	// internal cidr lt
	InternalCidrLt *string `json:"internal_cidr_lt,omitempty"`

	// internal cidr lte
	InternalCidrLte *string `json:"internal_cidr_lte,omitempty"`

	// internal cidr not
	InternalCidrNot *string `json:"internal_cidr_not,omitempty"`

	// internal cidr not contains
	InternalCidrNotContains *string `json:"internal_cidr_not_contains,omitempty"`

	// internal cidr not ends with
	InternalCidrNotEndsWith *string `json:"internal_cidr_not_ends_with,omitempty"`

	// internal cidr not in
	InternalCidrNotIn []string `json:"internal_cidr_not_in,omitempty"`

	// internal cidr not starts with
	InternalCidrNotStartsWith *string `json:"internal_cidr_not_starts_with,omitempty"`

	// internal cidr starts with
	InternalCidrStartsWith *string `json:"internal_cidr_starts_with,omitempty"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// phase in
	PhaseIn []EverouteClusterPhase `json:"phase_in,omitempty"`

	// phase not
	PhaseNot *EverouteClusterPhase `json:"phase_not,omitempty"`

	// phase not in
	PhaseNotIn []EverouteClusterPhase `json:"phase_not_in,omitempty"`

	// vpcs every
	VpcsEvery *VirtualPrivateCloudWhereInput `json:"vpcs_every,omitempty"`

	// vpcs none
	VpcsNone *VirtualPrivateCloudWhereInput `json:"vpcs_none,omitempty"`

	// vpcs some
	VpcsSome *VirtualPrivateCloudWhereInput `json:"vpcs_some,omitempty"`
}

// Validate validates this virtual private cloud service where input
func (m *VirtualPrivateCloudServiceWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterBindingsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterBindingsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterBindingsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewayGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewayGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewayGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewaysSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEverouteCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSubnetsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateClusterBindingsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterBindingsEvery) { // not required
		return nil
	}

	if m.ClusterBindingsEvery != nil {
		if err := m.ClusterBindingsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateClusterBindingsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterBindingsNone) { // not required
		return nil
	}

	if m.ClusterBindingsNone != nil {
		if err := m.ClusterBindingsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateClusterBindingsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterBindingsSome) { // not required
		return nil
	}

	if m.ClusterBindingsSome != nil {
		if err := m.ClusterBindingsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewayGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewayGroupsEvery) { // not required
		return nil
	}

	if m.EdgeGatewayGroupsEvery != nil {
		if err := m.EdgeGatewayGroupsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewayGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewayGroupsNone) { // not required
		return nil
	}

	if m.EdgeGatewayGroupsNone != nil {
		if err := m.EdgeGatewayGroupsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewayGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewayGroupsSome) { // not required
		return nil
	}

	if m.EdgeGatewayGroupsSome != nil {
		if err := m.EdgeGatewayGroupsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewaysEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysEvery) { // not required
		return nil
	}

	if m.EdgeGatewaysEvery != nil {
		if err := m.EdgeGatewaysEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewaysNone(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysNone) { // not required
		return nil
	}

	if m.EdgeGatewaysNone != nil {
		if err := m.EdgeGatewaysNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEdgeGatewaysSome(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewaysSome) { // not required
		return nil
	}

	if m.EdgeGatewaysSome != nil {
		if err := m.EdgeGatewaysSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateEverouteCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.EverouteCluster) { // not required
		return nil
	}

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateExternalSubnetsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetsEvery) { // not required
		return nil
	}

	if m.ExternalSubnetsEvery != nil {
		if err := m.ExternalSubnetsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateExternalSubnetsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetsNone) { // not required
		return nil
	}

	if m.ExternalSubnetsNone != nil {
		if err := m.ExternalSubnetsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateExternalSubnetsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSubnetsSome) { // not required
		return nil
	}

	if m.ExternalSubnetsSome != nil {
		if err := m.ExternalSubnetsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validatePhaseIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validatePhaseNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNot) { // not required
		return nil
	}

	if m.PhaseNot != nil {
		if err := m.PhaseNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validatePhaseNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateVpcsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcsEvery) { // not required
		return nil
	}

	if m.VpcsEvery != nil {
		if err := m.VpcsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateVpcsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcsNone) { // not required
		return nil
	}

	if m.VpcsNone != nil {
		if err := m.VpcsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) validateVpcsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcsSome) { // not required
		return nil
	}

	if m.VpcsSome != nil {
		if err := m.VpcsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud service where input based on the context it is used
func (m *VirtualPrivateCloudServiceWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterBindingsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterBindingsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterBindingsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewayGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewayGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewayGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewaysSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEverouteCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSubnetsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateClusterBindingsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterBindingsEvery != nil {
		if err := m.ClusterBindingsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateClusterBindingsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterBindingsNone != nil {
		if err := m.ClusterBindingsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateClusterBindingsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterBindingsSome != nil {
		if err := m.ClusterBindingsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_bindings_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_bindings_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewayGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewayGroupsEvery != nil {
		if err := m.EdgeGatewayGroupsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewayGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewayGroupsNone != nil {
		if err := m.EdgeGatewayGroupsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewayGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewayGroupsSome != nil {
		if err := m.EdgeGatewayGroupsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewaysEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysEvery != nil {
		if err := m.EdgeGatewaysEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewaysNone(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysNone != nil {
		if err := m.EdgeGatewaysNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEdgeGatewaysSome(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewaysSome != nil {
		if err := m.EdgeGatewaysSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateEverouteCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateExternalSubnetsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetsEvery != nil {
		if err := m.ExternalSubnetsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateExternalSubnetsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetsNone != nil {
		if err := m.ExternalSubnetsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateExternalSubnetsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalSubnetsSome != nil {
		if err := m.ExternalSubnetsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_subnets_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_subnets_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidatePhaseIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidatePhaseNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PhaseNot != nil {
		if err := m.PhaseNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidatePhaseNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateVpcsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcsEvery != nil {
		if err := m.VpcsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateVpcsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcsNone != nil {
		if err := m.VpcsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudServiceWhereInput) contextValidateVpcsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcsSome != nil {
		if err := m.VpcsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpcs_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudServiceWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudServiceWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudServiceWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
