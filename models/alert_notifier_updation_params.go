// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertNotifierUpdationParams alert notifier updation params
//
// swagger:model AlertNotifierUpdationParams
type AlertNotifierUpdationParams struct {

	// clusters
	Clusters *ClusterWhereInput `json:"clusters,omitempty"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// email from
	EmailFrom *string `json:"email_from,omitempty"`

	// email tos
	EmailTos []string `json:"email_tos,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// language code
	LanguageCode *NotifierLanguageCode `json:"language_code,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// notice severities
	NoticeSeverities []string `json:"notice_severities,omitempty"`

	// smtp server id
	SMTPServerID *string `json:"smtp_server_id,omitempty"`

	MarshalOpts *AlertNotifierUpdationParamsMarshalOpts `json:"-"`
}

type AlertNotifierUpdationParamsMarshalOpts struct {
	Clusters_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	EmailFrom_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LanguageCode_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	SMTPServerID_Explicit_Null_When_Empty bool
}

func (m AlertNotifierUpdationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field clusters
	if m.Clusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Clusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":null")
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field email_from
	if m.EmailFrom != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":")
		bytes, err := swag.WriteJSON(m.EmailFrom)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFrom_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":null")
		first = false
	}

	// handle non nullable field email_tos with omitempty
	if swag.IsZero(m.EmailTos) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_tos\":")
		bytes, err := swag.WriteJSON(m.EmailTos)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field language_code
	if m.LanguageCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":")
		bytes, err := swag.WriteJSON(m.LanguageCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LanguageCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field notice_severities with omitempty
	if swag.IsZero(m.NoticeSeverities) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"notice_severities\":")
		bytes, err := swag.WriteJSON(m.NoticeSeverities)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field smtp_server_id
	if m.SMTPServerID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_id\":")
		bytes, err := swag.WriteJSON(m.SMTPServerID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this alert notifier updation params
func (m *AlertNotifierUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoticeSeverities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierUpdationParams) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierUpdationParams) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	if m.LanguageCode != nil {
		if err := m.LanguageCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

var alertNotifierUpdationParamsNoticeSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","NOTICE","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertNotifierUpdationParamsNoticeSeveritiesItemsEnum = append(alertNotifierUpdationParamsNoticeSeveritiesItemsEnum, v)
	}
}

func (m *AlertNotifierUpdationParams) validateNoticeSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertNotifierUpdationParamsNoticeSeveritiesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertNotifierUpdationParams) validateNoticeSeverities(formats strfmt.Registry) error {
	if swag.IsZero(m.NoticeSeverities) { // not required
		return nil
	}

	for i := 0; i < len(m.NoticeSeverities); i++ {

		// value enum
		if err := m.validateNoticeSeveritiesItemsEnum("notice_severities"+"."+strconv.Itoa(i), "body", m.NoticeSeverities[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this alert notifier updation params based on the context it is used
func (m *AlertNotifierUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierUpdationParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierUpdationParams) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCode != nil {
		if err := m.LanguageCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertNotifierUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertNotifierUpdationParams) UnmarshalBinary(b []byte) error {
	var res AlertNotifierUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
