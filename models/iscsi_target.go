// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IscsiTarget iscsi target
//
// swagger:model IscsiTarget
type IscsiTarget struct {

	// bps
	Bps *int64 `json:"bps,omitempty"`

	// bps max
	BpsMax *int64 `json:"bps_max,omitempty"`

	// bps max length
	BpsMaxLength *int64 `json:"bps_max_length,omitempty"`

	// bps rd
	BpsRd *int64 `json:"bps_rd,omitempty"`

	// bps rd max
	BpsRdMax *int64 `json:"bps_rd_max,omitempty"`

	// bps rd max length
	BpsRdMaxLength *int64 `json:"bps_rd_max_length,omitempty"`

	// bps wr
	BpsWr *int64 `json:"bps_wr,omitempty"`

	// bps wr max
	BpsWrMax *int64 `json:"bps_wr_max,omitempty"`

	// bps wr max length
	BpsWrMaxLength *int64 `json:"bps_wr_max_length,omitempty"`

	// chap enabled
	// Required: true
	ChapEnabled *bool `json:"chap_enabled"`

	// chap name
	ChapName *string `json:"chap_name,omitempty"`

	// chap secret
	ChapSecret *string `json:"chap_secret,omitempty"`

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// description
	// Required: true
	Description *string `json:"description"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// external use
	// Required: true
	ExternalUse *bool `json:"external_use"`

	// id
	// Required: true
	ID *string `json:"id"`

	// initiator chaps
	InitiatorChaps []*NestedInitiatorChap `json:"initiator_chaps,omitempty"`

	// internal
	// Required: true
	Internal *bool `json:"internal"`

	// io size
	IoSize *int64 `json:"io_size,omitempty"`

	// iops
	Iops *int64 `json:"iops,omitempty"`

	// iops max
	IopsMax *int64 `json:"iops_max,omitempty"`

	// iops max length
	IopsMaxLength *int64 `json:"iops_max_length,omitempty"`

	// iops rd
	IopsRd *int64 `json:"iops_rd,omitempty"`

	// iops rd max
	IopsRdMax *int64 `json:"iops_rd_max,omitempty"`

	// iops rd max length
	IopsRdMaxLength *int64 `json:"iops_rd_max_length,omitempty"`

	// iops wr
	IopsWr *int64 `json:"iops_wr,omitempty"`

	// iops wr max
	IopsWrMax *int64 `json:"iops_wr_max,omitempty"`

	// iops wr max length
	IopsWrMaxLength *int64 `json:"iops_wr_max_length,omitempty"`

	// ip whitelist
	// Required: true
	IPWhitelist *string `json:"ip_whitelist"`

	// iqn name
	// Required: true
	IqnName *string `json:"iqn_name"`

	// iqn whitelist
	// Required: true
	IqnWhitelist *string `json:"iqn_whitelist"`

	// labels
	Labels []*NestedLabel `json:"labels,omitempty"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// luns
	Luns []*NestedIscsiLun `json:"luns,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replica num
	// Required: true
	ReplicaNum *int32 `json:"replica_num"`

	// stripe num
	// Required: true
	StripeNum *int32 `json:"stripe_num"`

	// stripe size
	// Required: true
	StripeSize *int64 `json:"stripe_size"`

	// thin provision
	// Required: true
	ThinProvision *bool `json:"thin_provision"`

	MarshalOpts *IscsiTargetMarshalOpts `json:"-"`
}

type IscsiTargetMarshalOpts struct {
	Bps_Explicit_Null_When_Empty bool

	BpsMax_Explicit_Null_When_Empty bool

	BpsMaxLength_Explicit_Null_When_Empty bool

	BpsRd_Explicit_Null_When_Empty bool

	BpsRdMax_Explicit_Null_When_Empty bool

	BpsRdMaxLength_Explicit_Null_When_Empty bool

	BpsWr_Explicit_Null_When_Empty bool

	BpsWrMax_Explicit_Null_When_Empty bool

	BpsWrMaxLength_Explicit_Null_When_Empty bool

	ChapEnabled_Explicit_Null_When_Empty bool

	ChapName_Explicit_Null_When_Empty bool

	ChapSecret_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ExternalUse_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	InitiatorChaps_Explicit_Null_When_Empty bool

	Internal_Explicit_Null_When_Empty bool

	IoSize_Explicit_Null_When_Empty bool

	Iops_Explicit_Null_When_Empty bool

	IopsMax_Explicit_Null_When_Empty bool

	IopsMaxLength_Explicit_Null_When_Empty bool

	IopsRd_Explicit_Null_When_Empty bool

	IopsRdMax_Explicit_Null_When_Empty bool

	IopsRdMaxLength_Explicit_Null_When_Empty bool

	IopsWr_Explicit_Null_When_Empty bool

	IopsWrMax_Explicit_Null_When_Empty bool

	IopsWrMaxLength_Explicit_Null_When_Empty bool

	IPWhitelist_Explicit_Null_When_Empty bool

	IqnName_Explicit_Null_When_Empty bool

	IqnWhitelist_Explicit_Null_When_Empty bool

	Labels_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	Luns_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	StripeNum_Explicit_Null_When_Empty bool

	StripeSize_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool
}

func (m IscsiTarget) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field bps
	if m.Bps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":")
		bytes, err := swag.WriteJSON(m.Bps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":null")
		first = false
	}

	// handle nullable field bps_max
	if m.BpsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":")
		bytes, err := swag.WriteJSON(m.BpsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":null")
		first = false
	}

	// handle nullable field bps_max_length
	if m.BpsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":null")
		first = false
	}

	// handle nullable field bps_rd
	if m.BpsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":")
		bytes, err := swag.WriteJSON(m.BpsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":null")
		first = false
	}

	// handle nullable field bps_rd_max
	if m.BpsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":")
		bytes, err := swag.WriteJSON(m.BpsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length
	if m.BpsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":null")
		first = false
	}

	// handle nullable field bps_wr
	if m.BpsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":")
		bytes, err := swag.WriteJSON(m.BpsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":null")
		first = false
	}

	// handle nullable field bps_wr_max
	if m.BpsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":")
		bytes, err := swag.WriteJSON(m.BpsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length
	if m.BpsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":null")
		first = false
	}

	// handle nullable field chap_enabled
	if m.ChapEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_enabled\":")
		bytes, err := swag.WriteJSON(m.ChapEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChapEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_enabled\":null")
		first = false
	}

	// handle nullable field chap_name
	if m.ChapName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_name\":")
		bytes, err := swag.WriteJSON(m.ChapName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChapName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_name\":null")
		first = false
	}

	// handle nullable field chap_secret
	if m.ChapSecret != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_secret\":")
		bytes, err := swag.WriteJSON(m.ChapSecret)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChapSecret_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chap_secret\":null")
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field external_use
	if m.ExternalUse != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use\":")
		bytes, err := swag.WriteJSON(m.ExternalUse)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalUse_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle non nullable field initiator_chaps with omitempty
	if !swag.IsZero(m.InitiatorChaps) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"initiator_chaps\":")
		bytes, err := swag.WriteJSON(m.InitiatorChaps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field internal
	if m.Internal != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":")
		bytes, err := swag.WriteJSON(m.Internal)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Internal_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":null")
		first = false
	}

	// handle nullable field io_size
	if m.IoSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":")
		bytes, err := swag.WriteJSON(m.IoSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":null")
		first = false
	}

	// handle nullable field iops
	if m.Iops != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":")
		bytes, err := swag.WriteJSON(m.Iops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Iops_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":null")
		first = false
	}

	// handle nullable field iops_max
	if m.IopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":")
		bytes, err := swag.WriteJSON(m.IopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":null")
		first = false
	}

	// handle nullable field iops_max_length
	if m.IopsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":null")
		first = false
	}

	// handle nullable field iops_rd
	if m.IopsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":")
		bytes, err := swag.WriteJSON(m.IopsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":null")
		first = false
	}

	// handle nullable field iops_rd_max
	if m.IopsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":")
		bytes, err := swag.WriteJSON(m.IopsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length
	if m.IopsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":null")
		first = false
	}

	// handle nullable field iops_wr
	if m.IopsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":")
		bytes, err := swag.WriteJSON(m.IopsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":null")
		first = false
	}

	// handle nullable field iops_wr_max
	if m.IopsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":")
		bytes, err := swag.WriteJSON(m.IopsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length
	if m.IopsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":null")
		first = false
	}

	// handle nullable field ip_whitelist
	if m.IPWhitelist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist\":")
		bytes, err := swag.WriteJSON(m.IPWhitelist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist\":null")
		first = false
	}

	// handle nullable field iqn_name
	if m.IqnName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iqn_name\":")
		bytes, err := swag.WriteJSON(m.IqnName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IqnName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iqn_name\":null")
		first = false
	}

	// handle nullable field iqn_whitelist
	if m.IqnWhitelist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iqn_whitelist\":")
		bytes, err := swag.WriteJSON(m.IqnWhitelist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IqnWhitelist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iqn_whitelist\":null")
		first = false
	}

	// handle non nullable field labels with omitempty
	if !swag.IsZero(m.Labels) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle non nullable field luns with omitempty
	if !swag.IsZero(m.Luns) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns\":")
		bytes, err := swag.WriteJSON(m.Luns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle nullable field stripe_num
	if m.StripeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":")
		bytes, err := swag.WriteJSON(m.StripeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":null")
		first = false
	}

	// handle nullable field stripe_size
	if m.StripeSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":")
		bytes, err := swag.WriteJSON(m.StripeSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":null")
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this iscsi target
func (m *IscsiTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChapEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorChaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIqnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIqnWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThinProvision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTarget) validateChapEnabled(formats strfmt.Registry) error {

	if err := validate.Required("chap_enabled", "body", m.ChapEnabled); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTarget) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTarget) validateExternalUse(formats strfmt.Registry) error {

	if err := validate.Required("external_use", "body", m.ExternalUse); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateInitiatorChaps(formats strfmt.Registry) error {
	if swag.IsZero(m.InitiatorChaps) { // not required
		return nil
	}

	for i := 0; i < len(m.InitiatorChaps); i++ {
		if swag.IsZero(m.InitiatorChaps[i]) { // not required
			continue
		}

		if m.InitiatorChaps[i] != nil {
			if err := m.InitiatorChaps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiTarget) validateInternal(formats strfmt.Registry) error {

	if err := validate.Required("internal", "body", m.Internal); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateIPWhitelist(formats strfmt.Registry) error {

	if err := validate.Required("ip_whitelist", "body", m.IPWhitelist); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateIqnName(formats strfmt.Registry) error {

	if err := validate.Required("iqn_name", "body", m.IqnName); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateIqnWhitelist(formats strfmt.Registry) error {

	if err := validate.Required("iqn_whitelist", "body", m.IqnWhitelist); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiTarget) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.Luns) { // not required
		return nil
	}

	for i := 0; i < len(m.Luns); i++ {
		if swag.IsZero(m.Luns[i]) { // not required
			continue
		}

		if m.Luns[i] != nil {
			if err := m.Luns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiTarget) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateReplicaNum(formats strfmt.Registry) error {

	if err := validate.Required("replica_num", "body", m.ReplicaNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateStripeNum(formats strfmt.Registry) error {

	if err := validate.Required("stripe_num", "body", m.StripeNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateStripeSize(formats strfmt.Registry) error {

	if err := validate.Required("stripe_size", "body", m.StripeSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiTarget) validateThinProvision(formats strfmt.Registry) error {

	if err := validate.Required("thin_provision", "body", m.ThinProvision); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this iscsi target based on the context it is used
func (m *IscsiTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiatorChaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiTarget) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTarget) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiTarget) contextValidateInitiatorChaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InitiatorChaps); i++ {

		if m.InitiatorChaps[i] != nil {
			if err := m.InitiatorChaps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("initiator_chaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiTarget) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiTarget) contextValidateLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Luns); i++ {

		if m.Luns[i] != nil {
			if err := m.Luns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiTarget) UnmarshalBinary(b []byte) error {
	var res IscsiTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
