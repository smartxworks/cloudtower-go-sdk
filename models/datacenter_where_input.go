// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatacenterWhereInput datacenter where input
//
// swagger:model DatacenterWhereInput
type DatacenterWhereInput struct {

	// a n d
	AND []*DatacenterWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*DatacenterWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*DatacenterWhereInput `json:"OR,omitempty"`

	// cluster num
	ClusterNum *int32 `json:"cluster_num,omitempty"`

	// cluster num gt
	ClusterNumGt *int32 `json:"cluster_num_gt,omitempty"`

	// cluster num gte
	ClusterNumGte *int32 `json:"cluster_num_gte,omitempty"`

	// cluster num in
	ClusterNumIn []int32 `json:"cluster_num_in,omitempty"`

	// cluster num lt
	ClusterNumLt *int32 `json:"cluster_num_lt,omitempty"`

	// cluster num lte
	ClusterNumLte *int32 `json:"cluster_num_lte,omitempty"`

	// cluster num not
	ClusterNumNot *int32 `json:"cluster_num_not,omitempty"`

	// cluster num not in
	ClusterNumNotIn []int32 `json:"cluster_num_not_in,omitempty"`

	// clusters every
	ClustersEvery *ClusterWhereInput `json:"clusters_every,omitempty"`

	// clusters none
	ClustersNone *ClusterWhereInput `json:"clusters_none,omitempty"`

	// clusters some
	ClustersSome *ClusterWhereInput `json:"clusters_some,omitempty"`

	// failure data space
	FailureDataSpace *int64 `json:"failure_data_space,omitempty"`

	// failure data space gt
	FailureDataSpaceGt *int64 `json:"failure_data_space_gt,omitempty"`

	// failure data space gte
	FailureDataSpaceGte *int64 `json:"failure_data_space_gte,omitempty"`

	// failure data space in
	FailureDataSpaceIn []int64 `json:"failure_data_space_in,omitempty"`

	// failure data space lt
	FailureDataSpaceLt *int64 `json:"failure_data_space_lt,omitempty"`

	// failure data space lte
	FailureDataSpaceLte *int64 `json:"failure_data_space_lte,omitempty"`

	// failure data space not
	FailureDataSpaceNot *int64 `json:"failure_data_space_not,omitempty"`

	// failure data space not in
	FailureDataSpaceNotIn []int64 `json:"failure_data_space_not_in,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// host num gt
	HostNumGt *int32 `json:"host_num_gt,omitempty"`

	// host num gte
	HostNumGte *int32 `json:"host_num_gte,omitempty"`

	// host num in
	HostNumIn []int32 `json:"host_num_in,omitempty"`

	// host num lt
	HostNumLt *int32 `json:"host_num_lt,omitempty"`

	// host num lte
	HostNumLte *int32 `json:"host_num_lte,omitempty"`

	// host num not
	HostNumNot *int32 `json:"host_num_not,omitempty"`

	// host num not in
	HostNumNotIn []int32 `json:"host_num_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// organization
	Organization *OrganizationWhereInput `json:"organization,omitempty"`

	// total cpu hz
	TotalCPUHz *int64 `json:"total_cpu_hz,omitempty"`

	// total cpu hz gt
	TotalCPUHzGt *int64 `json:"total_cpu_hz_gt,omitempty"`

	// total cpu hz gte
	TotalCPUHzGte *int64 `json:"total_cpu_hz_gte,omitempty"`

	// total cpu hz in
	TotalCPUHzIn []int64 `json:"total_cpu_hz_in,omitempty"`

	// total cpu hz lt
	TotalCPUHzLt *int64 `json:"total_cpu_hz_lt,omitempty"`

	// total cpu hz lte
	TotalCPUHzLte *int64 `json:"total_cpu_hz_lte,omitempty"`

	// total cpu hz not
	TotalCPUHzNot *int64 `json:"total_cpu_hz_not,omitempty"`

	// total cpu hz not in
	TotalCPUHzNotIn []int64 `json:"total_cpu_hz_not_in,omitempty"`

	// total data capacity
	TotalDataCapacity *int64 `json:"total_data_capacity,omitempty"`

	// total data capacity gt
	TotalDataCapacityGt *int64 `json:"total_data_capacity_gt,omitempty"`

	// total data capacity gte
	TotalDataCapacityGte *int64 `json:"total_data_capacity_gte,omitempty"`

	// total data capacity in
	TotalDataCapacityIn []int64 `json:"total_data_capacity_in,omitempty"`

	// total data capacity lt
	TotalDataCapacityLt *int64 `json:"total_data_capacity_lt,omitempty"`

	// total data capacity lte
	TotalDataCapacityLte *int64 `json:"total_data_capacity_lte,omitempty"`

	// total data capacity not
	TotalDataCapacityNot *int64 `json:"total_data_capacity_not,omitempty"`

	// total data capacity not in
	TotalDataCapacityNotIn []int64 `json:"total_data_capacity_not_in,omitempty"`

	// total memory bytes
	TotalMemoryBytes *int64 `json:"total_memory_bytes,omitempty"`

	// total memory bytes gt
	TotalMemoryBytesGt *int64 `json:"total_memory_bytes_gt,omitempty"`

	// total memory bytes gte
	TotalMemoryBytesGte *int64 `json:"total_memory_bytes_gte,omitempty"`

	// total memory bytes in
	TotalMemoryBytesIn []int64 `json:"total_memory_bytes_in,omitempty"`

	// total memory bytes lt
	TotalMemoryBytesLt *int64 `json:"total_memory_bytes_lt,omitempty"`

	// total memory bytes lte
	TotalMemoryBytesLte *int64 `json:"total_memory_bytes_lte,omitempty"`

	// total memory bytes not
	TotalMemoryBytesNot *int64 `json:"total_memory_bytes_not,omitempty"`

	// total memory bytes not in
	TotalMemoryBytesNotIn []int64 `json:"total_memory_bytes_not_in,omitempty"`

	// used cpu hz
	UsedCPUHz *float64 `json:"used_cpu_hz,omitempty"`

	// used cpu hz gt
	UsedCPUHzGt *float64 `json:"used_cpu_hz_gt,omitempty"`

	// used cpu hz gte
	UsedCPUHzGte *float64 `json:"used_cpu_hz_gte,omitempty"`

	// used cpu hz in
	UsedCPUHzIn []float64 `json:"used_cpu_hz_in,omitempty"`

	// used cpu hz lt
	UsedCPUHzLt *float64 `json:"used_cpu_hz_lt,omitempty"`

	// used cpu hz lte
	UsedCPUHzLte *float64 `json:"used_cpu_hz_lte,omitempty"`

	// used cpu hz not
	UsedCPUHzNot *float64 `json:"used_cpu_hz_not,omitempty"`

	// used cpu hz not in
	UsedCPUHzNotIn []float64 `json:"used_cpu_hz_not_in,omitempty"`

	// used data space
	UsedDataSpace *int64 `json:"used_data_space,omitempty"`

	// used data space gt
	UsedDataSpaceGt *int64 `json:"used_data_space_gt,omitempty"`

	// used data space gte
	UsedDataSpaceGte *int64 `json:"used_data_space_gte,omitempty"`

	// used data space in
	UsedDataSpaceIn []int64 `json:"used_data_space_in,omitempty"`

	// used data space lt
	UsedDataSpaceLt *int64 `json:"used_data_space_lt,omitempty"`

	// used data space lte
	UsedDataSpaceLte *int64 `json:"used_data_space_lte,omitempty"`

	// used data space not
	UsedDataSpaceNot *int64 `json:"used_data_space_not,omitempty"`

	// used data space not in
	UsedDataSpaceNotIn []int64 `json:"used_data_space_not_in,omitempty"`

	// used memory bytes
	UsedMemoryBytes *float64 `json:"used_memory_bytes,omitempty"`

	// used memory bytes gt
	UsedMemoryBytesGt *float64 `json:"used_memory_bytes_gt,omitempty"`

	// used memory bytes gte
	UsedMemoryBytesGte *float64 `json:"used_memory_bytes_gte,omitempty"`

	// used memory bytes in
	UsedMemoryBytesIn []float64 `json:"used_memory_bytes_in,omitempty"`

	// used memory bytes lt
	UsedMemoryBytesLt *float64 `json:"used_memory_bytes_lt,omitempty"`

	// used memory bytes lte
	UsedMemoryBytesLte *float64 `json:"used_memory_bytes_lte,omitempty"`

	// used memory bytes not
	UsedMemoryBytesNot *float64 `json:"used_memory_bytes_not,omitempty"`

	// used memory bytes not in
	UsedMemoryBytesNotIn []float64 `json:"used_memory_bytes_not_in,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm num gt
	VMNumGt *int32 `json:"vm_num_gt,omitempty"`

	// vm num gte
	VMNumGte *int32 `json:"vm_num_gte,omitempty"`

	// vm num in
	VMNumIn []int32 `json:"vm_num_in,omitempty"`

	// vm num lt
	VMNumLt *int32 `json:"vm_num_lt,omitempty"`

	// vm num lte
	VMNumLte *int32 `json:"vm_num_lte,omitempty"`

	// vm num not
	VMNumNot *int32 `json:"vm_num_not,omitempty"`

	// vm num not in
	VMNumNotIn []int32 `json:"vm_num_not_in,omitempty"`

	MarshalOpts *DatacenterWhereInputMarshalOpts `json:"-"`
}

type DatacenterWhereInputMarshalOpts struct {
	ClusterNum_Explicit_Null_When_Empty bool

	ClusterNumGt_Explicit_Null_When_Empty bool

	ClusterNumGte_Explicit_Null_When_Empty bool

	ClusterNumLt_Explicit_Null_When_Empty bool

	ClusterNumLte_Explicit_Null_When_Empty bool

	ClusterNumNot_Explicit_Null_When_Empty bool

	ClustersEvery_Explicit_Null_When_Empty bool

	ClustersNone_Explicit_Null_When_Empty bool

	ClustersSome_Explicit_Null_When_Empty bool

	FailureDataSpace_Explicit_Null_When_Empty bool

	FailureDataSpaceGt_Explicit_Null_When_Empty bool

	FailureDataSpaceGte_Explicit_Null_When_Empty bool

	FailureDataSpaceLt_Explicit_Null_When_Empty bool

	FailureDataSpaceLte_Explicit_Null_When_Empty bool

	FailureDataSpaceNot_Explicit_Null_When_Empty bool

	HostNum_Explicit_Null_When_Empty bool

	HostNumGt_Explicit_Null_When_Empty bool

	HostNumGte_Explicit_Null_When_Empty bool

	HostNumLt_Explicit_Null_When_Empty bool

	HostNumLte_Explicit_Null_When_Empty bool

	HostNumNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	Organization_Explicit_Null_When_Empty bool

	TotalCPUHz_Explicit_Null_When_Empty bool

	TotalCPUHzGt_Explicit_Null_When_Empty bool

	TotalCPUHzGte_Explicit_Null_When_Empty bool

	TotalCPUHzLt_Explicit_Null_When_Empty bool

	TotalCPUHzLte_Explicit_Null_When_Empty bool

	TotalCPUHzNot_Explicit_Null_When_Empty bool

	TotalDataCapacity_Explicit_Null_When_Empty bool

	TotalDataCapacityGt_Explicit_Null_When_Empty bool

	TotalDataCapacityGte_Explicit_Null_When_Empty bool

	TotalDataCapacityLt_Explicit_Null_When_Empty bool

	TotalDataCapacityLte_Explicit_Null_When_Empty bool

	TotalDataCapacityNot_Explicit_Null_When_Empty bool

	TotalMemoryBytes_Explicit_Null_When_Empty bool

	TotalMemoryBytesGt_Explicit_Null_When_Empty bool

	TotalMemoryBytesGte_Explicit_Null_When_Empty bool

	TotalMemoryBytesLt_Explicit_Null_When_Empty bool

	TotalMemoryBytesLte_Explicit_Null_When_Empty bool

	TotalMemoryBytesNot_Explicit_Null_When_Empty bool

	UsedCPUHz_Explicit_Null_When_Empty bool

	UsedCPUHzGt_Explicit_Null_When_Empty bool

	UsedCPUHzGte_Explicit_Null_When_Empty bool

	UsedCPUHzLt_Explicit_Null_When_Empty bool

	UsedCPUHzLte_Explicit_Null_When_Empty bool

	UsedCPUHzNot_Explicit_Null_When_Empty bool

	UsedDataSpace_Explicit_Null_When_Empty bool

	UsedDataSpaceGt_Explicit_Null_When_Empty bool

	UsedDataSpaceGte_Explicit_Null_When_Empty bool

	UsedDataSpaceLt_Explicit_Null_When_Empty bool

	UsedDataSpaceLte_Explicit_Null_When_Empty bool

	UsedDataSpaceNot_Explicit_Null_When_Empty bool

	UsedMemoryBytes_Explicit_Null_When_Empty bool

	UsedMemoryBytesGt_Explicit_Null_When_Empty bool

	UsedMemoryBytesGte_Explicit_Null_When_Empty bool

	UsedMemoryBytesLt_Explicit_Null_When_Empty bool

	UsedMemoryBytesLte_Explicit_Null_When_Empty bool

	UsedMemoryBytesNot_Explicit_Null_When_Empty bool

	VMNum_Explicit_Null_When_Empty bool

	VMNumGt_Explicit_Null_When_Empty bool

	VMNumGte_Explicit_Null_When_Empty bool

	VMNumLt_Explicit_Null_When_Empty bool

	VMNumLte_Explicit_Null_When_Empty bool

	VMNumNot_Explicit_Null_When_Empty bool
}

func (m DatacenterWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_num
	if m.ClusterNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num\":")
		bytes, err := swag.WriteJSON(m.ClusterNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num\":null")
		first = false
	}

	// handle nullable field cluster_num_gt
	if m.ClusterNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_gt\":")
		bytes, err := swag.WriteJSON(m.ClusterNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_gt\":null")
		first = false
	}

	// handle nullable field cluster_num_gte
	if m.ClusterNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_gte\":")
		bytes, err := swag.WriteJSON(m.ClusterNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_gte\":null")
		first = false
	}

	// handle non nullable field cluster_num_in with omitempty
	if swag.IsZero(m.ClusterNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_in\":")
		bytes, err := swag.WriteJSON(m.ClusterNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_num_lt
	if m.ClusterNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_lt\":")
		bytes, err := swag.WriteJSON(m.ClusterNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_lt\":null")
		first = false
	}

	// handle nullable field cluster_num_lte
	if m.ClusterNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_lte\":")
		bytes, err := swag.WriteJSON(m.ClusterNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_lte\":null")
		first = false
	}

	// handle nullable field cluster_num_not
	if m.ClusterNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_not\":")
		bytes, err := swag.WriteJSON(m.ClusterNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_not\":null")
		first = false
	}

	// handle non nullable field cluster_num_not_in with omitempty
	if swag.IsZero(m.ClusterNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_num_not_in\":")
		bytes, err := swag.WriteJSON(m.ClusterNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field clusters_every
	if m.ClustersEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":")
		bytes, err := swag.WriteJSON(m.ClustersEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":null")
		first = false
	}

	// handle nullable field clusters_none
	if m.ClustersNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":")
		bytes, err := swag.WriteJSON(m.ClustersNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":null")
		first = false
	}

	// handle nullable field clusters_some
	if m.ClustersSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":")
		bytes, err := swag.WriteJSON(m.ClustersSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":null")
		first = false
	}

	// handle nullable field failure_data_space
	if m.FailureDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space\":null")
		first = false
	}

	// handle nullable field failure_data_space_gt
	if m.FailureDataSpaceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_gt\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpaceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_gt\":null")
		first = false
	}

	// handle nullable field failure_data_space_gte
	if m.FailureDataSpaceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_gte\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpaceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_gte\":null")
		first = false
	}

	// handle non nullable field failure_data_space_in with omitempty
	if swag.IsZero(m.FailureDataSpaceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_in\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failure_data_space_lt
	if m.FailureDataSpaceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_lt\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpaceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_lt\":null")
		first = false
	}

	// handle nullable field failure_data_space_lte
	if m.FailureDataSpaceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_lte\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpaceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_lte\":null")
		first = false
	}

	// handle nullable field failure_data_space_not
	if m.FailureDataSpaceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_not\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpaceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_not\":null")
		first = false
	}

	// handle non nullable field failure_data_space_not_in with omitempty
	if swag.IsZero(m.FailureDataSpaceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space_not_in\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpaceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field host_num
	if m.HostNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":")
		bytes, err := swag.WriteJSON(m.HostNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":null")
		first = false
	}

	// handle nullable field host_num_gt
	if m.HostNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_gt\":")
		bytes, err := swag.WriteJSON(m.HostNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_gt\":null")
		first = false
	}

	// handle nullable field host_num_gte
	if m.HostNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_gte\":")
		bytes, err := swag.WriteJSON(m.HostNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_gte\":null")
		first = false
	}

	// handle non nullable field host_num_in with omitempty
	if swag.IsZero(m.HostNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_in\":")
		bytes, err := swag.WriteJSON(m.HostNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field host_num_lt
	if m.HostNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_lt\":")
		bytes, err := swag.WriteJSON(m.HostNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_lt\":null")
		first = false
	}

	// handle nullable field host_num_lte
	if m.HostNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_lte\":")
		bytes, err := swag.WriteJSON(m.HostNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_lte\":null")
		first = false
	}

	// handle nullable field host_num_not
	if m.HostNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_not\":")
		bytes, err := swag.WriteJSON(m.HostNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_not\":null")
		first = false
	}

	// handle non nullable field host_num_not_in with omitempty
	if swag.IsZero(m.HostNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num_not_in\":")
		bytes, err := swag.WriteJSON(m.HostNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field organization
	if m.Organization != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"organization\":")
		bytes, err := swag.WriteJSON(m.Organization)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Organization_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"organization\":null")
		first = false
	}

	// handle nullable field total_cpu_hz
	if m.TotalCPUHz != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHz)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHz_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_gt
	if m.TotalCPUHzGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gt\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_gte
	if m.TotalCPUHzGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gte\":null")
		first = false
	}

	// handle non nullable field total_cpu_hz_in with omitempty
	if swag.IsZero(m.TotalCPUHzIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_hz_lt
	if m.TotalCPUHzLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lt\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_lte
	if m.TotalCPUHzLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lte\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_not
	if m.TotalCPUHzNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not\":null")
		first = false
	}

	// handle non nullable field total_cpu_hz_not_in with omitempty
	if swag.IsZero(m.TotalCPUHzNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_data_capacity
	if m.TotalDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity\":null")
		first = false
	}

	// handle nullable field total_data_capacity_gt
	if m.TotalDataCapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_gt\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_gt\":null")
		first = false
	}

	// handle nullable field total_data_capacity_gte
	if m.TotalDataCapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_gte\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_gte\":null")
		first = false
	}

	// handle non nullable field total_data_capacity_in with omitempty
	if swag.IsZero(m.TotalDataCapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_in\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_data_capacity_lt
	if m.TotalDataCapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_lt\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_lt\":null")
		first = false
	}

	// handle nullable field total_data_capacity_lte
	if m.TotalDataCapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_lte\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_lte\":null")
		first = false
	}

	// handle nullable field total_data_capacity_not
	if m.TotalDataCapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_not\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_not\":null")
		first = false
	}

	// handle non nullable field total_data_capacity_not_in with omitempty
	if swag.IsZero(m.TotalDataCapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_memory_bytes
	if m.TotalMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_gt
	if m.TotalMemoryBytesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gt\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gt\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_gte
	if m.TotalMemoryBytesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gte\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gte\":null")
		first = false
	}

	// handle non nullable field total_memory_bytes_in with omitempty
	if swag.IsZero(m.TotalMemoryBytesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_in\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_memory_bytes_lt
	if m.TotalMemoryBytesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lt\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lt\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_lte
	if m.TotalMemoryBytesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lte\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lte\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_not
	if m.TotalMemoryBytesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not\":null")
		first = false
	}

	// handle non nullable field total_memory_bytes_not_in with omitempty
	if swag.IsZero(m.TotalMemoryBytesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_cpu_hz
	if m.UsedCPUHz != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHz)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHz_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz\":null")
		first = false
	}

	// handle nullable field used_cpu_hz_gt
	if m.UsedCPUHzGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_gt\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHzGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_gt\":null")
		first = false
	}

	// handle nullable field used_cpu_hz_gte
	if m.UsedCPUHzGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_gte\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHzGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_gte\":null")
		first = false
	}

	// handle non nullable field used_cpu_hz_in with omitempty
	if swag.IsZero(m.UsedCPUHzIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_in\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_cpu_hz_lt
	if m.UsedCPUHzLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_lt\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHzLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_lt\":null")
		first = false
	}

	// handle nullable field used_cpu_hz_lte
	if m.UsedCPUHzLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_lte\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHzLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_lte\":null")
		first = false
	}

	// handle nullable field used_cpu_hz_not
	if m.UsedCPUHzNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_not\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHzNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_not\":null")
		first = false
	}

	// handle non nullable field used_cpu_hz_not_in with omitempty
	if swag.IsZero(m.UsedCPUHzNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHzNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_data_space
	if m.UsedDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":null")
		first = false
	}

	// handle nullable field used_data_space_gt
	if m.UsedDataSpaceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gt\":null")
		first = false
	}

	// handle nullable field used_data_space_gte
	if m.UsedDataSpaceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gte\":null")
		first = false
	}

	// handle non nullable field used_data_space_in with omitempty
	if swag.IsZero(m.UsedDataSpaceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_data_space_lt
	if m.UsedDataSpaceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lt\":null")
		first = false
	}

	// handle nullable field used_data_space_lte
	if m.UsedDataSpaceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lte\":null")
		first = false
	}

	// handle nullable field used_data_space_not
	if m.UsedDataSpaceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not\":null")
		first = false
	}

	// handle non nullable field used_data_space_not_in with omitempty
	if swag.IsZero(m.UsedDataSpaceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_memory_bytes
	if m.UsedMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes\":null")
		first = false
	}

	// handle nullable field used_memory_bytes_gt
	if m.UsedMemoryBytesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_gt\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_gt\":null")
		first = false
	}

	// handle nullable field used_memory_bytes_gte
	if m.UsedMemoryBytesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_gte\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_gte\":null")
		first = false
	}

	// handle non nullable field used_memory_bytes_in with omitempty
	if swag.IsZero(m.UsedMemoryBytesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_in\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_memory_bytes_lt
	if m.UsedMemoryBytesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_lt\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_lt\":null")
		first = false
	}

	// handle nullable field used_memory_bytes_lte
	if m.UsedMemoryBytesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_lte\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_lte\":null")
		first = false
	}

	// handle nullable field used_memory_bytes_not
	if m.UsedMemoryBytesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_not\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_not\":null")
		first = false
	}

	// handle non nullable field used_memory_bytes_not_in with omitempty
	if swag.IsZero(m.UsedMemoryBytesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_num
	if m.VMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":")
		bytes, err := swag.WriteJSON(m.VMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":null")
		first = false
	}

	// handle nullable field vm_num_gt
	if m.VMNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_gt\":")
		bytes, err := swag.WriteJSON(m.VMNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_gt\":null")
		first = false
	}

	// handle nullable field vm_num_gte
	if m.VMNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_gte\":")
		bytes, err := swag.WriteJSON(m.VMNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_gte\":null")
		first = false
	}

	// handle non nullable field vm_num_in with omitempty
	if swag.IsZero(m.VMNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_in\":")
		bytes, err := swag.WriteJSON(m.VMNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_num_lt
	if m.VMNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_lt\":")
		bytes, err := swag.WriteJSON(m.VMNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_lt\":null")
		first = false
	}

	// handle nullable field vm_num_lte
	if m.VMNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_lte\":")
		bytes, err := swag.WriteJSON(m.VMNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_lte\":null")
		first = false
	}

	// handle nullable field vm_num_not
	if m.VMNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_not\":")
		bytes, err := swag.WriteJSON(m.VMNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_not\":null")
		first = false
	}

	// handle non nullable field vm_num_not_in with omitempty
	if swag.IsZero(m.VMNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num_not_in\":")
		bytes, err := swag.WriteJSON(m.VMNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this datacenter where input
func (m *DatacenterWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatacenterWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) validateClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersEvery) { // not required
		return nil
	}

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersNone) { // not required
		return nil
	}

	if m.ClustersNone != nil {
		if err := m.ClustersNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersSome) { // not required
		return nil
	}

	if m.ClustersSome != nil {
		if err := m.ClustersSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this datacenter where input based on the context it is used
func (m *DatacenterWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatacenterWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateClustersNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersNone != nil {
		if err := m.ClustersNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateClustersSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersSome != nil {
		if err := m.ClustersSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *DatacenterWhereInput) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {
		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatacenterWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatacenterWhereInput) UnmarshalBinary(b []byte) error {
	var res DatacenterWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
