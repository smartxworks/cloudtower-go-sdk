// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationPlan replication plan
//
// swagger:model ReplicationPlan
type ReplicationPlan struct {

	// abort window unfinished
	AbortWindowUnfinished *bool `json:"abort_window_unfinished,omitempty"`

	// activation timestamp
	ActivationTimestamp *string `json:"activation_timestamp,omitempty"`

	// compression
	// Required: true
	Compression *bool `json:"compression"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// delete strategy
	DeleteStrategy *BackupPlanDeleteStrategy `json:"delete_strategy,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// ec k
	Eck *int32 `json:"ec_k,omitempty"`

	// ec m
	Ecm *int32 `json:"ec_m,omitempty"`

	// enable window
	// Required: true
	EnableWindow *bool `json:"enable_window"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// external cloudtower
	ExternalCloudtower *NestedExternalCloudTower `json:"external_cloudtower,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// inbound
	Inbound *bool `json:"inbound,omitempty"`

	// interval
	// Required: true
	Interval *int32 `json:"interval"`

	// ip mapping
	// Required: true
	IPMapping []*NestedReplicationIPAddressMapping `json:"ip_mapping"`

	// iscsi luns
	IscsiLuns []*NestedIscsiLun `json:"iscsi_luns,omitempty"`

	// keep mac address
	KeepMacAddress *bool `json:"keep_mac_address,omitempty"`

	// keep policy
	KeepPolicy *BackupPlanKeepPolicy `json:"keep_policy,omitempty"`

	// keep policy value
	KeepPolicyValue *int32 `json:"keep_policy_value,omitempty"`

	// last execute status
	// Required: true
	LastExecuteStatus *BackupPlanExecutionStatus `json:"last_execute_status"`

	// last execute status message
	LastExecuteStatusMessage *string `json:"last_execute_status_message,omitempty"`

	// last execute success job count
	LastExecuteSuccessJobCount *int32 `json:"last_execute_success_job_count,omitempty"`

	// last execute total job count
	LastExecuteTotalJobCount *int32 `json:"last_execute_total_job_count,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last manual execute status
	// Required: true
	LastManualExecuteStatus *BackupPlanExecutionStatus `json:"last_manual_execute_status"`

	// last manual execute status message
	LastManualExecuteStatusMessage *string `json:"last_manual_execute_status_message,omitempty"`

	// last manual execute success job count
	LastManualExecuteSuccessJobCount *int32 `json:"last_manual_execute_success_job_count,omitempty"`

	// last manual execute total job count
	LastManualExecuteTotalJobCount *int32 `json:"last_manual_execute_total_job_count,omitempty"`

	// last manual executed at
	LastManualExecutedAt *string `json:"last_manual_executed_at,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// network mapping
	// Required: true
	NetworkMapping []*NestedReplicationPlanNetworkMapping `json:"network_mapping"`

	// next execution time
	NextExecutionTime *string `json:"next_execution_time,omitempty"`

	// objects descriptor
	// Required: true
	ObjectsDescriptor []*NestedReplicationObjectDescriptor `json:"objects_descriptor"`

	// period
	// Required: true
	Period *ReplicationPlanPeriod `json:"period"`

	// phase
	Phase *BackupPlanPhase `json:"phase,omitempty"`

	// replica name rule
	// Required: true
	ReplicaNameRule *ReplicaNameRule `json:"replica_name_rule"`

	// replica name setting
	ReplicaNameSetting *string `json:"replica_name_setting,omitempty"`

	// replica num
	ReplicaNum *int32 `json:"replica_num,omitempty"`

	// replica vms
	ReplicaVms []*NestedReplicaVM `json:"replica_vms,omitempty"`

	// replication plan executions
	ReplicationPlanExecutions []*NestedReplicationPlanExecution `json:"replication_plan_executions,omitempty"`

	// replication restore points
	ReplicationRestorePoints []*NestedReplicationRestorePoint `json:"replication_restore_points,omitempty"`

	// replication target executions
	ReplicationTargetExecutions []*NestedReplicationTargetExecution `json:"replication_target_executions,omitempty"`

	// resiliency type
	ResiliencyType *ResiliencyType `json:"resiliency_type,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// status
	// Required: true
	Status *BackupPlanStatus `json:"status"`

	// storage policy
	// Required: true
	StoragePolicy *VMVolumeElfStoragePolicyType `json:"storage_policy"`

	// target cluster
	TargetCluster *NestedCluster `json:"target_cluster,omitempty"`

	// target cluster descriptor
	// Required: true
	TargetClusterDescriptor *NestedReplicationClusterDescriptor `json:"target_cluster_descriptor"`

	// target replication service
	// Required: true
	TargetReplicationService *NestedReplicationService `json:"target_replication_service"`

	// thin provision
	ThinProvision *bool `json:"thin_provision,omitempty"`

	// time points
	// Required: true
	TimePoints []*NestedBackupPlanTimePoint `json:"time_points"`

	// type
	// Required: true
	Type *ReplicationPlanType `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	// weekdays
	Weekdays []WeekdayTypeEnum `json:"weekdays,omitempty"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	MarshalOpts *ReplicationPlanMarshalOpts `json:"-"`
}

type ReplicationPlanMarshalOpts struct {
	AbortWindowUnfinished_Explicit_Null_When_Empty bool

	ActivationTimestamp_Explicit_Null_When_Empty bool

	Compression_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	DeleteStrategy_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	Eck_Explicit_Null_When_Empty bool

	Ecm_Explicit_Null_When_Empty bool

	EnableWindow_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Inbound_Explicit_Null_When_Empty bool

	Interval_Explicit_Null_When_Empty bool

	IPMapping_Explicit_Null_When_Empty bool

	IscsiLuns_Explicit_Null_When_Empty bool

	KeepMacAddress_Explicit_Null_When_Empty bool

	KeepPolicy_Explicit_Null_When_Empty bool

	KeepPolicyValue_Explicit_Null_When_Empty bool

	LastExecuteStatus_Explicit_Null_When_Empty bool

	LastExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	LastManualExecuteStatus_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastManualExecutedAt_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NetworkMapping_Explicit_Null_When_Empty bool

	NextExecutionTime_Explicit_Null_When_Empty bool

	ObjectsDescriptor_Explicit_Null_When_Empty bool

	Period_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	ReplicaNameRule_Explicit_Null_When_Empty bool

	ReplicaNameSetting_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	ReplicaVms_Explicit_Null_When_Empty bool

	ReplicationPlanExecutions_Explicit_Null_When_Empty bool

	ReplicationRestorePoints_Explicit_Null_When_Empty bool

	ReplicationTargetExecutions_Explicit_Null_When_Empty bool

	ResiliencyType_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StoragePolicy_Explicit_Null_When_Empty bool

	TargetCluster_Explicit_Null_When_Empty bool

	TargetClusterDescriptor_Explicit_Null_When_Empty bool

	TargetReplicationService_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool

	TimePoints_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool

	Weekdays_Explicit_Null_When_Empty bool

	WindowEnd_Explicit_Null_When_Empty bool

	WindowStart_Explicit_Null_When_Empty bool
}

func (m ReplicationPlan) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field abort_window_unfinished
	if m.AbortWindowUnfinished != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished\":")
		bytes, err := swag.WriteJSON(m.AbortWindowUnfinished)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AbortWindowUnfinished_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"abort_window_unfinished\":null")
		first = false
	}

	// handle nullable field activation_timestamp
	if m.ActivationTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp\":")
		bytes, err := swag.WriteJSON(m.ActivationTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActivationTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"activation_timestamp\":null")
		first = false
	}

	// handle nullable field compression
	if m.Compression != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":")
		bytes, err := swag.WriteJSON(m.Compression)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compression_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field delete_strategy
	if m.DeleteStrategy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field ec_k
	if m.Eck != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k\":")
		bytes, err := swag.WriteJSON(m.Eck)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Eck_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_k\":null")
		first = false
	}

	// handle nullable field ec_m
	if m.Ecm != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m\":")
		bytes, err := swag.WriteJSON(m.Ecm)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ecm_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec_m\":null")
		first = false
	}

	// handle nullable field enable_window
	if m.EnableWindow != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":")
		bytes, err := swag.WriteJSON(m.EnableWindow)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindow_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field inbound
	if m.Inbound != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":")
		bytes, err := swag.WriteJSON(m.Inbound)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Inbound_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":null")
		first = false
	}

	// handle nullable field interval
	if m.Interval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval\":")
		bytes, err := swag.WriteJSON(m.Interval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Interval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"interval\":null")
		first = false
	}

	// handle non nullable field ip_mapping without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_mapping\":")
		bytes, err := swag.WriteJSON(m.IPMapping)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field iscsi_luns with omitempty
	if !swag.IsZero(m.IscsiLuns) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_luns\":")
		bytes, err := swag.WriteJSON(m.IscsiLuns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_mac_address
	if m.KeepMacAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address\":")
		bytes, err := swag.WriteJSON(m.KeepMacAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepMacAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_mac_address\":null")
		first = false
	}

	// handle nullable field keep_policy
	if m.KeepPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":")
		bytes, err := swag.WriteJSON(m.KeepPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":null")
		first = false
	}

	// handle nullable field keep_policy_value
	if m.KeepPolicyValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":null")
		first = false
	}

	// handle nullable field last_execute_status
	if m.LastExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":null")
		first = false
	}

	// handle nullable field last_execute_status_message
	if m.LastExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count
	if m.LastExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count
	if m.LastExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status
	if m.LastManualExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message
	if m.LastManualExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count
	if m.LastManualExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count
	if m.LastManualExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at
	if m.LastManualExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field network_mapping without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_mapping\":")
		bytes, err := swag.WriteJSON(m.NetworkMapping)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field next_execution_time
	if m.NextExecutionTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time\":")
		bytes, err := swag.WriteJSON(m.NextExecutionTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecutionTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execution_time\":null")
		first = false
	}

	// handle non nullable field objects_descriptor without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"objects_descriptor\":")
		bytes, err := swag.WriteJSON(m.ObjectsDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field period
	if m.Period != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":")
		bytes, err := swag.WriteJSON(m.Period)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Period_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field replica_name_rule
	if m.ReplicaNameRule != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameRule)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameRule_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_rule\":null")
		first = false
	}

	// handle nullable field replica_name_setting
	if m.ReplicaNameSetting != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting\":")
		bytes, err := swag.WriteJSON(m.ReplicaNameSetting)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNameSetting_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_name_setting\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle non nullable field replica_vms with omitempty
	if !swag.IsZero(m.ReplicaVms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms\":")
		bytes, err := swag.WriteJSON(m.ReplicaVms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field replication_plan_executions with omitempty
	if !swag.IsZero(m.ReplicationPlanExecutions) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan_executions\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlanExecutions)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field replication_restore_points with omitempty
	if !swag.IsZero(m.ReplicationRestorePoints) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_restore_points\":")
		bytes, err := swag.WriteJSON(m.ReplicationRestorePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field replication_target_executions with omitempty
	if !swag.IsZero(m.ReplicationTargetExecutions) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutions)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resiliency_type
	if m.ResiliencyType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type\":")
		bytes, err := swag.WriteJSON(m.ResiliencyType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResiliencyType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resiliency_type\":null")
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle nullable field storage_policy
	if m.StoragePolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy\":")
		bytes, err := swag.WriteJSON(m.StoragePolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StoragePolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_policy\":null")
		first = false
	}

	// handle nullable field target_cluster
	if m.TargetCluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster\":")
		bytes, err := swag.WriteJSON(m.TargetCluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetCluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster\":null")
		first = false
	}

	// handle nullable field target_cluster_descriptor
	if m.TargetClusterDescriptor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster_descriptor\":")
		bytes, err := swag.WriteJSON(m.TargetClusterDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetClusterDescriptor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_cluster_descriptor\":null")
		first = false
	}

	// handle nullable field target_replication_service
	if m.TargetReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_replication_service\":")
		bytes, err := swag.WriteJSON(m.TargetReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_replication_service\":null")
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}

	// handle non nullable field time_points without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"time_points\":")
		bytes, err := swag.WriteJSON(m.TimePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle non nullable field vms with omitempty
	if !swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field weekdays with omitempty
	if !swag.IsZero(m.Weekdays) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"weekdays\":")
		bytes, err := swag.WriteJSON(m.Weekdays)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end
	if m.WindowEnd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":")
		bytes, err := swag.WriteJSON(m.WindowEnd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEnd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":null")
		first = false
	}

	// handle nullable field window_start
	if m.WindowStart != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":")
		bytes, err := swag.WriteJSON(m.WindowStart)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStart_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replication plan
func (m *ReplicationPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectsDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNameRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlanExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRestorePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResiliencyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetClusterDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekdays(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationPlan) validateCompression(formats strfmt.Registry) error {

	if err := validate.Required("compression", "body", m.Compression); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateDeleteStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategy) { // not required
		return nil
	}

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateEnableWindow(formats strfmt.Registry) error {

	if err := validate.Required("enable_window", "body", m.EnableWindow); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateIPMapping(formats strfmt.Registry) error {

	if err := validate.Required("ip_mapping", "body", m.IPMapping); err != nil {
		return err
	}

	for i := 0; i < len(m.IPMapping); i++ {
		if swag.IsZero(m.IPMapping[i]) { // not required
			continue
		}

		if m.IPMapping[i] != nil {
			if err := m.IPMapping[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLuns); i++ {
		if swag.IsZero(m.IscsiLuns[i]) { // not required
			continue
		}

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateKeepPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicy) { // not required
		return nil
	}

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateLastExecuteStatus(formats strfmt.Registry) error {

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateLastManualExecuteStatus(formats strfmt.Registry) error {

	if err := validate.Required("last_manual_execute_status", "body", m.LastManualExecuteStatus); err != nil {
		return err
	}

	if err := validate.Required("last_manual_execute_status", "body", m.LastManualExecuteStatus); err != nil {
		return err
	}

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateNetworkMapping(formats strfmt.Registry) error {

	if err := validate.Required("network_mapping", "body", m.NetworkMapping); err != nil {
		return err
	}

	for i := 0; i < len(m.NetworkMapping); i++ {
		if swag.IsZero(m.NetworkMapping[i]) { // not required
			continue
		}

		if m.NetworkMapping[i] != nil {
			if err := m.NetworkMapping[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("network_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateObjectsDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("objects_descriptor", "body", m.ObjectsDescriptor); err != nil {
		return err
	}

	for i := 0; i < len(m.ObjectsDescriptor); i++ {
		if swag.IsZero(m.ObjectsDescriptor[i]) { // not required
			continue
		}

		if m.ObjectsDescriptor[i] != nil {
			if err := m.ObjectsDescriptor[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects_descriptor" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects_descriptor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateReplicaNameRule(formats strfmt.Registry) error {

	if err := validate.Required("replica_name_rule", "body", m.ReplicaNameRule); err != nil {
		return err
	}

	if err := validate.Required("replica_name_rule", "body", m.ReplicaNameRule); err != nil {
		return err
	}

	if m.ReplicaNameRule != nil {
		if err := m.ReplicaNameRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateReplicaVms(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVms) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaVms); i++ {
		if swag.IsZero(m.ReplicaVms[i]) { // not required
			continue
		}

		if m.ReplicaVms[i] != nil {
			if err := m.ReplicaVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replica_vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replica_vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateReplicationPlanExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlanExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationPlanExecutions); i++ {
		if swag.IsZero(m.ReplicationPlanExecutions[i]) { // not required
			continue
		}

		if m.ReplicationPlanExecutions[i] != nil {
			if err := m.ReplicationPlanExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_plan_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_plan_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateReplicationRestorePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRestorePoints) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationRestorePoints); i++ {
		if swag.IsZero(m.ReplicationRestorePoints[i]) { // not required
			continue
		}

		if m.ReplicationRestorePoints[i] != nil {
			if err := m.ReplicationRestorePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateReplicationTargetExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTargetExecutions); i++ {
		if swag.IsZero(m.ReplicationTargetExecutions[i]) { // not required
			continue
		}

		if m.ReplicationTargetExecutions[i] != nil {
			if err := m.ReplicationTargetExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateResiliencyType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResiliencyType) { // not required
		return nil
	}

	if m.ResiliencyType != nil {
		if err := m.ResiliencyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateStoragePolicy(formats strfmt.Registry) error {

	if err := validate.Required("storage_policy", "body", m.StoragePolicy); err != nil {
		return err
	}

	if err := validate.Required("storage_policy", "body", m.StoragePolicy); err != nil {
		return err
	}

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateTargetCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetCluster) { // not required
		return nil
	}

	if m.TargetCluster != nil {
		if err := m.TargetCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateTargetClusterDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("target_cluster_descriptor", "body", m.TargetClusterDescriptor); err != nil {
		return err
	}

	if m.TargetClusterDescriptor != nil {
		if err := m.TargetClusterDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateTargetReplicationService(formats strfmt.Registry) error {

	if err := validate.Required("target_replication_service", "body", m.TargetReplicationService); err != nil {
		return err
	}

	if m.TargetReplicationService != nil {
		if err := m.TargetReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateTimePoints(formats strfmt.Registry) error {

	if err := validate.Required("time_points", "body", m.TimePoints); err != nil {
		return err
	}

	for i := 0; i < len(m.TimePoints); i++ {
		if swag.IsZero(m.TimePoints[i]) { // not required
			continue
		}

		if m.TimePoints[i] != nil {
			if err := m.TimePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationPlan) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) validateWeekdays(formats strfmt.Registry) error {
	if swag.IsZero(m.Weekdays) { // not required
		return nil
	}

	for i := 0; i < len(m.Weekdays); i++ {

		if err := m.Weekdays[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this replication plan based on the context it is used
func (m *ReplicationPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeleteStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectsDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaNameRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlanExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationRestorePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResiliencyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetClusterDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeekdays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationPlan) contextValidateDeleteStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateIPMapping(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPMapping); i++ {

		if m.IPMapping[i] != nil {
			if err := m.IPMapping[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ip_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLuns); i++ {

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateKeepPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateLastManualExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateNetworkMapping(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkMapping); i++ {

		if m.NetworkMapping[i] != nil {
			if err := m.NetworkMapping[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("network_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateObjectsDescriptor(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectsDescriptor); i++ {

		if m.ObjectsDescriptor[i] != nil {
			if err := m.ObjectsDescriptor[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objects_descriptor" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objects_descriptor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {
		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateReplicaNameRule(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaNameRule != nil {
		if err := m.ReplicaNameRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_name_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_name_rule")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateReplicaVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaVms); i++ {

		if m.ReplicaVms[i] != nil {
			if err := m.ReplicaVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replica_vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replica_vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateReplicationPlanExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationPlanExecutions); i++ {

		if m.ReplicationPlanExecutions[i] != nil {
			if err := m.ReplicationPlanExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_plan_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_plan_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateReplicationRestorePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationRestorePoints); i++ {

		if m.ReplicationRestorePoints[i] != nil {
			if err := m.ReplicationRestorePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateReplicationTargetExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationTargetExecutions); i++ {

		if m.ReplicationTargetExecutions[i] != nil {
			if err := m.ReplicationTargetExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateResiliencyType(ctx context.Context, formats strfmt.Registry) error {

	if m.ResiliencyType != nil {
		if err := m.ResiliencyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resiliency_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resiliency_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateTargetCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetCluster != nil {
		if err := m.TargetCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateTargetClusterDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetClusterDescriptor != nil {
		if err := m.TargetClusterDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_cluster_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_cluster_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateTargetReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetReplicationService != nil {
		if err := m.TargetReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateTimePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TimePoints); i++ {

		if m.TimePoints[i] != nil {
			if err := m.TimePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationPlan) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationPlan) contextValidateWeekdays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Weekdays); i++ {

		if err := m.Weekdays[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationPlan) UnmarshalBinary(b []byte) error {
	var res ReplicationPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
