// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedMaintenanceHostState nested maintenance host state
//
// swagger:model NestedMaintenanceHostState
type NestedMaintenanceHostState struct {

	// enter maintenance time
	// Required: true
	EnterMaintenanceTime *string `json:"enter_maintenance_time"`

	// maintenance job id
	// Required: true
	MaintenanceJobID *string `json:"maintenance_job_id"`

	// state
	// Required: true
	State *MaintenanceModeEnum `json:"state"`

	MarshalOpts *NestedMaintenanceHostStateMarshalOpts `json:"-"`
}

type NestedMaintenanceHostStateMarshalOpts struct {
	EnterMaintenanceTime_Explicit_Null_When_Empty bool

	MaintenanceJobID_Explicit_Null_When_Empty bool

	State_Explicit_Null_When_Empty bool
}

func (m NestedMaintenanceHostState) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field enter_maintenance_time
	if m.EnterMaintenanceTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enter_maintenance_time\":")
		bytes, err := swag.WriteJSON(m.EnterMaintenanceTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnterMaintenanceTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enter_maintenance_time\":null")
		first = false
	}

	// handle nullable field maintenance_job_id
	if m.MaintenanceJobID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_job_id\":")
		bytes, err := swag.WriteJSON(m.MaintenanceJobID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceJobID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_job_id\":null")
		first = false
	}

	// handle nullable field state
	if m.State != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":")
		bytes, err := swag.WriteJSON(m.State)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.State_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested maintenance host state
func (m *NestedMaintenanceHostState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnterMaintenanceTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMaintenanceHostState) validateEnterMaintenanceTime(formats strfmt.Registry) error {

	if err := validate.Required("enter_maintenance_time", "body", m.EnterMaintenanceTime); err != nil {
		return err
	}

	return nil
}

func (m *NestedMaintenanceHostState) validateMaintenanceJobID(formats strfmt.Registry) error {

	if err := validate.Required("maintenance_job_id", "body", m.MaintenanceJobID); err != nil {
		return err
	}

	return nil
}

func (m *NestedMaintenanceHostState) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested maintenance host state based on the context it is used
func (m *NestedMaintenanceHostState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedMaintenanceHostState) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedMaintenanceHostState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedMaintenanceHostState) UnmarshalBinary(b []byte) error {
	var res NestedMaintenanceHostState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
