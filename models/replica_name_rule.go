// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplicaNameRule replica name rule
//
// swagger:model ReplicaNameRule
type ReplicaNameRule string

func NewReplicaNameRule(value ReplicaNameRule) *ReplicaNameRule {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplicaNameRule.
func (m ReplicaNameRule) Pointer() *ReplicaNameRule {
	return &m
}

const (

	// ReplicaNameRuleORIGIN captures enum value "ORIGIN"
	ReplicaNameRuleORIGIN ReplicaNameRule = "ORIGIN"

	// ReplicaNameRulePREFIX captures enum value "PREFIX"
	ReplicaNameRulePREFIX ReplicaNameRule = "PREFIX"

	// ReplicaNameRuleSUFFIX captures enum value "SUFFIX"
	ReplicaNameRuleSUFFIX ReplicaNameRule = "SUFFIX"
)

// for schema
var replicaNameRuleEnum []interface{}

func init() {
	var res []ReplicaNameRule
	if err := json.Unmarshal([]byte(`["ORIGIN","PREFIX","SUFFIX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicaNameRuleEnum = append(replicaNameRuleEnum, v)
	}
}

func (m ReplicaNameRule) validateReplicaNameRuleEnum(path, location string, value ReplicaNameRule) error {
	if err := validate.EnumCase(path, location, value, replicaNameRuleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replica name rule
func (m ReplicaNameRule) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplicaNameRuleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replica name rule based on context it is used
func (m ReplicaNameRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
