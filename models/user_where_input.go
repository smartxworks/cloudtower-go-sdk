// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserWhereInput user where input
//
// swagger:model UserWhereInput
type UserWhereInput struct {

	// a n d
	AND []*UserWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*UserWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*UserWhereInput `json:"OR,omitempty"`

	// auth config id
	AuthConfigID *string `json:"auth_config_id,omitempty"`

	// auth config id contains
	AuthConfigIDContains *string `json:"auth_config_id_contains,omitempty"`

	// auth config id ends with
	AuthConfigIDEndsWith *string `json:"auth_config_id_ends_with,omitempty"`

	// auth config id gt
	AuthConfigIDGt *string `json:"auth_config_id_gt,omitempty"`

	// auth config id gte
	AuthConfigIDGte *string `json:"auth_config_id_gte,omitempty"`

	// auth config id in
	AuthConfigIDIn []string `json:"auth_config_id_in,omitempty"`

	// auth config id lt
	AuthConfigIDLt *string `json:"auth_config_id_lt,omitempty"`

	// auth config id lte
	AuthConfigIDLte *string `json:"auth_config_id_lte,omitempty"`

	// auth config id not
	AuthConfigIDNot *string `json:"auth_config_id_not,omitempty"`

	// auth config id not contains
	AuthConfigIDNotContains *string `json:"auth_config_id_not_contains,omitempty"`

	// auth config id not ends with
	AuthConfigIDNotEndsWith *string `json:"auth_config_id_not_ends_with,omitempty"`

	// auth config id not in
	AuthConfigIDNotIn []string `json:"auth_config_id_not_in,omitempty"`

	// auth config id not starts with
	AuthConfigIDNotStartsWith *string `json:"auth_config_id_not_starts_with,omitempty"`

	// auth config id starts with
	AuthConfigIDStartsWith *string `json:"auth_config_id_starts_with,omitempty"`

	// display username
	DisplayUsername *string `json:"display_username,omitempty"`

	// display username contains
	DisplayUsernameContains *string `json:"display_username_contains,omitempty"`

	// display username ends with
	DisplayUsernameEndsWith *string `json:"display_username_ends_with,omitempty"`

	// display username gt
	DisplayUsernameGt *string `json:"display_username_gt,omitempty"`

	// display username gte
	DisplayUsernameGte *string `json:"display_username_gte,omitempty"`

	// display username in
	DisplayUsernameIn []string `json:"display_username_in,omitempty"`

	// display username lt
	DisplayUsernameLt *string `json:"display_username_lt,omitempty"`

	// display username lte
	DisplayUsernameLte *string `json:"display_username_lte,omitempty"`

	// display username not
	DisplayUsernameNot *string `json:"display_username_not,omitempty"`

	// display username not contains
	DisplayUsernameNotContains *string `json:"display_username_not_contains,omitempty"`

	// display username not ends with
	DisplayUsernameNotEndsWith *string `json:"display_username_not_ends_with,omitempty"`

	// display username not in
	DisplayUsernameNotIn []string `json:"display_username_not_in,omitempty"`

	// display username not starts with
	DisplayUsernameNotStartsWith *string `json:"display_username_not_starts_with,omitempty"`

	// display username starts with
	DisplayUsernameStartsWith *string `json:"display_username_starts_with,omitempty"`

	// email address
	EmailAddress *string `json:"email_address,omitempty"`

	// email address contains
	EmailAddressContains *string `json:"email_address_contains,omitempty"`

	// email address ends with
	EmailAddressEndsWith *string `json:"email_address_ends_with,omitempty"`

	// email address gt
	EmailAddressGt *string `json:"email_address_gt,omitempty"`

	// email address gte
	EmailAddressGte *string `json:"email_address_gte,omitempty"`

	// email address in
	EmailAddressIn []string `json:"email_address_in,omitempty"`

	// email address lt
	EmailAddressLt *string `json:"email_address_lt,omitempty"`

	// email address lte
	EmailAddressLte *string `json:"email_address_lte,omitempty"`

	// email address not
	EmailAddressNot *string `json:"email_address_not,omitempty"`

	// email address not contains
	EmailAddressNotContains *string `json:"email_address_not_contains,omitempty"`

	// email address not ends with
	EmailAddressNotEndsWith *string `json:"email_address_not_ends_with,omitempty"`

	// email address not in
	EmailAddressNotIn []string `json:"email_address_not_in,omitempty"`

	// email address not starts with
	EmailAddressNotStartsWith *string `json:"email_address_not_starts_with,omitempty"`

	// email address starts with
	EmailAddressStartsWith *string `json:"email_address_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// internal not
	InternalNot *bool `json:"internal_not,omitempty"`

	// ldap dn
	LdapDn *string `json:"ldap_dn,omitempty"`

	// ldap dn contains
	LdapDnContains *string `json:"ldap_dn_contains,omitempty"`

	// ldap dn ends with
	LdapDnEndsWith *string `json:"ldap_dn_ends_with,omitempty"`

	// ldap dn gt
	LdapDnGt *string `json:"ldap_dn_gt,omitempty"`

	// ldap dn gte
	LdapDnGte *string `json:"ldap_dn_gte,omitempty"`

	// ldap dn in
	LdapDnIn []string `json:"ldap_dn_in,omitempty"`

	// ldap dn lt
	LdapDnLt *string `json:"ldap_dn_lt,omitempty"`

	// ldap dn lte
	LdapDnLte *string `json:"ldap_dn_lte,omitempty"`

	// ldap dn not
	LdapDnNot *string `json:"ldap_dn_not,omitempty"`

	// ldap dn not contains
	LdapDnNotContains *string `json:"ldap_dn_not_contains,omitempty"`

	// ldap dn not ends with
	LdapDnNotEndsWith *string `json:"ldap_dn_not_ends_with,omitempty"`

	// ldap dn not in
	LdapDnNotIn []string `json:"ldap_dn_not_in,omitempty"`

	// ldap dn not starts with
	LdapDnNotStartsWith *string `json:"ldap_dn_not_starts_with,omitempty"`

	// ldap dn starts with
	LdapDnStartsWith *string `json:"ldap_dn_starts_with,omitempty"`

	// mobile phone
	MobilePhone *string `json:"mobile_phone,omitempty"`

	// mobile phone contains
	MobilePhoneContains *string `json:"mobile_phone_contains,omitempty"`

	// mobile phone ends with
	MobilePhoneEndsWith *string `json:"mobile_phone_ends_with,omitempty"`

	// mobile phone gt
	MobilePhoneGt *string `json:"mobile_phone_gt,omitempty"`

	// mobile phone gte
	MobilePhoneGte *string `json:"mobile_phone_gte,omitempty"`

	// mobile phone in
	MobilePhoneIn []string `json:"mobile_phone_in,omitempty"`

	// mobile phone lt
	MobilePhoneLt *string `json:"mobile_phone_lt,omitempty"`

	// mobile phone lte
	MobilePhoneLte *string `json:"mobile_phone_lte,omitempty"`

	// mobile phone not
	MobilePhoneNot *string `json:"mobile_phone_not,omitempty"`

	// mobile phone not contains
	MobilePhoneNotContains *string `json:"mobile_phone_not_contains,omitempty"`

	// mobile phone not ends with
	MobilePhoneNotEndsWith *string `json:"mobile_phone_not_ends_with,omitempty"`

	// mobile phone not in
	MobilePhoneNotIn []string `json:"mobile_phone_not_in,omitempty"`

	// mobile phone not starts with
	MobilePhoneNotStartsWith *string `json:"mobile_phone_not_starts_with,omitempty"`

	// mobile phone starts with
	MobilePhoneStartsWith *string `json:"mobile_phone_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// password expired
	PasswordExpired *bool `json:"password_expired,omitempty"`

	// password expired not
	PasswordExpiredNot *bool `json:"password_expired_not,omitempty"`

	// password updated at
	PasswordUpdatedAt *string `json:"password_updated_at,omitempty"`

	// password updated at gt
	PasswordUpdatedAtGt *string `json:"password_updated_at_gt,omitempty"`

	// password updated at gte
	PasswordUpdatedAtGte *string `json:"password_updated_at_gte,omitempty"`

	// password updated at in
	PasswordUpdatedAtIn []string `json:"password_updated_at_in,omitempty"`

	// password updated at lt
	PasswordUpdatedAtLt *string `json:"password_updated_at_lt,omitempty"`

	// password updated at lte
	PasswordUpdatedAtLte *string `json:"password_updated_at_lte,omitempty"`

	// password updated at not
	PasswordUpdatedAtNot *string `json:"password_updated_at_not,omitempty"`

	// password updated at not in
	PasswordUpdatedAtNotIn []string `json:"password_updated_at_not_in,omitempty"`

	// role
	Role *UserRole `json:"role,omitempty"`

	// role in
	RoleIn []UserRole `json:"role_in,omitempty"`

	// role not
	RoleNot *UserRole `json:"role_not,omitempty"`

	// role not in
	RoleNotIn []UserRole `json:"role_not_in,omitempty"`

	// roles every
	RolesEvery *UserRoleNextWhereInput `json:"roles_every,omitempty"`

	// roles none
	RolesNone *UserRoleNextWhereInput `json:"roles_none,omitempty"`

	// roles some
	RolesSome *UserRoleNextWhereInput `json:"roles_some,omitempty"`

	// source
	Source *UserSource `json:"source,omitempty"`

	// source in
	SourceIn []UserSource `json:"source_in,omitempty"`

	// source not
	SourceNot *UserSource `json:"source_not,omitempty"`

	// source not in
	SourceNotIn []UserSource `json:"source_not_in,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// username contains
	UsernameContains *string `json:"username_contains,omitempty"`

	// username ends with
	UsernameEndsWith *string `json:"username_ends_with,omitempty"`

	// username gt
	UsernameGt *string `json:"username_gt,omitempty"`

	// username gte
	UsernameGte *string `json:"username_gte,omitempty"`

	// username in
	UsernameIn []string `json:"username_in,omitempty"`

	// username lt
	UsernameLt *string `json:"username_lt,omitempty"`

	// username lte
	UsernameLte *string `json:"username_lte,omitempty"`

	// username not
	UsernameNot *string `json:"username_not,omitempty"`

	// username not contains
	UsernameNotContains *string `json:"username_not_contains,omitempty"`

	// username not ends with
	UsernameNotEndsWith *string `json:"username_not_ends_with,omitempty"`

	// username not in
	UsernameNotIn []string `json:"username_not_in,omitempty"`

	// username not starts with
	UsernameNotStartsWith *string `json:"username_not_starts_with,omitempty"`

	// username starts with
	UsernameStartsWith *string `json:"username_starts_with,omitempty"`

	MarshalOpts *UserWhereInputMarshalOpts `json:"-"`
}

type UserWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	AuthConfigID_Explicit_Null_When_Empty bool

	AuthConfigIDContains_Explicit_Null_When_Empty bool

	AuthConfigIDEndsWith_Explicit_Null_When_Empty bool

	AuthConfigIDGt_Explicit_Null_When_Empty bool

	AuthConfigIDGte_Explicit_Null_When_Empty bool

	AuthConfigIDIn_Explicit_Null_When_Empty bool

	AuthConfigIDLt_Explicit_Null_When_Empty bool

	AuthConfigIDLte_Explicit_Null_When_Empty bool

	AuthConfigIDNot_Explicit_Null_When_Empty bool

	AuthConfigIDNotContains_Explicit_Null_When_Empty bool

	AuthConfigIDNotEndsWith_Explicit_Null_When_Empty bool

	AuthConfigIDNotIn_Explicit_Null_When_Empty bool

	AuthConfigIDNotStartsWith_Explicit_Null_When_Empty bool

	AuthConfigIDStartsWith_Explicit_Null_When_Empty bool

	DisplayUsername_Explicit_Null_When_Empty bool

	DisplayUsernameContains_Explicit_Null_When_Empty bool

	DisplayUsernameEndsWith_Explicit_Null_When_Empty bool

	DisplayUsernameGt_Explicit_Null_When_Empty bool

	DisplayUsernameGte_Explicit_Null_When_Empty bool

	DisplayUsernameIn_Explicit_Null_When_Empty bool

	DisplayUsernameLt_Explicit_Null_When_Empty bool

	DisplayUsernameLte_Explicit_Null_When_Empty bool

	DisplayUsernameNot_Explicit_Null_When_Empty bool

	DisplayUsernameNotContains_Explicit_Null_When_Empty bool

	DisplayUsernameNotEndsWith_Explicit_Null_When_Empty bool

	DisplayUsernameNotIn_Explicit_Null_When_Empty bool

	DisplayUsernameNotStartsWith_Explicit_Null_When_Empty bool

	DisplayUsernameStartsWith_Explicit_Null_When_Empty bool

	EmailAddress_Explicit_Null_When_Empty bool

	EmailAddressContains_Explicit_Null_When_Empty bool

	EmailAddressEndsWith_Explicit_Null_When_Empty bool

	EmailAddressGt_Explicit_Null_When_Empty bool

	EmailAddressGte_Explicit_Null_When_Empty bool

	EmailAddressIn_Explicit_Null_When_Empty bool

	EmailAddressLt_Explicit_Null_When_Empty bool

	EmailAddressLte_Explicit_Null_When_Empty bool

	EmailAddressNot_Explicit_Null_When_Empty bool

	EmailAddressNotContains_Explicit_Null_When_Empty bool

	EmailAddressNotEndsWith_Explicit_Null_When_Empty bool

	EmailAddressNotIn_Explicit_Null_When_Empty bool

	EmailAddressNotStartsWith_Explicit_Null_When_Empty bool

	EmailAddressStartsWith_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Internal_Explicit_Null_When_Empty bool

	InternalNot_Explicit_Null_When_Empty bool

	LdapDn_Explicit_Null_When_Empty bool

	LdapDnContains_Explicit_Null_When_Empty bool

	LdapDnEndsWith_Explicit_Null_When_Empty bool

	LdapDnGt_Explicit_Null_When_Empty bool

	LdapDnGte_Explicit_Null_When_Empty bool

	LdapDnIn_Explicit_Null_When_Empty bool

	LdapDnLt_Explicit_Null_When_Empty bool

	LdapDnLte_Explicit_Null_When_Empty bool

	LdapDnNot_Explicit_Null_When_Empty bool

	LdapDnNotContains_Explicit_Null_When_Empty bool

	LdapDnNotEndsWith_Explicit_Null_When_Empty bool

	LdapDnNotIn_Explicit_Null_When_Empty bool

	LdapDnNotStartsWith_Explicit_Null_When_Empty bool

	LdapDnStartsWith_Explicit_Null_When_Empty bool

	MobilePhone_Explicit_Null_When_Empty bool

	MobilePhoneContains_Explicit_Null_When_Empty bool

	MobilePhoneEndsWith_Explicit_Null_When_Empty bool

	MobilePhoneGt_Explicit_Null_When_Empty bool

	MobilePhoneGte_Explicit_Null_When_Empty bool

	MobilePhoneIn_Explicit_Null_When_Empty bool

	MobilePhoneLt_Explicit_Null_When_Empty bool

	MobilePhoneLte_Explicit_Null_When_Empty bool

	MobilePhoneNot_Explicit_Null_When_Empty bool

	MobilePhoneNotContains_Explicit_Null_When_Empty bool

	MobilePhoneNotEndsWith_Explicit_Null_When_Empty bool

	MobilePhoneNotIn_Explicit_Null_When_Empty bool

	MobilePhoneNotStartsWith_Explicit_Null_When_Empty bool

	MobilePhoneStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	PasswordExpired_Explicit_Null_When_Empty bool

	PasswordExpiredNot_Explicit_Null_When_Empty bool

	PasswordUpdatedAt_Explicit_Null_When_Empty bool

	PasswordUpdatedAtGt_Explicit_Null_When_Empty bool

	PasswordUpdatedAtGte_Explicit_Null_When_Empty bool

	PasswordUpdatedAtIn_Explicit_Null_When_Empty bool

	PasswordUpdatedAtLt_Explicit_Null_When_Empty bool

	PasswordUpdatedAtLte_Explicit_Null_When_Empty bool

	PasswordUpdatedAtNot_Explicit_Null_When_Empty bool

	PasswordUpdatedAtNotIn_Explicit_Null_When_Empty bool

	Role_Explicit_Null_When_Empty bool

	RoleIn_Explicit_Null_When_Empty bool

	RoleNot_Explicit_Null_When_Empty bool

	RoleNotIn_Explicit_Null_When_Empty bool

	RolesEvery_Explicit_Null_When_Empty bool

	RolesNone_Explicit_Null_When_Empty bool

	RolesSome_Explicit_Null_When_Empty bool

	Source_Explicit_Null_When_Empty bool

	SourceIn_Explicit_Null_When_Empty bool

	SourceNot_Explicit_Null_When_Empty bool

	SourceNotIn_Explicit_Null_When_Empty bool

	Username_Explicit_Null_When_Empty bool

	UsernameContains_Explicit_Null_When_Empty bool

	UsernameEndsWith_Explicit_Null_When_Empty bool

	UsernameGt_Explicit_Null_When_Empty bool

	UsernameGte_Explicit_Null_When_Empty bool

	UsernameIn_Explicit_Null_When_Empty bool

	UsernameLt_Explicit_Null_When_Empty bool

	UsernameLte_Explicit_Null_When_Empty bool

	UsernameNot_Explicit_Null_When_Empty bool

	UsernameNotContains_Explicit_Null_When_Empty bool

	UsernameNotEndsWith_Explicit_Null_When_Empty bool

	UsernameNotIn_Explicit_Null_When_Empty bool

	UsernameNotStartsWith_Explicit_Null_When_Empty bool

	UsernameStartsWith_Explicit_Null_When_Empty bool
}

func (m UserWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field auth_config_id
	if m.AuthConfigID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id\":")
		bytes, err := swag.WriteJSON(m.AuthConfigID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id\":null")
		first = false
	}

	// handle nullable field auth_config_id_contains
	if m.AuthConfigIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_contains\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_contains\":null")
		first = false
	}

	// handle nullable field auth_config_id_ends_with
	if m.AuthConfigIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_ends_with\":null")
		first = false
	}

	// handle nullable field auth_config_id_gt
	if m.AuthConfigIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_gt\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_gt\":null")
		first = false
	}

	// handle nullable field auth_config_id_gte
	if m.AuthConfigIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_gte\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_gte\":null")
		first = false
	}

	// handle non nullable field auth_config_id_in with omitempty
	if swag.IsZero(m.AuthConfigIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_in\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field auth_config_id_lt
	if m.AuthConfigIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_lt\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_lt\":null")
		first = false
	}

	// handle nullable field auth_config_id_lte
	if m.AuthConfigIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_lte\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_lte\":null")
		first = false
	}

	// handle nullable field auth_config_id_not
	if m.AuthConfigIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not\":null")
		first = false
	}

	// handle nullable field auth_config_id_not_contains
	if m.AuthConfigIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_contains\":null")
		first = false
	}

	// handle nullable field auth_config_id_not_ends_with
	if m.AuthConfigIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field auth_config_id_not_in with omitempty
	if swag.IsZero(m.AuthConfigIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_in\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field auth_config_id_not_starts_with
	if m.AuthConfigIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field auth_config_id_starts_with
	if m.AuthConfigIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.AuthConfigIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthConfigIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_config_id_starts_with\":null")
		first = false
	}

	// handle nullable field display_username
	if m.DisplayUsername != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username\":")
		bytes, err := swag.WriteJSON(m.DisplayUsername)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsername_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username\":null")
		first = false
	}

	// handle nullable field display_username_contains
	if m.DisplayUsernameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_contains\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_contains\":null")
		first = false
	}

	// handle nullable field display_username_ends_with
	if m.DisplayUsernameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_ends_with\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_ends_with\":null")
		first = false
	}

	// handle nullable field display_username_gt
	if m.DisplayUsernameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_gt\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_gt\":null")
		first = false
	}

	// handle nullable field display_username_gte
	if m.DisplayUsernameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_gte\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_gte\":null")
		first = false
	}

	// handle non nullable field display_username_in with omitempty
	if swag.IsZero(m.DisplayUsernameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_in\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field display_username_lt
	if m.DisplayUsernameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_lt\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_lt\":null")
		first = false
	}

	// handle nullable field display_username_lte
	if m.DisplayUsernameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_lte\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_lte\":null")
		first = false
	}

	// handle nullable field display_username_not
	if m.DisplayUsernameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not\":null")
		first = false
	}

	// handle nullable field display_username_not_contains
	if m.DisplayUsernameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_contains\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_contains\":null")
		first = false
	}

	// handle nullable field display_username_not_ends_with
	if m.DisplayUsernameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_ends_with\":null")
		first = false
	}

	// handle non nullable field display_username_not_in with omitempty
	if swag.IsZero(m.DisplayUsernameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_in\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field display_username_not_starts_with
	if m.DisplayUsernameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_not_starts_with\":null")
		first = false
	}

	// handle nullable field display_username_starts_with
	if m.DisplayUsernameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_starts_with\":")
		bytes, err := swag.WriteJSON(m.DisplayUsernameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisplayUsernameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"display_username_starts_with\":null")
		first = false
	}

	// handle nullable field email_address
	if m.EmailAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address\":")
		bytes, err := swag.WriteJSON(m.EmailAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address\":null")
		first = false
	}

	// handle nullable field email_address_contains
	if m.EmailAddressContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_contains\":")
		bytes, err := swag.WriteJSON(m.EmailAddressContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_contains\":null")
		first = false
	}

	// handle nullable field email_address_ends_with
	if m.EmailAddressEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_ends_with\":")
		bytes, err := swag.WriteJSON(m.EmailAddressEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_ends_with\":null")
		first = false
	}

	// handle nullable field email_address_gt
	if m.EmailAddressGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_gt\":")
		bytes, err := swag.WriteJSON(m.EmailAddressGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_gt\":null")
		first = false
	}

	// handle nullable field email_address_gte
	if m.EmailAddressGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_gte\":")
		bytes, err := swag.WriteJSON(m.EmailAddressGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_gte\":null")
		first = false
	}

	// handle non nullable field email_address_in with omitempty
	if swag.IsZero(m.EmailAddressIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_in\":")
		bytes, err := swag.WriteJSON(m.EmailAddressIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field email_address_lt
	if m.EmailAddressLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_lt\":")
		bytes, err := swag.WriteJSON(m.EmailAddressLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_lt\":null")
		first = false
	}

	// handle nullable field email_address_lte
	if m.EmailAddressLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_lte\":")
		bytes, err := swag.WriteJSON(m.EmailAddressLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_lte\":null")
		first = false
	}

	// handle nullable field email_address_not
	if m.EmailAddressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not\":")
		bytes, err := swag.WriteJSON(m.EmailAddressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not\":null")
		first = false
	}

	// handle nullable field email_address_not_contains
	if m.EmailAddressNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_contains\":")
		bytes, err := swag.WriteJSON(m.EmailAddressNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_contains\":null")
		first = false
	}

	// handle nullable field email_address_not_ends_with
	if m.EmailAddressNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.EmailAddressNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_ends_with\":null")
		first = false
	}

	// handle non nullable field email_address_not_in with omitempty
	if swag.IsZero(m.EmailAddressNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_in\":")
		bytes, err := swag.WriteJSON(m.EmailAddressNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field email_address_not_starts_with
	if m.EmailAddressNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.EmailAddressNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_not_starts_with\":null")
		first = false
	}

	// handle nullable field email_address_starts_with
	if m.EmailAddressStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_starts_with\":")
		bytes, err := swag.WriteJSON(m.EmailAddressStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailAddressStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_address_starts_with\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field internal
	if m.Internal != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":")
		bytes, err := swag.WriteJSON(m.Internal)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Internal_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":null")
		first = false
	}

	// handle nullable field internal_not
	if m.InternalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal_not\":")
		bytes, err := swag.WriteJSON(m.InternalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InternalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal_not\":null")
		first = false
	}

	// handle nullable field ldap_dn
	if m.LdapDn != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn\":")
		bytes, err := swag.WriteJSON(m.LdapDn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDn_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn\":null")
		first = false
	}

	// handle nullable field ldap_dn_contains
	if m.LdapDnContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_contains\":")
		bytes, err := swag.WriteJSON(m.LdapDnContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_contains\":null")
		first = false
	}

	// handle nullable field ldap_dn_ends_with
	if m.LdapDnEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_ends_with\":")
		bytes, err := swag.WriteJSON(m.LdapDnEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_ends_with\":null")
		first = false
	}

	// handle nullable field ldap_dn_gt
	if m.LdapDnGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_gt\":")
		bytes, err := swag.WriteJSON(m.LdapDnGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_gt\":null")
		first = false
	}

	// handle nullable field ldap_dn_gte
	if m.LdapDnGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_gte\":")
		bytes, err := swag.WriteJSON(m.LdapDnGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_gte\":null")
		first = false
	}

	// handle non nullable field ldap_dn_in with omitempty
	if swag.IsZero(m.LdapDnIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_in\":")
		bytes, err := swag.WriteJSON(m.LdapDnIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ldap_dn_lt
	if m.LdapDnLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_lt\":")
		bytes, err := swag.WriteJSON(m.LdapDnLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_lt\":null")
		first = false
	}

	// handle nullable field ldap_dn_lte
	if m.LdapDnLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_lte\":")
		bytes, err := swag.WriteJSON(m.LdapDnLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_lte\":null")
		first = false
	}

	// handle nullable field ldap_dn_not
	if m.LdapDnNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not\":")
		bytes, err := swag.WriteJSON(m.LdapDnNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not\":null")
		first = false
	}

	// handle nullable field ldap_dn_not_contains
	if m.LdapDnNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_contains\":")
		bytes, err := swag.WriteJSON(m.LdapDnNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_contains\":null")
		first = false
	}

	// handle nullable field ldap_dn_not_ends_with
	if m.LdapDnNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LdapDnNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_ends_with\":null")
		first = false
	}

	// handle non nullable field ldap_dn_not_in with omitempty
	if swag.IsZero(m.LdapDnNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_in\":")
		bytes, err := swag.WriteJSON(m.LdapDnNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ldap_dn_not_starts_with
	if m.LdapDnNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LdapDnNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_not_starts_with\":null")
		first = false
	}

	// handle nullable field ldap_dn_starts_with
	if m.LdapDnStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_starts_with\":")
		bytes, err := swag.WriteJSON(m.LdapDnStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LdapDnStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ldap_dn_starts_with\":null")
		first = false
	}

	// handle nullable field mobile_phone
	if m.MobilePhone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone\":")
		bytes, err := swag.WriteJSON(m.MobilePhone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone\":null")
		first = false
	}

	// handle nullable field mobile_phone_contains
	if m.MobilePhoneContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_contains\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_contains\":null")
		first = false
	}

	// handle nullable field mobile_phone_ends_with
	if m.MobilePhoneEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_ends_with\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_ends_with\":null")
		first = false
	}

	// handle nullable field mobile_phone_gt
	if m.MobilePhoneGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_gt\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_gt\":null")
		first = false
	}

	// handle nullable field mobile_phone_gte
	if m.MobilePhoneGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_gte\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_gte\":null")
		first = false
	}

	// handle non nullable field mobile_phone_in with omitempty
	if swag.IsZero(m.MobilePhoneIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_in\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mobile_phone_lt
	if m.MobilePhoneLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_lt\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_lt\":null")
		first = false
	}

	// handle nullable field mobile_phone_lte
	if m.MobilePhoneLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_lte\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_lte\":null")
		first = false
	}

	// handle nullable field mobile_phone_not
	if m.MobilePhoneNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not\":null")
		first = false
	}

	// handle nullable field mobile_phone_not_contains
	if m.MobilePhoneNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_contains\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_contains\":null")
		first = false
	}

	// handle nullable field mobile_phone_not_ends_with
	if m.MobilePhoneNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_ends_with\":null")
		first = false
	}

	// handle non nullable field mobile_phone_not_in with omitempty
	if swag.IsZero(m.MobilePhoneNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_in\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mobile_phone_not_starts_with
	if m.MobilePhoneNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_not_starts_with\":null")
		first = false
	}

	// handle nullable field mobile_phone_starts_with
	if m.MobilePhoneStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_starts_with\":")
		bytes, err := swag.WriteJSON(m.MobilePhoneStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MobilePhoneStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mobile_phone_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field password_expired
	if m.PasswordExpired != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expired\":")
		bytes, err := swag.WriteJSON(m.PasswordExpired)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordExpired_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expired\":null")
		first = false
	}

	// handle nullable field password_expired_not
	if m.PasswordExpiredNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expired_not\":")
		bytes, err := swag.WriteJSON(m.PasswordExpiredNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordExpiredNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expired_not\":null")
		first = false
	}

	// handle nullable field password_updated_at
	if m.PasswordUpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at\":null")
		first = false
	}

	// handle nullable field password_updated_at_gt
	if m.PasswordUpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_gt\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_gt\":null")
		first = false
	}

	// handle nullable field password_updated_at_gte
	if m.PasswordUpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_gte\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_gte\":null")
		first = false
	}

	// handle non nullable field password_updated_at_in with omitempty
	if swag.IsZero(m.PasswordUpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_in\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field password_updated_at_lt
	if m.PasswordUpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_lt\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_lt\":null")
		first = false
	}

	// handle nullable field password_updated_at_lte
	if m.PasswordUpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_lte\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_lte\":null")
		first = false
	}

	// handle nullable field password_updated_at_not
	if m.PasswordUpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_not\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordUpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_not\":null")
		first = false
	}

	// handle non nullable field password_updated_at_not_in with omitempty
	if swag.IsZero(m.PasswordUpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_updated_at_not_in\":")
		bytes, err := swag.WriteJSON(m.PasswordUpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field role
	if m.Role != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role\":")
		bytes, err := swag.WriteJSON(m.Role)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Role_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role\":null")
		first = false
	}

	// handle non nullable field role_in with omitempty
	if swag.IsZero(m.RoleIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_in\":")
		bytes, err := swag.WriteJSON(m.RoleIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field role_not
	if m.RoleNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_not\":")
		bytes, err := swag.WriteJSON(m.RoleNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RoleNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_not\":null")
		first = false
	}

	// handle non nullable field role_not_in with omitempty
	if swag.IsZero(m.RoleNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"role_not_in\":")
		bytes, err := swag.WriteJSON(m.RoleNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field roles_every
	if m.RolesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_every\":")
		bytes, err := swag.WriteJSON(m.RolesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RolesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_every\":null")
		first = false
	}

	// handle nullable field roles_none
	if m.RolesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_none\":")
		bytes, err := swag.WriteJSON(m.RolesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RolesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_none\":null")
		first = false
	}

	// handle nullable field roles_some
	if m.RolesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_some\":")
		bytes, err := swag.WriteJSON(m.RolesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RolesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"roles_some\":null")
		first = false
	}

	// handle nullable field source
	if m.Source != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source\":")
		bytes, err := swag.WriteJSON(m.Source)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Source_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source\":null")
		first = false
	}

	// handle non nullable field source_in with omitempty
	if swag.IsZero(m.SourceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source_in\":")
		bytes, err := swag.WriteJSON(m.SourceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field source_not
	if m.SourceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source_not\":")
		bytes, err := swag.WriteJSON(m.SourceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SourceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source_not\":null")
		first = false
	}

	// handle non nullable field source_not_in with omitempty
	if swag.IsZero(m.SourceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"source_not_in\":")
		bytes, err := swag.WriteJSON(m.SourceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username
	if m.Username != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":")
		bytes, err := swag.WriteJSON(m.Username)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Username_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":null")
		first = false
	}

	// handle nullable field username_contains
	if m.UsernameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":null")
		first = false
	}

	// handle nullable field username_ends_with
	if m.UsernameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":null")
		first = false
	}

	// handle nullable field username_gt
	if m.UsernameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":")
		bytes, err := swag.WriteJSON(m.UsernameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":null")
		first = false
	}

	// handle nullable field username_gte
	if m.UsernameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":")
		bytes, err := swag.WriteJSON(m.UsernameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":null")
		first = false
	}

	// handle non nullable field username_in with omitempty
	if swag.IsZero(m.UsernameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_in\":")
		bytes, err := swag.WriteJSON(m.UsernameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_lt
	if m.UsernameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":")
		bytes, err := swag.WriteJSON(m.UsernameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":null")
		first = false
	}

	// handle nullable field username_lte
	if m.UsernameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":")
		bytes, err := swag.WriteJSON(m.UsernameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":null")
		first = false
	}

	// handle nullable field username_not
	if m.UsernameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":")
		bytes, err := swag.WriteJSON(m.UsernameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":null")
		first = false
	}

	// handle nullable field username_not_contains
	if m.UsernameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":null")
		first = false
	}

	// handle nullable field username_not_ends_with
	if m.UsernameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":null")
		first = false
	}

	// handle non nullable field username_not_in with omitempty
	if swag.IsZero(m.UsernameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_in\":")
		bytes, err := swag.WriteJSON(m.UsernameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_not_starts_with
	if m.UsernameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":null")
		first = false
	}

	// handle nullable field username_starts_with
	if m.UsernameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this user where input
func (m *UserWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateRoleIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleIn); i++ {

		if err := m.RoleIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) validateRoleNot(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleNot) { // not required
		return nil
	}

	if m.RoleNot != nil {
		if err := m.RoleNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateRoleNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleNotIn); i++ {

		if err := m.RoleNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) validateRolesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesEvery) { // not required
		return nil
	}

	if m.RolesEvery != nil {
		if err := m.RolesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_every")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateRolesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesNone) { // not required
		return nil
	}

	if m.RolesNone != nil {
		if err := m.RolesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_none")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateRolesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.RolesSome) { // not required
		return nil
	}

	if m.RolesSome != nil {
		if err := m.RolesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_some")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateSourceIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceIn); i++ {

		if err := m.SourceIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) validateSourceNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceNot) { // not required
		return nil
	}

	if m.SourceNot != nil {
		if err := m.SourceNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) validateSourceNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceNotIn); i++ {

		if err := m.SourceNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this user where input based on the context it is used
func (m *UserWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRolesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {
		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateRoleIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoleIn); i++ {

		if err := m.RoleIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateRoleNot(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleNot != nil {
		if err := m.RoleNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateRoleNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoleNotIn); i++ {

		if err := m.RoleNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateRolesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.RolesEvery != nil {
		if err := m.RolesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_every")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateRolesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.RolesNone != nil {
		if err := m.RolesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_none")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateRolesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.RolesSome != nil {
		if err := m.RolesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles_some")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateSourceIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceIn); i++ {

		if err := m.SourceIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserWhereInput) contextValidateSourceNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceNot != nil {
		if err := m.SourceNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserWhereInput) contextValidateSourceNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceNotIn); i++ {

		if err := m.SourceNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserWhereInput) UnmarshalBinary(b []byte) error {
	var res UserWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
