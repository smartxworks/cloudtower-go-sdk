// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PciDeviceType pci device type
//
// swagger:model PciDeviceType
type PciDeviceType string

func NewPciDeviceType(value PciDeviceType) *PciDeviceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PciDeviceType.
func (m PciDeviceType) Pointer() *PciDeviceType {
	return &m
}

const (

	// PciDeviceTypeHSM captures enum value "HSM"
	PciDeviceTypeHSM PciDeviceType = "HSM"
)

// for schema
var pciDeviceTypeEnum []interface{}

func init() {
	var res []PciDeviceType
	if err := json.Unmarshal([]byte(`["HSM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pciDeviceTypeEnum = append(pciDeviceTypeEnum, v)
	}
}

func (m PciDeviceType) validatePciDeviceTypeEnum(path, location string, value PciDeviceType) error {
	if err := validate.EnumCase(path, location, value, pciDeviceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pci device type
func (m PciDeviceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePciDeviceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pci device type based on context it is used
func (m PciDeviceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
