// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PermanentFailoverTargetExecutionWhereInput permanent failover target execution where input
//
// swagger:model PermanentFailoverTargetExecutionWhereInput
type PermanentFailoverTargetExecutionWhereInput struct {

	// a n d
	AND []*PermanentFailoverTargetExecutionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*PermanentFailoverTargetExecutionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*PermanentFailoverTargetExecutionWhereInput `json:"OR,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// external cloudtower
	ExternalCloudtower *ExternalCloudTowerWhereInput `json:"external_cloudtower,omitempty"`

	// finished at
	FinishedAt *string `json:"finished_at,omitempty"`

	// finished at gt
	FinishedAtGt *string `json:"finished_at_gt,omitempty"`

	// finished at gte
	FinishedAtGte *string `json:"finished_at_gte,omitempty"`

	// finished at in
	FinishedAtIn []string `json:"finished_at_in,omitempty"`

	// finished at lt
	FinishedAtLt *string `json:"finished_at_lt,omitempty"`

	// finished at lte
	FinishedAtLte *string `json:"finished_at_lte,omitempty"`

	// finished at not
	FinishedAtNot *string `json:"finished_at_not,omitempty"`

	// finished at not in
	FinishedAtNotIn []string `json:"finished_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// keep snapshot
	KeepSnapshot *bool `json:"keep_snapshot,omitempty"`

	// keep snapshot not
	KeepSnapshotNot *bool `json:"keep_snapshot_not,omitempty"`

	// permanent failover execution
	PermanentFailoverExecution *PermanentFailoverExecutionWhereInput `json:"permanent_failover_execution,omitempty"`

	// phase
	Phase *BackupJobPhase `json:"phase,omitempty"`

	// phase in
	PhaseIn []BackupJobPhase `json:"phase_in,omitempty"`

	// phase not
	PhaseNot *BackupJobPhase `json:"phase_not,omitempty"`

	// phase not in
	PhaseNotIn []BackupJobPhase `json:"phase_not_in,omitempty"`

	// replica vm
	ReplicaVM *ReplicaVMWhereInput `json:"replica_vm,omitempty"`

	// resource version
	ResourceVersion *int32 `json:"resource_version,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	MarshalOpts *PermanentFailoverTargetExecutionWhereInputMarshalOpts `json:"-"`
}

type PermanentFailoverTargetExecutionWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	FinishedAt_Explicit_Null_When_Empty bool

	FinishedAtGt_Explicit_Null_When_Empty bool

	FinishedAtGte_Explicit_Null_When_Empty bool

	FinishedAtIn_Explicit_Null_When_Empty bool

	FinishedAtLt_Explicit_Null_When_Empty bool

	FinishedAtLte_Explicit_Null_When_Empty bool

	FinishedAtNot_Explicit_Null_When_Empty bool

	FinishedAtNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	KeepSnapshot_Explicit_Null_When_Empty bool

	KeepSnapshotNot_Explicit_Null_When_Empty bool

	PermanentFailoverExecution_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	PhaseIn_Explicit_Null_When_Empty bool

	PhaseNot_Explicit_Null_When_Empty bool

	PhaseNotIn_Explicit_Null_When_Empty bool

	ReplicaVM_Explicit_Null_When_Empty bool

	ResourceVersion_Explicit_Null_When_Empty bool

	ResourceVersionGt_Explicit_Null_When_Empty bool

	ResourceVersionGte_Explicit_Null_When_Empty bool

	ResourceVersionIn_Explicit_Null_When_Empty bool

	ResourceVersionLt_Explicit_Null_When_Empty bool

	ResourceVersionLte_Explicit_Null_When_Empty bool

	ResourceVersionNot_Explicit_Null_When_Empty bool

	ResourceVersionNotIn_Explicit_Null_When_Empty bool

	StartedAt_Explicit_Null_When_Empty bool

	StartedAtGt_Explicit_Null_When_Empty bool

	StartedAtGte_Explicit_Null_When_Empty bool

	StartedAtIn_Explicit_Null_When_Empty bool

	StartedAtLt_Explicit_Null_When_Empty bool

	StartedAtLte_Explicit_Null_When_Empty bool

	StartedAtNot_Explicit_Null_When_Empty bool

	StartedAtNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool
}

func (m PermanentFailoverTargetExecutionWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field finished_at
	if m.FinishedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":")
		bytes, err := swag.WriteJSON(m.FinishedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":null")
		first = false
	}

	// handle nullable field finished_at_gt
	if m.FinishedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":null")
		first = false
	}

	// handle nullable field finished_at_gte
	if m.FinishedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":null")
		first = false
	}

	// handle non nullable field finished_at_in with omitempty
	if !swag.IsZero(m.FinishedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at_lt
	if m.FinishedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":null")
		first = false
	}

	// handle nullable field finished_at_lte
	if m.FinishedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":null")
		first = false
	}

	// handle nullable field finished_at_not
	if m.FinishedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":null")
		first = false
	}

	// handle non nullable field finished_at_not_in with omitempty
	if !swag.IsZero(m.FinishedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field keep_snapshot
	if m.KeepSnapshot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_snapshot\":")
		bytes, err := swag.WriteJSON(m.KeepSnapshot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepSnapshot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_snapshot\":null")
		first = false
	}

	// handle nullable field keep_snapshot_not
	if m.KeepSnapshotNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_snapshot_not\":")
		bytes, err := swag.WriteJSON(m.KeepSnapshotNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepSnapshotNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_snapshot_not\":null")
		first = false
	}

	// handle nullable field permanent_failover_execution
	if m.PermanentFailoverExecution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle non nullable field phase_in with omitempty
	if !swag.IsZero(m.PhaseIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_in\":")
		bytes, err := swag.WriteJSON(m.PhaseIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field phase_not
	if m.PhaseNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":")
		bytes, err := swag.WriteJSON(m.PhaseNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhaseNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not\":null")
		first = false
	}

	// handle non nullable field phase_not_in with omitempty
	if !swag.IsZero(m.PhaseNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase_not_in\":")
		bytes, err := swag.WriteJSON(m.PhaseNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_vm
	if m.ReplicaVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vm\":")
		bytes, err := swag.WriteJSON(m.ReplicaVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vm\":null")
		first = false
	}

	// handle nullable field resource_version
	if m.ResourceVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":")
		bytes, err := swag.WriteJSON(m.ResourceVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":null")
		first = false
	}

	// handle nullable field resource_version_gt
	if m.ResourceVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":null")
		first = false
	}

	// handle nullable field resource_version_gte
	if m.ResourceVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":null")
		first = false
	}

	// handle non nullable field resource_version_in with omitempty
	if !swag.IsZero(m.ResourceVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_version_lt
	if m.ResourceVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":null")
		first = false
	}

	// handle nullable field resource_version_lte
	if m.ResourceVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":null")
		first = false
	}

	// handle nullable field resource_version_not
	if m.ResourceVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":null")
		first = false
	}

	// handle non nullable field resource_version_not_in with omitempty
	if !swag.IsZero(m.ResourceVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at
	if m.StartedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":")
		bytes, err := swag.WriteJSON(m.StartedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":null")
		first = false
	}

	// handle nullable field started_at_gt
	if m.StartedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":")
		bytes, err := swag.WriteJSON(m.StartedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":null")
		first = false
	}

	// handle nullable field started_at_gte
	if m.StartedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":")
		bytes, err := swag.WriteJSON(m.StartedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":null")
		first = false
	}

	// handle non nullable field started_at_in with omitempty
	if !swag.IsZero(m.StartedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at_lt
	if m.StartedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":")
		bytes, err := swag.WriteJSON(m.StartedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":null")
		first = false
	}

	// handle nullable field started_at_lte
	if m.StartedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":")
		bytes, err := swag.WriteJSON(m.StartedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":null")
		first = false
	}

	// handle nullable field started_at_not
	if m.StartedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":")
		bytes, err := swag.WriteJSON(m.StartedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":null")
		first = false
	}

	// handle non nullable field started_at_not_in with omitempty
	if !swag.IsZero(m.StartedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this permanent failover target execution where input
func (m *PermanentFailoverTargetExecutionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validatePermanentFailoverExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecution) { // not required
		return nil
	}

	if m.PermanentFailoverExecution != nil {
		if err := m.PermanentFailoverExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validatePhaseIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validatePhaseNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNot) { // not required
		return nil
	}

	if m.PhaseNot != nil {
		if err := m.PhaseNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validatePhaseNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) validateReplicaVM(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVM) { // not required
		return nil
	}

	if m.ReplicaVM != nil {
		if err := m.ReplicaVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this permanent failover target execution where input based on the context it is used
func (m *PermanentFailoverTargetExecutionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidatePermanentFailoverExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecution != nil {
		if err := m.PermanentFailoverExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_execution")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidatePhaseIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidatePhaseNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PhaseNot != nil {
		if err := m.PhaseNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidatePhaseNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PermanentFailoverTargetExecutionWhereInput) contextValidateReplicaVM(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVM != nil {
		if err := m.ReplicaVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PermanentFailoverTargetExecutionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PermanentFailoverTargetExecutionWhereInput) UnmarshalBinary(b []byte) error {
	var res PermanentFailoverTargetExecutionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
