// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExitMaintenanceModeResult exit maintenance mode result
//
// swagger:model ExitMaintenanceModeResult
type ExitMaintenanceModeResult struct {

	// live migrate vms
	// Required: true
	LiveMigrateVms []*MaintenanceModeVMInfo `json:"liveMigrateVms"`

	// offline migrate vms
	// Required: true
	OfflineMigrateVms []*MaintenanceModeVMInfo `json:"offlineMigrateVms"`

	// shut down vms
	// Required: true
	ShutDownVms []*MaintenanceModeVMInfo `json:"shutDownVms"`

	MarshalOpts *ExitMaintenanceModeResultMarshalOpts `json:"-"`
}

type ExitMaintenanceModeResultMarshalOpts struct {
	LiveMigrateVms_Explicit_Null_When_Empty bool

	OfflineMigrateVms_Explicit_Null_When_Empty bool

	ShutDownVms_Explicit_Null_When_Empty bool
}

func (m ExitMaintenanceModeResult) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field liveMigrateVms without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"liveMigrateVms\":")
	{
		bytes, err := swag.WriteJSON(m.LiveMigrateVms)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle non nullable field offlineMigrateVms without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"offlineMigrateVms\":")
	{
		bytes, err := swag.WriteJSON(m.OfflineMigrateVms)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle non nullable field shutDownVms without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"shutDownVms\":")
	{
		bytes, err := swag.WriteJSON(m.ShutDownVms)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this exit maintenance mode result
func (m *ExitMaintenanceModeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLiveMigrateVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineMigrateVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShutDownVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExitMaintenanceModeResult) validateLiveMigrateVms(formats strfmt.Registry) error {

	if err := validate.Required("liveMigrateVms", "body", m.LiveMigrateVms); err != nil {
		return err
	}

	for i := 0; i < len(m.LiveMigrateVms); i++ {
		if swag.IsZero(m.LiveMigrateVms[i]) { // not required
			continue
		}

		if m.LiveMigrateVms[i] != nil {
			if err := m.LiveMigrateVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("liveMigrateVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("liveMigrateVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExitMaintenanceModeResult) validateOfflineMigrateVms(formats strfmt.Registry) error {

	if err := validate.Required("offlineMigrateVms", "body", m.OfflineMigrateVms); err != nil {
		return err
	}

	for i := 0; i < len(m.OfflineMigrateVms); i++ {
		if swag.IsZero(m.OfflineMigrateVms[i]) { // not required
			continue
		}

		if m.OfflineMigrateVms[i] != nil {
			if err := m.OfflineMigrateVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offlineMigrateVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offlineMigrateVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExitMaintenanceModeResult) validateShutDownVms(formats strfmt.Registry) error {

	if err := validate.Required("shutDownVms", "body", m.ShutDownVms); err != nil {
		return err
	}

	for i := 0; i < len(m.ShutDownVms); i++ {
		if swag.IsZero(m.ShutDownVms[i]) { // not required
			continue
		}

		if m.ShutDownVms[i] != nil {
			if err := m.ShutDownVms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shutDownVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shutDownVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exit maintenance mode result based on the context it is used
func (m *ExitMaintenanceModeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLiveMigrateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfflineMigrateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShutDownVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExitMaintenanceModeResult) contextValidateLiveMigrateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LiveMigrateVms); i++ {

		if m.LiveMigrateVms[i] != nil {
			if err := m.LiveMigrateVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("liveMigrateVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("liveMigrateVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExitMaintenanceModeResult) contextValidateOfflineMigrateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OfflineMigrateVms); i++ {

		if m.OfflineMigrateVms[i] != nil {
			if err := m.OfflineMigrateVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offlineMigrateVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offlineMigrateVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExitMaintenanceModeResult) contextValidateShutDownVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShutDownVms); i++ {

		if m.ShutDownVms[i] != nil {
			if err := m.ShutDownVms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shutDownVms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shutDownVms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExitMaintenanceModeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExitMaintenanceModeResult) UnmarshalBinary(b []byte) error {
	var res ExitMaintenanceModeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
