// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NvmfNamespaceUpdationParamsData nvmf namespace updation params data
//
// swagger:model NvmfNamespaceUpdationParamsData
type NvmfNamespaceUpdationParamsData struct {

	// assigned size
	AssignedSize *int64 `json:"assigned_size,omitempty"`

	// assigned size unit
	AssignedSizeUnit *ByteUnit `json:"assigned_size_unit,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	NvmfNamespaceCommonParams

	MarshalOpts *NvmfNamespaceUpdationParamsDataMarshalOpts `json:"-"`
}

type NvmfNamespaceUpdationParamsDataMarshalOpts struct {
	AssignedSize_Explicit_Null_When_Empty bool

	AssignedSizeUnit_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NvmfNamespaceUpdationParamsData) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AssignedSize *int64 `json:"assigned_size,omitempty"`

		AssignedSizeUnit *ByteUnit `json:"assigned_size_unit,omitempty"`

		Name *string `json:"name,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AssignedSize = dataAO0.AssignedSize

	m.AssignedSizeUnit = dataAO0.AssignedSizeUnit

	m.Name = dataAO0.Name

	// AO1
	var aO1 NvmfNamespaceCommonParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.NvmfNamespaceCommonParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NvmfNamespaceUpdationParamsData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var b bytes.Buffer
	b.WriteString("{")
	first := true

	// handle nullable field assigned_size
	if m.AssignedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":")
		bytes, err := swag.WriteJSON(m.AssignedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":null")
		first = false
	}

	// handle nullable field assigned_size_unit
	if m.AssignedSizeUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_unit\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_unit\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}
	b.WriteString("}")
	_parts = append(_parts, b.Bytes())

	aO1, err := swag.WriteJSON(m.NvmfNamespaceCommonParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this nvmf namespace updation params data
func (m *NvmfNamespaceUpdationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with NvmfNamespaceCommonParams
	if err := m.NvmfNamespaceCommonParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceUpdationParamsData) validateAssignedSizeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedSizeUnit) { // not required
		return nil
	}

	if m.AssignedSizeUnit != nil {
		if err := m.AssignedSizeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_size_unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nvmf namespace updation params data based on the context it is used
func (m *NvmfNamespaceUpdationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedSizeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with NvmfNamespaceCommonParams
	if err := m.NvmfNamespaceCommonParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceUpdationParamsData) contextValidateAssignedSizeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedSizeUnit != nil {
		if err := m.AssignedSizeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_size_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceUpdationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceUpdationParamsData) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceUpdationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
