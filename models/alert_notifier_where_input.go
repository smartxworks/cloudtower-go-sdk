// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertNotifierWhereInput alert notifier where input
//
// swagger:model AlertNotifierWhereInput
type AlertNotifierWhereInput struct {

	// a n d
	AND []*AlertNotifierWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*AlertNotifierWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*AlertNotifierWhereInput `json:"OR,omitempty"`

	// clusters every
	ClustersEvery *ClusterWhereInput `json:"clusters_every,omitempty"`

	// clusters none
	ClustersNone *ClusterWhereInput `json:"clusters_none,omitempty"`

	// clusters some
	ClustersSome *ClusterWhereInput `json:"clusters_some,omitempty"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// disabled not
	DisabledNot *bool `json:"disabled_not,omitempty"`

	// email from
	EmailFrom *string `json:"email_from,omitempty"`

	// email from contains
	EmailFromContains *string `json:"email_from_contains,omitempty"`

	// email from ends with
	EmailFromEndsWith *string `json:"email_from_ends_with,omitempty"`

	// email from gt
	EmailFromGt *string `json:"email_from_gt,omitempty"`

	// email from gte
	EmailFromGte *string `json:"email_from_gte,omitempty"`

	// email from in
	EmailFromIn []string `json:"email_from_in,omitempty"`

	// email from lt
	EmailFromLt *string `json:"email_from_lt,omitempty"`

	// email from lte
	EmailFromLte *string `json:"email_from_lte,omitempty"`

	// email from not
	EmailFromNot *string `json:"email_from_not,omitempty"`

	// email from not contains
	EmailFromNotContains *string `json:"email_from_not_contains,omitempty"`

	// email from not ends with
	EmailFromNotEndsWith *string `json:"email_from_not_ends_with,omitempty"`

	// email from not in
	EmailFromNotIn []string `json:"email_from_not_in,omitempty"`

	// email from not starts with
	EmailFromNotStartsWith *string `json:"email_from_not_starts_with,omitempty"`

	// email from starts with
	EmailFromStartsWith *string `json:"email_from_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// language code
	LanguageCode *NotifierLanguageCode `json:"language_code,omitempty"`

	// language code in
	LanguageCodeIn []NotifierLanguageCode `json:"language_code_in,omitempty"`

	// language code not
	LanguageCodeNot *NotifierLanguageCode `json:"language_code_not,omitempty"`

	// language code not in
	LanguageCodeNotIn []NotifierLanguageCode `json:"language_code_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// security mode
	SecurityMode *NotifierSecurityMode `json:"security_mode,omitempty"`

	// security mode in
	SecurityModeIn []NotifierSecurityMode `json:"security_mode_in,omitempty"`

	// security mode not
	SecurityModeNot *NotifierSecurityMode `json:"security_mode_not,omitempty"`

	// security mode not in
	SecurityModeNotIn []NotifierSecurityMode `json:"security_mode_not_in,omitempty"`

	// smtp server config
	SMTPServerConfig *SMTPServerWhereInput `json:"smtp_server_config,omitempty"`

	// smtp server host
	SMTPServerHost *string `json:"smtp_server_host,omitempty"`

	// smtp server host contains
	SMTPServerHostContains *string `json:"smtp_server_host_contains,omitempty"`

	// smtp server host ends with
	SMTPServerHostEndsWith *string `json:"smtp_server_host_ends_with,omitempty"`

	// smtp server host gt
	SMTPServerHostGt *string `json:"smtp_server_host_gt,omitempty"`

	// smtp server host gte
	SMTPServerHostGte *string `json:"smtp_server_host_gte,omitempty"`

	// smtp server host in
	SMTPServerHostIn []string `json:"smtp_server_host_in,omitempty"`

	// smtp server host lt
	SMTPServerHostLt *string `json:"smtp_server_host_lt,omitempty"`

	// smtp server host lte
	SMTPServerHostLte *string `json:"smtp_server_host_lte,omitempty"`

	// smtp server host not
	SMTPServerHostNot *string `json:"smtp_server_host_not,omitempty"`

	// smtp server host not contains
	SMTPServerHostNotContains *string `json:"smtp_server_host_not_contains,omitempty"`

	// smtp server host not ends with
	SMTPServerHostNotEndsWith *string `json:"smtp_server_host_not_ends_with,omitempty"`

	// smtp server host not in
	SMTPServerHostNotIn []string `json:"smtp_server_host_not_in,omitempty"`

	// smtp server host not starts with
	SMTPServerHostNotStartsWith *string `json:"smtp_server_host_not_starts_with,omitempty"`

	// smtp server host starts with
	SMTPServerHostStartsWith *string `json:"smtp_server_host_starts_with,omitempty"`

	// smtp server port
	SMTPServerPort *int32 `json:"smtp_server_port,omitempty"`

	// smtp server port gt
	SMTPServerPortGt *int32 `json:"smtp_server_port_gt,omitempty"`

	// smtp server port gte
	SMTPServerPortGte *int32 `json:"smtp_server_port_gte,omitempty"`

	// smtp server port in
	SMTPServerPortIn []int32 `json:"smtp_server_port_in,omitempty"`

	// smtp server port lt
	SMTPServerPortLt *int32 `json:"smtp_server_port_lt,omitempty"`

	// smtp server port lte
	SMTPServerPortLte *int32 `json:"smtp_server_port_lte,omitempty"`

	// smtp server port not
	SMTPServerPortNot *int32 `json:"smtp_server_port_not,omitempty"`

	// smtp server port not in
	SMTPServerPortNotIn []int32 `json:"smtp_server_port_not_in,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// username contains
	UsernameContains *string `json:"username_contains,omitempty"`

	// username ends with
	UsernameEndsWith *string `json:"username_ends_with,omitempty"`

	// username gt
	UsernameGt *string `json:"username_gt,omitempty"`

	// username gte
	UsernameGte *string `json:"username_gte,omitempty"`

	// username in
	UsernameIn []string `json:"username_in,omitempty"`

	// username lt
	UsernameLt *string `json:"username_lt,omitempty"`

	// username lte
	UsernameLte *string `json:"username_lte,omitempty"`

	// username not
	UsernameNot *string `json:"username_not,omitempty"`

	// username not contains
	UsernameNotContains *string `json:"username_not_contains,omitempty"`

	// username not ends with
	UsernameNotEndsWith *string `json:"username_not_ends_with,omitempty"`

	// username not in
	UsernameNotIn []string `json:"username_not_in,omitempty"`

	// username not starts with
	UsernameNotStartsWith *string `json:"username_not_starts_with,omitempty"`

	// username starts with
	UsernameStartsWith *string `json:"username_starts_with,omitempty"`

	MarshalOpts *AlertNotifierWhereInputMarshalOpts `json:"-"`
}

type AlertNotifierWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	ClustersEvery_Explicit_Null_When_Empty bool

	ClustersNone_Explicit_Null_When_Empty bool

	ClustersSome_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	DisabledNot_Explicit_Null_When_Empty bool

	EmailFrom_Explicit_Null_When_Empty bool

	EmailFromContains_Explicit_Null_When_Empty bool

	EmailFromEndsWith_Explicit_Null_When_Empty bool

	EmailFromGt_Explicit_Null_When_Empty bool

	EmailFromGte_Explicit_Null_When_Empty bool

	EmailFromIn_Explicit_Null_When_Empty bool

	EmailFromLt_Explicit_Null_When_Empty bool

	EmailFromLte_Explicit_Null_When_Empty bool

	EmailFromNot_Explicit_Null_When_Empty bool

	EmailFromNotContains_Explicit_Null_When_Empty bool

	EmailFromNotEndsWith_Explicit_Null_When_Empty bool

	EmailFromNotIn_Explicit_Null_When_Empty bool

	EmailFromNotStartsWith_Explicit_Null_When_Empty bool

	EmailFromStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LanguageCode_Explicit_Null_When_Empty bool

	LanguageCodeIn_Explicit_Null_When_Empty bool

	LanguageCodeNot_Explicit_Null_When_Empty bool

	LanguageCodeNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	SecurityMode_Explicit_Null_When_Empty bool

	SecurityModeIn_Explicit_Null_When_Empty bool

	SecurityModeNot_Explicit_Null_When_Empty bool

	SecurityModeNotIn_Explicit_Null_When_Empty bool

	SMTPServerConfig_Explicit_Null_When_Empty bool

	SMTPServerHost_Explicit_Null_When_Empty bool

	SMTPServerHostContains_Explicit_Null_When_Empty bool

	SMTPServerHostEndsWith_Explicit_Null_When_Empty bool

	SMTPServerHostGt_Explicit_Null_When_Empty bool

	SMTPServerHostGte_Explicit_Null_When_Empty bool

	SMTPServerHostIn_Explicit_Null_When_Empty bool

	SMTPServerHostLt_Explicit_Null_When_Empty bool

	SMTPServerHostLte_Explicit_Null_When_Empty bool

	SMTPServerHostNot_Explicit_Null_When_Empty bool

	SMTPServerHostNotContains_Explicit_Null_When_Empty bool

	SMTPServerHostNotEndsWith_Explicit_Null_When_Empty bool

	SMTPServerHostNotIn_Explicit_Null_When_Empty bool

	SMTPServerHostNotStartsWith_Explicit_Null_When_Empty bool

	SMTPServerHostStartsWith_Explicit_Null_When_Empty bool

	SMTPServerPort_Explicit_Null_When_Empty bool

	SMTPServerPortGt_Explicit_Null_When_Empty bool

	SMTPServerPortGte_Explicit_Null_When_Empty bool

	SMTPServerPortIn_Explicit_Null_When_Empty bool

	SMTPServerPortLt_Explicit_Null_When_Empty bool

	SMTPServerPortLte_Explicit_Null_When_Empty bool

	SMTPServerPortNot_Explicit_Null_When_Empty bool

	SMTPServerPortNotIn_Explicit_Null_When_Empty bool

	Username_Explicit_Null_When_Empty bool

	UsernameContains_Explicit_Null_When_Empty bool

	UsernameEndsWith_Explicit_Null_When_Empty bool

	UsernameGt_Explicit_Null_When_Empty bool

	UsernameGte_Explicit_Null_When_Empty bool

	UsernameIn_Explicit_Null_When_Empty bool

	UsernameLt_Explicit_Null_When_Empty bool

	UsernameLte_Explicit_Null_When_Empty bool

	UsernameNot_Explicit_Null_When_Empty bool

	UsernameNotContains_Explicit_Null_When_Empty bool

	UsernameNotEndsWith_Explicit_Null_When_Empty bool

	UsernameNotIn_Explicit_Null_When_Empty bool

	UsernameNotStartsWith_Explicit_Null_When_Empty bool

	UsernameStartsWith_Explicit_Null_When_Empty bool
}

func (m AlertNotifierWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field clusters_every
	if m.ClustersEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":")
		bytes, err := swag.WriteJSON(m.ClustersEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":null")
		first = false
	}

	// handle nullable field clusters_none
	if m.ClustersNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":")
		bytes, err := swag.WriteJSON(m.ClustersNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":null")
		first = false
	}

	// handle nullable field clusters_some
	if m.ClustersSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":")
		bytes, err := swag.WriteJSON(m.ClustersSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":null")
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field disabled_not
	if m.DisabledNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled_not\":")
		bytes, err := swag.WriteJSON(m.DisabledNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisabledNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled_not\":null")
		first = false
	}

	// handle nullable field email_from
	if m.EmailFrom != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":")
		bytes, err := swag.WriteJSON(m.EmailFrom)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFrom_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from\":null")
		first = false
	}

	// handle nullable field email_from_contains
	if m.EmailFromContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_contains\":")
		bytes, err := swag.WriteJSON(m.EmailFromContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_contains\":null")
		first = false
	}

	// handle nullable field email_from_ends_with
	if m.EmailFromEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_ends_with\":")
		bytes, err := swag.WriteJSON(m.EmailFromEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_ends_with\":null")
		first = false
	}

	// handle nullable field email_from_gt
	if m.EmailFromGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_gt\":")
		bytes, err := swag.WriteJSON(m.EmailFromGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_gt\":null")
		first = false
	}

	// handle nullable field email_from_gte
	if m.EmailFromGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_gte\":")
		bytes, err := swag.WriteJSON(m.EmailFromGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_gte\":null")
		first = false
	}

	// handle non nullable field email_from_in with omitempty
	if swag.IsZero(m.EmailFromIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_in\":")
		bytes, err := swag.WriteJSON(m.EmailFromIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field email_from_lt
	if m.EmailFromLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_lt\":")
		bytes, err := swag.WriteJSON(m.EmailFromLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_lt\":null")
		first = false
	}

	// handle nullable field email_from_lte
	if m.EmailFromLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_lte\":")
		bytes, err := swag.WriteJSON(m.EmailFromLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_lte\":null")
		first = false
	}

	// handle nullable field email_from_not
	if m.EmailFromNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not\":")
		bytes, err := swag.WriteJSON(m.EmailFromNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not\":null")
		first = false
	}

	// handle nullable field email_from_not_contains
	if m.EmailFromNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_contains\":")
		bytes, err := swag.WriteJSON(m.EmailFromNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_contains\":null")
		first = false
	}

	// handle nullable field email_from_not_ends_with
	if m.EmailFromNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.EmailFromNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_ends_with\":null")
		first = false
	}

	// handle non nullable field email_from_not_in with omitempty
	if swag.IsZero(m.EmailFromNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_in\":")
		bytes, err := swag.WriteJSON(m.EmailFromNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field email_from_not_starts_with
	if m.EmailFromNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.EmailFromNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_not_starts_with\":null")
		first = false
	}

	// handle nullable field email_from_starts_with
	if m.EmailFromStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_starts_with\":")
		bytes, err := swag.WriteJSON(m.EmailFromStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EmailFromStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"email_from_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field language_code
	if m.LanguageCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":")
		bytes, err := swag.WriteJSON(m.LanguageCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LanguageCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code\":null")
		first = false
	}

	// handle non nullable field language_code_in with omitempty
	if swag.IsZero(m.LanguageCodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code_in\":")
		bytes, err := swag.WriteJSON(m.LanguageCodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field language_code_not
	if m.LanguageCodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code_not\":")
		bytes, err := swag.WriteJSON(m.LanguageCodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LanguageCodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code_not\":null")
		first = false
	}

	// handle non nullable field language_code_not_in with omitempty
	if swag.IsZero(m.LanguageCodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"language_code_not_in\":")
		bytes, err := swag.WriteJSON(m.LanguageCodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field security_mode
	if m.SecurityMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode\":")
		bytes, err := swag.WriteJSON(m.SecurityMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode\":null")
		first = false
	}

	// handle non nullable field security_mode_in with omitempty
	if swag.IsZero(m.SecurityModeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode_in\":")
		bytes, err := swag.WriteJSON(m.SecurityModeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field security_mode_not
	if m.SecurityModeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode_not\":")
		bytes, err := swag.WriteJSON(m.SecurityModeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityModeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode_not\":null")
		first = false
	}

	// handle non nullable field security_mode_not_in with omitempty
	if swag.IsZero(m.SecurityModeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_mode_not_in\":")
		bytes, err := swag.WriteJSON(m.SecurityModeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field smtp_server_config
	if m.SMTPServerConfig != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_config\":")
		bytes, err := swag.WriteJSON(m.SMTPServerConfig)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerConfig_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_config\":null")
		first = false
	}

	// handle nullable field smtp_server_host
	if m.SMTPServerHost != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHost)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHost_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host\":null")
		first = false
	}

	// handle nullable field smtp_server_host_contains
	if m.SMTPServerHostContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_contains\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_contains\":null")
		first = false
	}

	// handle nullable field smtp_server_host_ends_with
	if m.SMTPServerHostEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_ends_with\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_ends_with\":null")
		first = false
	}

	// handle nullable field smtp_server_host_gt
	if m.SMTPServerHostGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_gt\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_gt\":null")
		first = false
	}

	// handle nullable field smtp_server_host_gte
	if m.SMTPServerHostGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_gte\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_gte\":null")
		first = false
	}

	// handle non nullable field smtp_server_host_in with omitempty
	if swag.IsZero(m.SMTPServerHostIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_in\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field smtp_server_host_lt
	if m.SMTPServerHostLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_lt\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_lt\":null")
		first = false
	}

	// handle nullable field smtp_server_host_lte
	if m.SMTPServerHostLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_lte\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_lte\":null")
		first = false
	}

	// handle nullable field smtp_server_host_not
	if m.SMTPServerHostNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not\":null")
		first = false
	}

	// handle nullable field smtp_server_host_not_contains
	if m.SMTPServerHostNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_contains\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_contains\":null")
		first = false
	}

	// handle nullable field smtp_server_host_not_ends_with
	if m.SMTPServerHostNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_ends_with\":null")
		first = false
	}

	// handle non nullable field smtp_server_host_not_in with omitempty
	if swag.IsZero(m.SMTPServerHostNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_in\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field smtp_server_host_not_starts_with
	if m.SMTPServerHostNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_not_starts_with\":null")
		first = false
	}

	// handle nullable field smtp_server_host_starts_with
	if m.SMTPServerHostStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_starts_with\":")
		bytes, err := swag.WriteJSON(m.SMTPServerHostStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerHostStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_host_starts_with\":null")
		first = false
	}

	// handle nullable field smtp_server_port
	if m.SMTPServerPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port\":null")
		first = false
	}

	// handle nullable field smtp_server_port_gt
	if m.SMTPServerPortGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_gt\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPortGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_gt\":null")
		first = false
	}

	// handle nullable field smtp_server_port_gte
	if m.SMTPServerPortGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_gte\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPortGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_gte\":null")
		first = false
	}

	// handle non nullable field smtp_server_port_in with omitempty
	if swag.IsZero(m.SMTPServerPortIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_in\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field smtp_server_port_lt
	if m.SMTPServerPortLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_lt\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPortLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_lt\":null")
		first = false
	}

	// handle nullable field smtp_server_port_lte
	if m.SMTPServerPortLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_lte\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPortLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_lte\":null")
		first = false
	}

	// handle nullable field smtp_server_port_not
	if m.SMTPServerPortNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_not\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SMTPServerPortNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_not\":null")
		first = false
	}

	// handle non nullable field smtp_server_port_not_in with omitempty
	if swag.IsZero(m.SMTPServerPortNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smtp_server_port_not_in\":")
		bytes, err := swag.WriteJSON(m.SMTPServerPortNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username
	if m.Username != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":")
		bytes, err := swag.WriteJSON(m.Username)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Username_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":null")
		first = false
	}

	// handle nullable field username_contains
	if m.UsernameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":null")
		first = false
	}

	// handle nullable field username_ends_with
	if m.UsernameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":null")
		first = false
	}

	// handle nullable field username_gt
	if m.UsernameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":")
		bytes, err := swag.WriteJSON(m.UsernameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":null")
		first = false
	}

	// handle nullable field username_gte
	if m.UsernameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":")
		bytes, err := swag.WriteJSON(m.UsernameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":null")
		first = false
	}

	// handle non nullable field username_in with omitempty
	if swag.IsZero(m.UsernameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_in\":")
		bytes, err := swag.WriteJSON(m.UsernameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_lt
	if m.UsernameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":")
		bytes, err := swag.WriteJSON(m.UsernameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":null")
		first = false
	}

	// handle nullable field username_lte
	if m.UsernameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":")
		bytes, err := swag.WriteJSON(m.UsernameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":null")
		first = false
	}

	// handle nullable field username_not
	if m.UsernameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":")
		bytes, err := swag.WriteJSON(m.UsernameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":null")
		first = false
	}

	// handle nullable field username_not_contains
	if m.UsernameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":null")
		first = false
	}

	// handle nullable field username_not_ends_with
	if m.UsernameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":null")
		first = false
	}

	// handle non nullable field username_not_in with omitempty
	if swag.IsZero(m.UsernameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_in\":")
		bytes, err := swag.WriteJSON(m.UsernameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_not_starts_with
	if m.UsernameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":null")
		first = false
	}

	// handle nullable field username_starts_with
	if m.UsernameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this alert notifier where input
func (m *AlertNotifierWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCodeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCodeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCodeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityModeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityModeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityModeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPServerConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersEvery) { // not required
		return nil
	}

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersNone) { // not required
		return nil
	}

	if m.ClustersNone != nil {
		if err := m.ClustersNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersSome) { // not required
		return nil
	}

	if m.ClustersSome != nil {
		if err := m.ClustersSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateLanguageCode(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCode) { // not required
		return nil
	}

	if m.LanguageCode != nil {
		if err := m.LanguageCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateLanguageCodeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCodeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LanguageCodeIn); i++ {

		if err := m.LanguageCodeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateLanguageCodeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCodeNot) { // not required
		return nil
	}

	if m.LanguageCodeNot != nil {
		if err := m.LanguageCodeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateLanguageCodeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCodeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LanguageCodeNotIn); i++ {

		if err := m.LanguageCodeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateSecurityMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityMode) { // not required
		return nil
	}

	if m.SecurityMode != nil {
		if err := m.SecurityMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateSecurityModeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityModeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityModeIn); i++ {

		if err := m.SecurityModeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateSecurityModeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityModeNot) { // not required
		return nil
	}

	if m.SecurityModeNot != nil {
		if err := m.SecurityModeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) validateSecurityModeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityModeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityModeNotIn); i++ {

		if err := m.SecurityModeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) validateSMTPServerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SMTPServerConfig) { // not required
		return nil
	}

	if m.SMTPServerConfig != nil {
		if err := m.SMTPServerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp_server_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp_server_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert notifier where input based on the context it is used
func (m *AlertNotifierWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCodeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCodeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCodeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityModeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityModeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityModeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSMTPServerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertNotifierWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateClustersNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersNone != nil {
		if err := m.ClustersNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateClustersSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersSome != nil {
		if err := m.ClustersSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateLanguageCode(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCode != nil {
		if err := m.LanguageCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateLanguageCodeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LanguageCodeIn); i++ {

		if err := m.LanguageCodeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateLanguageCodeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LanguageCodeNot != nil {
		if err := m.LanguageCodeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateLanguageCodeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LanguageCodeNotIn); i++ {

		if err := m.LanguageCodeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language_code_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("language_code_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateSecurityMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityMode != nil {
		if err := m.SecurityMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateSecurityModeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityModeIn); i++ {

		if err := m.SecurityModeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateSecurityModeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityModeNot != nil {
		if err := m.SecurityModeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_not")
			}
			return err
		}
	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateSecurityModeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityModeNotIn); i++ {

		if err := m.SecurityModeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_mode_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *AlertNotifierWhereInput) contextValidateSMTPServerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTPServerConfig != nil {
		if err := m.SMTPServerConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtp_server_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtp_server_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertNotifierWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertNotifierWhereInput) UnmarshalBinary(b []byte) error {
	var res AlertNotifierWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
