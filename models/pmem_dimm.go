// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PmemDimm pmem dimm
//
// swagger:model PmemDimm
type PmemDimm struct {

	// capacity
	// Required: true
	Capacity *int64 `json:"capacity"`

	// device locator
	// Required: true
	DeviceLocator *string `json:"device_locator"`

	// disk
	Disk *NestedDisk `json:"disk,omitempty"`

	// health status
	HealthStatus *DiskHealthStatus `json:"health_status,omitempty"`

	// host
	// Required: true
	Host *NestedHost `json:"host"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// numa node
	// Required: true
	NumaNode *int32 `json:"numa_node"`

	// part number
	// Required: true
	PartNumber *string `json:"part_number"`

	// remaining life percent
	RemainingLifePercent *int32 `json:"remaining_life_percent,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`

	MarshalOpts *PmemDimmMarshalOpts `json:"-"`
}

type PmemDimmMarshalOpts struct {
	Capacity_Explicit_Null_When_Empty bool

	DeviceLocator_Explicit_Null_When_Empty bool

	Disk_Explicit_Null_When_Empty bool

	HealthStatus_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NumaNode_Explicit_Null_When_Empty bool

	PartNumber_Explicit_Null_When_Empty bool

	RemainingLifePercent_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool
}

func (m PmemDimm) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field capacity
	if m.Capacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":")
		bytes, err := swag.WriteJSON(m.Capacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Capacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":null")
		first = false
	}

	// handle nullable field device_locator
	if m.DeviceLocator != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator\":")
		bytes, err := swag.WriteJSON(m.DeviceLocator)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocator_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator\":null")
		first = false
	}

	// handle nullable field disk
	if m.Disk != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":")
		bytes, err := swag.WriteJSON(m.Disk)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disk_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":null")
		first = false
	}

	// handle nullable field health_status
	if m.HealthStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":")
		bytes, err := swag.WriteJSON(m.HealthStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field numa_node
	if m.NumaNode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":")
		bytes, err := swag.WriteJSON(m.NumaNode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":null")
		first = false
	}

	// handle nullable field part_number
	if m.PartNumber != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number\":")
		bytes, err := swag.WriteJSON(m.PartNumber)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumber_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number\":null")
		first = false
	}

	// handle nullable field remaining_life_percent
	if m.RemainingLifePercent != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercent)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercent_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this pmem dimm
func (m *PmemDimm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceLocator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumaNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimm) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validateDeviceLocator(formats strfmt.Registry) error {

	if err := validate.Required("device_locator", "body", m.DeviceLocator); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimm) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if m.HealthStatus != nil {
		if err := m.HealthStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimm) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimm) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validateNumaNode(formats strfmt.Registry) error {

	if err := validate.Required("numa_node", "body", m.NumaNode); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validatePartNumber(formats strfmt.Registry) error {

	if err := validate.Required("part_number", "body", m.PartNumber); err != nil {
		return err
	}

	return nil
}

func (m *PmemDimm) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pmem dimm based on the context it is used
func (m *PmemDimm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimm) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimm) contextValidateHealthStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthStatus != nil {
		if err := m.HealthStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimm) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PmemDimm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PmemDimm) UnmarshalBinary(b []byte) error {
	var res PmemDimm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
