// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNetworkSettingUpdationParams cluster network setting updation params
//
// swagger:model ClusterNetworkSettingUpdationParams
type ClusterNetworkSettingUpdationParams struct {

	// data
	// Required: true
	Data *ClusterNetworkSettingUpdationParamsData `json:"data"`

	// where
	// Required: true
	Where *ClusterWhereInput `json:"where"`

	MarshalOpts *ClusterNetworkSettingUpdationParamsMarshalOpts `json:"-"`
}

type ClusterNetworkSettingUpdationParamsMarshalOpts struct {
	Data_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m ClusterNetworkSettingUpdationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field data
	if m.Data != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Data_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster network setting updation params
func (m *ClusterNetworkSettingUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkSettingUpdationParams) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNetworkSettingUpdationParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster network setting updation params based on the context it is used
func (m *ClusterNetworkSettingUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkSettingUpdationParams) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNetworkSettingUpdationParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNetworkSettingUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNetworkSettingUpdationParams) UnmarshalBinary(b []byte) error {
	var res ClusterNetworkSettingUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterNetworkSettingUpdationParamsData cluster network setting updation params data
//
// swagger:model ClusterNetworkSettingUpdationParamsData
type ClusterNetworkSettingUpdationParamsData struct {

	// dns
	DNS []string `json:"dns,omitempty"`

	// iscsi vip
	IscsiVip *string `json:"iscsi_vip,omitempty"`

	// management vip
	ManagementVip *string `json:"management_vip,omitempty"`

	// mgt gateway
	MgtGateway *string `json:"mgt_gateway,omitempty"`

	// mgt ip mapper
	MgtIPMapper []*MgtIPMapper `json:"mgt_ip_mapper,omitempty"`

	// mgt netmask
	MgtNetmask *string `json:"mgt_netmask,omitempty"`

	// ntp mode
	NtpMode *NtpMode `json:"ntp_mode,omitempty"`

	// ntp servers
	NtpServers []string `json:"ntp_servers,omitempty"`

	MarshalOpts *ClusterNetworkSettingUpdationParamsDataMarshalOpts `json:"-"`
}

type ClusterNetworkSettingUpdationParamsDataMarshalOpts struct {
	IscsiVip_Explicit_Null_When_Empty bool

	ManagementVip_Explicit_Null_When_Empty bool

	MgtGateway_Explicit_Null_When_Empty bool

	MgtNetmask_Explicit_Null_When_Empty bool

	NtpMode_Explicit_Null_When_Empty bool
}

func (m ClusterNetworkSettingUpdationParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field dns with omitempty
	if swag.IsZero(m.DNS) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dns\":")
		bytes, err := swag.WriteJSON(m.DNS)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_vip
	if m.IscsiVip != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_vip\":")
		bytes, err := swag.WriteJSON(m.IscsiVip)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiVip_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_vip\":null")
		first = false
	}

	// handle nullable field management_vip
	if m.ManagementVip != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_vip\":")
		bytes, err := swag.WriteJSON(m.ManagementVip)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementVip_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_vip\":null")
		first = false
	}

	// handle nullable field mgt_gateway
	if m.MgtGateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_gateway\":")
		bytes, err := swag.WriteJSON(m.MgtGateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MgtGateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_gateway\":null")
		first = false
	}

	// handle non nullable field mgt_ip_mapper with omitempty
	if swag.IsZero(m.MgtIPMapper) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_ip_mapper\":")
		bytes, err := swag.WriteJSON(m.MgtIPMapper)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mgt_netmask
	if m.MgtNetmask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_netmask\":")
		bytes, err := swag.WriteJSON(m.MgtNetmask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MgtNetmask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_netmask\":null")
		first = false
	}

	// handle nullable field ntp_mode
	if m.NtpMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_mode\":")
		bytes, err := swag.WriteJSON(m.NtpMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NtpMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_mode\":null")
		first = false
	}

	// handle non nullable field ntp_servers with omitempty
	if swag.IsZero(m.NtpServers) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_servers\":")
		bytes, err := swag.WriteJSON(m.NtpServers)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster network setting updation params data
func (m *ClusterNetworkSettingUpdationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMgtIPMapper(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkSettingUpdationParamsData) validateMgtIPMapper(formats strfmt.Registry) error {
	if swag.IsZero(m.MgtIPMapper) { // not required
		return nil
	}

	for i := 0; i < len(m.MgtIPMapper); i++ {
		if swag.IsZero(m.MgtIPMapper[i]) { // not required
			continue
		}

		if m.MgtIPMapper[i] != nil {
			if err := m.MgtIPMapper[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "mgt_ip_mapper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "mgt_ip_mapper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkSettingUpdationParamsData) validateNtpMode(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpMode) { // not required
		return nil
	}

	if m.NtpMode != nil {
		if err := m.NtpMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "ntp_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "ntp_mode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster network setting updation params data based on the context it is used
func (m *ClusterNetworkSettingUpdationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMgtIPMapper(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkSettingUpdationParamsData) contextValidateMgtIPMapper(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MgtIPMapper); i++ {

		if m.MgtIPMapper[i] != nil {
			if err := m.MgtIPMapper[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "mgt_ip_mapper" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "mgt_ip_mapper" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNetworkSettingUpdationParamsData) contextValidateNtpMode(ctx context.Context, formats strfmt.Registry) error {

	if m.NtpMode != nil {
		if err := m.NtpMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "ntp_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "ntp_mode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNetworkSettingUpdationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNetworkSettingUpdationParamsData) UnmarshalBinary(b []byte) error {
	var res ClusterNetworkSettingUpdationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
