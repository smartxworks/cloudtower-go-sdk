// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// License license
//
// swagger:model License
type License struct {

	// expire date
	// Required: true
	ExpireDate *string `json:"expire_date"`

	// id
	// Required: true
	ID *string `json:"id"`

	// license serial
	// Required: true
	LicenseSerial *string `json:"license_serial"`

	// maintenance end date
	MaintenanceEndDate *string `json:"maintenance_end_date,omitempty"`

	// maintenance start date
	MaintenanceStartDate *string `json:"maintenance_start_date,omitempty"`

	// max chunk num
	// Required: true
	MaxChunkNum *int32 `json:"max_chunk_num"`

	// max cluster num
	// Required: true
	MaxClusterNum *int32 `json:"max_cluster_num"`

	// sign date
	// Required: true
	SignDate *string `json:"sign_date"`

	// software edition
	// Required: true
	SoftwareEdition *SoftwareEdition `json:"software_edition"`

	// type
	// Required: true
	Type *LicenseType `json:"type"`

	MarshalOpts *LicenseMarshalOpts `json:"-"`
}

type LicenseMarshalOpts struct {
	ExpireDate_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	LicenseSerial_Explicit_Null_When_Empty bool

	MaintenanceEndDate_Explicit_Null_When_Empty bool

	MaintenanceStartDate_Explicit_Null_When_Empty bool

	MaxChunkNum_Explicit_Null_When_Empty bool

	MaxClusterNum_Explicit_Null_When_Empty bool

	SignDate_Explicit_Null_When_Empty bool

	SoftwareEdition_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool
}

func (m License) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field expire_date
	if m.ExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":")
		bytes, err := swag.WriteJSON(m.ExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field license_serial
	if m.LicenseSerial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":")
		bytes, err := swag.WriteJSON(m.LicenseSerial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":null")
		first = false
	}

	// handle nullable field maintenance_end_date
	if m.MaintenanceEndDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":null")
		first = false
	}

	// handle nullable field maintenance_start_date
	if m.MaintenanceStartDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":null")
		first = false
	}

	// handle nullable field max_chunk_num
	if m.MaxChunkNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":null")
		first = false
	}

	// handle nullable field max_cluster_num
	if m.MaxClusterNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num\":null")
		first = false
	}

	// handle nullable field sign_date
	if m.SignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":")
		bytes, err := swag.WriteJSON(m.SignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":null")
		first = false
	}

	// handle nullable field software_edition
	if m.SoftwareEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":")
		bytes, err := swag.WriteJSON(m.SoftwareEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this license
func (m *License) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpireDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxChunkNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxClusterNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) validateExpireDate(formats strfmt.Registry) error {

	if err := validate.Required("expire_date", "body", m.ExpireDate); err != nil {
		return err
	}

	return nil
}

func (m *License) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *License) validateLicenseSerial(formats strfmt.Registry) error {

	if err := validate.Required("license_serial", "body", m.LicenseSerial); err != nil {
		return err
	}

	return nil
}

func (m *License) validateMaxChunkNum(formats strfmt.Registry) error {

	if err := validate.Required("max_chunk_num", "body", m.MaxChunkNum); err != nil {
		return err
	}

	return nil
}

func (m *License) validateMaxClusterNum(formats strfmt.Registry) error {

	if err := validate.Required("max_cluster_num", "body", m.MaxClusterNum); err != nil {
		return err
	}

	return nil
}

func (m *License) validateSignDate(formats strfmt.Registry) error {

	if err := validate.Required("sign_date", "body", m.SignDate); err != nil {
		return err
	}

	return nil
}

func (m *License) validateSoftwareEdition(formats strfmt.Registry) error {

	if err := validate.Required("software_edition", "body", m.SoftwareEdition); err != nil {
		return err
	}

	if err := validate.Required("software_edition", "body", m.SoftwareEdition); err != nil {
		return err
	}

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *License) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this license based on the context it is used
func (m *License) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoftwareEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) contextValidateSoftwareEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *License) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *License) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *License) UnmarshalBinary(b []byte) error {
	var res License
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
