// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetaLeader meta leader
//
// swagger:model MetaLeader
type MetaLeader struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// meta leader
	// Required: true
	MetaLeader *string `json:"meta_leader"`

	MarshalOpts *MetaLeaderMarshalOpts `json:"-"`
}

type MetaLeaderMarshalOpts struct {
	ClusterID_Explicit_Null_When_Empty bool

	MetaLeader_Explicit_Null_When_Empty bool
}

func (m MetaLeader) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_id
	if m.ClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":")
		bytes, err := swag.WriteJSON(m.ClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":null")
		first = false
	}

	// handle nullable field meta_leader
	if m.MetaLeader != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_leader\":")
		bytes, err := swag.WriteJSON(m.MetaLeader)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaLeader_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_leader\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this meta leader
func (m *MetaLeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaLeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetaLeader) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *MetaLeader) validateMetaLeader(formats strfmt.Registry) error {

	if err := validate.Required("meta_leader", "body", m.MetaLeader); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this meta leader based on context it is used
func (m *MetaLeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetaLeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetaLeader) UnmarshalBinary(b []byte) error {
	var res MetaLeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
