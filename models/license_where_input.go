// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LicenseWhereInput license where input
//
// swagger:model LicenseWhereInput
type LicenseWhereInput struct {

	// a n d
	AND []*LicenseWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*LicenseWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*LicenseWhereInput `json:"OR,omitempty"`

	// expire date
	ExpireDate *string `json:"expire_date,omitempty"`

	// expire date gt
	ExpireDateGt *string `json:"expire_date_gt,omitempty"`

	// expire date gte
	ExpireDateGte *string `json:"expire_date_gte,omitempty"`

	// expire date in
	ExpireDateIn []string `json:"expire_date_in,omitempty"`

	// expire date lt
	ExpireDateLt *string `json:"expire_date_lt,omitempty"`

	// expire date lte
	ExpireDateLte *string `json:"expire_date_lte,omitempty"`

	// expire date not
	ExpireDateNot *string `json:"expire_date_not,omitempty"`

	// expire date not in
	ExpireDateNotIn []string `json:"expire_date_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// license serial
	LicenseSerial *string `json:"license_serial,omitempty"`

	// license serial contains
	LicenseSerialContains *string `json:"license_serial_contains,omitempty"`

	// license serial ends with
	LicenseSerialEndsWith *string `json:"license_serial_ends_with,omitempty"`

	// license serial gt
	LicenseSerialGt *string `json:"license_serial_gt,omitempty"`

	// license serial gte
	LicenseSerialGte *string `json:"license_serial_gte,omitempty"`

	// license serial in
	LicenseSerialIn []string `json:"license_serial_in,omitempty"`

	// license serial lt
	LicenseSerialLt *string `json:"license_serial_lt,omitempty"`

	// license serial lte
	LicenseSerialLte *string `json:"license_serial_lte,omitempty"`

	// license serial not
	LicenseSerialNot *string `json:"license_serial_not,omitempty"`

	// license serial not contains
	LicenseSerialNotContains *string `json:"license_serial_not_contains,omitempty"`

	// license serial not ends with
	LicenseSerialNotEndsWith *string `json:"license_serial_not_ends_with,omitempty"`

	// license serial not in
	LicenseSerialNotIn []string `json:"license_serial_not_in,omitempty"`

	// license serial not starts with
	LicenseSerialNotStartsWith *string `json:"license_serial_not_starts_with,omitempty"`

	// license serial starts with
	LicenseSerialStartsWith *string `json:"license_serial_starts_with,omitempty"`

	// maintenance end date
	MaintenanceEndDate *string `json:"maintenance_end_date,omitempty"`

	// maintenance end date gt
	MaintenanceEndDateGt *string `json:"maintenance_end_date_gt,omitempty"`

	// maintenance end date gte
	MaintenanceEndDateGte *string `json:"maintenance_end_date_gte,omitempty"`

	// maintenance end date in
	MaintenanceEndDateIn []string `json:"maintenance_end_date_in,omitempty"`

	// maintenance end date lt
	MaintenanceEndDateLt *string `json:"maintenance_end_date_lt,omitempty"`

	// maintenance end date lte
	MaintenanceEndDateLte *string `json:"maintenance_end_date_lte,omitempty"`

	// maintenance end date not
	MaintenanceEndDateNot *string `json:"maintenance_end_date_not,omitempty"`

	// maintenance end date not in
	MaintenanceEndDateNotIn []string `json:"maintenance_end_date_not_in,omitempty"`

	// maintenance start date
	MaintenanceStartDate *string `json:"maintenance_start_date,omitempty"`

	// maintenance start date gt
	MaintenanceStartDateGt *string `json:"maintenance_start_date_gt,omitempty"`

	// maintenance start date gte
	MaintenanceStartDateGte *string `json:"maintenance_start_date_gte,omitempty"`

	// maintenance start date in
	MaintenanceStartDateIn []string `json:"maintenance_start_date_in,omitempty"`

	// maintenance start date lt
	MaintenanceStartDateLt *string `json:"maintenance_start_date_lt,omitempty"`

	// maintenance start date lte
	MaintenanceStartDateLte *string `json:"maintenance_start_date_lte,omitempty"`

	// maintenance start date not
	MaintenanceStartDateNot *string `json:"maintenance_start_date_not,omitempty"`

	// maintenance start date not in
	MaintenanceStartDateNotIn []string `json:"maintenance_start_date_not_in,omitempty"`

	// max chunk num
	MaxChunkNum *int32 `json:"max_chunk_num,omitempty"`

	// max chunk num gt
	MaxChunkNumGt *int32 `json:"max_chunk_num_gt,omitempty"`

	// max chunk num gte
	MaxChunkNumGte *int32 `json:"max_chunk_num_gte,omitempty"`

	// max chunk num in
	MaxChunkNumIn []int32 `json:"max_chunk_num_in,omitempty"`

	// max chunk num lt
	MaxChunkNumLt *int32 `json:"max_chunk_num_lt,omitempty"`

	// max chunk num lte
	MaxChunkNumLte *int32 `json:"max_chunk_num_lte,omitempty"`

	// max chunk num not
	MaxChunkNumNot *int32 `json:"max_chunk_num_not,omitempty"`

	// max chunk num not in
	MaxChunkNumNotIn []int32 `json:"max_chunk_num_not_in,omitempty"`

	// max cluster num
	MaxClusterNum *int32 `json:"max_cluster_num,omitempty"`

	// max cluster num gt
	MaxClusterNumGt *int32 `json:"max_cluster_num_gt,omitempty"`

	// max cluster num gte
	MaxClusterNumGte *int32 `json:"max_cluster_num_gte,omitempty"`

	// max cluster num in
	MaxClusterNumIn []int32 `json:"max_cluster_num_in,omitempty"`

	// max cluster num lt
	MaxClusterNumLt *int32 `json:"max_cluster_num_lt,omitempty"`

	// max cluster num lte
	MaxClusterNumLte *int32 `json:"max_cluster_num_lte,omitempty"`

	// max cluster num not
	MaxClusterNumNot *int32 `json:"max_cluster_num_not,omitempty"`

	// max cluster num not in
	MaxClusterNumNotIn []int32 `json:"max_cluster_num_not_in,omitempty"`

	// sign date
	SignDate *string `json:"sign_date,omitempty"`

	// sign date gt
	SignDateGt *string `json:"sign_date_gt,omitempty"`

	// sign date gte
	SignDateGte *string `json:"sign_date_gte,omitempty"`

	// sign date in
	SignDateIn []string `json:"sign_date_in,omitempty"`

	// sign date lt
	SignDateLt *string `json:"sign_date_lt,omitempty"`

	// sign date lte
	SignDateLte *string `json:"sign_date_lte,omitempty"`

	// sign date not
	SignDateNot *string `json:"sign_date_not,omitempty"`

	// sign date not in
	SignDateNotIn []string `json:"sign_date_not_in,omitempty"`

	// software edition
	SoftwareEdition *SoftwareEdition `json:"software_edition,omitempty"`

	// software edition in
	SoftwareEditionIn []SoftwareEdition `json:"software_edition_in,omitempty"`

	// software edition not
	SoftwareEditionNot *SoftwareEdition `json:"software_edition_not,omitempty"`

	// software edition not in
	SoftwareEditionNotIn []SoftwareEdition `json:"software_edition_not_in,omitempty"`

	// type
	Type *LicenseType `json:"type,omitempty"`

	// type in
	TypeIn []LicenseType `json:"type_in,omitempty"`

	// type not
	TypeNot *LicenseType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []LicenseType `json:"type_not_in,omitempty"`

	MarshalOpts *LicenseWhereInputMarshalOpts `json:"-"`
}

type LicenseWhereInputMarshalOpts struct {
	ExpireDate_Explicit_Null_When_Empty bool

	ExpireDateGt_Explicit_Null_When_Empty bool

	ExpireDateGte_Explicit_Null_When_Empty bool

	ExpireDateLt_Explicit_Null_When_Empty bool

	ExpireDateLte_Explicit_Null_When_Empty bool

	ExpireDateNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LicenseSerial_Explicit_Null_When_Empty bool

	LicenseSerialContains_Explicit_Null_When_Empty bool

	LicenseSerialEndsWith_Explicit_Null_When_Empty bool

	LicenseSerialGt_Explicit_Null_When_Empty bool

	LicenseSerialGte_Explicit_Null_When_Empty bool

	LicenseSerialLt_Explicit_Null_When_Empty bool

	LicenseSerialLte_Explicit_Null_When_Empty bool

	LicenseSerialNot_Explicit_Null_When_Empty bool

	LicenseSerialNotContains_Explicit_Null_When_Empty bool

	LicenseSerialNotEndsWith_Explicit_Null_When_Empty bool

	LicenseSerialNotStartsWith_Explicit_Null_When_Empty bool

	LicenseSerialStartsWith_Explicit_Null_When_Empty bool

	MaintenanceEndDate_Explicit_Null_When_Empty bool

	MaintenanceEndDateGt_Explicit_Null_When_Empty bool

	MaintenanceEndDateGte_Explicit_Null_When_Empty bool

	MaintenanceEndDateLt_Explicit_Null_When_Empty bool

	MaintenanceEndDateLte_Explicit_Null_When_Empty bool

	MaintenanceEndDateNot_Explicit_Null_When_Empty bool

	MaintenanceStartDate_Explicit_Null_When_Empty bool

	MaintenanceStartDateGt_Explicit_Null_When_Empty bool

	MaintenanceStartDateGte_Explicit_Null_When_Empty bool

	MaintenanceStartDateLt_Explicit_Null_When_Empty bool

	MaintenanceStartDateLte_Explicit_Null_When_Empty bool

	MaintenanceStartDateNot_Explicit_Null_When_Empty bool

	MaxChunkNum_Explicit_Null_When_Empty bool

	MaxChunkNumGt_Explicit_Null_When_Empty bool

	MaxChunkNumGte_Explicit_Null_When_Empty bool

	MaxChunkNumLt_Explicit_Null_When_Empty bool

	MaxChunkNumLte_Explicit_Null_When_Empty bool

	MaxChunkNumNot_Explicit_Null_When_Empty bool

	MaxClusterNum_Explicit_Null_When_Empty bool

	MaxClusterNumGt_Explicit_Null_When_Empty bool

	MaxClusterNumGte_Explicit_Null_When_Empty bool

	MaxClusterNumLt_Explicit_Null_When_Empty bool

	MaxClusterNumLte_Explicit_Null_When_Empty bool

	MaxClusterNumNot_Explicit_Null_When_Empty bool

	SignDate_Explicit_Null_When_Empty bool

	SignDateGt_Explicit_Null_When_Empty bool

	SignDateGte_Explicit_Null_When_Empty bool

	SignDateLt_Explicit_Null_When_Empty bool

	SignDateLte_Explicit_Null_When_Empty bool

	SignDateNot_Explicit_Null_When_Empty bool

	SoftwareEdition_Explicit_Null_When_Empty bool

	SoftwareEditionNot_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool
}

func (m LicenseWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field expire_date
	if m.ExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":")
		bytes, err := swag.WriteJSON(m.ExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":null")
		first = false
	}

	// handle nullable field expire_date_gt
	if m.ExpireDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":null")
		first = false
	}

	// handle nullable field expire_date_gte
	if m.ExpireDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":null")
		first = false
	}

	// handle non nullable field expire_date_in with omitempty
	if swag.IsZero(m.ExpireDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field expire_date_lt
	if m.ExpireDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":null")
		first = false
	}

	// handle nullable field expire_date_lte
	if m.ExpireDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":null")
		first = false
	}

	// handle nullable field expire_date_not
	if m.ExpireDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":null")
		first = false
	}

	// handle non nullable field expire_date_not_in with omitempty
	if swag.IsZero(m.ExpireDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field license_serial
	if m.LicenseSerial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":")
		bytes, err := swag.WriteJSON(m.LicenseSerial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":null")
		first = false
	}

	// handle nullable field license_serial_contains
	if m.LicenseSerialContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_contains\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_contains\":null")
		first = false
	}

	// handle nullable field license_serial_ends_with
	if m.LicenseSerialEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_ends_with\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_ends_with\":null")
		first = false
	}

	// handle nullable field license_serial_gt
	if m.LicenseSerialGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_gt\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_gt\":null")
		first = false
	}

	// handle nullable field license_serial_gte
	if m.LicenseSerialGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_gte\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_gte\":null")
		first = false
	}

	// handle non nullable field license_serial_in with omitempty
	if swag.IsZero(m.LicenseSerialIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_in\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field license_serial_lt
	if m.LicenseSerialLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_lt\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_lt\":null")
		first = false
	}

	// handle nullable field license_serial_lte
	if m.LicenseSerialLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_lte\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_lte\":null")
		first = false
	}

	// handle nullable field license_serial_not
	if m.LicenseSerialNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not\":null")
		first = false
	}

	// handle nullable field license_serial_not_contains
	if m.LicenseSerialNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_contains\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_contains\":null")
		first = false
	}

	// handle nullable field license_serial_not_ends_with
	if m.LicenseSerialNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_ends_with\":null")
		first = false
	}

	// handle non nullable field license_serial_not_in with omitempty
	if swag.IsZero(m.LicenseSerialNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_in\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field license_serial_not_starts_with
	if m.LicenseSerialNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_not_starts_with\":null")
		first = false
	}

	// handle nullable field license_serial_starts_with
	if m.LicenseSerialStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_starts_with\":")
		bytes, err := swag.WriteJSON(m.LicenseSerialStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerialStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial_starts_with\":null")
		first = false
	}

	// handle nullable field maintenance_end_date
	if m.MaintenanceEndDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":null")
		first = false
	}

	// handle nullable field maintenance_end_date_gt
	if m.MaintenanceEndDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_gt\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_gt\":null")
		first = false
	}

	// handle nullable field maintenance_end_date_gte
	if m.MaintenanceEndDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_gte\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_gte\":null")
		first = false
	}

	// handle non nullable field maintenance_end_date_in with omitempty
	if swag.IsZero(m.MaintenanceEndDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_in\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field maintenance_end_date_lt
	if m.MaintenanceEndDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_lt\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_lt\":null")
		first = false
	}

	// handle nullable field maintenance_end_date_lte
	if m.MaintenanceEndDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_lte\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_lte\":null")
		first = false
	}

	// handle nullable field maintenance_end_date_not
	if m.MaintenanceEndDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_not\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_not\":null")
		first = false
	}

	// handle non nullable field maintenance_end_date_not_in with omitempty
	if swag.IsZero(m.MaintenanceEndDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date_not_in\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field maintenance_start_date
	if m.MaintenanceStartDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":null")
		first = false
	}

	// handle nullable field maintenance_start_date_gt
	if m.MaintenanceStartDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_gt\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_gt\":null")
		first = false
	}

	// handle nullable field maintenance_start_date_gte
	if m.MaintenanceStartDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_gte\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_gte\":null")
		first = false
	}

	// handle non nullable field maintenance_start_date_in with omitempty
	if swag.IsZero(m.MaintenanceStartDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_in\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field maintenance_start_date_lt
	if m.MaintenanceStartDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_lt\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_lt\":null")
		first = false
	}

	// handle nullable field maintenance_start_date_lte
	if m.MaintenanceStartDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_lte\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_lte\":null")
		first = false
	}

	// handle nullable field maintenance_start_date_not
	if m.MaintenanceStartDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_not\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_not\":null")
		first = false
	}

	// handle non nullable field maintenance_start_date_not_in with omitempty
	if swag.IsZero(m.MaintenanceStartDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date_not_in\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_chunk_num
	if m.MaxChunkNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":null")
		first = false
	}

	// handle nullable field max_chunk_num_gt
	if m.MaxChunkNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_gt\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_gt\":null")
		first = false
	}

	// handle nullable field max_chunk_num_gte
	if m.MaxChunkNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_gte\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_gte\":null")
		first = false
	}

	// handle non nullable field max_chunk_num_in with omitempty
	if swag.IsZero(m.MaxChunkNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_in\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_chunk_num_lt
	if m.MaxChunkNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_lt\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_lt\":null")
		first = false
	}

	// handle nullable field max_chunk_num_lte
	if m.MaxChunkNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_lte\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_lte\":null")
		first = false
	}

	// handle nullable field max_chunk_num_not
	if m.MaxChunkNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_not\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_not\":null")
		first = false
	}

	// handle non nullable field max_chunk_num_not_in with omitempty
	if swag.IsZero(m.MaxChunkNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_cluster_num
	if m.MaxClusterNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num\":null")
		first = false
	}

	// handle nullable field max_cluster_num_gt
	if m.MaxClusterNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_gt\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_gt\":null")
		first = false
	}

	// handle nullable field max_cluster_num_gte
	if m.MaxClusterNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_gte\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_gte\":null")
		first = false
	}

	// handle non nullable field max_cluster_num_in with omitempty
	if swag.IsZero(m.MaxClusterNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_in\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_cluster_num_lt
	if m.MaxClusterNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_lt\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_lt\":null")
		first = false
	}

	// handle nullable field max_cluster_num_lte
	if m.MaxClusterNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_lte\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_lte\":null")
		first = false
	}

	// handle nullable field max_cluster_num_not
	if m.MaxClusterNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_not\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxClusterNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_not\":null")
		first = false
	}

	// handle non nullable field max_cluster_num_not_in with omitempty
	if swag.IsZero(m.MaxClusterNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_cluster_num_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxClusterNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field sign_date
	if m.SignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":")
		bytes, err := swag.WriteJSON(m.SignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":null")
		first = false
	}

	// handle nullable field sign_date_gt
	if m.SignDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":")
		bytes, err := swag.WriteJSON(m.SignDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":null")
		first = false
	}

	// handle nullable field sign_date_gte
	if m.SignDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":")
		bytes, err := swag.WriteJSON(m.SignDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":null")
		first = false
	}

	// handle non nullable field sign_date_in with omitempty
	if swag.IsZero(m.SignDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_in\":")
		bytes, err := swag.WriteJSON(m.SignDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field sign_date_lt
	if m.SignDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":")
		bytes, err := swag.WriteJSON(m.SignDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":null")
		first = false
	}

	// handle nullable field sign_date_lte
	if m.SignDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":")
		bytes, err := swag.WriteJSON(m.SignDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":null")
		first = false
	}

	// handle nullable field sign_date_not
	if m.SignDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":")
		bytes, err := swag.WriteJSON(m.SignDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":null")
		first = false
	}

	// handle non nullable field sign_date_not_in with omitempty
	if swag.IsZero(m.SignDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not_in\":")
		bytes, err := swag.WriteJSON(m.SignDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field software_edition
	if m.SoftwareEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":")
		bytes, err := swag.WriteJSON(m.SoftwareEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":null")
		first = false
	}

	// handle non nullable field software_edition_in with omitempty
	if swag.IsZero(m.SoftwareEditionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_in\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field software_edition_not
	if m.SoftwareEditionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEditionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not\":null")
		first = false
	}

	// handle non nullable field software_edition_not_in with omitempty
	if swag.IsZero(m.SoftwareEditionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition_not_in\":")
		bytes, err := swag.WriteJSON(m.SoftwareEditionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this license where input
func (m *LicenseWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateSoftwareEdition(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEdition) { // not required
		return nil
	}

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) validateSoftwareEditionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateSoftwareEditionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionNot) { // not required
		return nil
	}

	if m.SoftwareEditionNot != nil {
		if err := m.SoftwareEditionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) validateSoftwareEditionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this license where input based on the context it is used
func (m *LicenseWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateSoftwareEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) contextValidateSoftwareEditionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateSoftwareEditionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEditionNot != nil {
		if err := m.SoftwareEditionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) contextValidateSoftwareEditionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LicenseWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *LicenseWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseWhereInput) UnmarshalBinary(b []byte) error {
	var res LicenseWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
