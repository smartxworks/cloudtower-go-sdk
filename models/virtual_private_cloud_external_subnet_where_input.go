// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudExternalSubnetWhereInput virtual private cloud external subnet where input
//
// swagger:model VirtualPrivateCloudExternalSubnetWhereInput
type VirtualPrivateCloudExternalSubnetWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudExternalSubnetWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudExternalSubnetWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudExternalSubnetWhereInput `json:"OR,omitempty"`

	// cidr
	Cidr *string `json:"cidr,omitempty"`

	// cidr contains
	CidrContains *string `json:"cidr_contains,omitempty"`

	// cidr ends with
	CidrEndsWith *string `json:"cidr_ends_with,omitempty"`

	// cidr gt
	CidrGt *string `json:"cidr_gt,omitempty"`

	// cidr gte
	CidrGte *string `json:"cidr_gte,omitempty"`

	// cidr in
	CidrIn []string `json:"cidr_in,omitempty"`

	// cidr lt
	CidrLt *string `json:"cidr_lt,omitempty"`

	// cidr lte
	CidrLte *string `json:"cidr_lte,omitempty"`

	// cidr not
	CidrNot *string `json:"cidr_not,omitempty"`

	// cidr not contains
	CidrNotContains *string `json:"cidr_not_contains,omitempty"`

	// cidr not ends with
	CidrNotEndsWith *string `json:"cidr_not_ends_with,omitempty"`

	// cidr not in
	CidrNotIn []string `json:"cidr_not_in,omitempty"`

	// cidr not starts with
	CidrNotStartsWith *string `json:"cidr_not_starts_with,omitempty"`

	// cidr starts with
	CidrStartsWith *string `json:"cidr_starts_with,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// edge gateway
	EdgeGateway *VirtualPrivateCloudEdgeGatewayWhereInput `json:"edge_gateway,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// exclusive
	Exclusive *bool `json:"exclusive,omitempty"`

	// exclusive not
	ExclusiveNot *bool `json:"exclusive_not,omitempty"`

	// floating ip cidr
	FloatingIPCidr *string `json:"floating_ip_cidr,omitempty"`

	// floating ip cidr contains
	FloatingIPCidrContains *string `json:"floating_ip_cidr_contains,omitempty"`

	// floating ip cidr ends with
	FloatingIPCidrEndsWith *string `json:"floating_ip_cidr_ends_with,omitempty"`

	// floating ip cidr gt
	FloatingIPCidrGt *string `json:"floating_ip_cidr_gt,omitempty"`

	// floating ip cidr gte
	FloatingIPCidrGte *string `json:"floating_ip_cidr_gte,omitempty"`

	// floating ip cidr in
	FloatingIPCidrIn []string `json:"floating_ip_cidr_in,omitempty"`

	// floating ip cidr lt
	FloatingIPCidrLt *string `json:"floating_ip_cidr_lt,omitempty"`

	// floating ip cidr lte
	FloatingIPCidrLte *string `json:"floating_ip_cidr_lte,omitempty"`

	// floating ip cidr not
	FloatingIPCidrNot *string `json:"floating_ip_cidr_not,omitempty"`

	// floating ip cidr not contains
	FloatingIPCidrNotContains *string `json:"floating_ip_cidr_not_contains,omitempty"`

	// floating ip cidr not ends with
	FloatingIPCidrNotEndsWith *string `json:"floating_ip_cidr_not_ends_with,omitempty"`

	// floating ip cidr not in
	FloatingIPCidrNotIn []string `json:"floating_ip_cidr_not_in,omitempty"`

	// floating ip cidr not starts with
	FloatingIPCidrNotStartsWith *string `json:"floating_ip_cidr_not_starts_with,omitempty"`

	// floating ip cidr starts with
	FloatingIPCidrStartsWith *string `json:"floating_ip_cidr_starts_with,omitempty"`

	// floating ips every
	FloatingIpsEvery *VirtualPrivateCloudFloatingIPWhereInput `json:"floating_ips_every,omitempty"`

	// floating ips none
	FloatingIpsNone *VirtualPrivateCloudFloatingIPWhereInput `json:"floating_ips_none,omitempty"`

	// floating ips some
	FloatingIpsSome *VirtualPrivateCloudFloatingIPWhereInput `json:"floating_ips_some,omitempty"`

	// gateway
	Gateway *string `json:"gateway,omitempty"`

	// gateway contains
	GatewayContains *string `json:"gateway_contains,omitempty"`

	// gateway ends with
	GatewayEndsWith *string `json:"gateway_ends_with,omitempty"`

	// gateway gt
	GatewayGt *string `json:"gateway_gt,omitempty"`

	// gateway gte
	GatewayGte *string `json:"gateway_gte,omitempty"`

	// gateway in
	GatewayIn []string `json:"gateway_in,omitempty"`

	// gateway lt
	GatewayLt *string `json:"gateway_lt,omitempty"`

	// gateway lte
	GatewayLte *string `json:"gateway_lte,omitempty"`

	// gateway not
	GatewayNot *string `json:"gateway_not,omitempty"`

	// gateway not contains
	GatewayNotContains *string `json:"gateway_not_contains,omitempty"`

	// gateway not ends with
	GatewayNotEndsWith *string `json:"gateway_not_ends_with,omitempty"`

	// gateway not in
	GatewayNotIn []string `json:"gateway_not_in,omitempty"`

	// gateway not starts with
	GatewayNotStartsWith *string `json:"gateway_not_starts_with,omitempty"`

	// gateway starts with
	GatewayStartsWith *string `json:"gateway_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nat gateway cidr
	NatGatewayCidr *string `json:"nat_gateway_cidr,omitempty"`

	// nat gateway cidr contains
	NatGatewayCidrContains *string `json:"nat_gateway_cidr_contains,omitempty"`

	// nat gateway cidr ends with
	NatGatewayCidrEndsWith *string `json:"nat_gateway_cidr_ends_with,omitempty"`

	// nat gateway cidr gt
	NatGatewayCidrGt *string `json:"nat_gateway_cidr_gt,omitempty"`

	// nat gateway cidr gte
	NatGatewayCidrGte *string `json:"nat_gateway_cidr_gte,omitempty"`

	// nat gateway cidr in
	NatGatewayCidrIn []string `json:"nat_gateway_cidr_in,omitempty"`

	// nat gateway cidr lt
	NatGatewayCidrLt *string `json:"nat_gateway_cidr_lt,omitempty"`

	// nat gateway cidr lte
	NatGatewayCidrLte *string `json:"nat_gateway_cidr_lte,omitempty"`

	// nat gateway cidr not
	NatGatewayCidrNot *string `json:"nat_gateway_cidr_not,omitempty"`

	// nat gateway cidr not contains
	NatGatewayCidrNotContains *string `json:"nat_gateway_cidr_not_contains,omitempty"`

	// nat gateway cidr not ends with
	NatGatewayCidrNotEndsWith *string `json:"nat_gateway_cidr_not_ends_with,omitempty"`

	// nat gateway cidr not in
	NatGatewayCidrNotIn []string `json:"nat_gateway_cidr_not_in,omitempty"`

	// nat gateway cidr not starts with
	NatGatewayCidrNotStartsWith *string `json:"nat_gateway_cidr_not_starts_with,omitempty"`

	// nat gateway cidr starts with
	NatGatewayCidrStartsWith *string `json:"nat_gateway_cidr_starts_with,omitempty"`

	// nat gateways every
	NatGatewaysEvery *VirtualPrivateCloudNatGatewayWhereInput `json:"nat_gateways_every,omitempty"`

	// nat gateways none
	NatGatewaysNone *VirtualPrivateCloudNatGatewayWhereInput `json:"nat_gateways_none,omitempty"`

	// nat gateways some
	NatGatewaysSome *VirtualPrivateCloudNatGatewayWhereInput `json:"nat_gateways_some,omitempty"`

	// router gateway cidr
	RouterGatewayCidr *string `json:"router_gateway_cidr,omitempty"`

	// router gateway cidr contains
	RouterGatewayCidrContains *string `json:"router_gateway_cidr_contains,omitempty"`

	// router gateway cidr ends with
	RouterGatewayCidrEndsWith *string `json:"router_gateway_cidr_ends_with,omitempty"`

	// router gateway cidr gt
	RouterGatewayCidrGt *string `json:"router_gateway_cidr_gt,omitempty"`

	// router gateway cidr gte
	RouterGatewayCidrGte *string `json:"router_gateway_cidr_gte,omitempty"`

	// router gateway cidr in
	RouterGatewayCidrIn []string `json:"router_gateway_cidr_in,omitempty"`

	// router gateway cidr lt
	RouterGatewayCidrLt *string `json:"router_gateway_cidr_lt,omitempty"`

	// router gateway cidr lte
	RouterGatewayCidrLte *string `json:"router_gateway_cidr_lte,omitempty"`

	// router gateway cidr not
	RouterGatewayCidrNot *string `json:"router_gateway_cidr_not,omitempty"`

	// router gateway cidr not contains
	RouterGatewayCidrNotContains *string `json:"router_gateway_cidr_not_contains,omitempty"`

	// router gateway cidr not ends with
	RouterGatewayCidrNotEndsWith *string `json:"router_gateway_cidr_not_ends_with,omitempty"`

	// router gateway cidr not in
	RouterGatewayCidrNotIn []string `json:"router_gateway_cidr_not_in,omitempty"`

	// router gateway cidr not starts with
	RouterGatewayCidrNotStartsWith *string `json:"router_gateway_cidr_not_starts_with,omitempty"`

	// router gateway cidr starts with
	RouterGatewayCidrStartsWith *string `json:"router_gateway_cidr_starts_with,omitempty"`

	// router gateways every
	RouterGatewaysEvery *VirtualPrivateCloudRouterGatewayWhereInput `json:"router_gateways_every,omitempty"`

	// router gateways none
	RouterGatewaysNone *VirtualPrivateCloudRouterGatewayWhereInput `json:"router_gateways_none,omitempty"`

	// router gateways some
	RouterGatewaysSome *VirtualPrivateCloudRouterGatewayWhereInput `json:"router_gateways_some,omitempty"`

	// vlan
	Vlan *VlanWhereInput `json:"vlan,omitempty"`

	// vpc
	Vpc *VirtualPrivateCloudWhereInput `json:"vpc,omitempty"`
}

// Validate validates this virtual private cloud external subnet where input
func (m *VirtualPrivateCloudExternalSubnetWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatingIpsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatingIpsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatingIpsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNatGatewaysEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNatGatewaysNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNatGatewaysSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterGatewaysEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterGatewaysNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouterGatewaysSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateEdgeGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGateway) { // not required
		return nil
	}

	if m.EdgeGateway != nil {
		if err := m.EdgeGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateFloatingIpsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.FloatingIpsEvery) { // not required
		return nil
	}

	if m.FloatingIpsEvery != nil {
		if err := m.FloatingIpsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateFloatingIpsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.FloatingIpsNone) { // not required
		return nil
	}

	if m.FloatingIpsNone != nil {
		if err := m.FloatingIpsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateFloatingIpsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.FloatingIpsSome) { // not required
		return nil
	}

	if m.FloatingIpsSome != nil {
		if err := m.FloatingIpsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateNatGatewaysEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NatGatewaysEvery) { // not required
		return nil
	}

	if m.NatGatewaysEvery != nil {
		if err := m.NatGatewaysEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateNatGatewaysNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NatGatewaysNone) { // not required
		return nil
	}

	if m.NatGatewaysNone != nil {
		if err := m.NatGatewaysNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateNatGatewaysSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NatGatewaysSome) { // not required
		return nil
	}

	if m.NatGatewaysSome != nil {
		if err := m.NatGatewaysSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateRouterGatewaysEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterGatewaysEvery) { // not required
		return nil
	}

	if m.RouterGatewaysEvery != nil {
		if err := m.RouterGatewaysEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateRouterGatewaysNone(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterGatewaysNone) { // not required
		return nil
	}

	if m.RouterGatewaysNone != nil {
		if err := m.RouterGatewaysNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateRouterGatewaysSome(formats strfmt.Registry) error {
	if swag.IsZero(m.RouterGatewaysSome) { // not required
		return nil
	}

	if m.RouterGatewaysSome != nil {
		if err := m.RouterGatewaysSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateVlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) validateVpc(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud external subnet where input based on the context it is used
func (m *VirtualPrivateCloudExternalSubnetWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFloatingIpsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFloatingIpsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFloatingIpsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNatGatewaysEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNatGatewaysNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNatGatewaysSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouterGatewaysEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouterGatewaysNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouterGatewaysSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateEdgeGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGateway != nil {
		if err := m.EdgeGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateFloatingIpsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.FloatingIpsEvery != nil {
		if err := m.FloatingIpsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateFloatingIpsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.FloatingIpsNone != nil {
		if err := m.FloatingIpsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateFloatingIpsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.FloatingIpsSome != nil {
		if err := m.FloatingIpsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("floating_ips_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("floating_ips_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateNatGatewaysEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NatGatewaysEvery != nil {
		if err := m.NatGatewaysEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateNatGatewaysNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NatGatewaysNone != nil {
		if err := m.NatGatewaysNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateNatGatewaysSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NatGatewaysSome != nil {
		if err := m.NatGatewaysSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nat_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nat_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateRouterGatewaysEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.RouterGatewaysEvery != nil {
		if err := m.RouterGatewaysEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateRouterGatewaysNone(ctx context.Context, formats strfmt.Registry) error {

	if m.RouterGatewaysNone != nil {
		if err := m.RouterGatewaysNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateRouterGatewaysSome(ctx context.Context, formats strfmt.Registry) error {

	if m.RouterGatewaysSome != nil {
		if err := m.RouterGatewaysSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("router_gateways_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("router_gateways_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudExternalSubnetWhereInput) contextValidateVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpc != nil {
		if err := m.Vpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudExternalSubnetWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudExternalSubnetWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudExternalSubnetWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
