// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
//
// swagger:model Cluster
type Cluster struct {

	// application highest version
	ApplicationHighestVersion *string `json:"application_highest_version,omitempty"`

	// applications
	Applications []*NestedApplication `json:"applications,omitempty"`

	// architecture
	// Required: true
	Architecture *Architecture `json:"architecture"`

	// auto converge
	AutoConverge *bool `json:"auto_converge,omitempty"`

	// connect state
	// Required: true
	ConnectState *ConnectState `json:"connect_state"`

	// consistency groups
	ConsistencyGroups []*NestedConsistencyGroup `json:"consistency_groups,omitempty"`

	// current cpu model
	CurrentCPUModel *string `json:"current_cpu_model,omitempty"`

	// datacenters
	Datacenters []*NestedDatacenter `json:"datacenters,omitempty"`

	// disconnected date
	DisconnectedDate *string `json:"disconnected_date,omitempty"`

	// disconnected reason
	DisconnectedReason *ClusterConnectorErrorCode `json:"disconnected_reason,omitempty"`

	// dns
	// Required: true
	DNS []string `json:"dns"`

	// ecp license
	EcpLicense *NestedEcpLicense `json:"ecp_license,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// everoute cluster
	EverouteCluster *NestedEverouteCluster `json:"everoute_cluster,omitempty"`

	// failure data space
	FailureDataSpace *int64 `json:"failure_data_space,omitempty"`

	// has metrox
	HasMetrox *bool `json:"has_metrox,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// hosts
	Hosts []*NestedHost `json:"hosts,omitempty"`

	// hypervisor
	Hypervisor *Hypervisor `json:"hypervisor,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// is all flash
	IsAllFlash *bool `json:"is_all_flash,omitempty"`

	// iscsi vip
	IscsiVip *string `json:"iscsi_vip,omitempty"`

	// labels
	Labels []*NestedLabel `json:"labels,omitempty"`

	// license expire date
	LicenseExpireDate *string `json:"license_expire_date,omitempty"`

	// license serial
	LicenseSerial *string `json:"license_serial,omitempty"`

	// license sign date
	LicenseSignDate *string `json:"license_sign_date,omitempty"`

	// license type
	LicenseType *LicenseType `json:"license_type,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// maintenance end date
	MaintenanceEndDate *string `json:"maintenance_end_date,omitempty"`

	// maintenance start date
	MaintenanceStartDate *string `json:"maintenance_start_date,omitempty"`

	// management vip
	ManagementVip *string `json:"management_vip,omitempty"`

	// max chunk num
	MaxChunkNum *int32 `json:"max_chunk_num,omitempty"`

	// max physical data capacity
	MaxPhysicalDataCapacity *int64 `json:"max_physical_data_capacity,omitempty"`

	// max physical data capacity per node
	MaxPhysicalDataCapacityPerNode *int64 `json:"max_physical_data_capacity_per_node,omitempty"`

	// metro availability checklist
	MetroAvailabilityChecklist *NestedMetroAvailabilityChecklist `json:"metro_availability_checklist,omitempty"`

	// mgt gateway
	MgtGateway *string `json:"mgt_gateway,omitempty"`

	// mgt netmask
	MgtNetmask *string `json:"mgt_netmask,omitempty"`

	// migration data size
	MigrationDataSize *int64 `json:"migration_data_size,omitempty"`

	// migration speed
	MigrationSpeed *int64 `json:"migration_speed,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// ntp mode
	NtpMode *NtpMode `json:"ntp_mode,omitempty"`

	// ntp servers
	// Required: true
	NtpServers []string `json:"ntp_servers"`

	// nvme over rdma enabled
	NvmeOverRdmaEnabled *bool `json:"nvme_over_rdma_enabled,omitempty"`

	// nvme over tcp enabled
	NvmeOverTCPEnabled *bool `json:"nvme_over_tcp_enabled,omitempty"`

	// nvmf enabled
	NvmfEnabled *bool `json:"nvmf_enabled,omitempty"`

	// pmem enabled
	PmemEnabled *bool `json:"pmem_enabled,omitempty"`

	// provisioned cpu cores
	ProvisionedCPUCores *int32 `json:"provisioned_cpu_cores,omitempty"`

	// provisioned cpu cores for active vm
	ProvisionedCPUCoresForActiveVM *int32 `json:"provisioned_cpu_cores_for_active_vm,omitempty"`

	// provisioned for active vm ratio
	ProvisionedForActiveVMRatio *float64 `json:"provisioned_for_active_vm_ratio,omitempty"`

	// provisioned memory bytes
	ProvisionedMemoryBytes *int64 `json:"provisioned_memory_bytes,omitempty"`

	// provisioned ratio
	ProvisionedRatio *float64 `json:"provisioned_ratio,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// recommended cpu models
	// Required: true
	RecommendedCPUModels []string `json:"recommended_cpu_models"`

	// recover data size
	RecoverDataSize *int64 `json:"recover_data_size,omitempty"`

	// recover speed
	RecoverSpeed *int64 `json:"recover_speed,omitempty"`

	// reserved cpu cores for system service
	ReservedCPUCoresForSystemService *int32 `json:"reserved_cpu_cores_for_system_service,omitempty"`

	// running vm num
	RunningVMNum *int32 `json:"running_vm_num,omitempty"`

	// settings
	Settings *NestedClusterSettings `json:"settings,omitempty"`

	// software edition
	SoftwareEdition *SoftwareEdition `json:"software_edition,omitempty"`

	// stopped vm num
	StoppedVMNum *int32 `json:"stopped_vm_num,omitempty"`

	// stretch
	Stretch *bool `json:"stretch,omitempty"`

	// suspended vm num
	SuspendedVMNum *int32 `json:"suspended_vm_num,omitempty"`

	// total cache capacity
	TotalCacheCapacity *int64 `json:"total_cache_capacity,omitempty"`

	// total cpu cores
	TotalCPUCores *int32 `json:"total_cpu_cores,omitempty"`

	// total cpu hz
	TotalCPUHz *int64 `json:"total_cpu_hz,omitempty"`

	// total cpu models
	// Required: true
	TotalCPUModels []string `json:"total_cpu_models"`

	// total cpu sockets
	TotalCPUSockets *int32 `json:"total_cpu_sockets,omitempty"`

	// total data capacity
	TotalDataCapacity *int64 `json:"total_data_capacity,omitempty"`

	// total memory bytes
	TotalMemoryBytes *int64 `json:"total_memory_bytes,omitempty"`

	// type
	// Required: true
	Type *ClusterType `json:"type"`

	// upgrade tool version
	UpgradeToolVersion *string `json:"upgrade_tool_version,omitempty"`

	// used cpu hz
	UsedCPUHz *float64 `json:"used_cpu_hz,omitempty"`

	// used data space
	UsedDataSpace *int64 `json:"used_data_space,omitempty"`

	// used memory bytes
	UsedMemoryBytes *float64 `json:"used_memory_bytes,omitempty"`

	// valid data space
	ValidDataSpace *int64 `json:"valid_data_space,omitempty"`

	// vcenter account
	VcenterAccount *NestedVcenterAccount `json:"vcenterAccount,omitempty"`

	// vdses
	Vdses []*NestedVds `json:"vdses,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`

	// vhost enabled
	VhostEnabled *bool `json:"vhost_enabled,omitempty"`

	// vm folders
	VMFolders []*NestedVMFolder `json:"vm_folders,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm templates
	VMTemplates []*NestedVMTemplate `json:"vm_templates,omitempty"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	// witness
	Witness *NestedWitness `json:"witness,omitempty"`

	// zones
	Zones []*NestedZone `json:"zones,omitempty"`

	MarshalOpts *ClusterMarshalOpts `json:"-"`
}

type ClusterMarshalOpts struct {
	ApplicationHighestVersion_Explicit_Null_When_Empty bool

	Applications_Explicit_Null_When_Empty bool

	Architecture_Explicit_Null_When_Empty bool

	AutoConverge_Explicit_Null_When_Empty bool

	ConnectState_Explicit_Null_When_Empty bool

	ConsistencyGroups_Explicit_Null_When_Empty bool

	CurrentCPUModel_Explicit_Null_When_Empty bool

	Datacenters_Explicit_Null_When_Empty bool

	DisconnectedDate_Explicit_Null_When_Empty bool

	DisconnectedReason_Explicit_Null_When_Empty bool

	DNS_Explicit_Null_When_Empty bool

	EcpLicense_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EverouteCluster_Explicit_Null_When_Empty bool

	FailureDataSpace_Explicit_Null_When_Empty bool

	HasMetrox_Explicit_Null_When_Empty bool

	HostNum_Explicit_Null_When_Empty bool

	Hosts_Explicit_Null_When_Empty bool

	Hypervisor_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IP_Explicit_Null_When_Empty bool

	IsAllFlash_Explicit_Null_When_Empty bool

	IscsiVip_Explicit_Null_When_Empty bool

	Labels_Explicit_Null_When_Empty bool

	LicenseExpireDate_Explicit_Null_When_Empty bool

	LicenseSerial_Explicit_Null_When_Empty bool

	LicenseSignDate_Explicit_Null_When_Empty bool

	LicenseType_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	MaintenanceEndDate_Explicit_Null_When_Empty bool

	MaintenanceStartDate_Explicit_Null_When_Empty bool

	ManagementVip_Explicit_Null_When_Empty bool

	MaxChunkNum_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacity_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityPerNode_Explicit_Null_When_Empty bool

	MetroAvailabilityChecklist_Explicit_Null_When_Empty bool

	MgtGateway_Explicit_Null_When_Empty bool

	MgtNetmask_Explicit_Null_When_Empty bool

	MigrationDataSize_Explicit_Null_When_Empty bool

	MigrationSpeed_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NtpMode_Explicit_Null_When_Empty bool

	NtpServers_Explicit_Null_When_Empty bool

	NvmeOverRdmaEnabled_Explicit_Null_When_Empty bool

	NvmeOverTCPEnabled_Explicit_Null_When_Empty bool

	NvmfEnabled_Explicit_Null_When_Empty bool

	PmemEnabled_Explicit_Null_When_Empty bool

	ProvisionedCPUCores_Explicit_Null_When_Empty bool

	ProvisionedCPUCoresForActiveVM_Explicit_Null_When_Empty bool

	ProvisionedForActiveVMRatio_Explicit_Null_When_Empty bool

	ProvisionedMemoryBytes_Explicit_Null_When_Empty bool

	ProvisionedRatio_Explicit_Null_When_Empty bool

	RdmaEnabled_Explicit_Null_When_Empty bool

	RecommendedCPUModels_Explicit_Null_When_Empty bool

	RecoverDataSize_Explicit_Null_When_Empty bool

	RecoverSpeed_Explicit_Null_When_Empty bool

	ReservedCPUCoresForSystemService_Explicit_Null_When_Empty bool

	RunningVMNum_Explicit_Null_When_Empty bool

	Settings_Explicit_Null_When_Empty bool

	SoftwareEdition_Explicit_Null_When_Empty bool

	StoppedVMNum_Explicit_Null_When_Empty bool

	Stretch_Explicit_Null_When_Empty bool

	SuspendedVMNum_Explicit_Null_When_Empty bool

	TotalCacheCapacity_Explicit_Null_When_Empty bool

	TotalCPUCores_Explicit_Null_When_Empty bool

	TotalCPUHz_Explicit_Null_When_Empty bool

	TotalCPUModels_Explicit_Null_When_Empty bool

	TotalCPUSockets_Explicit_Null_When_Empty bool

	TotalDataCapacity_Explicit_Null_When_Empty bool

	TotalMemoryBytes_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	UpgradeToolVersion_Explicit_Null_When_Empty bool

	UsedCPUHz_Explicit_Null_When_Empty bool

	UsedDataSpace_Explicit_Null_When_Empty bool

	UsedMemoryBytes_Explicit_Null_When_Empty bool

	ValidDataSpace_Explicit_Null_When_Empty bool

	VcenterAccount_Explicit_Null_When_Empty bool

	Vdses_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VhostEnabled_Explicit_Null_When_Empty bool

	VMFolders_Explicit_Null_When_Empty bool

	VMNum_Explicit_Null_When_Empty bool

	VMTemplates_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool

	Witness_Explicit_Null_When_Empty bool

	Zones_Explicit_Null_When_Empty bool
}

func (m Cluster) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field application_highest_version
	if m.ApplicationHighestVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application_highest_version\":")
		bytes, err := swag.WriteJSON(m.ApplicationHighestVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ApplicationHighestVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application_highest_version\":null")
		first = false
	}

	// handle non nullable field applications with omitempty
	if !swag.IsZero(m.Applications) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"applications\":")
		bytes, err := swag.WriteJSON(m.Applications)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field architecture
	if m.Architecture != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"architecture\":")
		bytes, err := swag.WriteJSON(m.Architecture)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Architecture_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"architecture\":null")
		first = false
	}

	// handle nullable field auto_converge
	if m.AutoConverge != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auto_converge\":")
		bytes, err := swag.WriteJSON(m.AutoConverge)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AutoConverge_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auto_converge\":null")
		first = false
	}

	// handle nullable field connect_state
	if m.ConnectState != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"connect_state\":")
		bytes, err := swag.WriteJSON(m.ConnectState)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConnectState_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"connect_state\":null")
		first = false
	}

	// handle non nullable field consistency_groups with omitempty
	if !swag.IsZero(m.ConsistencyGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_groups\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field current_cpu_model
	if m.CurrentCPUModel != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_cpu_model\":")
		bytes, err := swag.WriteJSON(m.CurrentCPUModel)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentCPUModel_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current_cpu_model\":null")
		first = false
	}

	// handle non nullable field datacenters with omitempty
	if !swag.IsZero(m.Datacenters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":")
		bytes, err := swag.WriteJSON(m.Datacenters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field disconnected_date
	if m.DisconnectedDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disconnected_date\":")
		bytes, err := swag.WriteJSON(m.DisconnectedDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisconnectedDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disconnected_date\":null")
		first = false
	}

	// handle nullable field disconnected_reason
	if m.DisconnectedReason != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disconnected_reason\":")
		bytes, err := swag.WriteJSON(m.DisconnectedReason)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisconnectedReason_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disconnected_reason\":null")
		first = false
	}

	// handle non nullable field dns without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dns\":")
		bytes, err := swag.WriteJSON(m.DNS)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ecp_license
	if m.EcpLicense != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_license\":")
		bytes, err := swag.WriteJSON(m.EcpLicense)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcpLicense_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_license\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field everoute_cluster
	if m.EverouteCluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster\":")
		bytes, err := swag.WriteJSON(m.EverouteCluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EverouteCluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster\":null")
		first = false
	}

	// handle nullable field failure_data_space
	if m.FailureDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space\":")
		bytes, err := swag.WriteJSON(m.FailureDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailureDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failure_data_space\":null")
		first = false
	}

	// handle nullable field has_metrox
	if m.HasMetrox != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":")
		bytes, err := swag.WriteJSON(m.HasMetrox)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasMetrox_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":null")
		first = false
	}

	// handle nullable field host_num
	if m.HostNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":")
		bytes, err := swag.WriteJSON(m.HostNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_num\":null")
		first = false
	}

	// handle non nullable field hosts with omitempty
	if !swag.IsZero(m.Hosts) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":")
		bytes, err := swag.WriteJSON(m.Hosts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field hypervisor
	if m.Hypervisor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hypervisor\":")
		bytes, err := swag.WriteJSON(m.Hypervisor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Hypervisor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hypervisor\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field ip
	if m.IP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip\":")
		bytes, err := swag.WriteJSON(m.IP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip\":null")
		first = false
	}

	// handle nullable field is_all_flash
	if m.IsAllFlash != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_all_flash\":")
		bytes, err := swag.WriteJSON(m.IsAllFlash)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsAllFlash_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"is_all_flash\":null")
		first = false
	}

	// handle nullable field iscsi_vip
	if m.IscsiVip != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_vip\":")
		bytes, err := swag.WriteJSON(m.IscsiVip)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiVip_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_vip\":null")
		first = false
	}

	// handle non nullable field labels with omitempty
	if !swag.IsZero(m.Labels) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field license_expire_date
	if m.LicenseExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_expire_date\":")
		bytes, err := swag.WriteJSON(m.LicenseExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_expire_date\":null")
		first = false
	}

	// handle nullable field license_serial
	if m.LicenseSerial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":")
		bytes, err := swag.WriteJSON(m.LicenseSerial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSerial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_serial\":null")
		first = false
	}

	// handle nullable field license_sign_date
	if m.LicenseSignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_sign_date\":")
		bytes, err := swag.WriteJSON(m.LicenseSignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseSignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_sign_date\":null")
		first = false
	}

	// handle nullable field license_type
	if m.LicenseType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":")
		bytes, err := swag.WriteJSON(m.LicenseType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field maintenance_end_date
	if m.MaintenanceEndDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceEndDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceEndDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_end_date\":null")
		first = false
	}

	// handle nullable field maintenance_start_date
	if m.MaintenanceStartDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":")
		bytes, err := swag.WriteJSON(m.MaintenanceStartDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaintenanceStartDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"maintenance_start_date\":null")
		first = false
	}

	// handle nullable field management_vip
	if m.ManagementVip != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_vip\":")
		bytes, err := swag.WriteJSON(m.ManagementVip)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementVip_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_vip\":null")
		first = false
	}

	// handle nullable field max_chunk_num
	if m.MaxChunkNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":")
		bytes, err := swag.WriteJSON(m.MaxChunkNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxChunkNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_chunk_num\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity
	if m.MaxPhysicalDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity_per_node
	if m.MaxPhysicalDataCapacityPerNode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_per_node\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityPerNode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityPerNode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_per_node\":null")
		first = false
	}

	// handle nullable field metro_availability_checklist
	if m.MetroAvailabilityChecklist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metro_availability_checklist\":")
		bytes, err := swag.WriteJSON(m.MetroAvailabilityChecklist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetroAvailabilityChecklist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metro_availability_checklist\":null")
		first = false
	}

	// handle nullable field mgt_gateway
	if m.MgtGateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_gateway\":")
		bytes, err := swag.WriteJSON(m.MgtGateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MgtGateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_gateway\":null")
		first = false
	}

	// handle nullable field mgt_netmask
	if m.MgtNetmask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_netmask\":")
		bytes, err := swag.WriteJSON(m.MgtNetmask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MgtNetmask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mgt_netmask\":null")
		first = false
	}

	// handle nullable field migration_data_size
	if m.MigrationDataSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"migration_data_size\":")
		bytes, err := swag.WriteJSON(m.MigrationDataSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MigrationDataSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"migration_data_size\":null")
		first = false
	}

	// handle nullable field migration_speed
	if m.MigrationSpeed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"migration_speed\":")
		bytes, err := swag.WriteJSON(m.MigrationSpeed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MigrationSpeed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"migration_speed\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field ntp_mode
	if m.NtpMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_mode\":")
		bytes, err := swag.WriteJSON(m.NtpMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NtpMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_mode\":null")
		first = false
	}

	// handle non nullable field ntp_servers without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ntp_servers\":")
		bytes, err := swag.WriteJSON(m.NtpServers)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nvme_over_rdma_enabled
	if m.NvmeOverRdmaEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvme_over_rdma_enabled\":")
		bytes, err := swag.WriteJSON(m.NvmeOverRdmaEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmeOverRdmaEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvme_over_rdma_enabled\":null")
		first = false
	}

	// handle nullable field nvme_over_tcp_enabled
	if m.NvmeOverTCPEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvme_over_tcp_enabled\":")
		bytes, err := swag.WriteJSON(m.NvmeOverTCPEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmeOverTCPEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvme_over_tcp_enabled\":null")
		first = false
	}

	// handle nullable field nvmf_enabled
	if m.NvmfEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_enabled\":")
		bytes, err := swag.WriteJSON(m.NvmfEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmf_enabled\":null")
		first = false
	}

	// handle nullable field pmem_enabled
	if m.PmemEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_enabled\":")
		bytes, err := swag.WriteJSON(m.PmemEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PmemEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_enabled\":null")
		first = false
	}

	// handle nullable field provisioned_cpu_cores
	if m.ProvisionedCPUCores != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_cpu_cores\":")
		bytes, err := swag.WriteJSON(m.ProvisionedCPUCores)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProvisionedCPUCores_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_cpu_cores\":null")
		first = false
	}

	// handle nullable field provisioned_cpu_cores_for_active_vm
	if m.ProvisionedCPUCoresForActiveVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_cpu_cores_for_active_vm\":")
		bytes, err := swag.WriteJSON(m.ProvisionedCPUCoresForActiveVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProvisionedCPUCoresForActiveVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_cpu_cores_for_active_vm\":null")
		first = false
	}

	// handle nullable field provisioned_for_active_vm_ratio
	if m.ProvisionedForActiveVMRatio != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_for_active_vm_ratio\":")
		bytes, err := swag.WriteJSON(m.ProvisionedForActiveVMRatio)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProvisionedForActiveVMRatio_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_for_active_vm_ratio\":null")
		first = false
	}

	// handle nullable field provisioned_memory_bytes
	if m.ProvisionedMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.ProvisionedMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProvisionedMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_memory_bytes\":null")
		first = false
	}

	// handle nullable field provisioned_ratio
	if m.ProvisionedRatio != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_ratio\":")
		bytes, err := swag.WriteJSON(m.ProvisionedRatio)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProvisionedRatio_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"provisioned_ratio\":null")
		first = false
	}

	// handle nullable field rdma_enabled
	if m.RdmaEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":")
		bytes, err := swag.WriteJSON(m.RdmaEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RdmaEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":null")
		first = false
	}

	// handle non nullable field recommended_cpu_models without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_cpu_models\":")
		bytes, err := swag.WriteJSON(m.RecommendedCPUModels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field recover_data_size
	if m.RecoverDataSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recover_data_size\":")
		bytes, err := swag.WriteJSON(m.RecoverDataSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RecoverDataSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recover_data_size\":null")
		first = false
	}

	// handle nullable field recover_speed
	if m.RecoverSpeed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recover_speed\":")
		bytes, err := swag.WriteJSON(m.RecoverSpeed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RecoverSpeed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recover_speed\":null")
		first = false
	}

	// handle nullable field reserved_cpu_cores_for_system_service
	if m.ReservedCPUCoresForSystemService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reserved_cpu_cores_for_system_service\":")
		bytes, err := swag.WriteJSON(m.ReservedCPUCoresForSystemService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReservedCPUCoresForSystemService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reserved_cpu_cores_for_system_service\":null")
		first = false
	}

	// handle nullable field running_vm_num
	if m.RunningVMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_vm_num\":")
		bytes, err := swag.WriteJSON(m.RunningVMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RunningVMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"running_vm_num\":null")
		first = false
	}

	// handle nullable field settings
	if m.Settings != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"settings\":")
		bytes, err := swag.WriteJSON(m.Settings)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Settings_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"settings\":null")
		first = false
	}

	// handle nullable field software_edition
	if m.SoftwareEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":")
		bytes, err := swag.WriteJSON(m.SoftwareEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SoftwareEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"software_edition\":null")
		first = false
	}

	// handle nullable field stopped_vm_num
	if m.StoppedVMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stopped_vm_num\":")
		bytes, err := swag.WriteJSON(m.StoppedVMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StoppedVMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stopped_vm_num\":null")
		first = false
	}

	// handle nullable field stretch
	if m.Stretch != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stretch\":")
		bytes, err := swag.WriteJSON(m.Stretch)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Stretch_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stretch\":null")
		first = false
	}

	// handle nullable field suspended_vm_num
	if m.SuspendedVMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"suspended_vm_num\":")
		bytes, err := swag.WriteJSON(m.SuspendedVMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuspendedVMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"suspended_vm_num\":null")
		first = false
	}

	// handle nullable field total_cache_capacity
	if m.TotalCacheCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cache_capacity\":")
		bytes, err := swag.WriteJSON(m.TotalCacheCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCacheCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cache_capacity\":null")
		first = false
	}

	// handle nullable field total_cpu_cores
	if m.TotalCPUCores != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCores)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCores_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores\":null")
		first = false
	}

	// handle nullable field total_cpu_hz
	if m.TotalCPUHz != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHz)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHz_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":null")
		first = false
	}

	// handle non nullable field total_cpu_models without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_models\":")
		bytes, err := swag.WriteJSON(m.TotalCPUModels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_sockets
	if m.TotalCPUSockets != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_sockets\":")
		bytes, err := swag.WriteJSON(m.TotalCPUSockets)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUSockets_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_sockets\":null")
		first = false
	}

	// handle nullable field total_data_capacity
	if m.TotalDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity\":")
		bytes, err := swag.WriteJSON(m.TotalDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_data_capacity\":null")
		first = false
	}

	// handle nullable field total_memory_bytes
	if m.TotalMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version
	if m.UpgradeToolVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version\":null")
		first = false
	}

	// handle nullable field used_cpu_hz
	if m.UsedCPUHz != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz\":")
		bytes, err := swag.WriteJSON(m.UsedCPUHz)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedCPUHz_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_cpu_hz\":null")
		first = false
	}

	// handle nullable field used_data_space
	if m.UsedDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":null")
		first = false
	}

	// handle nullable field used_memory_bytes
	if m.UsedMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.UsedMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_memory_bytes\":null")
		first = false
	}

	// handle nullable field valid_data_space
	if m.ValidDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":null")
		first = false
	}

	// handle nullable field vcenterAccount
	if m.VcenterAccount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vcenterAccount\":")
		bytes, err := swag.WriteJSON(m.VcenterAccount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VcenterAccount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vcenterAccount\":null")
		first = false
	}

	// handle non nullable field vdses with omitempty
	if !swag.IsZero(m.Vdses) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":")
		bytes, err := swag.WriteJSON(m.Vdses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field vhost_enabled
	if m.VhostEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vhost_enabled\":")
		bytes, err := swag.WriteJSON(m.VhostEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VhostEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vhost_enabled\":null")
		first = false
	}

	// handle non nullable field vm_folders with omitempty
	if !swag.IsZero(m.VMFolders) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_folders\":")
		bytes, err := swag.WriteJSON(m.VMFolders)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_num
	if m.VMNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":")
		bytes, err := swag.WriteJSON(m.VMNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_num\":null")
		first = false
	}

	// handle non nullable field vm_templates with omitempty
	if !swag.IsZero(m.VMTemplates) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_templates\":")
		bytes, err := swag.WriteJSON(m.VMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field vms with omitempty
	if !swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field witness
	if m.Witness != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witness\":")
		bytes, err := swag.WriteJSON(m.Witness)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Witness_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witness\":null")
		first = false
	}

	// handle non nullable field zones with omitempty
	if !swag.IsZero(m.Zones) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones\":")
		bytes, err := swag.WriteJSON(m.Zones)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEverouteCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroAvailabilityChecklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedCPUModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCPUModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	if m.Architecture != nil {
		if err := m.Architecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateConnectState(formats strfmt.Registry) error {

	if err := validate.Required("connect_state", "body", m.ConnectState); err != nil {
		return err
	}

	if err := validate.Required("connect_state", "body", m.ConnectState); err != nil {
		return err
	}

	if m.ConnectState != nil {
		if err := m.ConnectState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connect_state")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateConsistencyGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroups); i++ {
		if swag.IsZero(m.ConsistencyGroups[i]) { // not required
			continue
		}

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateDisconnectedReason(formats strfmt.Registry) error {
	if swag.IsZero(m.DisconnectedReason) { // not required
		return nil
	}

	if m.DisconnectedReason != nil {
		if err := m.DisconnectedReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disconnected_reason")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateDNS(formats strfmt.Registry) error {

	if err := validate.Required("dns", "body", m.DNS); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateEcpLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.EcpLicense) { // not required
		return nil
	}

	if m.EcpLicense != nil {
		if err := m.EcpLicense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_license")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_license")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateEverouteCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.EverouteCluster) { // not required
		return nil
	}

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateHypervisor(formats strfmt.Registry) error {
	if swag.IsZero(m.Hypervisor) { // not required
		return nil
	}

	if m.Hypervisor != nil {
		if err := m.Hypervisor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervisor")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateLicenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	if m.LicenseType != nil {
		if err := m.LicenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateMetroAvailabilityChecklist(formats strfmt.Registry) error {
	if swag.IsZero(m.MetroAvailabilityChecklist) { // not required
		return nil
	}

	if m.MetroAvailabilityChecklist != nil {
		if err := m.MetroAvailabilityChecklist.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metro_availability_checklist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metro_availability_checklist")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateNtpMode(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpMode) { // not required
		return nil
	}

	if m.NtpMode != nil {
		if err := m.NtpMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntp_mode")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateNtpServers(formats strfmt.Registry) error {

	if err := validate.Required("ntp_servers", "body", m.NtpServers); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateRecommendedCPUModels(formats strfmt.Registry) error {

	if err := validate.Required("recommended_cpu_models", "body", m.RecommendedCPUModels); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateSoftwareEdition(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEdition) { // not required
		return nil
	}

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateTotalCPUModels(formats strfmt.Registry) error {

	if err := validate.Required("total_cpu_models", "body", m.TotalCPUModels); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateVcenterAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.VcenterAccount) { // not required
		return nil
	}

	if m.VcenterAccount != nil {
		if err := m.VcenterAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterAccount")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	for i := 0; i < len(m.Vdses); i++ {
		if swag.IsZero(m.Vdses[i]) { // not required
			continue
		}

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateVMFolders(formats strfmt.Registry) error {
	if swag.IsZero(m.VMFolders) { // not required
		return nil
	}

	for i := 0; i < len(m.VMFolders); i++ {
		if swag.IsZero(m.VMFolders[i]) { // not required
			continue
		}

		if m.VMFolders[i] != nil {
			if err := m.VMFolders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_folders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_folders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VMTemplates); i++ {
		if swag.IsZero(m.VMTemplates[i]) { // not required
			continue
		}

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) validateWitness(formats strfmt.Registry) error {
	if swag.IsZero(m.Witness) { // not required
		return nil
	}

	if m.Witness != nil {
		if err := m.Witness.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witness")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witness")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateZones(formats strfmt.Registry) error {
	if swag.IsZero(m.Zones) { // not required
		return nil
	}

	for i := 0; i < len(m.Zones); i++ {
		if swag.IsZero(m.Zones[i]) { // not required
			continue
		}

		if m.Zones[i] != nil {
			if err := m.Zones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster based on the context it is used
func (m *Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisconnectedReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpLicense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEverouteCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervisor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetroAvailabilityChecklist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMFolders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {
			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateArchitecture(ctx context.Context, formats strfmt.Registry) error {

	if m.Architecture != nil {
		if err := m.Architecture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateConnectState(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectState != nil {
		if err := m.ConnectState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connect_state")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateConsistencyGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroups); i++ {

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateDisconnectedReason(ctx context.Context, formats strfmt.Registry) error {

	if m.DisconnectedReason != nil {
		if err := m.DisconnectedReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disconnected_reason")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateEcpLicense(ctx context.Context, formats strfmt.Registry) error {

	if m.EcpLicense != nil {
		if err := m.EcpLicense.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_license")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_license")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateEverouteCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateHypervisor(ctx context.Context, formats strfmt.Registry) error {

	if m.Hypervisor != nil {
		if err := m.Hypervisor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervisor")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateLicenseType(ctx context.Context, formats strfmt.Registry) error {

	if m.LicenseType != nil {
		if err := m.LicenseType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateMetroAvailabilityChecklist(ctx context.Context, formats strfmt.Registry) error {

	if m.MetroAvailabilityChecklist != nil {
		if err := m.MetroAvailabilityChecklist.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metro_availability_checklist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metro_availability_checklist")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateNtpMode(ctx context.Context, formats strfmt.Registry) error {

	if m.NtpMode != nil {
		if err := m.NtpMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntp_mode")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateSoftwareEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.SoftwareEdition != nil {
		if err := m.SoftwareEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_edition")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateVcenterAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.VcenterAccount != nil {
		if err := m.VcenterAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterAccount")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vdses); i++ {

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateVMFolders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMFolders); i++ {

		if m.VMFolders[i] != nil {
			if err := m.VMFolders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_folders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_folders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMTemplates); i++ {

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Cluster) contextValidateWitness(ctx context.Context, formats strfmt.Registry) error {

	if m.Witness != nil {
		if err := m.Witness.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witness")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witness")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Zones); i++ {

		if m.Zones[i] != nil {
			if err := m.Zones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
