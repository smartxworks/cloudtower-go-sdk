// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphCreationParams graph creation params
//
// swagger:model GraphCreationParams
type GraphCreationParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// connect id
	// Required: true
	ConnectID []string `json:"connect_id"`

	// instance ids
	InstanceIds []string `json:"instance_ids,omitempty"`

	// metric count
	MetricCount *int32 `json:"metric_count,omitempty"`

	// metric name
	// Required: true
	MetricName *string `json:"metric_name"`

	// metric type
	MetricType *MetricType `json:"metric_type,omitempty"`

	// network
	Network *NetworkType `json:"network,omitempty"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`

	// service
	Service *string `json:"service,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`

	// type
	// Required: true
	Type *GraphType `json:"type"`

	// view id
	// Required: true
	ViewID *string `json:"view_id"`

	MarshalOpts *GraphCreationParamsMarshalOpts `json:"-"`
}

type GraphCreationParamsMarshalOpts struct {
	ClusterID_Explicit_Null_When_Empty bool

	MetricCount_Explicit_Null_When_Empty bool

	MetricName_Explicit_Null_When_Empty bool

	MetricType_Explicit_Null_When_Empty bool

	Network_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	Service_Explicit_Null_When_Empty bool

	Title_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	ViewID_Explicit_Null_When_Empty bool
}

func (m GraphCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_id
	if m.ClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":")
		bytes, err := swag.WriteJSON(m.ClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":null")
		first = false
	}

	// handle non nullable field connect_id without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"connect_id\":")
	bytes, err := swag.WriteJSON(m.ConnectID)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	// handle non nullable field instance_ids with omitempty
	if swag.IsZero(m.InstanceIds) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"instance_ids\":")
		bytes, err := swag.WriteJSON(m.InstanceIds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_count
	if m.MetricCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":")
		bytes, err := swag.WriteJSON(m.MetricCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":null")
		first = false
	}

	// handle nullable field metric_name
	if m.MetricName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":")
		bytes, err := swag.WriteJSON(m.MetricName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":null")
		first = false
	}

	// handle nullable field metric_type
	if m.MetricType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":")
		bytes, err := swag.WriteJSON(m.MetricType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":null")
		first = false
	}

	// handle nullable field network
	if m.Network != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":")
		bytes, err := swag.WriteJSON(m.Network)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Network_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle nullable field service
	if m.Service != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":")
		bytes, err := swag.WriteJSON(m.Service)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Service_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":null")
		first = false
	}

	// handle nullable field title
	if m.Title != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":")
		bytes, err := swag.WriteJSON(m.Title)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Title_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field view_id
	if m.ViewID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"view_id\":")
		bytes, err := swag.WriteJSON(m.ViewID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ViewID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"view_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this graph creation params
func (m *GraphCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphCreationParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *GraphCreationParams) validateConnectID(formats strfmt.Registry) error {

	if err := validate.Required("connect_id", "body", m.ConnectID); err != nil {
		return err
	}

	return nil
}

func (m *GraphCreationParams) validateMetricName(formats strfmt.Registry) error {

	if err := validate.Required("metric_name", "body", m.MetricName); err != nil {
		return err
	}

	return nil
}

func (m *GraphCreationParams) validateMetricType(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricType) { // not required
		return nil
	}

	if m.MetricType != nil {
		if err := m.MetricType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphCreationParams) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphCreationParams) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *GraphCreationParams) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *GraphCreationParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphCreationParams) validateViewID(formats strfmt.Registry) error {

	if err := validate.Required("view_id", "body", m.ViewID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this graph creation params based on the context it is used
func (m *GraphCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphCreationParams) contextValidateMetricType(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricType != nil {
		if err := m.MetricType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphCreationParams) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphCreationParams) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphCreationParams) UnmarshalBinary(b []byte) error {
	var res GraphCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
