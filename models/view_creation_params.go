// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewCreationParams view creation params
//
// swagger:model ViewCreationParams
type ViewCreationParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// time span
	// Required: true
	TimeSpan *int32 `json:"time_span"`

	// time unit
	// Required: true
	TimeUnit *TimeUnit `json:"time_unit"`

	MarshalOpts *ViewCreationParamsMarshalOpts `json:"-"`
}

type ViewCreationParamsMarshalOpts struct {
	ClusterID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	TimeSpan_Explicit_Null_When_Empty bool

	TimeUnit_Explicit_Null_When_Empty bool
}

func (m ViewCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster_id
	if m.ClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":")
		bytes, err := swag.WriteJSON(m.ClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field time_span
	if m.TimeSpan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"time_span\":")
		bytes, err := swag.WriteJSON(m.TimeSpan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TimeSpan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"time_span\":null")
		first = false
	}

	// handle nullable field time_unit
	if m.TimeUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"time_unit\":")
		bytes, err := swag.WriteJSON(m.TimeUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TimeUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"time_unit\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this view creation params
func (m *ViewCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSpan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewCreationParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ViewCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ViewCreationParams) validateTimeSpan(formats strfmt.Registry) error {

	if err := validate.Required("time_span", "body", m.TimeSpan); err != nil {
		return err
	}

	return nil
}

func (m *ViewCreationParams) validateTimeUnit(formats strfmt.Registry) error {

	if err := validate.Required("time_unit", "body", m.TimeUnit); err != nil {
		return err
	}

	if err := validate.Required("time_unit", "body", m.TimeUnit); err != nil {
		return err
	}

	if m.TimeUnit != nil {
		if err := m.TimeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view creation params based on the context it is used
func (m *ViewCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewCreationParams) contextValidateTimeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeUnit != nil {
		if err := m.TimeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ViewCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewCreationParams) UnmarshalBinary(b []byte) error {
	var res ViewCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
