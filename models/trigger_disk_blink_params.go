// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TriggerDiskBlinkParams trigger disk blink params
//
// swagger:model TriggerDiskBlinkParams
type TriggerDiskBlinkParams struct {

	// disk name
	// Required: true
	DiskName *string `json:"disk_name"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// led status
	// Enum: [on off]
	LedStatus *string `json:"led_status,omitempty"`

	MarshalOpts *TriggerDiskBlinkParamsMarshalOpts `json:"-"`
}

type TriggerDiskBlinkParamsMarshalOpts struct {
	DiskName_Explicit_Null_When_Empty bool

	HostID_Explicit_Null_When_Empty bool

	LedStatus_Explicit_Null_When_Empty bool
}

func (m TriggerDiskBlinkParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field disk_name
	if m.DiskName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_name\":")
		bytes, err := swag.WriteJSON(m.DiskName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_name\":null")
		first = false
	}

	// handle nullable field host_id
	if m.HostID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_id\":")
		bytes, err := swag.WriteJSON(m.HostID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_id\":null")
		first = false
	}

	// handle nullable field led_status
	if m.LedStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"led_status\":")
		bytes, err := swag.WriteJSON(m.LedStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LedStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"led_status\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this trigger disk blink params
func (m *TriggerDiskBlinkParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLedStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerDiskBlinkParams) validateDiskName(formats strfmt.Registry) error {

	if err := validate.Required("disk_name", "body", m.DiskName); err != nil {
		return err
	}

	return nil
}

func (m *TriggerDiskBlinkParams) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

var triggerDiskBlinkParamsTypeLedStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		triggerDiskBlinkParamsTypeLedStatusPropEnum = append(triggerDiskBlinkParamsTypeLedStatusPropEnum, v)
	}
}

const (

	// TriggerDiskBlinkParamsLedStatusOn captures enum value "on"
	TriggerDiskBlinkParamsLedStatusOn string = "on"

	// TriggerDiskBlinkParamsLedStatusOff captures enum value "off"
	TriggerDiskBlinkParamsLedStatusOff string = "off"
)

// prop value enum
func (m *TriggerDiskBlinkParams) validateLedStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, triggerDiskBlinkParamsTypeLedStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TriggerDiskBlinkParams) validateLedStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LedStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLedStatusEnum("led_status", "body", *m.LedStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this trigger disk blink params based on context it is used
func (m *TriggerDiskBlinkParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TriggerDiskBlinkParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerDiskBlinkParams) UnmarshalBinary(b []byte) error {
	var res TriggerDiskBlinkParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
