// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserAuditLogWhereInput user audit log where input
//
// swagger:model UserAuditLogWhereInput
type UserAuditLogWhereInput struct {

	// a n d
	AND []*UserAuditLogWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*UserAuditLogWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*UserAuditLogWhereInput `json:"OR,omitempty"`

	// action
	Action *string `json:"action,omitempty"`

	// action contains
	ActionContains *string `json:"action_contains,omitempty"`

	// action ends with
	ActionEndsWith *string `json:"action_ends_with,omitempty"`

	// action gt
	ActionGt *string `json:"action_gt,omitempty"`

	// action gte
	ActionGte *string `json:"action_gte,omitempty"`

	// action in
	ActionIn []string `json:"action_in,omitempty"`

	// action lt
	ActionLt *string `json:"action_lt,omitempty"`

	// action lte
	ActionLte *string `json:"action_lte,omitempty"`

	// action not
	ActionNot *string `json:"action_not,omitempty"`

	// action not contains
	ActionNotContains *string `json:"action_not_contains,omitempty"`

	// action not ends with
	ActionNotEndsWith *string `json:"action_not_ends_with,omitempty"`

	// action not in
	ActionNotIn []string `json:"action_not_in,omitempty"`

	// action not starts with
	ActionNotStartsWith *string `json:"action_not_starts_with,omitempty"`

	// action starts with
	ActionStartsWith *string `json:"action_starts_with,omitempty"`

	// auth type
	AuthType *string `json:"auth_type,omitempty"`

	// auth type contains
	AuthTypeContains *string `json:"auth_type_contains,omitempty"`

	// auth type ends with
	AuthTypeEndsWith *string `json:"auth_type_ends_with,omitempty"`

	// auth type gt
	AuthTypeGt *string `json:"auth_type_gt,omitempty"`

	// auth type gte
	AuthTypeGte *string `json:"auth_type_gte,omitempty"`

	// auth type in
	AuthTypeIn []string `json:"auth_type_in,omitempty"`

	// auth type lt
	AuthTypeLt *string `json:"auth_type_lt,omitempty"`

	// auth type lte
	AuthTypeLte *string `json:"auth_type_lte,omitempty"`

	// auth type not
	AuthTypeNot *string `json:"auth_type_not,omitempty"`

	// auth type not contains
	AuthTypeNotContains *string `json:"auth_type_not_contains,omitempty"`

	// auth type not ends with
	AuthTypeNotEndsWith *string `json:"auth_type_not_ends_with,omitempty"`

	// auth type not in
	AuthTypeNotIn []string `json:"auth_type_not_in,omitempty"`

	// auth type not starts with
	AuthTypeNotStartsWith *string `json:"auth_type_not_starts_with,omitempty"`

	// auth type starts with
	AuthTypeStartsWith *string `json:"auth_type_starts_with,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// finished at
	FinishedAt *string `json:"finished_at,omitempty"`

	// finished at gt
	FinishedAtGt *string `json:"finished_at_gt,omitempty"`

	// finished at gte
	FinishedAtGte *string `json:"finished_at_gte,omitempty"`

	// finished at in
	FinishedAtIn []string `json:"finished_at_in,omitempty"`

	// finished at lt
	FinishedAtLt *string `json:"finished_at_lt,omitempty"`

	// finished at lte
	FinishedAtLte *string `json:"finished_at_lte,omitempty"`

	// finished at not
	FinishedAtNot *string `json:"finished_at_not,omitempty"`

	// finished at not in
	FinishedAtNotIn []string `json:"finished_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// ip address
	IPAddress *string `json:"ip_address,omitempty"`

	// ip address contains
	IPAddressContains *string `json:"ip_address_contains,omitempty"`

	// ip address ends with
	IPAddressEndsWith *string `json:"ip_address_ends_with,omitempty"`

	// ip address gt
	IPAddressGt *string `json:"ip_address_gt,omitempty"`

	// ip address gte
	IPAddressGte *string `json:"ip_address_gte,omitempty"`

	// ip address in
	IPAddressIn []string `json:"ip_address_in,omitempty"`

	// ip address lt
	IPAddressLt *string `json:"ip_address_lt,omitempty"`

	// ip address lte
	IPAddressLte *string `json:"ip_address_lte,omitempty"`

	// ip address not
	IPAddressNot *string `json:"ip_address_not,omitempty"`

	// ip address not contains
	IPAddressNotContains *string `json:"ip_address_not_contains,omitempty"`

	// ip address not ends with
	IPAddressNotEndsWith *string `json:"ip_address_not_ends_with,omitempty"`

	// ip address not in
	IPAddressNotIn []string `json:"ip_address_not_in,omitempty"`

	// ip address not starts with
	IPAddressNotStartsWith *string `json:"ip_address_not_starts_with,omitempty"`

	// ip address starts with
	IPAddressStartsWith *string `json:"ip_address_starts_with,omitempty"`

	// message
	Message *string `json:"message,omitempty"`

	// message contains
	MessageContains *string `json:"message_contains,omitempty"`

	// message ends with
	MessageEndsWith *string `json:"message_ends_with,omitempty"`

	// message gt
	MessageGt *string `json:"message_gt,omitempty"`

	// message gte
	MessageGte *string `json:"message_gte,omitempty"`

	// message in
	MessageIn []string `json:"message_in,omitempty"`

	// message lt
	MessageLt *string `json:"message_lt,omitempty"`

	// message lte
	MessageLte *string `json:"message_lte,omitempty"`

	// message not
	MessageNot *string `json:"message_not,omitempty"`

	// message not contains
	MessageNotContains *string `json:"message_not_contains,omitempty"`

	// message not ends with
	MessageNotEndsWith *string `json:"message_not_ends_with,omitempty"`

	// message not in
	MessageNotIn []string `json:"message_not_in,omitempty"`

	// message not starts with
	MessageNotStartsWith *string `json:"message_not_starts_with,omitempty"`

	// message starts with
	MessageStartsWith *string `json:"message_starts_with,omitempty"`

	// resource id
	ResourceID *string `json:"resource_id,omitempty"`

	// resource id contains
	ResourceIDContains *string `json:"resource_id_contains,omitempty"`

	// resource id ends with
	ResourceIDEndsWith *string `json:"resource_id_ends_with,omitempty"`

	// resource id gt
	ResourceIDGt *string `json:"resource_id_gt,omitempty"`

	// resource id gte
	ResourceIDGte *string `json:"resource_id_gte,omitempty"`

	// resource id in
	ResourceIDIn []string `json:"resource_id_in,omitempty"`

	// resource id lt
	ResourceIDLt *string `json:"resource_id_lt,omitempty"`

	// resource id lte
	ResourceIDLte *string `json:"resource_id_lte,omitempty"`

	// resource id not
	ResourceIDNot *string `json:"resource_id_not,omitempty"`

	// resource id not contains
	ResourceIDNotContains *string `json:"resource_id_not_contains,omitempty"`

	// resource id not ends with
	ResourceIDNotEndsWith *string `json:"resource_id_not_ends_with,omitempty"`

	// resource id not in
	ResourceIDNotIn []string `json:"resource_id_not_in,omitempty"`

	// resource id not starts with
	ResourceIDNotStartsWith *string `json:"resource_id_not_starts_with,omitempty"`

	// resource id starts with
	ResourceIDStartsWith *string `json:"resource_id_starts_with,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// resource type contains
	ResourceTypeContains *string `json:"resource_type_contains,omitempty"`

	// resource type ends with
	ResourceTypeEndsWith *string `json:"resource_type_ends_with,omitempty"`

	// resource type gt
	ResourceTypeGt *string `json:"resource_type_gt,omitempty"`

	// resource type gte
	ResourceTypeGte *string `json:"resource_type_gte,omitempty"`

	// resource type in
	ResourceTypeIn []string `json:"resource_type_in,omitempty"`

	// resource type lt
	ResourceTypeLt *string `json:"resource_type_lt,omitempty"`

	// resource type lte
	ResourceTypeLte *string `json:"resource_type_lte,omitempty"`

	// resource type not
	ResourceTypeNot *string `json:"resource_type_not,omitempty"`

	// resource type not contains
	ResourceTypeNotContains *string `json:"resource_type_not_contains,omitempty"`

	// resource type not ends with
	ResourceTypeNotEndsWith *string `json:"resource_type_not_ends_with,omitempty"`

	// resource type not in
	ResourceTypeNotIn []string `json:"resource_type_not_in,omitempty"`

	// resource type not starts with
	ResourceTypeNotStartsWith *string `json:"resource_type_not_starts_with,omitempty"`

	// resource type starts with
	ResourceTypeStartsWith *string `json:"resource_type_starts_with,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// status
	Status *UserAuditLogStatus `json:"status,omitempty"`

	// status in
	StatusIn []UserAuditLogStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *UserAuditLogStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []UserAuditLogStatus `json:"status_not_in,omitempty"`

	// user
	User *UserWhereInput `json:"user,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// username contains
	UsernameContains *string `json:"username_contains,omitempty"`

	// username ends with
	UsernameEndsWith *string `json:"username_ends_with,omitempty"`

	// username gt
	UsernameGt *string `json:"username_gt,omitempty"`

	// username gte
	UsernameGte *string `json:"username_gte,omitempty"`

	// username in
	UsernameIn []string `json:"username_in,omitempty"`

	// username lt
	UsernameLt *string `json:"username_lt,omitempty"`

	// username lte
	UsernameLte *string `json:"username_lte,omitempty"`

	// username not
	UsernameNot *string `json:"username_not,omitempty"`

	// username not contains
	UsernameNotContains *string `json:"username_not_contains,omitempty"`

	// username not ends with
	UsernameNotEndsWith *string `json:"username_not_ends_with,omitempty"`

	// username not in
	UsernameNotIn []string `json:"username_not_in,omitempty"`

	// username not starts with
	UsernameNotStartsWith *string `json:"username_not_starts_with,omitempty"`

	// username starts with
	UsernameStartsWith *string `json:"username_starts_with,omitempty"`

	MarshalOpts *UserAuditLogWhereInputMarshalOpts `json:"-"`
}

type UserAuditLogWhereInputMarshalOpts struct {
	Action_Explicit_Null_When_Empty bool

	ActionContains_Explicit_Null_When_Empty bool

	ActionEndsWith_Explicit_Null_When_Empty bool

	ActionGt_Explicit_Null_When_Empty bool

	ActionGte_Explicit_Null_When_Empty bool

	ActionLt_Explicit_Null_When_Empty bool

	ActionLte_Explicit_Null_When_Empty bool

	ActionNot_Explicit_Null_When_Empty bool

	ActionNotContains_Explicit_Null_When_Empty bool

	ActionNotEndsWith_Explicit_Null_When_Empty bool

	ActionNotStartsWith_Explicit_Null_When_Empty bool

	ActionStartsWith_Explicit_Null_When_Empty bool

	AuthType_Explicit_Null_When_Empty bool

	AuthTypeContains_Explicit_Null_When_Empty bool

	AuthTypeEndsWith_Explicit_Null_When_Empty bool

	AuthTypeGt_Explicit_Null_When_Empty bool

	AuthTypeGte_Explicit_Null_When_Empty bool

	AuthTypeLt_Explicit_Null_When_Empty bool

	AuthTypeLte_Explicit_Null_When_Empty bool

	AuthTypeNot_Explicit_Null_When_Empty bool

	AuthTypeNotContains_Explicit_Null_When_Empty bool

	AuthTypeNotEndsWith_Explicit_Null_When_Empty bool

	AuthTypeNotStartsWith_Explicit_Null_When_Empty bool

	AuthTypeStartsWith_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	FinishedAt_Explicit_Null_When_Empty bool

	FinishedAtGt_Explicit_Null_When_Empty bool

	FinishedAtGte_Explicit_Null_When_Empty bool

	FinishedAtLt_Explicit_Null_When_Empty bool

	FinishedAtLte_Explicit_Null_When_Empty bool

	FinishedAtNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IPAddress_Explicit_Null_When_Empty bool

	IPAddressContains_Explicit_Null_When_Empty bool

	IPAddressEndsWith_Explicit_Null_When_Empty bool

	IPAddressGt_Explicit_Null_When_Empty bool

	IPAddressGte_Explicit_Null_When_Empty bool

	IPAddressLt_Explicit_Null_When_Empty bool

	IPAddressLte_Explicit_Null_When_Empty bool

	IPAddressNot_Explicit_Null_When_Empty bool

	IPAddressNotContains_Explicit_Null_When_Empty bool

	IPAddressNotEndsWith_Explicit_Null_When_Empty bool

	IPAddressNotStartsWith_Explicit_Null_When_Empty bool

	IPAddressStartsWith_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	MessageContains_Explicit_Null_When_Empty bool

	MessageEndsWith_Explicit_Null_When_Empty bool

	MessageGt_Explicit_Null_When_Empty bool

	MessageGte_Explicit_Null_When_Empty bool

	MessageLt_Explicit_Null_When_Empty bool

	MessageLte_Explicit_Null_When_Empty bool

	MessageNot_Explicit_Null_When_Empty bool

	MessageNotContains_Explicit_Null_When_Empty bool

	MessageNotEndsWith_Explicit_Null_When_Empty bool

	MessageNotStartsWith_Explicit_Null_When_Empty bool

	MessageStartsWith_Explicit_Null_When_Empty bool

	ResourceID_Explicit_Null_When_Empty bool

	ResourceIDContains_Explicit_Null_When_Empty bool

	ResourceIDEndsWith_Explicit_Null_When_Empty bool

	ResourceIDGt_Explicit_Null_When_Empty bool

	ResourceIDGte_Explicit_Null_When_Empty bool

	ResourceIDLt_Explicit_Null_When_Empty bool

	ResourceIDLte_Explicit_Null_When_Empty bool

	ResourceIDNot_Explicit_Null_When_Empty bool

	ResourceIDNotContains_Explicit_Null_When_Empty bool

	ResourceIDNotEndsWith_Explicit_Null_When_Empty bool

	ResourceIDNotStartsWith_Explicit_Null_When_Empty bool

	ResourceIDStartsWith_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	ResourceTypeContains_Explicit_Null_When_Empty bool

	ResourceTypeEndsWith_Explicit_Null_When_Empty bool

	ResourceTypeGt_Explicit_Null_When_Empty bool

	ResourceTypeGte_Explicit_Null_When_Empty bool

	ResourceTypeLt_Explicit_Null_When_Empty bool

	ResourceTypeLte_Explicit_Null_When_Empty bool

	ResourceTypeNot_Explicit_Null_When_Empty bool

	ResourceTypeNotContains_Explicit_Null_When_Empty bool

	ResourceTypeNotEndsWith_Explicit_Null_When_Empty bool

	ResourceTypeNotStartsWith_Explicit_Null_When_Empty bool

	ResourceTypeStartsWith_Explicit_Null_When_Empty bool

	StartedAt_Explicit_Null_When_Empty bool

	StartedAtGt_Explicit_Null_When_Empty bool

	StartedAtGte_Explicit_Null_When_Empty bool

	StartedAtLt_Explicit_Null_When_Empty bool

	StartedAtLte_Explicit_Null_When_Empty bool

	StartedAtNot_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	User_Explicit_Null_When_Empty bool

	Username_Explicit_Null_When_Empty bool

	UsernameContains_Explicit_Null_When_Empty bool

	UsernameEndsWith_Explicit_Null_When_Empty bool

	UsernameGt_Explicit_Null_When_Empty bool

	UsernameGte_Explicit_Null_When_Empty bool

	UsernameLt_Explicit_Null_When_Empty bool

	UsernameLte_Explicit_Null_When_Empty bool

	UsernameNot_Explicit_Null_When_Empty bool

	UsernameNotContains_Explicit_Null_When_Empty bool

	UsernameNotEndsWith_Explicit_Null_When_Empty bool

	UsernameNotStartsWith_Explicit_Null_When_Empty bool

	UsernameStartsWith_Explicit_Null_When_Empty bool
}

func (m UserAuditLogWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field action
	if m.Action != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":")
		bytes, err := swag.WriteJSON(m.Action)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Action_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":null")
		first = false
	}

	// handle nullable field action_contains
	if m.ActionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_contains\":")
		bytes, err := swag.WriteJSON(m.ActionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_contains\":null")
		first = false
	}

	// handle nullable field action_ends_with
	if m.ActionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_ends_with\":")
		bytes, err := swag.WriteJSON(m.ActionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_ends_with\":null")
		first = false
	}

	// handle nullable field action_gt
	if m.ActionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_gt\":")
		bytes, err := swag.WriteJSON(m.ActionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_gt\":null")
		first = false
	}

	// handle nullable field action_gte
	if m.ActionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_gte\":")
		bytes, err := swag.WriteJSON(m.ActionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_gte\":null")
		first = false
	}

	// handle non nullable field action_in with omitempty
	if swag.IsZero(m.ActionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_in\":")
		bytes, err := swag.WriteJSON(m.ActionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field action_lt
	if m.ActionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_lt\":")
		bytes, err := swag.WriteJSON(m.ActionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_lt\":null")
		first = false
	}

	// handle nullable field action_lte
	if m.ActionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_lte\":")
		bytes, err := swag.WriteJSON(m.ActionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_lte\":null")
		first = false
	}

	// handle nullable field action_not
	if m.ActionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not\":")
		bytes, err := swag.WriteJSON(m.ActionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not\":null")
		first = false
	}

	// handle nullable field action_not_contains
	if m.ActionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_contains\":")
		bytes, err := swag.WriteJSON(m.ActionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_contains\":null")
		first = false
	}

	// handle nullable field action_not_ends_with
	if m.ActionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ActionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_ends_with\":null")
		first = false
	}

	// handle non nullable field action_not_in with omitempty
	if swag.IsZero(m.ActionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_in\":")
		bytes, err := swag.WriteJSON(m.ActionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field action_not_starts_with
	if m.ActionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ActionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_not_starts_with\":null")
		first = false
	}

	// handle nullable field action_starts_with
	if m.ActionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_starts_with\":")
		bytes, err := swag.WriteJSON(m.ActionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ActionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action_starts_with\":null")
		first = false
	}

	// handle nullable field auth_type
	if m.AuthType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type\":")
		bytes, err := swag.WriteJSON(m.AuthType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type\":null")
		first = false
	}

	// handle nullable field auth_type_contains
	if m.AuthTypeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_contains\":")
		bytes, err := swag.WriteJSON(m.AuthTypeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_contains\":null")
		first = false
	}

	// handle nullable field auth_type_ends_with
	if m.AuthTypeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_ends_with\":")
		bytes, err := swag.WriteJSON(m.AuthTypeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_ends_with\":null")
		first = false
	}

	// handle nullable field auth_type_gt
	if m.AuthTypeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_gt\":")
		bytes, err := swag.WriteJSON(m.AuthTypeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_gt\":null")
		first = false
	}

	// handle nullable field auth_type_gte
	if m.AuthTypeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_gte\":")
		bytes, err := swag.WriteJSON(m.AuthTypeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_gte\":null")
		first = false
	}

	// handle non nullable field auth_type_in with omitempty
	if swag.IsZero(m.AuthTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_in\":")
		bytes, err := swag.WriteJSON(m.AuthTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field auth_type_lt
	if m.AuthTypeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_lt\":")
		bytes, err := swag.WriteJSON(m.AuthTypeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_lt\":null")
		first = false
	}

	// handle nullable field auth_type_lte
	if m.AuthTypeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_lte\":")
		bytes, err := swag.WriteJSON(m.AuthTypeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_lte\":null")
		first = false
	}

	// handle nullable field auth_type_not
	if m.AuthTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not\":")
		bytes, err := swag.WriteJSON(m.AuthTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not\":null")
		first = false
	}

	// handle nullable field auth_type_not_contains
	if m.AuthTypeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_contains\":")
		bytes, err := swag.WriteJSON(m.AuthTypeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_contains\":null")
		first = false
	}

	// handle nullable field auth_type_not_ends_with
	if m.AuthTypeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.AuthTypeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_ends_with\":null")
		first = false
	}

	// handle non nullable field auth_type_not_in with omitempty
	if swag.IsZero(m.AuthTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_in\":")
		bytes, err := swag.WriteJSON(m.AuthTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field auth_type_not_starts_with
	if m.AuthTypeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.AuthTypeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_not_starts_with\":null")
		first = false
	}

	// handle nullable field auth_type_starts_with
	if m.AuthTypeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_starts_with\":")
		bytes, err := swag.WriteJSON(m.AuthTypeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AuthTypeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auth_type_starts_with\":null")
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at
	if m.FinishedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":")
		bytes, err := swag.WriteJSON(m.FinishedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":null")
		first = false
	}

	// handle nullable field finished_at_gt
	if m.FinishedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":null")
		first = false
	}

	// handle nullable field finished_at_gte
	if m.FinishedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":null")
		first = false
	}

	// handle non nullable field finished_at_in with omitempty
	if swag.IsZero(m.FinishedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at_lt
	if m.FinishedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":null")
		first = false
	}

	// handle nullable field finished_at_lte
	if m.FinishedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":null")
		first = false
	}

	// handle nullable field finished_at_not
	if m.FinishedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":null")
		first = false
	}

	// handle non nullable field finished_at_not_in with omitempty
	if swag.IsZero(m.FinishedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field ip_address
	if m.IPAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":")
		bytes, err := swag.WriteJSON(m.IPAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":null")
		first = false
	}

	// handle nullable field ip_address_contains
	if m.IPAddressContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_contains\":")
		bytes, err := swag.WriteJSON(m.IPAddressContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_contains\":null")
		first = false
	}

	// handle nullable field ip_address_ends_with
	if m.IPAddressEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_ends_with\":null")
		first = false
	}

	// handle nullable field ip_address_gt
	if m.IPAddressGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gt\":")
		bytes, err := swag.WriteJSON(m.IPAddressGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gt\":null")
		first = false
	}

	// handle nullable field ip_address_gte
	if m.IPAddressGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gte\":")
		bytes, err := swag.WriteJSON(m.IPAddressGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_gte\":null")
		first = false
	}

	// handle non nullable field ip_address_in with omitempty
	if swag.IsZero(m.IPAddressIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_in\":")
		bytes, err := swag.WriteJSON(m.IPAddressIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_address_lt
	if m.IPAddressLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lt\":")
		bytes, err := swag.WriteJSON(m.IPAddressLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lt\":null")
		first = false
	}

	// handle nullable field ip_address_lte
	if m.IPAddressLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lte\":")
		bytes, err := swag.WriteJSON(m.IPAddressLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_lte\":null")
		first = false
	}

	// handle nullable field ip_address_not
	if m.IPAddressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not\":")
		bytes, err := swag.WriteJSON(m.IPAddressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not\":null")
		first = false
	}

	// handle nullable field ip_address_not_contains
	if m.IPAddressNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_contains\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_contains\":null")
		first = false
	}

	// handle nullable field ip_address_not_ends_with
	if m.IPAddressNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_ends_with\":null")
		first = false
	}

	// handle non nullable field ip_address_not_in with omitempty
	if swag.IsZero(m.IPAddressNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_in\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_address_not_starts_with
	if m.IPAddressNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_not_starts_with\":null")
		first = false
	}

	// handle nullable field ip_address_starts_with
	if m.IPAddressStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPAddressStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddressStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address_starts_with\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field message_contains
	if m.MessageContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_contains\":")
		bytes, err := swag.WriteJSON(m.MessageContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_contains\":null")
		first = false
	}

	// handle nullable field message_ends_with
	if m.MessageEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_ends_with\":")
		bytes, err := swag.WriteJSON(m.MessageEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_ends_with\":null")
		first = false
	}

	// handle nullable field message_gt
	if m.MessageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_gt\":")
		bytes, err := swag.WriteJSON(m.MessageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_gt\":null")
		first = false
	}

	// handle nullable field message_gte
	if m.MessageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_gte\":")
		bytes, err := swag.WriteJSON(m.MessageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_gte\":null")
		first = false
	}

	// handle non nullable field message_in with omitempty
	if swag.IsZero(m.MessageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_in\":")
		bytes, err := swag.WriteJSON(m.MessageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field message_lt
	if m.MessageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_lt\":")
		bytes, err := swag.WriteJSON(m.MessageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_lt\":null")
		first = false
	}

	// handle nullable field message_lte
	if m.MessageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_lte\":")
		bytes, err := swag.WriteJSON(m.MessageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_lte\":null")
		first = false
	}

	// handle nullable field message_not
	if m.MessageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not\":")
		bytes, err := swag.WriteJSON(m.MessageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not\":null")
		first = false
	}

	// handle nullable field message_not_contains
	if m.MessageNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_contains\":")
		bytes, err := swag.WriteJSON(m.MessageNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_contains\":null")
		first = false
	}

	// handle nullable field message_not_ends_with
	if m.MessageNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MessageNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_ends_with\":null")
		first = false
	}

	// handle non nullable field message_not_in with omitempty
	if swag.IsZero(m.MessageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_in\":")
		bytes, err := swag.WriteJSON(m.MessageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field message_not_starts_with
	if m.MessageNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MessageNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_not_starts_with\":null")
		first = false
	}

	// handle nullable field message_starts_with
	if m.MessageStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_starts_with\":")
		bytes, err := swag.WriteJSON(m.MessageStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MessageStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message_starts_with\":null")
		first = false
	}

	// handle nullable field resource_id
	if m.ResourceID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id\":")
		bytes, err := swag.WriteJSON(m.ResourceID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id\":null")
		first = false
	}

	// handle nullable field resource_id_contains
	if m.ResourceIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_contains\":null")
		first = false
	}

	// handle nullable field resource_id_ends_with
	if m.ResourceIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_ends_with\":null")
		first = false
	}

	// handle nullable field resource_id_gt
	if m.ResourceIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_gt\":null")
		first = false
	}

	// handle nullable field resource_id_gte
	if m.ResourceIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_gte\":null")
		first = false
	}

	// handle non nullable field resource_id_in with omitempty
	if swag.IsZero(m.ResourceIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_in\":")
		bytes, err := swag.WriteJSON(m.ResourceIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_id_lt
	if m.ResourceIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_lt\":null")
		first = false
	}

	// handle nullable field resource_id_lte
	if m.ResourceIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_lte\":null")
		first = false
	}

	// handle nullable field resource_id_not
	if m.ResourceIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not\":")
		bytes, err := swag.WriteJSON(m.ResourceIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not\":null")
		first = false
	}

	// handle nullable field resource_id_not_contains
	if m.ResourceIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_contains\":null")
		first = false
	}

	// handle nullable field resource_id_not_ends_with
	if m.ResourceIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field resource_id_not_in with omitempty
	if swag.IsZero(m.ResourceIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_id_not_starts_with
	if m.ResourceIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field resource_id_starts_with
	if m.ResourceIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_id_starts_with\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle nullable field resource_type_contains
	if m.ResourceTypeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_contains\":null")
		first = false
	}

	// handle nullable field resource_type_ends_with
	if m.ResourceTypeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_ends_with\":null")
		first = false
	}

	// handle nullable field resource_type_gt
	if m.ResourceTypeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gt\":null")
		first = false
	}

	// handle nullable field resource_type_gte
	if m.ResourceTypeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gte\":null")
		first = false
	}

	// handle non nullable field resource_type_in with omitempty
	if swag.IsZero(m.ResourceTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_type_lt
	if m.ResourceTypeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lt\":null")
		first = false
	}

	// handle nullable field resource_type_lte
	if m.ResourceTypeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lte\":null")
		first = false
	}

	// handle nullable field resource_type_not
	if m.ResourceTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":null")
		first = false
	}

	// handle nullable field resource_type_not_contains
	if m.ResourceTypeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_contains\":null")
		first = false
	}

	// handle nullable field resource_type_not_ends_with
	if m.ResourceTypeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_ends_with\":null")
		first = false
	}

	// handle non nullable field resource_type_not_in with omitempty
	if swag.IsZero(m.ResourceTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_type_not_starts_with
	if m.ResourceTypeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_starts_with\":null")
		first = false
	}

	// handle nullable field resource_type_starts_with
	if m.ResourceTypeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_starts_with\":null")
		first = false
	}

	// handle nullable field started_at
	if m.StartedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":")
		bytes, err := swag.WriteJSON(m.StartedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":null")
		first = false
	}

	// handle nullable field started_at_gt
	if m.StartedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":")
		bytes, err := swag.WriteJSON(m.StartedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":null")
		first = false
	}

	// handle nullable field started_at_gte
	if m.StartedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":")
		bytes, err := swag.WriteJSON(m.StartedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":null")
		first = false
	}

	// handle non nullable field started_at_in with omitempty
	if swag.IsZero(m.StartedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at_lt
	if m.StartedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":")
		bytes, err := swag.WriteJSON(m.StartedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":null")
		first = false
	}

	// handle nullable field started_at_lte
	if m.StartedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":")
		bytes, err := swag.WriteJSON(m.StartedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":null")
		first = false
	}

	// handle nullable field started_at_not
	if m.StartedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":")
		bytes, err := swag.WriteJSON(m.StartedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":null")
		first = false
	}

	// handle non nullable field started_at_not_in with omitempty
	if swag.IsZero(m.StartedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field user
	if m.User != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user\":")
		bytes, err := swag.WriteJSON(m.User)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.User_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"user\":null")
		first = false
	}

	// handle nullable field username
	if m.Username != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":")
		bytes, err := swag.WriteJSON(m.Username)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Username_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username\":null")
		first = false
	}

	// handle nullable field username_contains
	if m.UsernameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_contains\":null")
		first = false
	}

	// handle nullable field username_ends_with
	if m.UsernameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_ends_with\":null")
		first = false
	}

	// handle nullable field username_gt
	if m.UsernameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":")
		bytes, err := swag.WriteJSON(m.UsernameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gt\":null")
		first = false
	}

	// handle nullable field username_gte
	if m.UsernameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":")
		bytes, err := swag.WriteJSON(m.UsernameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_gte\":null")
		first = false
	}

	// handle non nullable field username_in with omitempty
	if swag.IsZero(m.UsernameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_in\":")
		bytes, err := swag.WriteJSON(m.UsernameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_lt
	if m.UsernameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":")
		bytes, err := swag.WriteJSON(m.UsernameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lt\":null")
		first = false
	}

	// handle nullable field username_lte
	if m.UsernameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":")
		bytes, err := swag.WriteJSON(m.UsernameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_lte\":null")
		first = false
	}

	// handle nullable field username_not
	if m.UsernameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":")
		bytes, err := swag.WriteJSON(m.UsernameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not\":null")
		first = false
	}

	// handle nullable field username_not_contains
	if m.UsernameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":")
		bytes, err := swag.WriteJSON(m.UsernameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_contains\":null")
		first = false
	}

	// handle nullable field username_not_ends_with
	if m.UsernameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_ends_with\":null")
		first = false
	}

	// handle non nullable field username_not_in with omitempty
	if swag.IsZero(m.UsernameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_in\":")
		bytes, err := swag.WriteJSON(m.UsernameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field username_not_starts_with
	if m.UsernameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_not_starts_with\":null")
		first = false
	}

	// handle nullable field username_starts_with
	if m.UsernameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":")
		bytes, err := swag.WriteJSON(m.UsernameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsernameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"username_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this user audit log where input
func (m *UserAuditLogWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAuditLogWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user audit log where input based on the context it is used
func (m *UserAuditLogWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAuditLogWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserAuditLogWhereInput) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAuditLogWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAuditLogWhereInput) UnmarshalBinary(b []byte) error {
	var res UserAuditLogWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
