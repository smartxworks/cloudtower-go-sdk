// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMDiskWhereInput Vm disk where input
//
// swagger:model VmDiskWhereInput
type VMDiskWhereInput struct {

	// a n d
	AND []*VMDiskWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VMDiskWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VMDiskWhereInput `json:"OR,omitempty"`

	// boot
	Boot *int32 `json:"boot,omitempty"`

	// boot gt
	BootGt *int32 `json:"boot_gt,omitempty"`

	// boot gte
	BootGte *int32 `json:"boot_gte,omitempty"`

	// boot in
	BootIn []int32 `json:"boot_in,omitempty"`

	// boot lt
	BootLt *int32 `json:"boot_lt,omitempty"`

	// boot lte
	BootLte *int32 `json:"boot_lte,omitempty"`

	// boot not
	BootNot *int32 `json:"boot_not,omitempty"`

	// boot not in
	BootNotIn []int32 `json:"boot_not_in,omitempty"`

	// bus
	Bus *Bus `json:"bus,omitempty"`

	// bus in
	BusIn []Bus `json:"bus_in,omitempty"`

	// bus not
	BusNot *Bus `json:"bus_not,omitempty"`

	// bus not in
	BusNotIn []Bus `json:"bus_not_in,omitempty"`

	// cloud init image name
	CloudInitImageName *string `json:"cloud_init_image_name,omitempty"`

	// cloud init image name contains
	CloudInitImageNameContains *string `json:"cloud_init_image_name_contains,omitempty"`

	// cloud init image name ends with
	CloudInitImageNameEndsWith *string `json:"cloud_init_image_name_ends_with,omitempty"`

	// cloud init image name gt
	CloudInitImageNameGt *string `json:"cloud_init_image_name_gt,omitempty"`

	// cloud init image name gte
	CloudInitImageNameGte *string `json:"cloud_init_image_name_gte,omitempty"`

	// cloud init image name in
	CloudInitImageNameIn []string `json:"cloud_init_image_name_in,omitempty"`

	// cloud init image name lt
	CloudInitImageNameLt *string `json:"cloud_init_image_name_lt,omitempty"`

	// cloud init image name lte
	CloudInitImageNameLte *string `json:"cloud_init_image_name_lte,omitempty"`

	// cloud init image name not
	CloudInitImageNameNot *string `json:"cloud_init_image_name_not,omitempty"`

	// cloud init image name not contains
	CloudInitImageNameNotContains *string `json:"cloud_init_image_name_not_contains,omitempty"`

	// cloud init image name not ends with
	CloudInitImageNameNotEndsWith *string `json:"cloud_init_image_name_not_ends_with,omitempty"`

	// cloud init image name not in
	CloudInitImageNameNotIn []string `json:"cloud_init_image_name_not_in,omitempty"`

	// cloud init image name not starts with
	CloudInitImageNameNotStartsWith *string `json:"cloud_init_image_name_not_starts_with,omitempty"`

	// cloud init image name starts with
	CloudInitImageNameStartsWith *string `json:"cloud_init_image_name_starts_with,omitempty"`

	// cloud init image path
	CloudInitImagePath *string `json:"cloud_init_image_path,omitempty"`

	// cloud init image path contains
	CloudInitImagePathContains *string `json:"cloud_init_image_path_contains,omitempty"`

	// cloud init image path ends with
	CloudInitImagePathEndsWith *string `json:"cloud_init_image_path_ends_with,omitempty"`

	// cloud init image path gt
	CloudInitImagePathGt *string `json:"cloud_init_image_path_gt,omitempty"`

	// cloud init image path gte
	CloudInitImagePathGte *string `json:"cloud_init_image_path_gte,omitempty"`

	// cloud init image path in
	CloudInitImagePathIn []string `json:"cloud_init_image_path_in,omitempty"`

	// cloud init image path lt
	CloudInitImagePathLt *string `json:"cloud_init_image_path_lt,omitempty"`

	// cloud init image path lte
	CloudInitImagePathLte *string `json:"cloud_init_image_path_lte,omitempty"`

	// cloud init image path not
	CloudInitImagePathNot *string `json:"cloud_init_image_path_not,omitempty"`

	// cloud init image path not contains
	CloudInitImagePathNotContains *string `json:"cloud_init_image_path_not_contains,omitempty"`

	// cloud init image path not ends with
	CloudInitImagePathNotEndsWith *string `json:"cloud_init_image_path_not_ends_with,omitempty"`

	// cloud init image path not in
	CloudInitImagePathNotIn []string `json:"cloud_init_image_path_not_in,omitempty"`

	// cloud init image path not starts with
	CloudInitImagePathNotStartsWith *string `json:"cloud_init_image_path_not_starts_with,omitempty"`

	// cloud init image path starts with
	CloudInitImagePathStartsWith *string `json:"cloud_init_image_path_starts_with,omitempty"`

	// device
	Device *string `json:"device,omitempty"`

	// device contains
	DeviceContains *string `json:"device_contains,omitempty"`

	// device ends with
	DeviceEndsWith *string `json:"device_ends_with,omitempty"`

	// device gt
	DeviceGt *string `json:"device_gt,omitempty"`

	// device gte
	DeviceGte *string `json:"device_gte,omitempty"`

	// device in
	DeviceIn []string `json:"device_in,omitempty"`

	// device lt
	DeviceLt *string `json:"device_lt,omitempty"`

	// device lte
	DeviceLte *string `json:"device_lte,omitempty"`

	// device not
	DeviceNot *string `json:"device_not,omitempty"`

	// device not contains
	DeviceNotContains *string `json:"device_not_contains,omitempty"`

	// device not ends with
	DeviceNotEndsWith *string `json:"device_not_ends_with,omitempty"`

	// device not in
	DeviceNotIn []string `json:"device_not_in,omitempty"`

	// device not starts with
	DeviceNotStartsWith *string `json:"device_not_starts_with,omitempty"`

	// device starts with
	DeviceStartsWith *string `json:"device_starts_with,omitempty"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// disabled not
	DisabledNot *bool `json:"disabled_not,omitempty"`

	// elf image
	ElfImage *ElfImageWhereInput `json:"elf_image,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// key
	Key *int32 `json:"key,omitempty"`

	// key gt
	KeyGt *int32 `json:"key_gt,omitempty"`

	// key gte
	KeyGte *int32 `json:"key_gte,omitempty"`

	// key in
	KeyIn []int32 `json:"key_in,omitempty"`

	// key lt
	KeyLt *int32 `json:"key_lt,omitempty"`

	// key lte
	KeyLte *int32 `json:"key_lte,omitempty"`

	// key not
	KeyNot *int32 `json:"key_not,omitempty"`

	// key not in
	KeyNotIn []int32 `json:"key_not_in,omitempty"`

	// max bandwidth
	MaxBandwidth *int64 `json:"max_bandwidth,omitempty"`

	// max bandwidth gt
	MaxBandwidthGt *int64 `json:"max_bandwidth_gt,omitempty"`

	// max bandwidth gte
	MaxBandwidthGte *int64 `json:"max_bandwidth_gte,omitempty"`

	// max bandwidth in
	MaxBandwidthIn []int64 `json:"max_bandwidth_in,omitempty"`

	// max bandwidth lt
	MaxBandwidthLt *int64 `json:"max_bandwidth_lt,omitempty"`

	// max bandwidth lte
	MaxBandwidthLte *int64 `json:"max_bandwidth_lte,omitempty"`

	// max bandwidth not
	MaxBandwidthNot *int64 `json:"max_bandwidth_not,omitempty"`

	// max bandwidth not in
	MaxBandwidthNotIn []int64 `json:"max_bandwidth_not_in,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy *VMDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`

	// max bandwidth policy in
	MaxBandwidthPolicyIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_in,omitempty"`

	// max bandwidth policy not
	MaxBandwidthPolicyNot *VMDiskIoRestrictType `json:"max_bandwidth_policy_not,omitempty"`

	// max bandwidth policy not in
	MaxBandwidthPolicyNotIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_not_in,omitempty"`

	// max iops
	MaxIops *int32 `json:"max_iops,omitempty"`

	// max iops gt
	MaxIopsGt *int32 `json:"max_iops_gt,omitempty"`

	// max iops gte
	MaxIopsGte *int32 `json:"max_iops_gte,omitempty"`

	// max iops in
	MaxIopsIn []int32 `json:"max_iops_in,omitempty"`

	// max iops lt
	MaxIopsLt *int32 `json:"max_iops_lt,omitempty"`

	// max iops lte
	MaxIopsLte *int32 `json:"max_iops_lte,omitempty"`

	// max iops not
	MaxIopsNot *int32 `json:"max_iops_not,omitempty"`

	// max iops not in
	MaxIopsNotIn []int32 `json:"max_iops_not_in,omitempty"`

	// max iops policy
	MaxIopsPolicy *VMDiskIoRestrictType `json:"max_iops_policy,omitempty"`

	// max iops policy in
	MaxIopsPolicyIn []VMDiskIoRestrictType `json:"max_iops_policy_in,omitempty"`

	// max iops policy not
	MaxIopsPolicyNot *VMDiskIoRestrictType `json:"max_iops_policy_not,omitempty"`

	// max iops policy not in
	MaxIopsPolicyNotIn []VMDiskIoRestrictType `json:"max_iops_policy_not_in,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// serial contains
	SerialContains *string `json:"serial_contains,omitempty"`

	// serial ends with
	SerialEndsWith *string `json:"serial_ends_with,omitempty"`

	// serial gt
	SerialGt *string `json:"serial_gt,omitempty"`

	// serial gte
	SerialGte *string `json:"serial_gte,omitempty"`

	// serial in
	SerialIn []string `json:"serial_in,omitempty"`

	// serial lt
	SerialLt *string `json:"serial_lt,omitempty"`

	// serial lte
	SerialLte *string `json:"serial_lte,omitempty"`

	// serial not
	SerialNot *string `json:"serial_not,omitempty"`

	// serial not contains
	SerialNotContains *string `json:"serial_not_contains,omitempty"`

	// serial not ends with
	SerialNotEndsWith *string `json:"serial_not_ends_with,omitempty"`

	// serial not in
	SerialNotIn []string `json:"serial_not_in,omitempty"`

	// serial not starts with
	SerialNotStartsWith *string `json:"serial_not_starts_with,omitempty"`

	// serial starts with
	SerialStartsWith *string `json:"serial_starts_with,omitempty"`

	// svt image
	SvtImage *SvtImageWhereInput `json:"svt_image,omitempty"`

	// type
	Type *VMDiskType `json:"type,omitempty"`

	// type in
	TypeIn []VMDiskType `json:"type_in,omitempty"`

	// type not
	TypeNot *VMDiskType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []VMDiskType `json:"type_not_in,omitempty"`

	// unsafe image path
	UnsafeImagePath *string `json:"unsafe_image_path,omitempty"`

	// unsafe image path contains
	UnsafeImagePathContains *string `json:"unsafe_image_path_contains,omitempty"`

	// unsafe image path ends with
	UnsafeImagePathEndsWith *string `json:"unsafe_image_path_ends_with,omitempty"`

	// unsafe image path gt
	UnsafeImagePathGt *string `json:"unsafe_image_path_gt,omitempty"`

	// unsafe image path gte
	UnsafeImagePathGte *string `json:"unsafe_image_path_gte,omitempty"`

	// unsafe image path in
	UnsafeImagePathIn []string `json:"unsafe_image_path_in,omitempty"`

	// unsafe image path lt
	UnsafeImagePathLt *string `json:"unsafe_image_path_lt,omitempty"`

	// unsafe image path lte
	UnsafeImagePathLte *string `json:"unsafe_image_path_lte,omitempty"`

	// unsafe image path not
	UnsafeImagePathNot *string `json:"unsafe_image_path_not,omitempty"`

	// unsafe image path not contains
	UnsafeImagePathNotContains *string `json:"unsafe_image_path_not_contains,omitempty"`

	// unsafe image path not ends with
	UnsafeImagePathNotEndsWith *string `json:"unsafe_image_path_not_ends_with,omitempty"`

	// unsafe image path not in
	UnsafeImagePathNotIn []string `json:"unsafe_image_path_not_in,omitempty"`

	// unsafe image path not starts with
	UnsafeImagePathNotStartsWith *string `json:"unsafe_image_path_not_starts_with,omitempty"`

	// unsafe image path starts with
	UnsafeImagePathStartsWith *string `json:"unsafe_image_path_starts_with,omitempty"`

	// unsafe image uuid
	UnsafeImageUUID *string `json:"unsafe_image_uuid,omitempty"`

	// unsafe image uuid contains
	UnsafeImageUUIDContains *string `json:"unsafe_image_uuid_contains,omitempty"`

	// unsafe image uuid ends with
	UnsafeImageUUIDEndsWith *string `json:"unsafe_image_uuid_ends_with,omitempty"`

	// unsafe image uuid gt
	UnsafeImageUUIDGt *string `json:"unsafe_image_uuid_gt,omitempty"`

	// unsafe image uuid gte
	UnsafeImageUUIDGte *string `json:"unsafe_image_uuid_gte,omitempty"`

	// unsafe image uuid in
	UnsafeImageUUIDIn []string `json:"unsafe_image_uuid_in,omitempty"`

	// unsafe image uuid lt
	UnsafeImageUUIDLt *string `json:"unsafe_image_uuid_lt,omitempty"`

	// unsafe image uuid lte
	UnsafeImageUUIDLte *string `json:"unsafe_image_uuid_lte,omitempty"`

	// unsafe image uuid not
	UnsafeImageUUIDNot *string `json:"unsafe_image_uuid_not,omitempty"`

	// unsafe image uuid not contains
	UnsafeImageUUIDNotContains *string `json:"unsafe_image_uuid_not_contains,omitempty"`

	// unsafe image uuid not ends with
	UnsafeImageUUIDNotEndsWith *string `json:"unsafe_image_uuid_not_ends_with,omitempty"`

	// unsafe image uuid not in
	UnsafeImageUUIDNotIn []string `json:"unsafe_image_uuid_not_in,omitempty"`

	// unsafe image uuid not starts with
	UnsafeImageUUIDNotStartsWith *string `json:"unsafe_image_uuid_not_starts_with,omitempty"`

	// unsafe image uuid starts with
	UnsafeImageUUIDStartsWith *string `json:"unsafe_image_uuid_starts_with,omitempty"`

	// unsafe provision
	UnsafeProvision *string `json:"unsafe_provision,omitempty"`

	// unsafe provision contains
	UnsafeProvisionContains *string `json:"unsafe_provision_contains,omitempty"`

	// unsafe provision ends with
	UnsafeProvisionEndsWith *string `json:"unsafe_provision_ends_with,omitempty"`

	// unsafe provision gt
	UnsafeProvisionGt *string `json:"unsafe_provision_gt,omitempty"`

	// unsafe provision gte
	UnsafeProvisionGte *string `json:"unsafe_provision_gte,omitempty"`

	// unsafe provision in
	UnsafeProvisionIn []string `json:"unsafe_provision_in,omitempty"`

	// unsafe provision lt
	UnsafeProvisionLt *string `json:"unsafe_provision_lt,omitempty"`

	// unsafe provision lte
	UnsafeProvisionLte *string `json:"unsafe_provision_lte,omitempty"`

	// unsafe provision not
	UnsafeProvisionNot *string `json:"unsafe_provision_not,omitempty"`

	// unsafe provision not contains
	UnsafeProvisionNotContains *string `json:"unsafe_provision_not_contains,omitempty"`

	// unsafe provision not ends with
	UnsafeProvisionNotEndsWith *string `json:"unsafe_provision_not_ends_with,omitempty"`

	// unsafe provision not in
	UnsafeProvisionNotIn []string `json:"unsafe_provision_not_in,omitempty"`

	// unsafe provision not starts with
	UnsafeProvisionNotStartsWith *string `json:"unsafe_provision_not_starts_with,omitempty"`

	// unsafe provision starts with
	UnsafeProvisionStartsWith *string `json:"unsafe_provision_starts_with,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	// vm volume
	VMVolume *VMVolumeWhereInput `json:"vm_volume,omitempty"`

	MarshalOpts *VMDiskWhereInputMarshalOpts `json:"-"`
}

type VMDiskWhereInputMarshalOpts struct {
	Boot_Explicit_Null_When_Empty bool

	BootGt_Explicit_Null_When_Empty bool

	BootGte_Explicit_Null_When_Empty bool

	BootLt_Explicit_Null_When_Empty bool

	BootLte_Explicit_Null_When_Empty bool

	BootNot_Explicit_Null_When_Empty bool

	Bus_Explicit_Null_When_Empty bool

	BusNot_Explicit_Null_When_Empty bool

	CloudInitImageName_Explicit_Null_When_Empty bool

	CloudInitImageNameContains_Explicit_Null_When_Empty bool

	CloudInitImageNameEndsWith_Explicit_Null_When_Empty bool

	CloudInitImageNameGt_Explicit_Null_When_Empty bool

	CloudInitImageNameGte_Explicit_Null_When_Empty bool

	CloudInitImageNameLt_Explicit_Null_When_Empty bool

	CloudInitImageNameLte_Explicit_Null_When_Empty bool

	CloudInitImageNameNot_Explicit_Null_When_Empty bool

	CloudInitImageNameNotContains_Explicit_Null_When_Empty bool

	CloudInitImageNameNotEndsWith_Explicit_Null_When_Empty bool

	CloudInitImageNameNotStartsWith_Explicit_Null_When_Empty bool

	CloudInitImageNameStartsWith_Explicit_Null_When_Empty bool

	CloudInitImagePath_Explicit_Null_When_Empty bool

	CloudInitImagePathContains_Explicit_Null_When_Empty bool

	CloudInitImagePathEndsWith_Explicit_Null_When_Empty bool

	CloudInitImagePathGt_Explicit_Null_When_Empty bool

	CloudInitImagePathGte_Explicit_Null_When_Empty bool

	CloudInitImagePathLt_Explicit_Null_When_Empty bool

	CloudInitImagePathLte_Explicit_Null_When_Empty bool

	CloudInitImagePathNot_Explicit_Null_When_Empty bool

	CloudInitImagePathNotContains_Explicit_Null_When_Empty bool

	CloudInitImagePathNotEndsWith_Explicit_Null_When_Empty bool

	CloudInitImagePathNotStartsWith_Explicit_Null_When_Empty bool

	CloudInitImagePathStartsWith_Explicit_Null_When_Empty bool

	Device_Explicit_Null_When_Empty bool

	DeviceContains_Explicit_Null_When_Empty bool

	DeviceEndsWith_Explicit_Null_When_Empty bool

	DeviceGt_Explicit_Null_When_Empty bool

	DeviceGte_Explicit_Null_When_Empty bool

	DeviceLt_Explicit_Null_When_Empty bool

	DeviceLte_Explicit_Null_When_Empty bool

	DeviceNot_Explicit_Null_When_Empty bool

	DeviceNotContains_Explicit_Null_When_Empty bool

	DeviceNotEndsWith_Explicit_Null_When_Empty bool

	DeviceNotStartsWith_Explicit_Null_When_Empty bool

	DeviceStartsWith_Explicit_Null_When_Empty bool

	Disabled_Explicit_Null_When_Empty bool

	DisabledNot_Explicit_Null_When_Empty bool

	ElfImage_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Key_Explicit_Null_When_Empty bool

	KeyGt_Explicit_Null_When_Empty bool

	KeyGte_Explicit_Null_When_Empty bool

	KeyLt_Explicit_Null_When_Empty bool

	KeyLte_Explicit_Null_When_Empty bool

	KeyNot_Explicit_Null_When_Empty bool

	MaxBandwidth_Explicit_Null_When_Empty bool

	MaxBandwidthGt_Explicit_Null_When_Empty bool

	MaxBandwidthGte_Explicit_Null_When_Empty bool

	MaxBandwidthLt_Explicit_Null_When_Empty bool

	MaxBandwidthLte_Explicit_Null_When_Empty bool

	MaxBandwidthNot_Explicit_Null_When_Empty bool

	MaxBandwidthPolicy_Explicit_Null_When_Empty bool

	MaxBandwidthPolicyNot_Explicit_Null_When_Empty bool

	MaxIops_Explicit_Null_When_Empty bool

	MaxIopsGt_Explicit_Null_When_Empty bool

	MaxIopsGte_Explicit_Null_When_Empty bool

	MaxIopsLt_Explicit_Null_When_Empty bool

	MaxIopsLte_Explicit_Null_When_Empty bool

	MaxIopsNot_Explicit_Null_When_Empty bool

	MaxIopsPolicy_Explicit_Null_When_Empty bool

	MaxIopsPolicyNot_Explicit_Null_When_Empty bool

	Serial_Explicit_Null_When_Empty bool

	SerialContains_Explicit_Null_When_Empty bool

	SerialEndsWith_Explicit_Null_When_Empty bool

	SerialGt_Explicit_Null_When_Empty bool

	SerialGte_Explicit_Null_When_Empty bool

	SerialLt_Explicit_Null_When_Empty bool

	SerialLte_Explicit_Null_When_Empty bool

	SerialNot_Explicit_Null_When_Empty bool

	SerialNotContains_Explicit_Null_When_Empty bool

	SerialNotEndsWith_Explicit_Null_When_Empty bool

	SerialNotStartsWith_Explicit_Null_When_Empty bool

	SerialStartsWith_Explicit_Null_When_Empty bool

	SvtImage_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	UnsafeImagePath_Explicit_Null_When_Empty bool

	UnsafeImagePathContains_Explicit_Null_When_Empty bool

	UnsafeImagePathEndsWith_Explicit_Null_When_Empty bool

	UnsafeImagePathGt_Explicit_Null_When_Empty bool

	UnsafeImagePathGte_Explicit_Null_When_Empty bool

	UnsafeImagePathLt_Explicit_Null_When_Empty bool

	UnsafeImagePathLte_Explicit_Null_When_Empty bool

	UnsafeImagePathNot_Explicit_Null_When_Empty bool

	UnsafeImagePathNotContains_Explicit_Null_When_Empty bool

	UnsafeImagePathNotEndsWith_Explicit_Null_When_Empty bool

	UnsafeImagePathNotStartsWith_Explicit_Null_When_Empty bool

	UnsafeImagePathStartsWith_Explicit_Null_When_Empty bool

	UnsafeImageUUID_Explicit_Null_When_Empty bool

	UnsafeImageUUIDContains_Explicit_Null_When_Empty bool

	UnsafeImageUUIDEndsWith_Explicit_Null_When_Empty bool

	UnsafeImageUUIDGt_Explicit_Null_When_Empty bool

	UnsafeImageUUIDGte_Explicit_Null_When_Empty bool

	UnsafeImageUUIDLt_Explicit_Null_When_Empty bool

	UnsafeImageUUIDLte_Explicit_Null_When_Empty bool

	UnsafeImageUUIDNot_Explicit_Null_When_Empty bool

	UnsafeImageUUIDNotContains_Explicit_Null_When_Empty bool

	UnsafeImageUUIDNotEndsWith_Explicit_Null_When_Empty bool

	UnsafeImageUUIDNotStartsWith_Explicit_Null_When_Empty bool

	UnsafeImageUUIDStartsWith_Explicit_Null_When_Empty bool

	UnsafeProvision_Explicit_Null_When_Empty bool

	UnsafeProvisionContains_Explicit_Null_When_Empty bool

	UnsafeProvisionEndsWith_Explicit_Null_When_Empty bool

	UnsafeProvisionGt_Explicit_Null_When_Empty bool

	UnsafeProvisionGte_Explicit_Null_When_Empty bool

	UnsafeProvisionLt_Explicit_Null_When_Empty bool

	UnsafeProvisionLte_Explicit_Null_When_Empty bool

	UnsafeProvisionNot_Explicit_Null_When_Empty bool

	UnsafeProvisionNotContains_Explicit_Null_When_Empty bool

	UnsafeProvisionNotEndsWith_Explicit_Null_When_Empty bool

	UnsafeProvisionNotStartsWith_Explicit_Null_When_Empty bool

	UnsafeProvisionStartsWith_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool

	VMVolume_Explicit_Null_When_Empty bool
}

func (m VMDiskWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field boot
	if m.Boot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot\":")
		bytes, err := swag.WriteJSON(m.Boot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Boot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot\":null")
		first = false
	}

	// handle nullable field boot_gt
	if m.BootGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_gt\":")
		bytes, err := swag.WriteJSON(m.BootGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BootGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_gt\":null")
		first = false
	}

	// handle nullable field boot_gte
	if m.BootGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_gte\":")
		bytes, err := swag.WriteJSON(m.BootGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BootGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_gte\":null")
		first = false
	}

	// handle non nullable field boot_in with omitempty
	if swag.IsZero(m.BootIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_in\":")
		bytes, err := swag.WriteJSON(m.BootIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field boot_lt
	if m.BootLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_lt\":")
		bytes, err := swag.WriteJSON(m.BootLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BootLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_lt\":null")
		first = false
	}

	// handle nullable field boot_lte
	if m.BootLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_lte\":")
		bytes, err := swag.WriteJSON(m.BootLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BootLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_lte\":null")
		first = false
	}

	// handle nullable field boot_not
	if m.BootNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_not\":")
		bytes, err := swag.WriteJSON(m.BootNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BootNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_not\":null")
		first = false
	}

	// handle non nullable field boot_not_in with omitempty
	if swag.IsZero(m.BootNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"boot_not_in\":")
		bytes, err := swag.WriteJSON(m.BootNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus
	if m.Bus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":")
		bytes, err := swag.WriteJSON(m.Bus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus\":null")
		first = false
	}

	// handle non nullable field bus_in with omitempty
	if swag.IsZero(m.BusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_in\":")
		bytes, err := swag.WriteJSON(m.BusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bus_not
	if m.BusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not\":")
		bytes, err := swag.WriteJSON(m.BusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not\":null")
		first = false
	}

	// handle non nullable field bus_not_in with omitempty
	if swag.IsZero(m.BusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bus_not_in\":")
		bytes, err := swag.WriteJSON(m.BusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cloud_init_image_name
	if m.CloudInitImageName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_contains
	if m.CloudInitImageNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_contains\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_contains\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_ends_with
	if m.CloudInitImageNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_ends_with\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_gt
	if m.CloudInitImageNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_gt\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_gt\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_gte
	if m.CloudInitImageNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_gte\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_gte\":null")
		first = false
	}

	// handle non nullable field cloud_init_image_name_in with omitempty
	if swag.IsZero(m.CloudInitImageNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_in\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cloud_init_image_name_lt
	if m.CloudInitImageNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_lt\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_lt\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_lte
	if m.CloudInitImageNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_lte\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_lte\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_not
	if m.CloudInitImageNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_not_contains
	if m.CloudInitImageNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_contains\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_not_ends_with
	if m.CloudInitImageNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cloud_init_image_name_not_in with omitempty
	if swag.IsZero(m.CloudInitImageNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_in\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cloud_init_image_name_not_starts_with
	if m.CloudInitImageNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field cloud_init_image_name_starts_with
	if m.CloudInitImageNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImageNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImageNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_name_starts_with\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path
	if m.CloudInitImagePath != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePath)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePath_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_contains
	if m.CloudInitImagePathContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_contains\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_contains\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_ends_with
	if m.CloudInitImagePathEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_ends_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_ends_with\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_gt
	if m.CloudInitImagePathGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_gt\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_gt\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_gte
	if m.CloudInitImagePathGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_gte\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_gte\":null")
		first = false
	}

	// handle non nullable field cloud_init_image_path_in with omitempty
	if swag.IsZero(m.CloudInitImagePathIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_in\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cloud_init_image_path_lt
	if m.CloudInitImagePathLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_lt\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_lt\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_lte
	if m.CloudInitImagePathLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_lte\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_lte\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_not
	if m.CloudInitImagePathNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_not_contains
	if m.CloudInitImagePathNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_contains\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_contains\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_not_ends_with
	if m.CloudInitImagePathNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cloud_init_image_path_not_in with omitempty
	if swag.IsZero(m.CloudInitImagePathNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_in\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cloud_init_image_path_not_starts_with
	if m.CloudInitImagePathNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_not_starts_with\":null")
		first = false
	}

	// handle nullable field cloud_init_image_path_starts_with
	if m.CloudInitImagePathStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_starts_with\":")
		bytes, err := swag.WriteJSON(m.CloudInitImagePathStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CloudInitImagePathStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cloud_init_image_path_starts_with\":null")
		first = false
	}

	// handle nullable field device
	if m.Device != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device\":")
		bytes, err := swag.WriteJSON(m.Device)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Device_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device\":null")
		first = false
	}

	// handle nullable field device_contains
	if m.DeviceContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_contains\":null")
		first = false
	}

	// handle nullable field device_ends_with
	if m.DeviceEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_ends_with\":null")
		first = false
	}

	// handle nullable field device_gt
	if m.DeviceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_gt\":")
		bytes, err := swag.WriteJSON(m.DeviceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_gt\":null")
		first = false
	}

	// handle nullable field device_gte
	if m.DeviceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_gte\":")
		bytes, err := swag.WriteJSON(m.DeviceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_gte\":null")
		first = false
	}

	// handle non nullable field device_in with omitempty
	if swag.IsZero(m.DeviceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_in\":")
		bytes, err := swag.WriteJSON(m.DeviceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_lt
	if m.DeviceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_lt\":")
		bytes, err := swag.WriteJSON(m.DeviceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_lt\":null")
		first = false
	}

	// handle nullable field device_lte
	if m.DeviceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_lte\":")
		bytes, err := swag.WriteJSON(m.DeviceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_lte\":null")
		first = false
	}

	// handle nullable field device_not
	if m.DeviceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not\":")
		bytes, err := swag.WriteJSON(m.DeviceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not\":null")
		first = false
	}

	// handle nullable field device_not_contains
	if m.DeviceNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_contains\":null")
		first = false
	}

	// handle nullable field device_not_ends_with
	if m.DeviceNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_ends_with\":null")
		first = false
	}

	// handle non nullable field device_not_in with omitempty
	if swag.IsZero(m.DeviceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_in\":")
		bytes, err := swag.WriteJSON(m.DeviceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_not_starts_with
	if m.DeviceNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_not_starts_with\":null")
		first = false
	}

	// handle nullable field device_starts_with
	if m.DeviceStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_starts_with\":null")
		first = false
	}

	// handle nullable field disabled
	if m.Disabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":")
		bytes, err := swag.WriteJSON(m.Disabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled\":null")
		first = false
	}

	// handle nullable field disabled_not
	if m.DisabledNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled_not\":")
		bytes, err := swag.WriteJSON(m.DisabledNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisabledNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disabled_not\":null")
		first = false
	}

	// handle nullable field elf_image
	if m.ElfImage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image\":")
		bytes, err := swag.WriteJSON(m.ElfImage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfImage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elf_image\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field key
	if m.Key != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":")
		bytes, err := swag.WriteJSON(m.Key)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Key_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":null")
		first = false
	}

	// handle nullable field key_gt
	if m.KeyGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_gt\":")
		bytes, err := swag.WriteJSON(m.KeyGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeyGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_gt\":null")
		first = false
	}

	// handle nullable field key_gte
	if m.KeyGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_gte\":")
		bytes, err := swag.WriteJSON(m.KeyGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeyGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_gte\":null")
		first = false
	}

	// handle non nullable field key_in with omitempty
	if swag.IsZero(m.KeyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_in\":")
		bytes, err := swag.WriteJSON(m.KeyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field key_lt
	if m.KeyLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_lt\":")
		bytes, err := swag.WriteJSON(m.KeyLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeyLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_lt\":null")
		first = false
	}

	// handle nullable field key_lte
	if m.KeyLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_lte\":")
		bytes, err := swag.WriteJSON(m.KeyLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeyLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_lte\":null")
		first = false
	}

	// handle nullable field key_not
	if m.KeyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_not\":")
		bytes, err := swag.WriteJSON(m.KeyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_not\":null")
		first = false
	}

	// handle non nullable field key_not_in with omitempty
	if swag.IsZero(m.KeyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key_not_in\":")
		bytes, err := swag.WriteJSON(m.KeyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_bandwidth
	if m.MaxBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth\":null")
		first = false
	}

	// handle nullable field max_bandwidth_gt
	if m.MaxBandwidthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_gt\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_gt\":null")
		first = false
	}

	// handle nullable field max_bandwidth_gte
	if m.MaxBandwidthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_gte\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_gte\":null")
		first = false
	}

	// handle non nullable field max_bandwidth_in with omitempty
	if swag.IsZero(m.MaxBandwidthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_in\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_bandwidth_lt
	if m.MaxBandwidthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_lt\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_lt\":null")
		first = false
	}

	// handle nullable field max_bandwidth_lte
	if m.MaxBandwidthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_lte\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_lte\":null")
		first = false
	}

	// handle nullable field max_bandwidth_not
	if m.MaxBandwidthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_not\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_not\":null")
		first = false
	}

	// handle non nullable field max_bandwidth_not_in with omitempty
	if swag.IsZero(m.MaxBandwidthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_bandwidth_policy
	if m.MaxBandwidthPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy\":null")
		first = false
	}

	// handle non nullable field max_bandwidth_policy_in with omitempty
	if swag.IsZero(m.MaxBandwidthPolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy_in\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthPolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_bandwidth_policy_not
	if m.MaxBandwidthPolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy_not\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthPolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxBandwidthPolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy_not\":null")
		first = false
	}

	// handle non nullable field max_bandwidth_policy_not_in with omitempty
	if swag.IsZero(m.MaxBandwidthPolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_bandwidth_policy_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxBandwidthPolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_iops
	if m.MaxIops != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops\":")
		bytes, err := swag.WriteJSON(m.MaxIops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIops_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops\":null")
		first = false
	}

	// handle nullable field max_iops_gt
	if m.MaxIopsGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_gt\":")
		bytes, err := swag.WriteJSON(m.MaxIopsGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_gt\":null")
		first = false
	}

	// handle nullable field max_iops_gte
	if m.MaxIopsGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_gte\":")
		bytes, err := swag.WriteJSON(m.MaxIopsGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_gte\":null")
		first = false
	}

	// handle non nullable field max_iops_in with omitempty
	if swag.IsZero(m.MaxIopsIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_in\":")
		bytes, err := swag.WriteJSON(m.MaxIopsIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_iops_lt
	if m.MaxIopsLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_lt\":")
		bytes, err := swag.WriteJSON(m.MaxIopsLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_lt\":null")
		first = false
	}

	// handle nullable field max_iops_lte
	if m.MaxIopsLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_lte\":")
		bytes, err := swag.WriteJSON(m.MaxIopsLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_lte\":null")
		first = false
	}

	// handle nullable field max_iops_not
	if m.MaxIopsNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_not\":")
		bytes, err := swag.WriteJSON(m.MaxIopsNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_not\":null")
		first = false
	}

	// handle non nullable field max_iops_not_in with omitempty
	if swag.IsZero(m.MaxIopsNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxIopsNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_iops_policy
	if m.MaxIopsPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy\":")
		bytes, err := swag.WriteJSON(m.MaxIopsPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy\":null")
		first = false
	}

	// handle non nullable field max_iops_policy_in with omitempty
	if swag.IsZero(m.MaxIopsPolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy_in\":")
		bytes, err := swag.WriteJSON(m.MaxIopsPolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_iops_policy_not
	if m.MaxIopsPolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy_not\":")
		bytes, err := swag.WriteJSON(m.MaxIopsPolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxIopsPolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy_not\":null")
		first = false
	}

	// handle non nullable field max_iops_policy_not_in with omitempty
	if swag.IsZero(m.MaxIopsPolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_iops_policy_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxIopsPolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial
	if m.Serial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":")
		bytes, err := swag.WriteJSON(m.Serial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Serial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":null")
		first = false
	}

	// handle nullable field serial_contains
	if m.SerialContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":")
		bytes, err := swag.WriteJSON(m.SerialContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":null")
		first = false
	}

	// handle nullable field serial_ends_with
	if m.SerialEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":null")
		first = false
	}

	// handle nullable field serial_gt
	if m.SerialGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":")
		bytes, err := swag.WriteJSON(m.SerialGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":null")
		first = false
	}

	// handle nullable field serial_gte
	if m.SerialGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":")
		bytes, err := swag.WriteJSON(m.SerialGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":null")
		first = false
	}

	// handle non nullable field serial_in with omitempty
	if swag.IsZero(m.SerialIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_in\":")
		bytes, err := swag.WriteJSON(m.SerialIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_lt
	if m.SerialLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":")
		bytes, err := swag.WriteJSON(m.SerialLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":null")
		first = false
	}

	// handle nullable field serial_lte
	if m.SerialLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":")
		bytes, err := swag.WriteJSON(m.SerialLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":null")
		first = false
	}

	// handle nullable field serial_not
	if m.SerialNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":")
		bytes, err := swag.WriteJSON(m.SerialNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":null")
		first = false
	}

	// handle nullable field serial_not_contains
	if m.SerialNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":")
		bytes, err := swag.WriteJSON(m.SerialNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":null")
		first = false
	}

	// handle nullable field serial_not_ends_with
	if m.SerialNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":null")
		first = false
	}

	// handle non nullable field serial_not_in with omitempty
	if swag.IsZero(m.SerialNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_in\":")
		bytes, err := swag.WriteJSON(m.SerialNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_not_starts_with
	if m.SerialNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":null")
		first = false
	}

	// handle nullable field serial_starts_with
	if m.SerialStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":null")
		first = false
	}

	// handle nullable field svt_image
	if m.SvtImage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"svt_image\":")
		bytes, err := swag.WriteJSON(m.SvtImage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SvtImage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"svt_image\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_image_path
	if m.UnsafeImagePath != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePath)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePath_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_contains
	if m.UnsafeImagePathContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_contains\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_ends_with
	if m.UnsafeImagePathEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_ends_with\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_gt
	if m.UnsafeImagePathGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_gt\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_gt\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_gte
	if m.UnsafeImagePathGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_gte\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_gte\":null")
		first = false
	}

	// handle non nullable field unsafe_image_path_in with omitempty
	if swag.IsZero(m.UnsafeImagePathIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_image_path_lt
	if m.UnsafeImagePathLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_lt\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_lt\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_lte
	if m.UnsafeImagePathLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_lte\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_lte\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_not
	if m.UnsafeImagePathNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_not_contains
	if m.UnsafeImagePathNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_contains\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_not_ends_with
	if m.UnsafeImagePathNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_ends_with\":null")
		first = false
	}

	// handle non nullable field unsafe_image_path_not_in with omitempty
	if swag.IsZero(m.UnsafeImagePathNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_image_path_not_starts_with
	if m.UnsafeImagePathNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_not_starts_with\":null")
		first = false
	}

	// handle nullable field unsafe_image_path_starts_with
	if m.UnsafeImagePathStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImagePathStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImagePathStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_path_starts_with\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid
	if m.UnsafeImageUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_contains
	if m.UnsafeImageUUIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_contains\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_ends_with
	if m.UnsafeImageUUIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_ends_with\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_gt
	if m.UnsafeImageUUIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_gt\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_gt\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_gte
	if m.UnsafeImageUUIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_gte\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_gte\":null")
		first = false
	}

	// handle non nullable field unsafe_image_uuid_in with omitempty
	if swag.IsZero(m.UnsafeImageUUIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_image_uuid_lt
	if m.UnsafeImageUUIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_lt\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_lt\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_lte
	if m.UnsafeImageUUIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_lte\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_lte\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_not
	if m.UnsafeImageUUIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_not_contains
	if m.UnsafeImageUUIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_contains\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_not_ends_with
	if m.UnsafeImageUUIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_ends_with\":null")
		first = false
	}

	// handle non nullable field unsafe_image_uuid_not_in with omitempty
	if swag.IsZero(m.UnsafeImageUUIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_image_uuid_not_starts_with
	if m.UnsafeImageUUIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_not_starts_with\":null")
		first = false
	}

	// handle nullable field unsafe_image_uuid_starts_with
	if m.UnsafeImageUUIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeImageUUIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeImageUUIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_image_uuid_starts_with\":null")
		first = false
	}

	// handle nullable field unsafe_provision
	if m.UnsafeProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision\":null")
		first = false
	}

	// handle nullable field unsafe_provision_contains
	if m.UnsafeProvisionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_contains\":null")
		first = false
	}

	// handle nullable field unsafe_provision_ends_with
	if m.UnsafeProvisionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_ends_with\":null")
		first = false
	}

	// handle nullable field unsafe_provision_gt
	if m.UnsafeProvisionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_gt\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_gt\":null")
		first = false
	}

	// handle nullable field unsafe_provision_gte
	if m.UnsafeProvisionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_gte\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_gte\":null")
		first = false
	}

	// handle non nullable field unsafe_provision_in with omitempty
	if swag.IsZero(m.UnsafeProvisionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_provision_lt
	if m.UnsafeProvisionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_lt\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_lt\":null")
		first = false
	}

	// handle nullable field unsafe_provision_lte
	if m.UnsafeProvisionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_lte\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_lte\":null")
		first = false
	}

	// handle nullable field unsafe_provision_not
	if m.UnsafeProvisionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not\":null")
		first = false
	}

	// handle nullable field unsafe_provision_not_contains
	if m.UnsafeProvisionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_contains\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_contains\":null")
		first = false
	}

	// handle nullable field unsafe_provision_not_ends_with
	if m.UnsafeProvisionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_ends_with\":null")
		first = false
	}

	// handle non nullable field unsafe_provision_not_in with omitempty
	if swag.IsZero(m.UnsafeProvisionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_in\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unsafe_provision_not_starts_with
	if m.UnsafeProvisionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_not_starts_with\":null")
		first = false
	}

	// handle nullable field unsafe_provision_starts_with
	if m.UnsafeProvisionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_starts_with\":")
		bytes, err := swag.WriteJSON(m.UnsafeProvisionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UnsafeProvisionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unsafe_provision_starts_with\":null")
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	// handle nullable field vm_volume
	if m.VMVolume != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume\":")
		bytes, err := swag.WriteJSON(m.VMVolume)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolume_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_volume\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm disk where input
func (m *VMDiskWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvtImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateBus(formats strfmt.Registry) error {
	if swag.IsZero(m.Bus) { // not required
		return nil
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateBusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BusIn); i++ {

		if err := m.BusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateBusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.BusNot) { // not required
		return nil
	}

	if m.BusNot != nil {
		if err := m.BusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateBusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BusNotIn); i++ {

		if err := m.BusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateElfImage(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImage) { // not required
		return nil
	}

	if m.ElfImage != nil {
		if err := m.ElfImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxBandwidthPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicy) { // not required
		return nil
	}

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxBandwidthPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxBandwidthPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyNot) { // not required
		return nil
	}

	if m.MaxBandwidthPolicyNot != nil {
		if err := m.MaxBandwidthPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxBandwidthPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxIopsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicy) { // not required
		return nil
	}

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxIopsPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxIopsPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyNot) { // not required
		return nil
	}

	if m.MaxIopsPolicyNot != nil {
		if err := m.MaxIopsPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateMaxIopsPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateSvtImage(formats strfmt.Registry) error {
	if swag.IsZero(m.SvtImage) { // not required
		return nil
	}

	if m.SvtImage != nil {
		if err := m.SvtImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svt_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svt_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) validateVMVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolume) { // not required
		return nil
	}

	if m.VMVolume != nil {
		if err := m.VMVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm disk where input based on the context it is used
func (m *VMDiskWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvtImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateBusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusIn); i++ {

		if err := m.BusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateBusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.BusNot != nil {
		if err := m.BusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateBusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusNotIn); i++ {

		if err := m.BusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateElfImage(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfImage != nil {
		if err := m.ElfImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxBandwidthPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxBandwidthPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxBandwidthPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxBandwidthPolicyNot != nil {
		if err := m.MaxBandwidthPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxBandwidthPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxIopsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxIopsPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxIopsPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxIopsPolicyNot != nil {
		if err := m.MaxIopsPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateMaxIopsPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateSvtImage(ctx context.Context, formats strfmt.Registry) error {

	if m.SvtImage != nil {
		if err := m.SvtImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svt_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("svt_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMDiskWhereInput) contextValidateVMVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolume != nil {
		if err := m.VMVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskWhereInput) UnmarshalBinary(b []byte) error {
	var res VMDiskWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
