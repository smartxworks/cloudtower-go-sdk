// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SMTPServerOrderByInput Smtp server order by input
//
// swagger:model SmtpServerOrderByInput
type SMTPServerOrderByInput string

func NewSMTPServerOrderByInput(value SMTPServerOrderByInput) *SMTPServerOrderByInput {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SMTPServerOrderByInput.
func (m SMTPServerOrderByInput) Pointer() *SMTPServerOrderByInput {
	return &m
}

const (

	// SMTPServerOrderByInputDescriptionASC captures enum value "description_ASC"
	SMTPServerOrderByInputDescriptionASC SMTPServerOrderByInput = "description_ASC"

	// SMTPServerOrderByInputDescriptionDESC captures enum value "description_DESC"
	SMTPServerOrderByInputDescriptionDESC SMTPServerOrderByInput = "description_DESC"

	// SMTPServerOrderByInputHostASC captures enum value "host_ASC"
	SMTPServerOrderByInputHostASC SMTPServerOrderByInput = "host_ASC"

	// SMTPServerOrderByInputHostDESC captures enum value "host_DESC"
	SMTPServerOrderByInputHostDESC SMTPServerOrderByInput = "host_DESC"

	// SMTPServerOrderByInputIDASC captures enum value "id_ASC"
	SMTPServerOrderByInputIDASC SMTPServerOrderByInput = "id_ASC"

	// SMTPServerOrderByInputIDDESC captures enum value "id_DESC"
	SMTPServerOrderByInputIDDESC SMTPServerOrderByInput = "id_DESC"

	// SMTPServerOrderByInputNameASC captures enum value "name_ASC"
	SMTPServerOrderByInputNameASC SMTPServerOrderByInput = "name_ASC"

	// SMTPServerOrderByInputNameDESC captures enum value "name_DESC"
	SMTPServerOrderByInputNameDESC SMTPServerOrderByInput = "name_DESC"

	// SMTPServerOrderByInputPortASC captures enum value "port_ASC"
	SMTPServerOrderByInputPortASC SMTPServerOrderByInput = "port_ASC"

	// SMTPServerOrderByInputPortDESC captures enum value "port_DESC"
	SMTPServerOrderByInputPortDESC SMTPServerOrderByInput = "port_DESC"

	// SMTPServerOrderByInputSecureModeASC captures enum value "secure_mode_ASC"
	SMTPServerOrderByInputSecureModeASC SMTPServerOrderByInput = "secure_mode_ASC"

	// SMTPServerOrderByInputSecureModeDESC captures enum value "secure_mode_DESC"
	SMTPServerOrderByInputSecureModeDESC SMTPServerOrderByInput = "secure_mode_DESC"

	// SMTPServerOrderByInputUsernameASC captures enum value "username_ASC"
	SMTPServerOrderByInputUsernameASC SMTPServerOrderByInput = "username_ASC"

	// SMTPServerOrderByInputUsernameDESC captures enum value "username_DESC"
	SMTPServerOrderByInputUsernameDESC SMTPServerOrderByInput = "username_DESC"
)

// for schema
var smtpServerOrderByInputEnum []interface{}

func init() {
	var res []SMTPServerOrderByInput
	if err := json.Unmarshal([]byte(`["description_ASC","description_DESC","host_ASC","host_DESC","id_ASC","id_DESC","name_ASC","name_DESC","port_ASC","port_DESC","secure_mode_ASC","secure_mode_DESC","username_ASC","username_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smtpServerOrderByInputEnum = append(smtpServerOrderByInputEnum, v)
	}
}

func (m SMTPServerOrderByInput) validateSMTPServerOrderByInputEnum(path, location string, value SMTPServerOrderByInput) error {
	if err := validate.EnumCase(path, location, value, smtpServerOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Smtp server order by input
func (m SMTPServerOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSMTPServerOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Smtp server order by input based on context it is used
func (m SMTPServerOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
