// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NfsInodeWhereInput nfs inode where input
//
// swagger:model NfsInodeWhereInput
type NfsInodeWhereInput struct {

	// a n d
	AND []*NfsInodeWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*NfsInodeWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*NfsInodeWhereInput `json:"OR,omitempty"`

	// assigned size
	AssignedSize *int64 `json:"assigned_size,omitempty"`

	// assigned size gt
	AssignedSizeGt *int64 `json:"assigned_size_gt,omitempty"`

	// assigned size gte
	AssignedSizeGte *int64 `json:"assigned_size_gte,omitempty"`

	// assigned size in
	AssignedSizeIn []int64 `json:"assigned_size_in,omitempty"`

	// assigned size lt
	AssignedSizeLt *int64 `json:"assigned_size_lt,omitempty"`

	// assigned size lte
	AssignedSizeLte *int64 `json:"assigned_size_lte,omitempty"`

	// assigned size not
	AssignedSizeNot *int64 `json:"assigned_size_not,omitempty"`

	// assigned size not in
	AssignedSizeNotIn []int64 `json:"assigned_size_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// file
	File *bool `json:"file,omitempty"`

	// file not
	FileNot *bool `json:"file_not,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// local updated at
	LocalUpdatedAt *string `json:"local_updated_at,omitempty"`

	// local updated at gt
	LocalUpdatedAtGt *string `json:"local_updated_at_gt,omitempty"`

	// local updated at gte
	LocalUpdatedAtGte *string `json:"local_updated_at_gte,omitempty"`

	// local updated at in
	LocalUpdatedAtIn []string `json:"local_updated_at_in,omitempty"`

	// local updated at lt
	LocalUpdatedAtLt *string `json:"local_updated_at_lt,omitempty"`

	// local updated at lte
	LocalUpdatedAtLte *string `json:"local_updated_at_lte,omitempty"`

	// local updated at not
	LocalUpdatedAtNot *string `json:"local_updated_at_not,omitempty"`

	// local updated at not in
	LocalUpdatedAtNotIn []string `json:"local_updated_at_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nfs export
	NfsExport *NfsExportWhereInput `json:"nfs_export,omitempty"`

	// parent id
	ParentID *string `json:"parent_id,omitempty"`

	// parent id contains
	ParentIDContains *string `json:"parent_id_contains,omitempty"`

	// parent id ends with
	ParentIDEndsWith *string `json:"parent_id_ends_with,omitempty"`

	// parent id gt
	ParentIDGt *string `json:"parent_id_gt,omitempty"`

	// parent id gte
	ParentIDGte *string `json:"parent_id_gte,omitempty"`

	// parent id in
	ParentIDIn []string `json:"parent_id_in,omitempty"`

	// parent id lt
	ParentIDLt *string `json:"parent_id_lt,omitempty"`

	// parent id lte
	ParentIDLte *string `json:"parent_id_lte,omitempty"`

	// parent id not
	ParentIDNot *string `json:"parent_id_not,omitempty"`

	// parent id not contains
	ParentIDNotContains *string `json:"parent_id_not_contains,omitempty"`

	// parent id not ends with
	ParentIDNotEndsWith *string `json:"parent_id_not_ends_with,omitempty"`

	// parent id not in
	ParentIDNotIn []string `json:"parent_id_not_in,omitempty"`

	// parent id not starts with
	ParentIDNotStartsWith *string `json:"parent_id_not_starts_with,omitempty"`

	// parent id starts with
	ParentIDStartsWith *string `json:"parent_id_starts_with,omitempty"`

	// shared size
	SharedSize *int64 `json:"shared_size,omitempty"`

	// shared size gt
	SharedSizeGt *int64 `json:"shared_size_gt,omitempty"`

	// shared size gte
	SharedSizeGte *int64 `json:"shared_size_gte,omitempty"`

	// shared size in
	SharedSizeIn []int64 `json:"shared_size_in,omitempty"`

	// shared size lt
	SharedSizeLt *int64 `json:"shared_size_lt,omitempty"`

	// shared size lte
	SharedSizeLte *int64 `json:"shared_size_lte,omitempty"`

	// shared size not
	SharedSizeNot *int64 `json:"shared_size_not,omitempty"`

	// shared size not in
	SharedSizeNotIn []int64 `json:"shared_size_not_in,omitempty"`

	// snapshot num
	SnapshotNum *int32 `json:"snapshot_num,omitempty"`

	// snapshot num gt
	SnapshotNumGt *int32 `json:"snapshot_num_gt,omitempty"`

	// snapshot num gte
	SnapshotNumGte *int32 `json:"snapshot_num_gte,omitempty"`

	// snapshot num in
	SnapshotNumIn []int32 `json:"snapshot_num_in,omitempty"`

	// snapshot num lt
	SnapshotNumLt *int32 `json:"snapshot_num_lt,omitempty"`

	// snapshot num lte
	SnapshotNumLte *int32 `json:"snapshot_num_lte,omitempty"`

	// snapshot num not
	SnapshotNumNot *int32 `json:"snapshot_num_not,omitempty"`

	// snapshot num not in
	SnapshotNumNotIn []int32 `json:"snapshot_num_not_in,omitempty"`

	// unique logical size
	UniqueLogicalSize *float64 `json:"unique_logical_size,omitempty"`

	// unique logical size gt
	UniqueLogicalSizeGt *float64 `json:"unique_logical_size_gt,omitempty"`

	// unique logical size gte
	UniqueLogicalSizeGte *float64 `json:"unique_logical_size_gte,omitempty"`

	// unique logical size in
	UniqueLogicalSizeIn []float64 `json:"unique_logical_size_in,omitempty"`

	// unique logical size lt
	UniqueLogicalSizeLt *float64 `json:"unique_logical_size_lt,omitempty"`

	// unique logical size lte
	UniqueLogicalSizeLte *float64 `json:"unique_logical_size_lte,omitempty"`

	// unique logical size not
	UniqueLogicalSizeNot *float64 `json:"unique_logical_size_not,omitempty"`

	// unique logical size not in
	UniqueLogicalSizeNotIn []float64 `json:"unique_logical_size_not_in,omitempty"`

	// unique size
	UniqueSize *int64 `json:"unique_size,omitempty"`

	// unique size gt
	UniqueSizeGt *int64 `json:"unique_size_gt,omitempty"`

	// unique size gte
	UniqueSizeGte *int64 `json:"unique_size_gte,omitempty"`

	// unique size in
	UniqueSizeIn []int64 `json:"unique_size_in,omitempty"`

	// unique size lt
	UniqueSizeLt *int64 `json:"unique_size_lt,omitempty"`

	// unique size lte
	UniqueSizeLte *int64 `json:"unique_size_lte,omitempty"`

	// unique size not
	UniqueSizeNot *int64 `json:"unique_size_not,omitempty"`

	// unique size not in
	UniqueSizeNotIn []int64 `json:"unique_size_not_in,omitempty"`

	MarshalOpts *NfsInodeWhereInputMarshalOpts `json:"-"`
}

type NfsInodeWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	AssignedSize_Explicit_Null_When_Empty bool

	AssignedSizeGt_Explicit_Null_When_Empty bool

	AssignedSizeGte_Explicit_Null_When_Empty bool

	AssignedSizeIn_Explicit_Null_When_Empty bool

	AssignedSizeLt_Explicit_Null_When_Empty bool

	AssignedSizeLte_Explicit_Null_When_Empty bool

	AssignedSizeNot_Explicit_Null_When_Empty bool

	AssignedSizeNotIn_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	File_Explicit_Null_When_Empty bool

	FileNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	LocalUpdatedAt_Explicit_Null_When_Empty bool

	LocalUpdatedAtGt_Explicit_Null_When_Empty bool

	LocalUpdatedAtGte_Explicit_Null_When_Empty bool

	LocalUpdatedAtIn_Explicit_Null_When_Empty bool

	LocalUpdatedAtLt_Explicit_Null_When_Empty bool

	LocalUpdatedAtLte_Explicit_Null_When_Empty bool

	LocalUpdatedAtNot_Explicit_Null_When_Empty bool

	LocalUpdatedAtNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NfsExport_Explicit_Null_When_Empty bool

	ParentID_Explicit_Null_When_Empty bool

	ParentIDContains_Explicit_Null_When_Empty bool

	ParentIDEndsWith_Explicit_Null_When_Empty bool

	ParentIDGt_Explicit_Null_When_Empty bool

	ParentIDGte_Explicit_Null_When_Empty bool

	ParentIDIn_Explicit_Null_When_Empty bool

	ParentIDLt_Explicit_Null_When_Empty bool

	ParentIDLte_Explicit_Null_When_Empty bool

	ParentIDNot_Explicit_Null_When_Empty bool

	ParentIDNotContains_Explicit_Null_When_Empty bool

	ParentIDNotEndsWith_Explicit_Null_When_Empty bool

	ParentIDNotIn_Explicit_Null_When_Empty bool

	ParentIDNotStartsWith_Explicit_Null_When_Empty bool

	ParentIDStartsWith_Explicit_Null_When_Empty bool

	SharedSize_Explicit_Null_When_Empty bool

	SharedSizeGt_Explicit_Null_When_Empty bool

	SharedSizeGte_Explicit_Null_When_Empty bool

	SharedSizeIn_Explicit_Null_When_Empty bool

	SharedSizeLt_Explicit_Null_When_Empty bool

	SharedSizeLte_Explicit_Null_When_Empty bool

	SharedSizeNot_Explicit_Null_When_Empty bool

	SharedSizeNotIn_Explicit_Null_When_Empty bool

	SnapshotNum_Explicit_Null_When_Empty bool

	SnapshotNumGt_Explicit_Null_When_Empty bool

	SnapshotNumGte_Explicit_Null_When_Empty bool

	SnapshotNumIn_Explicit_Null_When_Empty bool

	SnapshotNumLt_Explicit_Null_When_Empty bool

	SnapshotNumLte_Explicit_Null_When_Empty bool

	SnapshotNumNot_Explicit_Null_When_Empty bool

	SnapshotNumNotIn_Explicit_Null_When_Empty bool

	UniqueLogicalSize_Explicit_Null_When_Empty bool

	UniqueLogicalSizeGt_Explicit_Null_When_Empty bool

	UniqueLogicalSizeGte_Explicit_Null_When_Empty bool

	UniqueLogicalSizeIn_Explicit_Null_When_Empty bool

	UniqueLogicalSizeLt_Explicit_Null_When_Empty bool

	UniqueLogicalSizeLte_Explicit_Null_When_Empty bool

	UniqueLogicalSizeNot_Explicit_Null_When_Empty bool

	UniqueLogicalSizeNotIn_Explicit_Null_When_Empty bool

	UniqueSize_Explicit_Null_When_Empty bool

	UniqueSizeGt_Explicit_Null_When_Empty bool

	UniqueSizeGte_Explicit_Null_When_Empty bool

	UniqueSizeIn_Explicit_Null_When_Empty bool

	UniqueSizeLt_Explicit_Null_When_Empty bool

	UniqueSizeLte_Explicit_Null_When_Empty bool

	UniqueSizeNot_Explicit_Null_When_Empty bool

	UniqueSizeNotIn_Explicit_Null_When_Empty bool
}

func (m NfsInodeWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field assigned_size
	if m.AssignedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":")
		bytes, err := swag.WriteJSON(m.AssignedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":null")
		first = false
	}

	// handle nullable field assigned_size_gt
	if m.AssignedSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_gt\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_gt\":null")
		first = false
	}

	// handle nullable field assigned_size_gte
	if m.AssignedSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_gte\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_gte\":null")
		first = false
	}

	// handle non nullable field assigned_size_in with omitempty
	if swag.IsZero(m.AssignedSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_in\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field assigned_size_lt
	if m.AssignedSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_lt\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_lt\":null")
		first = false
	}

	// handle nullable field assigned_size_lte
	if m.AssignedSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_lte\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_lte\":null")
		first = false
	}

	// handle nullable field assigned_size_not
	if m.AssignedSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_not\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_not\":null")
		first = false
	}

	// handle non nullable field assigned_size_not_in with omitempty
	if swag.IsZero(m.AssignedSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_not_in\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field file
	if m.File != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"file\":")
		bytes, err := swag.WriteJSON(m.File)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.File_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"file\":null")
		first = false
	}

	// handle nullable field file_not
	if m.FileNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"file_not\":")
		bytes, err := swag.WriteJSON(m.FileNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FileNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"file_not\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field local_updated_at
	if m.LocalUpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at\":null")
		first = false
	}

	// handle nullable field local_updated_at_gt
	if m.LocalUpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_gt\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_gt\":null")
		first = false
	}

	// handle nullable field local_updated_at_gte
	if m.LocalUpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_gte\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_gte\":null")
		first = false
	}

	// handle non nullable field local_updated_at_in with omitempty
	if swag.IsZero(m.LocalUpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_in\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_updated_at_lt
	if m.LocalUpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_lt\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_lt\":null")
		first = false
	}

	// handle nullable field local_updated_at_lte
	if m.LocalUpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_lte\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_lte\":null")
		first = false
	}

	// handle nullable field local_updated_at_not
	if m.LocalUpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_not\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalUpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_not\":null")
		first = false
	}

	// handle non nullable field local_updated_at_not_in with omitempty
	if swag.IsZero(m.LocalUpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_updated_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalUpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field nfs_export
	if m.NfsExport != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_export\":")
		bytes, err := swag.WriteJSON(m.NfsExport)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsExport_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_export\":null")
		first = false
	}

	// handle nullable field parent_id
	if m.ParentID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id\":")
		bytes, err := swag.WriteJSON(m.ParentID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id\":null")
		first = false
	}

	// handle nullable field parent_id_contains
	if m.ParentIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_contains\":")
		bytes, err := swag.WriteJSON(m.ParentIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_contains\":null")
		first = false
	}

	// handle nullable field parent_id_ends_with
	if m.ParentIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_ends_with\":null")
		first = false
	}

	// handle nullable field parent_id_gt
	if m.ParentIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_gt\":")
		bytes, err := swag.WriteJSON(m.ParentIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_gt\":null")
		first = false
	}

	// handle nullable field parent_id_gte
	if m.ParentIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_gte\":")
		bytes, err := swag.WriteJSON(m.ParentIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_gte\":null")
		first = false
	}

	// handle non nullable field parent_id_in with omitempty
	if swag.IsZero(m.ParentIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_in\":")
		bytes, err := swag.WriteJSON(m.ParentIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_id_lt
	if m.ParentIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_lt\":")
		bytes, err := swag.WriteJSON(m.ParentIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_lt\":null")
		first = false
	}

	// handle nullable field parent_id_lte
	if m.ParentIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_lte\":")
		bytes, err := swag.WriteJSON(m.ParentIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_lte\":null")
		first = false
	}

	// handle nullable field parent_id_not
	if m.ParentIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not\":")
		bytes, err := swag.WriteJSON(m.ParentIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not\":null")
		first = false
	}

	// handle nullable field parent_id_not_contains
	if m.ParentIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ParentIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_contains\":null")
		first = false
	}

	// handle nullable field parent_id_not_ends_with
	if m.ParentIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field parent_id_not_in with omitempty
	if swag.IsZero(m.ParentIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ParentIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_id_not_starts_with
	if m.ParentIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field parent_id_starts_with
	if m.ParentIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_id_starts_with\":null")
		first = false
	}

	// handle nullable field shared_size
	if m.SharedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size\":")
		bytes, err := swag.WriteJSON(m.SharedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size\":null")
		first = false
	}

	// handle nullable field shared_size_gt
	if m.SharedSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_gt\":")
		bytes, err := swag.WriteJSON(m.SharedSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_gt\":null")
		first = false
	}

	// handle nullable field shared_size_gte
	if m.SharedSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_gte\":")
		bytes, err := swag.WriteJSON(m.SharedSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_gte\":null")
		first = false
	}

	// handle non nullable field shared_size_in with omitempty
	if swag.IsZero(m.SharedSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_in\":")
		bytes, err := swag.WriteJSON(m.SharedSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field shared_size_lt
	if m.SharedSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_lt\":")
		bytes, err := swag.WriteJSON(m.SharedSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_lt\":null")
		first = false
	}

	// handle nullable field shared_size_lte
	if m.SharedSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_lte\":")
		bytes, err := swag.WriteJSON(m.SharedSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_lte\":null")
		first = false
	}

	// handle nullable field shared_size_not
	if m.SharedSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_not\":")
		bytes, err := swag.WriteJSON(m.SharedSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_not\":null")
		first = false
	}

	// handle non nullable field shared_size_not_in with omitempty
	if swag.IsZero(m.SharedSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size_not_in\":")
		bytes, err := swag.WriteJSON(m.SharedSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_num
	if m.SnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num\":")
		bytes, err := swag.WriteJSON(m.SnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num\":null")
		first = false
	}

	// handle nullable field snapshot_num_gt
	if m.SnapshotNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_gt\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_gt\":null")
		first = false
	}

	// handle nullable field snapshot_num_gte
	if m.SnapshotNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_gte\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_gte\":null")
		first = false
	}

	// handle non nullable field snapshot_num_in with omitempty
	if swag.IsZero(m.SnapshotNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_num_lt
	if m.SnapshotNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_lt\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_lt\":null")
		first = false
	}

	// handle nullable field snapshot_num_lte
	if m.SnapshotNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_lte\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_lte\":null")
		first = false
	}

	// handle nullable field snapshot_num_not
	if m.SnapshotNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_not\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_not\":null")
		first = false
	}

	// handle non nullable field snapshot_num_not_in with omitempty
	if swag.IsZero(m.SnapshotNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num_not_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unique_logical_size
	if m.UniqueLogicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size\":null")
		first = false
	}

	// handle nullable field unique_logical_size_gt
	if m.UniqueLogicalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_gt\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_gt\":null")
		first = false
	}

	// handle nullable field unique_logical_size_gte
	if m.UniqueLogicalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_gte\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_gte\":null")
		first = false
	}

	// handle non nullable field unique_logical_size_in with omitempty
	if swag.IsZero(m.UniqueLogicalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_in\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unique_logical_size_lt
	if m.UniqueLogicalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_lt\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_lt\":null")
		first = false
	}

	// handle nullable field unique_logical_size_lte
	if m.UniqueLogicalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_lte\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_lte\":null")
		first = false
	}

	// handle nullable field unique_logical_size_not
	if m.UniqueLogicalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_not\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_not\":null")
		first = false
	}

	// handle non nullable field unique_logical_size_not_in with omitempty
	if swag.IsZero(m.UniqueLogicalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size_not_in\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unique_size
	if m.UniqueSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size\":")
		bytes, err := swag.WriteJSON(m.UniqueSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size\":null")
		first = false
	}

	// handle nullable field unique_size_gt
	if m.UniqueSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_gt\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_gt\":null")
		first = false
	}

	// handle nullable field unique_size_gte
	if m.UniqueSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_gte\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_gte\":null")
		first = false
	}

	// handle non nullable field unique_size_in with omitempty
	if swag.IsZero(m.UniqueSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_in\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field unique_size_lt
	if m.UniqueSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_lt\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_lt\":null")
		first = false
	}

	// handle nullable field unique_size_lte
	if m.UniqueSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_lte\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_lte\":null")
		first = false
	}

	// handle nullable field unique_size_not
	if m.UniqueSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_not\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_not\":null")
		first = false
	}

	// handle non nullable field unique_size_not_in with omitempty
	if swag.IsZero(m.UniqueSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size_not_in\":")
		bytes, err := swag.WriteJSON(m.UniqueSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nfs inode where input
func (m *NfsInodeWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsInodeWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) validateNfsExport(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExport) { // not required
		return nil
	}

	if m.NfsExport != nil {
		if err := m.NfsExport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs_export")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs_export")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nfs inode where input based on the context it is used
func (m *NfsInodeWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsInodeWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NfsInodeWhereInput) contextValidateNfsExport(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsExport != nil {
		if err := m.NfsExport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nfs_export")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nfs_export")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsInodeWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsInodeWhereInput) UnmarshalBinary(b []byte) error {
	var res NfsInodeWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
