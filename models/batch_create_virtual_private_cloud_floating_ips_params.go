// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchCreateVirtualPrivateCloudFloatingIpsParams batch create virtual private cloud floating ips params
//
// swagger:model BatchCreateVirtualPrivateCloudFloatingIpsParams
type BatchCreateVirtualPrivateCloudFloatingIpsParams struct {

	// auto allocate number
	AutoAllocateNumber *float64 `json:"auto_allocate_number,omitempty"`

	// external subnet group id
	ExternalSubnetGroupID *string `json:"external_subnet_group_id,omitempty"`

	// external subnet id
	ExternalSubnetID *string `json:"external_subnet_id,omitempty"`

	// ip addresses
	IPAddresses []string `json:"ip_addresses,omitempty"`

	// ip addresses under group
	IPAddressesUnderGroup [][]*VirtualPrivateCloudExternalIpsParams `json:"ip_addresses_under_group,omitempty"`

	// vpc id
	// Required: true
	VpcID *string `json:"vpc_id"`

	MarshalOpts *BatchCreateVirtualPrivateCloudFloatingIpsParamsMarshalOpts `json:"-"`
}

type BatchCreateVirtualPrivateCloudFloatingIpsParamsMarshalOpts struct {
	AutoAllocateNumber_Explicit_Null_When_Empty bool

	ExternalSubnetGroupID_Explicit_Null_When_Empty bool

	ExternalSubnetID_Explicit_Null_When_Empty bool

	IPAddresses_Explicit_Null_When_Empty bool

	IPAddressesUnderGroup_Explicit_Null_When_Empty bool

	VpcID_Explicit_Null_When_Empty bool
}

func (m BatchCreateVirtualPrivateCloudFloatingIpsParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field auto_allocate_number
	if m.AutoAllocateNumber != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auto_allocate_number\":")
		bytes, err := swag.WriteJSON(m.AutoAllocateNumber)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AutoAllocateNumber_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"auto_allocate_number\":null")
		first = false
	}

	// handle nullable field external_subnet_group_id
	if m.ExternalSubnetGroupID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_group_id\":")
		bytes, err := swag.WriteJSON(m.ExternalSubnetGroupID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalSubnetGroupID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_group_id\":null")
		first = false
	}

	// handle nullable field external_subnet_id
	if m.ExternalSubnetID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_id\":")
		bytes, err := swag.WriteJSON(m.ExternalSubnetID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalSubnetID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_id\":null")
		first = false
	}

	// handle non nullable field ip_addresses with omitempty
	if !swag.IsZero(m.IPAddresses) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_addresses\":")
		bytes, err := swag.WriteJSON(m.IPAddresses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field ip_addresses_under_group with omitempty
	if !swag.IsZero(m.IPAddressesUnderGroup) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_addresses_under_group\":")
		bytes, err := swag.WriteJSON(m.IPAddressesUnderGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vpc_id
	if m.VpcID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_id\":")
		bytes, err := swag.WriteJSON(m.VpcID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this batch create virtual private cloud floating ips params
func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAddressesUnderGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) validateIPAddressesUnderGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddressesUnderGroup) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddressesUnderGroup); i++ {

		for ii := 0; ii < len(m.IPAddressesUnderGroup[i]); ii++ {
			if swag.IsZero(m.IPAddressesUnderGroup[i][ii]) { // not required
				continue
			}

			if m.IPAddressesUnderGroup[i][ii] != nil {
				if err := m.IPAddressesUnderGroup[i][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("ip_addresses_under_group" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("ip_addresses_under_group" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) validateVpcID(formats strfmt.Registry) error {

	if err := validate.Required("vpc_id", "body", m.VpcID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this batch create virtual private cloud floating ips params based on the context it is used
func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPAddressesUnderGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) contextValidateIPAddressesUnderGroup(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddressesUnderGroup); i++ {

		for ii := 0; ii < len(m.IPAddressesUnderGroup[i]); ii++ {

			if m.IPAddressesUnderGroup[i][ii] != nil {
				if err := m.IPAddressesUnderGroup[i][ii].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("ip_addresses_under_group" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("ip_addresses_under_group" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchCreateVirtualPrivateCloudFloatingIpsParams) UnmarshalBinary(b []byte) error {
	var res BatchCreateVirtualPrivateCloudFloatingIpsParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
