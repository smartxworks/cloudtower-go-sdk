// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityPolicyStatisticsWhereInput security policy statistics where input
//
// swagger:model SecurityPolicyStatisticsWhereInput
type SecurityPolicyStatisticsWhereInput struct {

	// a n d
	AND []*SecurityPolicyStatisticsWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*SecurityPolicyStatisticsWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*SecurityPolicyStatisticsWhereInput `json:"OR,omitempty"`

	// count reset timestamp
	CountResetTimestamp *string `json:"count_reset_timestamp,omitempty"`

	// count reset timestamp gt
	CountResetTimestampGt *string `json:"count_reset_timestamp_gt,omitempty"`

	// count reset timestamp gte
	CountResetTimestampGte *string `json:"count_reset_timestamp_gte,omitempty"`

	// count reset timestamp in
	CountResetTimestampIn []string `json:"count_reset_timestamp_in,omitempty"`

	// count reset timestamp lt
	CountResetTimestampLt *string `json:"count_reset_timestamp_lt,omitempty"`

	// count reset timestamp lte
	CountResetTimestampLte *string `json:"count_reset_timestamp_lte,omitempty"`

	// count reset timestamp not
	CountResetTimestampNot *string `json:"count_reset_timestamp_not,omitempty"`

	// count reset timestamp not in
	CountResetTimestampNotIn []string `json:"count_reset_timestamp_not_in,omitempty"`

	// count update timestamp
	CountUpdateTimestamp *string `json:"count_update_timestamp,omitempty"`

	// count update timestamp gt
	CountUpdateTimestampGt *string `json:"count_update_timestamp_gt,omitempty"`

	// count update timestamp gte
	CountUpdateTimestampGte *string `json:"count_update_timestamp_gte,omitempty"`

	// count update timestamp in
	CountUpdateTimestampIn []string `json:"count_update_timestamp_in,omitempty"`

	// count update timestamp lt
	CountUpdateTimestampLt *string `json:"count_update_timestamp_lt,omitempty"`

	// count update timestamp lte
	CountUpdateTimestampLte *string `json:"count_update_timestamp_lte,omitempty"`

	// count update timestamp not
	CountUpdateTimestampNot *string `json:"count_update_timestamp_not,omitempty"`

	// count update timestamp not in
	CountUpdateTimestampNotIn []string `json:"count_update_timestamp_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// match allow count
	MatchAllowCount *int32 `json:"match_allow_count,omitempty"`

	// match allow count gt
	MatchAllowCountGt *int32 `json:"match_allow_count_gt,omitempty"`

	// match allow count gte
	MatchAllowCountGte *int32 `json:"match_allow_count_gte,omitempty"`

	// match allow count in
	MatchAllowCountIn []int32 `json:"match_allow_count_in,omitempty"`

	// match allow count lt
	MatchAllowCountLt *int32 `json:"match_allow_count_lt,omitempty"`

	// match allow count lte
	MatchAllowCountLte *int32 `json:"match_allow_count_lte,omitempty"`

	// match allow count not
	MatchAllowCountNot *int32 `json:"match_allow_count_not,omitempty"`

	// match allow count not in
	MatchAllowCountNotIn []int32 `json:"match_allow_count_not_in,omitempty"`

	// match default allow count
	MatchDefaultAllowCount *int32 `json:"match_default_allow_count,omitempty"`

	// match default allow count gt
	MatchDefaultAllowCountGt *int32 `json:"match_default_allow_count_gt,omitempty"`

	// match default allow count gte
	MatchDefaultAllowCountGte *int32 `json:"match_default_allow_count_gte,omitempty"`

	// match default allow count in
	MatchDefaultAllowCountIn []int32 `json:"match_default_allow_count_in,omitempty"`

	// match default allow count lt
	MatchDefaultAllowCountLt *int32 `json:"match_default_allow_count_lt,omitempty"`

	// match default allow count lte
	MatchDefaultAllowCountLte *int32 `json:"match_default_allow_count_lte,omitempty"`

	// match default allow count not
	MatchDefaultAllowCountNot *int32 `json:"match_default_allow_count_not,omitempty"`

	// match default allow count not in
	MatchDefaultAllowCountNotIn []int32 `json:"match_default_allow_count_not_in,omitempty"`

	// match default drop count
	MatchDefaultDropCount *int32 `json:"match_default_drop_count,omitempty"`

	// match default drop count gt
	MatchDefaultDropCountGt *int32 `json:"match_default_drop_count_gt,omitempty"`

	// match default drop count gte
	MatchDefaultDropCountGte *int32 `json:"match_default_drop_count_gte,omitempty"`

	// match default drop count in
	MatchDefaultDropCountIn []int32 `json:"match_default_drop_count_in,omitempty"`

	// match default drop count lt
	MatchDefaultDropCountLt *int32 `json:"match_default_drop_count_lt,omitempty"`

	// match default drop count lte
	MatchDefaultDropCountLte *int32 `json:"match_default_drop_count_lte,omitempty"`

	// match default drop count not
	MatchDefaultDropCountNot *int32 `json:"match_default_drop_count_not,omitempty"`

	// match default drop count not in
	MatchDefaultDropCountNotIn []int32 `json:"match_default_drop_count_not_in,omitempty"`

	// match drop count
	MatchDropCount *int32 `json:"match_drop_count,omitempty"`

	// match drop count gt
	MatchDropCountGt *int32 `json:"match_drop_count_gt,omitempty"`

	// match drop count gte
	MatchDropCountGte *int32 `json:"match_drop_count_gte,omitempty"`

	// match drop count in
	MatchDropCountIn []int32 `json:"match_drop_count_in,omitempty"`

	// match drop count lt
	MatchDropCountLt *int32 `json:"match_drop_count_lt,omitempty"`

	// match drop count lte
	MatchDropCountLte *int32 `json:"match_drop_count_lte,omitempty"`

	// match drop count not
	MatchDropCountNot *int32 `json:"match_drop_count_not,omitempty"`

	// match drop count not in
	MatchDropCountNotIn []int32 `json:"match_drop_count_not_in,omitempty"`

	// match whitelist count
	MatchWhitelistCount *int32 `json:"match_whitelist_count,omitempty"`

	// match whitelist count gt
	MatchWhitelistCountGt *int32 `json:"match_whitelist_count_gt,omitempty"`

	// match whitelist count gte
	MatchWhitelistCountGte *int32 `json:"match_whitelist_count_gte,omitempty"`

	// match whitelist count in
	MatchWhitelistCountIn []int32 `json:"match_whitelist_count_in,omitempty"`

	// match whitelist count lt
	MatchWhitelistCountLt *int32 `json:"match_whitelist_count_lt,omitempty"`

	// match whitelist count lte
	MatchWhitelistCountLte *int32 `json:"match_whitelist_count_lte,omitempty"`

	// match whitelist count not
	MatchWhitelistCountNot *int32 `json:"match_whitelist_count_not,omitempty"`

	// match whitelist count not in
	MatchWhitelistCountNotIn []int32 `json:"match_whitelist_count_not_in,omitempty"`

	// total count
	TotalCount *int32 `json:"total_count,omitempty"`

	// total count gt
	TotalCountGt *int32 `json:"total_count_gt,omitempty"`

	// total count gte
	TotalCountGte *int32 `json:"total_count_gte,omitempty"`

	// total count in
	TotalCountIn []int32 `json:"total_count_in,omitempty"`

	// total count lt
	TotalCountLt *int32 `json:"total_count_lt,omitempty"`

	// total count lte
	TotalCountLte *int32 `json:"total_count_lte,omitempty"`

	// total count not
	TotalCountNot *int32 `json:"total_count_not,omitempty"`

	// total count not in
	TotalCountNotIn []int32 `json:"total_count_not_in,omitempty"`

	MarshalOpts *SecurityPolicyStatisticsWhereInputMarshalOpts `json:"-"`
}

type SecurityPolicyStatisticsWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	CountResetTimestamp_Explicit_Null_When_Empty bool

	CountResetTimestampGt_Explicit_Null_When_Empty bool

	CountResetTimestampGte_Explicit_Null_When_Empty bool

	CountResetTimestampIn_Explicit_Null_When_Empty bool

	CountResetTimestampLt_Explicit_Null_When_Empty bool

	CountResetTimestampLte_Explicit_Null_When_Empty bool

	CountResetTimestampNot_Explicit_Null_When_Empty bool

	CountResetTimestampNotIn_Explicit_Null_When_Empty bool

	CountUpdateTimestamp_Explicit_Null_When_Empty bool

	CountUpdateTimestampGt_Explicit_Null_When_Empty bool

	CountUpdateTimestampGte_Explicit_Null_When_Empty bool

	CountUpdateTimestampIn_Explicit_Null_When_Empty bool

	CountUpdateTimestampLt_Explicit_Null_When_Empty bool

	CountUpdateTimestampLte_Explicit_Null_When_Empty bool

	CountUpdateTimestampNot_Explicit_Null_When_Empty bool

	CountUpdateTimestampNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	MatchAllowCount_Explicit_Null_When_Empty bool

	MatchAllowCountGt_Explicit_Null_When_Empty bool

	MatchAllowCountGte_Explicit_Null_When_Empty bool

	MatchAllowCountIn_Explicit_Null_When_Empty bool

	MatchAllowCountLt_Explicit_Null_When_Empty bool

	MatchAllowCountLte_Explicit_Null_When_Empty bool

	MatchAllowCountNot_Explicit_Null_When_Empty bool

	MatchAllowCountNotIn_Explicit_Null_When_Empty bool

	MatchDefaultAllowCount_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountGt_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountGte_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountIn_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountLt_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountLte_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountNot_Explicit_Null_When_Empty bool

	MatchDefaultAllowCountNotIn_Explicit_Null_When_Empty bool

	MatchDefaultDropCount_Explicit_Null_When_Empty bool

	MatchDefaultDropCountGt_Explicit_Null_When_Empty bool

	MatchDefaultDropCountGte_Explicit_Null_When_Empty bool

	MatchDefaultDropCountIn_Explicit_Null_When_Empty bool

	MatchDefaultDropCountLt_Explicit_Null_When_Empty bool

	MatchDefaultDropCountLte_Explicit_Null_When_Empty bool

	MatchDefaultDropCountNot_Explicit_Null_When_Empty bool

	MatchDefaultDropCountNotIn_Explicit_Null_When_Empty bool

	MatchDropCount_Explicit_Null_When_Empty bool

	MatchDropCountGt_Explicit_Null_When_Empty bool

	MatchDropCountGte_Explicit_Null_When_Empty bool

	MatchDropCountIn_Explicit_Null_When_Empty bool

	MatchDropCountLt_Explicit_Null_When_Empty bool

	MatchDropCountLte_Explicit_Null_When_Empty bool

	MatchDropCountNot_Explicit_Null_When_Empty bool

	MatchDropCountNotIn_Explicit_Null_When_Empty bool

	MatchWhitelistCount_Explicit_Null_When_Empty bool

	MatchWhitelistCountGt_Explicit_Null_When_Empty bool

	MatchWhitelistCountGte_Explicit_Null_When_Empty bool

	MatchWhitelistCountIn_Explicit_Null_When_Empty bool

	MatchWhitelistCountLt_Explicit_Null_When_Empty bool

	MatchWhitelistCountLte_Explicit_Null_When_Empty bool

	MatchWhitelistCountNot_Explicit_Null_When_Empty bool

	MatchWhitelistCountNotIn_Explicit_Null_When_Empty bool

	TotalCount_Explicit_Null_When_Empty bool

	TotalCountGt_Explicit_Null_When_Empty bool

	TotalCountGte_Explicit_Null_When_Empty bool

	TotalCountIn_Explicit_Null_When_Empty bool

	TotalCountLt_Explicit_Null_When_Empty bool

	TotalCountLte_Explicit_Null_When_Empty bool

	TotalCountNot_Explicit_Null_When_Empty bool

	TotalCountNotIn_Explicit_Null_When_Empty bool
}

func (m SecurityPolicyStatisticsWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field count_reset_timestamp
	if m.CountResetTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp\":null")
		first = false
	}

	// handle nullable field count_reset_timestamp_gt
	if m.CountResetTimestampGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_gt\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestampGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_gt\":null")
		first = false
	}

	// handle nullable field count_reset_timestamp_gte
	if m.CountResetTimestampGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_gte\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestampGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_gte\":null")
		first = false
	}

	// handle non nullable field count_reset_timestamp_in with omitempty
	if !swag.IsZero(m.CountResetTimestampIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_in\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field count_reset_timestamp_lt
	if m.CountResetTimestampLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_lt\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestampLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_lt\":null")
		first = false
	}

	// handle nullable field count_reset_timestamp_lte
	if m.CountResetTimestampLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_lte\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestampLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_lte\":null")
		first = false
	}

	// handle nullable field count_reset_timestamp_not
	if m.CountResetTimestampNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_not\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountResetTimestampNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_not\":null")
		first = false
	}

	// handle non nullable field count_reset_timestamp_not_in with omitempty
	if !swag.IsZero(m.CountResetTimestampNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_reset_timestamp_not_in\":")
		bytes, err := swag.WriteJSON(m.CountResetTimestampNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field count_update_timestamp
	if m.CountUpdateTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp\":null")
		first = false
	}

	// handle nullable field count_update_timestamp_gt
	if m.CountUpdateTimestampGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_gt\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestampGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_gt\":null")
		first = false
	}

	// handle nullable field count_update_timestamp_gte
	if m.CountUpdateTimestampGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_gte\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestampGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_gte\":null")
		first = false
	}

	// handle non nullable field count_update_timestamp_in with omitempty
	if !swag.IsZero(m.CountUpdateTimestampIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_in\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field count_update_timestamp_lt
	if m.CountUpdateTimestampLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_lt\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestampLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_lt\":null")
		first = false
	}

	// handle nullable field count_update_timestamp_lte
	if m.CountUpdateTimestampLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_lte\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestampLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_lte\":null")
		first = false
	}

	// handle nullable field count_update_timestamp_not
	if m.CountUpdateTimestampNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_not\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CountUpdateTimestampNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_not\":null")
		first = false
	}

	// handle non nullable field count_update_timestamp_not_in with omitempty
	if !swag.IsZero(m.CountUpdateTimestampNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"count_update_timestamp_not_in\":")
		bytes, err := swag.WriteJSON(m.CountUpdateTimestampNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field match_allow_count
	if m.MatchAllowCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count\":null")
		first = false
	}

	// handle nullable field match_allow_count_gt
	if m.MatchAllowCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_gt\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_gt\":null")
		first = false
	}

	// handle nullable field match_allow_count_gte
	if m.MatchAllowCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_gte\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_gte\":null")
		first = false
	}

	// handle non nullable field match_allow_count_in with omitempty
	if !swag.IsZero(m.MatchAllowCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_in\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_allow_count_lt
	if m.MatchAllowCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_lt\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_lt\":null")
		first = false
	}

	// handle nullable field match_allow_count_lte
	if m.MatchAllowCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_lte\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_lte\":null")
		first = false
	}

	// handle nullable field match_allow_count_not
	if m.MatchAllowCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_not\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchAllowCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_not\":null")
		first = false
	}

	// handle non nullable field match_allow_count_not_in with omitempty
	if !swag.IsZero(m.MatchAllowCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_allow_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MatchAllowCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_default_allow_count
	if m.MatchDefaultAllowCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count\":null")
		first = false
	}

	// handle nullable field match_default_allow_count_gt
	if m.MatchDefaultAllowCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_gt\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_gt\":null")
		first = false
	}

	// handle nullable field match_default_allow_count_gte
	if m.MatchDefaultAllowCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_gte\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_gte\":null")
		first = false
	}

	// handle non nullable field match_default_allow_count_in with omitempty
	if !swag.IsZero(m.MatchDefaultAllowCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_in\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_default_allow_count_lt
	if m.MatchDefaultAllowCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_lt\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_lt\":null")
		first = false
	}

	// handle nullable field match_default_allow_count_lte
	if m.MatchDefaultAllowCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_lte\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_lte\":null")
		first = false
	}

	// handle nullable field match_default_allow_count_not
	if m.MatchDefaultAllowCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_not\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultAllowCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_not\":null")
		first = false
	}

	// handle non nullable field match_default_allow_count_not_in with omitempty
	if !swag.IsZero(m.MatchDefaultAllowCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_allow_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultAllowCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_default_drop_count
	if m.MatchDefaultDropCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count\":null")
		first = false
	}

	// handle nullable field match_default_drop_count_gt
	if m.MatchDefaultDropCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_gt\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_gt\":null")
		first = false
	}

	// handle nullable field match_default_drop_count_gte
	if m.MatchDefaultDropCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_gte\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_gte\":null")
		first = false
	}

	// handle non nullable field match_default_drop_count_in with omitempty
	if !swag.IsZero(m.MatchDefaultDropCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_in\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_default_drop_count_lt
	if m.MatchDefaultDropCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_lt\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_lt\":null")
		first = false
	}

	// handle nullable field match_default_drop_count_lte
	if m.MatchDefaultDropCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_lte\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_lte\":null")
		first = false
	}

	// handle nullable field match_default_drop_count_not
	if m.MatchDefaultDropCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_not\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDefaultDropCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_not\":null")
		first = false
	}

	// handle non nullable field match_default_drop_count_not_in with omitempty
	if !swag.IsZero(m.MatchDefaultDropCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_default_drop_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MatchDefaultDropCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_drop_count
	if m.MatchDropCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count\":")
		bytes, err := swag.WriteJSON(m.MatchDropCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count\":null")
		first = false
	}

	// handle nullable field match_drop_count_gt
	if m.MatchDropCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_gt\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_gt\":null")
		first = false
	}

	// handle nullable field match_drop_count_gte
	if m.MatchDropCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_gte\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_gte\":null")
		first = false
	}

	// handle non nullable field match_drop_count_in with omitempty
	if !swag.IsZero(m.MatchDropCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_in\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_drop_count_lt
	if m.MatchDropCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_lt\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_lt\":null")
		first = false
	}

	// handle nullable field match_drop_count_lte
	if m.MatchDropCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_lte\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_lte\":null")
		first = false
	}

	// handle nullable field match_drop_count_not
	if m.MatchDropCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_not\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchDropCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_not\":null")
		first = false
	}

	// handle non nullable field match_drop_count_not_in with omitempty
	if !swag.IsZero(m.MatchDropCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_drop_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MatchDropCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_whitelist_count
	if m.MatchWhitelistCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count\":null")
		first = false
	}

	// handle nullable field match_whitelist_count_gt
	if m.MatchWhitelistCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_gt\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_gt\":null")
		first = false
	}

	// handle nullable field match_whitelist_count_gte
	if m.MatchWhitelistCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_gte\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_gte\":null")
		first = false
	}

	// handle non nullable field match_whitelist_count_in with omitempty
	if !swag.IsZero(m.MatchWhitelistCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_in\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field match_whitelist_count_lt
	if m.MatchWhitelistCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_lt\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_lt\":null")
		first = false
	}

	// handle nullable field match_whitelist_count_lte
	if m.MatchWhitelistCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_lte\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_lte\":null")
		first = false
	}

	// handle nullable field match_whitelist_count_not
	if m.MatchWhitelistCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_not\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MatchWhitelistCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_not\":null")
		first = false
	}

	// handle non nullable field match_whitelist_count_not_in with omitempty
	if !swag.IsZero(m.MatchWhitelistCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"match_whitelist_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MatchWhitelistCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_count
	if m.TotalCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count\":")
		bytes, err := swag.WriteJSON(m.TotalCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count\":null")
		first = false
	}

	// handle nullable field total_count_gt
	if m.TotalCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_gt\":")
		bytes, err := swag.WriteJSON(m.TotalCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_gt\":null")
		first = false
	}

	// handle nullable field total_count_gte
	if m.TotalCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_gte\":")
		bytes, err := swag.WriteJSON(m.TotalCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_gte\":null")
		first = false
	}

	// handle non nullable field total_count_in with omitempty
	if !swag.IsZero(m.TotalCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_in\":")
		bytes, err := swag.WriteJSON(m.TotalCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_count_lt
	if m.TotalCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_lt\":")
		bytes, err := swag.WriteJSON(m.TotalCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_lt\":null")
		first = false
	}

	// handle nullable field total_count_lte
	if m.TotalCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_lte\":")
		bytes, err := swag.WriteJSON(m.TotalCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_lte\":null")
		first = false
	}

	// handle nullable field total_count_not
	if m.TotalCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_not\":")
		bytes, err := swag.WriteJSON(m.TotalCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_not\":null")
		first = false
	}

	// handle non nullable field total_count_not_in with omitempty
	if !swag.IsZero(m.TotalCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_count_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this security policy statistics where input
func (m *SecurityPolicyStatisticsWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this security policy statistics where input based on the context it is used
func (m *SecurityPolicyStatisticsWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityPolicyStatisticsWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityPolicyStatisticsWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityPolicyStatisticsWhereInput) UnmarshalBinary(b []byte) error {
	var res SecurityPolicyStatisticsWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
