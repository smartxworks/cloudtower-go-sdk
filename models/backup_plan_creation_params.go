// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupPlanCreationParams backup plan creation params
//
// swagger:model BackupPlanCreationParams
type BackupPlanCreationParams struct {

	// backup delay option
	BackupDelayOption *BackupPlanDelayOption `json:"backup_delay_option,omitempty"`

	// backup service id
	// Required: true
	BackupServiceID *string `json:"backup_service_id"`

	// backup store repository id
	// Required: true
	BackupStoreRepositoryID *string `json:"backup_store_repository_id"`

	// compression
	// Required: true
	Compression *bool `json:"compression"`

	// description
	Description *string `json:"description,omitempty"`

	// enable window
	// Required: true
	EnableWindow *bool `json:"enable_window"`

	// full interval
	// Required: true
	FullInterval *int32 `json:"full_interval"`

	// full period
	// Required: true
	FullPeriod *BackupPlanPeriod `json:"full_period"`

	// full time point
	// Required: true
	FullTimePoint *BackupPlanTimePoint `json:"full_time_point"`

	// incremental interval
	// Required: true
	IncrementalInterval *int32 `json:"incremental_interval"`

	// incremental period
	// Required: true
	IncrementalPeriod *BackupPlanPeriod `json:"incremental_period"`

	// incremental time points
	IncrementalTimePoints []*BackupPlanTimePoint `json:"incremental_time_points,omitempty"`

	// incremental weekdays
	IncrementalWeekdays []WeekdayTypeEnum `json:"incremental_weekdays,omitempty"`

	// keep policy
	// Required: true
	KeepPolicy *BackupPlanKeepPolicy `json:"keep_policy"`

	// keep policy value
	// Required: true
	KeepPolicyValue *int32 `json:"keep_policy_value"`

	// name
	// Required: true
	Name *string `json:"name"`

	// snapshot consistent type
	// Required: true
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type"`

	// vms
	// Required: true
	Vms *VMWhereInput `json:"vms"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	MarshalOpts *BackupPlanCreationParamsMarshalOpts `json:"-"`
}

type BackupPlanCreationParamsMarshalOpts struct {
	BackupDelayOption_Explicit_Null_When_Empty bool

	BackupServiceID_Explicit_Null_When_Empty bool

	BackupStoreRepositoryID_Explicit_Null_When_Empty bool

	Compression_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EnableWindow_Explicit_Null_When_Empty bool

	FullInterval_Explicit_Null_When_Empty bool

	FullPeriod_Explicit_Null_When_Empty bool

	FullTimePoint_Explicit_Null_When_Empty bool

	IncrementalInterval_Explicit_Null_When_Empty bool

	IncrementalPeriod_Explicit_Null_When_Empty bool

	KeepPolicy_Explicit_Null_When_Empty bool

	KeepPolicyValue_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool

	WindowEnd_Explicit_Null_When_Empty bool

	WindowStart_Explicit_Null_When_Empty bool
}

func (m BackupPlanCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field backup_delay_option
	if m.BackupDelayOption != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOption)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupDelayOption_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":null")
		first = false
	}

	// handle nullable field backup_service_id
	if m.BackupServiceID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service_id\":")
		bytes, err := swag.WriteJSON(m.BackupServiceID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupServiceID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service_id\":null")
		first = false
	}

	// handle nullable field backup_store_repository_id
	if m.BackupStoreRepositoryID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository_id\":")
		bytes, err := swag.WriteJSON(m.BackupStoreRepositoryID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupStoreRepositoryID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository_id\":null")
		first = false
	}

	// handle nullable field compression
	if m.Compression != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":")
		bytes, err := swag.WriteJSON(m.Compression)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compression_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field enable_window
	if m.EnableWindow != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":")
		bytes, err := swag.WriteJSON(m.EnableWindow)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindow_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":null")
		first = false
	}

	// handle nullable field full_interval
	if m.FullInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":")
		bytes, err := swag.WriteJSON(m.FullInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":null")
		first = false
	}

	// handle nullable field full_period
	if m.FullPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":")
		bytes, err := swag.WriteJSON(m.FullPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":null")
		first = false
	}

	// handle nullable field full_time_point
	if m.FullTimePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_time_point\":")
		bytes, err := swag.WriteJSON(m.FullTimePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullTimePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_time_point\":null")
		first = false
	}

	// handle nullable field incremental_interval
	if m.IncrementalInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":")
		bytes, err := swag.WriteJSON(m.IncrementalInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":null")
		first = false
	}

	// handle nullable field incremental_period
	if m.IncrementalPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":null")
		first = false
	}

	// handle non nullable field incremental_time_points with omitempty
	if swag.IsZero(m.IncrementalTimePoints) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_time_points\":")
		bytes, err := swag.WriteJSON(m.IncrementalTimePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field incremental_weekdays with omitempty
	if swag.IsZero(m.IncrementalWeekdays) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_weekdays\":")
		bytes, err := swag.WriteJSON(m.IncrementalWeekdays)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy
	if m.KeepPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":")
		bytes, err := swag.WriteJSON(m.KeepPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":null")
		first = false
	}

	// handle nullable field keep_policy_value
	if m.KeepPolicyValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle nullable field vms
	if m.Vms != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vms_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":null")
		first = false
	}

	// handle nullable field window_end
	if m.WindowEnd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":")
		bytes, err := swag.WriteJSON(m.WindowEnd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEnd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":null")
		first = false
	}

	// handle nullable field window_start
	if m.WindowStart != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":")
		bytes, err := swag.WriteJSON(m.WindowStart)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStart_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup plan creation params
func (m *BackupPlanCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupDelayOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupStoreRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullTimePoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalTimePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalWeekdays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanCreationParams) validateBackupDelayOption(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOption) { // not required
		return nil
	}

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateBackupServiceID(formats strfmt.Registry) error {

	if err := validate.Required("backup_service_id", "body", m.BackupServiceID); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateBackupStoreRepositoryID(formats strfmt.Registry) error {

	if err := validate.Required("backup_store_repository_id", "body", m.BackupStoreRepositoryID); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateCompression(formats strfmt.Registry) error {

	if err := validate.Required("compression", "body", m.Compression); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateEnableWindow(formats strfmt.Registry) error {

	if err := validate.Required("enable_window", "body", m.EnableWindow); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateFullInterval(formats strfmt.Registry) error {

	if err := validate.Required("full_interval", "body", m.FullInterval); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateFullPeriod(formats strfmt.Registry) error {

	if err := validate.Required("full_period", "body", m.FullPeriod); err != nil {
		return err
	}

	if err := validate.Required("full_period", "body", m.FullPeriod); err != nil {
		return err
	}

	if m.FullPeriod != nil {
		if err := m.FullPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateFullTimePoint(formats strfmt.Registry) error {

	if err := validate.Required("full_time_point", "body", m.FullTimePoint); err != nil {
		return err
	}

	if m.FullTimePoint != nil {
		if err := m.FullTimePoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_time_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_time_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateIncrementalInterval(formats strfmt.Registry) error {

	if err := validate.Required("incremental_interval", "body", m.IncrementalInterval); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateIncrementalPeriod(formats strfmt.Registry) error {

	if err := validate.Required("incremental_period", "body", m.IncrementalPeriod); err != nil {
		return err
	}

	if err := validate.Required("incremental_period", "body", m.IncrementalPeriod); err != nil {
		return err
	}

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateIncrementalTimePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalTimePoints) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalTimePoints); i++ {
		if swag.IsZero(m.IncrementalTimePoints[i]) { // not required
			continue
		}

		if m.IncrementalTimePoints[i] != nil {
			if err := m.IncrementalTimePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanCreationParams) validateIncrementalWeekdays(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalWeekdays) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalWeekdays); i++ {

		if err := m.IncrementalWeekdays[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanCreationParams) validateKeepPolicy(formats strfmt.Registry) error {

	if err := validate.Required("keep_policy", "body", m.KeepPolicy); err != nil {
		return err
	}

	if err := validate.Required("keep_policy", "body", m.KeepPolicy); err != nil {
		return err
	}

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateKeepPolicyValue(formats strfmt.Registry) error {

	if err := validate.Required("keep_policy_value", "body", m.KeepPolicyValue); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlanCreationParams) validateSnapshotConsistentType(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_consistent_type", "body", m.SnapshotConsistentType); err != nil {
		return err
	}

	if err := validate.Required("snapshot_consistent_type", "body", m.SnapshotConsistentType); err != nil {
		return err
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) validateVms(formats strfmt.Registry) error {

	if err := validate.Required("vms", "body", m.Vms); err != nil {
		return err
	}

	if m.Vms != nil {
		if err := m.Vms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup plan creation params based on the context it is used
func (m *BackupPlanCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupDelayOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullTimePoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalTimePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalWeekdays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanCreationParams) contextValidateBackupDelayOption(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateFullPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.FullPeriod != nil {
		if err := m.FullPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateFullTimePoint(ctx context.Context, formats strfmt.Registry) error {

	if m.FullTimePoint != nil {
		if err := m.FullTimePoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_time_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_time_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateIncrementalPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateIncrementalTimePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalTimePoints); i++ {

		if m.IncrementalTimePoints[i] != nil {
			if err := m.IncrementalTimePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateIncrementalWeekdays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalWeekdays); i++ {

		if err := m.IncrementalWeekdays[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateKeepPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlanCreationParams) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	if m.Vms != nil {
		if err := m.Vms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPlanCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPlanCreationParams) UnmarshalBinary(b []byte) error {
	var res BackupPlanCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
