// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TableReporterParams table reporter params
//
// swagger:model TableReporterParams
type TableReporterParams struct {

	// columns
	// Required: true
	Columns []*ColumnConfig `json:"columns"`

	// filter
	// Required: true
	Filter *TableReporterParamsFilter `json:"filter"`

	// name
	// Required: true
	Name *string `json:"name"`

	MarshalOpts *TableReporterParamsMarshalOpts `json:"-"`
}

type TableReporterParamsMarshalOpts struct {
	Filter_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool
}

func (m TableReporterParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field columns without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"columns\":")
	bytes, err := swag.WriteJSON(m.Columns)
	if err != nil {
		return nil, err
	}
	b.Write(bytes)
	first = false

	// handle nullable field filter
	if m.Filter != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter\":")
		bytes, err := swag.WriteJSON(m.Filter)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Filter_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this table reporter params
func (m *TableReporterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableReporterParams) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TableReporterParams) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this table reporter params based on the context it is used
func (m *TableReporterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableReporterParams) contextValidateColumns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Columns); i++ {

		if m.Columns[i] != nil {
			if err := m.Columns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TableReporterParams) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {
		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableReporterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableReporterParams) UnmarshalBinary(b []byte) error {
	var res TableReporterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TableReporterParamsFilter table reporter params filter
//
// swagger:model TableReporterParamsFilter
type TableReporterParamsFilter struct {

	// alerts
	Alerts *GetAlertsRequestBody `json:"alerts,omitempty"`

	// clusters
	Clusters *GetClustersRequestBody `json:"clusters,omitempty"`

	// consistency groups
	ConsistencyGroups *GetConsistencyGroupsRequestBody `json:"consistencyGroups,omitempty"`

	// content library images
	ContentLibraryImages *GetContentLibraryImagesRequestBody `json:"contentLibraryImages,omitempty"`

	// content library Vm templates
	ContentLibraryVMTemplates *GetContentLibraryVMTemplatesRequestBody `json:"contentLibraryVmTemplates,omitempty"`

	// datacenters
	Datacenters *GetDatacentersRequestBody `json:"datacenters,omitempty"`

	// disks
	Disks *GetDisksRequestBody `json:"disks,omitempty"`

	// elf data stores
	ElfDataStores *GetElfDataStoresRequestBody `json:"elfDataStores,omitempty"`

	// elf images
	ElfImages *GetElfImagesRequestBody `json:"elfImages,omitempty"`

	// global alert rules
	GlobalAlertRules *GetGlobalAlertRulesRequestBody `json:"globalAlertRules,omitempty"`

	// hosts
	Hosts *GetHostsRequestBody `json:"hosts,omitempty"`

	// iscsi connections
	IscsiConnections *GetIscsiConnectionsRequestBody `json:"iscsiConnections,omitempty"`

	// iscsi lun snapshots
	IscsiLunSnapshots *GetIscsiLunSnapshotsRequestBody `json:"iscsiLunSnapshots,omitempty"`

	// iscsi luns
	IscsiLuns *GetIscsiLunsRequestBody `json:"iscsiLuns,omitempty"`

	// iscsi targets
	IscsiTargets *GetIscsiTargetsRequestBody `json:"iscsiTargets,omitempty"`

	// namespace groups
	NamespaceGroups *GetNamespaceGroupsRequestBody `json:"namespaceGroups,omitempty"`

	// nfs exports
	NfsExports *GetNfsExportsRequestBody `json:"nfsExports,omitempty"`

	// nics
	Nics *GetNicsRequestBody `json:"nics,omitempty"`

	// nvmf namespace snapshots
	NvmfNamespaceSnapshots *GetNvmfNamespaceSnapshotsRequestBody `json:"nvmfNamespaceSnapshots,omitempty"`

	// nvmf namespaces
	NvmfNamespaces *GetNvmfNamespacesRequestBody `json:"nvmfNamespaces,omitempty"`

	// nvmf subsystems
	NvmfSubsystems *GetNvmfSubsystemsRequestBody `json:"nvmfSubsystems,omitempty"`

	// snapshot plans
	SnapshotPlans *GetSnapshotPlansRequestBody `json:"snapshotPlans,omitempty"`

	// system audit logs
	SystemAuditLogs *GetSystemAuditLogsRequestBody `json:"systemAuditLogs,omitempty"`

	// tasks
	Tasks *GetTasksRequestBody `json:"tasks,omitempty"`

	// usb devices
	UsbDevices *GetUsbDevicesRequestBody `json:"usbDevices,omitempty"`

	// user audit logs
	UserAuditLogs *GetUserAuditLogsRequestBody `json:"userAuditLogs,omitempty"`

	// users
	Users *GetUsersRequestBody `json:"users,omitempty"`

	// vdses
	Vdses *GetVdsesRequestBody `json:"vdses,omitempty"`

	// vlans
	Vlans *GetVlansRequestBody `json:"vlans,omitempty"`

	// vm entity filters
	VMEntityFilters *GetEntityFiltersRequestBody `json:"vmEntityFilters,omitempty"`

	// vm placement groups
	VMPlacementGroups *GetVMPlacementGroupsRequestBody `json:"vmPlacementGroups,omitempty"`

	// vm templates
	VMTemplates *GetVMTemplatesRequestBody `json:"vmTemplates,omitempty"`

	// vm volumes
	VMVolumes *GetVMVolumesRequestBody `json:"vmVolumes,omitempty"`

	// vms
	Vms *GetVmsRequestBody `json:"vms,omitempty"`

	MarshalOpts *TableReporterParamsFilterMarshalOpts `json:"-"`
}

type TableReporterParamsFilterMarshalOpts struct {
	Alerts_Explicit_Null_When_Empty bool

	Clusters_Explicit_Null_When_Empty bool

	ConsistencyGroups_Explicit_Null_When_Empty bool

	ContentLibraryImages_Explicit_Null_When_Empty bool

	ContentLibraryVMTemplates_Explicit_Null_When_Empty bool

	Datacenters_Explicit_Null_When_Empty bool

	Disks_Explicit_Null_When_Empty bool

	ElfDataStores_Explicit_Null_When_Empty bool

	ElfImages_Explicit_Null_When_Empty bool

	GlobalAlertRules_Explicit_Null_When_Empty bool

	Hosts_Explicit_Null_When_Empty bool

	IscsiConnections_Explicit_Null_When_Empty bool

	IscsiLunSnapshots_Explicit_Null_When_Empty bool

	IscsiLuns_Explicit_Null_When_Empty bool

	IscsiTargets_Explicit_Null_When_Empty bool

	NamespaceGroups_Explicit_Null_When_Empty bool

	NfsExports_Explicit_Null_When_Empty bool

	Nics_Explicit_Null_When_Empty bool

	NvmfNamespaceSnapshots_Explicit_Null_When_Empty bool

	NvmfNamespaces_Explicit_Null_When_Empty bool

	NvmfSubsystems_Explicit_Null_When_Empty bool

	SnapshotPlans_Explicit_Null_When_Empty bool

	SystemAuditLogs_Explicit_Null_When_Empty bool

	Tasks_Explicit_Null_When_Empty bool

	UsbDevices_Explicit_Null_When_Empty bool

	UserAuditLogs_Explicit_Null_When_Empty bool

	Users_Explicit_Null_When_Empty bool

	Vdses_Explicit_Null_When_Empty bool

	Vlans_Explicit_Null_When_Empty bool

	VMEntityFilters_Explicit_Null_When_Empty bool

	VMPlacementGroups_Explicit_Null_When_Empty bool

	VMTemplates_Explicit_Null_When_Empty bool

	VMVolumes_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m TableReporterParamsFilter) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field alerts
	if m.Alerts != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"alerts\":")
		bytes, err := swag.WriteJSON(m.Alerts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Alerts_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"alerts\":null")
		first = false
	}

	// handle nullable field clusters
	if m.Clusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Clusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":null")
		first = false
	}

	// handle nullable field consistencyGroups
	if m.ConsistencyGroups != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistencyGroups\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroups_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistencyGroups\":null")
		first = false
	}

	// handle nullable field contentLibraryImages
	if m.ContentLibraryImages != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"contentLibraryImages\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryImages_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"contentLibraryImages\":null")
		first = false
	}

	// handle nullable field contentLibraryVmTemplates
	if m.ContentLibraryVMTemplates != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"contentLibraryVmTemplates\":")
		bytes, err := swag.WriteJSON(m.ContentLibraryVMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ContentLibraryVMTemplates_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"contentLibraryVmTemplates\":null")
		first = false
	}

	// handle nullable field datacenters
	if m.Datacenters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":")
		bytes, err := swag.WriteJSON(m.Datacenters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Datacenters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"datacenters\":null")
		first = false
	}

	// handle nullable field disks
	if m.Disks != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":")
		bytes, err := swag.WriteJSON(m.Disks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disks_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":null")
		first = false
	}

	// handle nullable field elfDataStores
	if m.ElfDataStores != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elfDataStores\":")
		bytes, err := swag.WriteJSON(m.ElfDataStores)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfDataStores_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elfDataStores\":null")
		first = false
	}

	// handle nullable field elfImages
	if m.ElfImages != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elfImages\":")
		bytes, err := swag.WriteJSON(m.ElfImages)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ElfImages_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"elfImages\":null")
		first = false
	}

	// handle nullable field globalAlertRules
	if m.GlobalAlertRules != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"globalAlertRules\":")
		bytes, err := swag.WriteJSON(m.GlobalAlertRules)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GlobalAlertRules_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"globalAlertRules\":null")
		first = false
	}

	// handle nullable field hosts
	if m.Hosts != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":")
		bytes, err := swag.WriteJSON(m.Hosts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Hosts_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":null")
		first = false
	}

	// handle nullable field iscsiConnections
	if m.IscsiConnections != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiConnections\":")
		bytes, err := swag.WriteJSON(m.IscsiConnections)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiConnections_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiConnections\":null")
		first = false
	}

	// handle nullable field iscsiLunSnapshots
	if m.IscsiLunSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiLunSnapshots\":")
		bytes, err := swag.WriteJSON(m.IscsiLunSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiLunSnapshots\":null")
		first = false
	}

	// handle nullable field iscsiLuns
	if m.IscsiLuns != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiLuns\":")
		bytes, err := swag.WriteJSON(m.IscsiLuns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLuns_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiLuns\":null")
		first = false
	}

	// handle nullable field iscsiTargets
	if m.IscsiTargets != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiTargets\":")
		bytes, err := swag.WriteJSON(m.IscsiTargets)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargets_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsiTargets\":null")
		first = false
	}

	// handle nullable field namespaceGroups
	if m.NamespaceGroups != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaceGroups\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroups_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaceGroups\":null")
		first = false
	}

	// handle nullable field nfsExports
	if m.NfsExports != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfsExports\":")
		bytes, err := swag.WriteJSON(m.NfsExports)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsExports_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfsExports\":null")
		first = false
	}

	// handle nullable field nics
	if m.Nics != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":")
		bytes, err := swag.WriteJSON(m.Nics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Nics_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":null")
		first = false
	}

	// handle nullable field nvmfNamespaceSnapshots
	if m.NvmfNamespaceSnapshots != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfNamespaceSnapshots\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaceSnapshots)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaceSnapshots_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfNamespaceSnapshots\":null")
		first = false
	}

	// handle nullable field nvmfNamespaces
	if m.NvmfNamespaces != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfNamespaces\":")
		bytes, err := swag.WriteJSON(m.NvmfNamespaces)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfNamespaces_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfNamespaces\":null")
		first = false
	}

	// handle nullable field nvmfSubsystems
	if m.NvmfSubsystems != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfSubsystems\":")
		bytes, err := swag.WriteJSON(m.NvmfSubsystems)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NvmfSubsystems_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nvmfSubsystems\":null")
		first = false
	}

	// handle nullable field snapshotPlans
	if m.SnapshotPlans != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshotPlans\":")
		bytes, err := swag.WriteJSON(m.SnapshotPlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotPlans_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshotPlans\":null")
		first = false
	}

	// handle nullable field systemAuditLogs
	if m.SystemAuditLogs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"systemAuditLogs\":")
		bytes, err := swag.WriteJSON(m.SystemAuditLogs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemAuditLogs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"systemAuditLogs\":null")
		first = false
	}

	// handle nullable field tasks
	if m.Tasks != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tasks\":")
		bytes, err := swag.WriteJSON(m.Tasks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Tasks_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tasks\":null")
		first = false
	}

	// handle nullable field usbDevices
	if m.UsbDevices != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usbDevices\":")
		bytes, err := swag.WriteJSON(m.UsbDevices)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsbDevices_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usbDevices\":null")
		first = false
	}

	// handle nullable field userAuditLogs
	if m.UserAuditLogs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"userAuditLogs\":")
		bytes, err := swag.WriteJSON(m.UserAuditLogs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UserAuditLogs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"userAuditLogs\":null")
		first = false
	}

	// handle nullable field users
	if m.Users != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"users\":")
		bytes, err := swag.WriteJSON(m.Users)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Users_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"users\":null")
		first = false
	}

	// handle nullable field vdses
	if m.Vdses != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":")
		bytes, err := swag.WriteJSON(m.Vdses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vdses_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vdses\":null")
		first = false
	}

	// handle nullable field vlans
	if m.Vlans != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlans\":")
		bytes, err := swag.WriteJSON(m.Vlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vlans_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlans\":null")
		first = false
	}

	// handle nullable field vmEntityFilters
	if m.VMEntityFilters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmEntityFilters\":")
		bytes, err := swag.WriteJSON(m.VMEntityFilters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMEntityFilters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmEntityFilters\":null")
		first = false
	}

	// handle nullable field vmPlacementGroups
	if m.VMPlacementGroups != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmPlacementGroups\":")
		bytes, err := swag.WriteJSON(m.VMPlacementGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMPlacementGroups_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmPlacementGroups\":null")
		first = false
	}

	// handle nullable field vmTemplates
	if m.VMTemplates != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmTemplates\":")
		bytes, err := swag.WriteJSON(m.VMTemplates)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMTemplates_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmTemplates\":null")
		first = false
	}

	// handle nullable field vmVolumes
	if m.VMVolumes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes\":")
		bytes, err := swag.WriteJSON(m.VMVolumes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes\":null")
		first = false
	}

	// handle nullable field vms
	if m.Vms != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vms_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this table reporter params filter
func (m *TableReporterParamsFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfDataStores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalAlertRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMEntityFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMPlacementGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableReporterParamsFilter) validateAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.Alerts) { // not required
		return nil
	}

	if m.Alerts != nil {
		if err := m.Alerts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "alerts")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "clusters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateConsistencyGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroups) { // not required
		return nil
	}

	if m.ConsistencyGroups != nil {
		if err := m.ConsistencyGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "consistencyGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "consistencyGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateContentLibraryImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImages) { // not required
		return nil
	}

	if m.ContentLibraryImages != nil {
		if err := m.ContentLibraryImages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "contentLibraryImages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "contentLibraryImages")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateContentLibraryVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplates) { // not required
		return nil
	}

	if m.ContentLibraryVMTemplates != nil {
		if err := m.ContentLibraryVMTemplates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "contentLibraryVmTemplates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "contentLibraryVmTemplates")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	if m.Datacenters != nil {
		if err := m.Datacenters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "datacenters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "datacenters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	if m.Disks != nil {
		if err := m.Disks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateElfDataStores(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfDataStores) { // not required
		return nil
	}

	if m.ElfDataStores != nil {
		if err := m.ElfDataStores.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "elfDataStores")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "elfDataStores")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateElfImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImages) { // not required
		return nil
	}

	if m.ElfImages != nil {
		if err := m.ElfImages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "elfImages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "elfImages")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateGlobalAlertRules(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalAlertRules) { // not required
		return nil
	}

	if m.GlobalAlertRules != nil {
		if err := m.GlobalAlertRules.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "globalAlertRules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "globalAlertRules")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	if m.Hosts != nil {
		if err := m.Hosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateIscsiConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiConnections) { // not required
		return nil
	}

	if m.IscsiConnections != nil {
		if err := m.IscsiConnections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiConnections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiConnections")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateIscsiLunSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshots) { // not required
		return nil
	}

	if m.IscsiLunSnapshots != nil {
		if err := m.IscsiLunSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiLunSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiLunSnapshots")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	if m.IscsiLuns != nil {
		if err := m.IscsiLuns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiLuns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiLuns")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateIscsiTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargets) { // not required
		return nil
	}

	if m.IscsiTargets != nil {
		if err := m.IscsiTargets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiTargets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiTargets")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNamespaceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroups) { // not required
		return nil
	}

	if m.NamespaceGroups != nil {
		if err := m.NamespaceGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "namespaceGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "namespaceGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNfsExports(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExports) { // not required
		return nil
	}

	if m.NfsExports != nil {
		if err := m.NfsExports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nfsExports")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nfsExports")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	if m.Nics != nil {
		if err := m.Nics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNvmfNamespaceSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshots) { // not required
		return nil
	}

	if m.NvmfNamespaceSnapshots != nil {
		if err := m.NvmfNamespaceSnapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfNamespaceSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfNamespaceSnapshots")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNvmfNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaces) { // not required
		return nil
	}

	if m.NvmfNamespaces != nil {
		if err := m.NvmfNamespaces.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfNamespaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfNamespaces")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateNvmfSubsystems(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystems) { // not required
		return nil
	}

	if m.NvmfSubsystems != nil {
		if err := m.NvmfSubsystems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfSubsystems")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfSubsystems")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateSnapshotPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotPlans) { // not required
		return nil
	}

	if m.SnapshotPlans != nil {
		if err := m.SnapshotPlans.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "snapshotPlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "snapshotPlans")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateSystemAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemAuditLogs) { // not required
		return nil
	}

	if m.SystemAuditLogs != nil {
		if err := m.SystemAuditLogs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "systemAuditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "systemAuditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	if m.Tasks != nil {
		if err := m.Tasks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "tasks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "tasks")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateUsbDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.UsbDevices) { // not required
		return nil
	}

	if m.UsbDevices != nil {
		if err := m.UsbDevices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "usbDevices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "usbDevices")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateUserAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAuditLogs) { // not required
		return nil
	}

	if m.UserAuditLogs != nil {
		if err := m.UserAuditLogs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "userAuditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "userAuditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "users")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	if m.Vdses != nil {
		if err := m.Vdses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vdses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vdses")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	if m.Vlans != nil {
		if err := m.Vlans.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vlans")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVMEntityFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.VMEntityFilters) { // not required
		return nil
	}

	if m.VMEntityFilters != nil {
		if err := m.VMEntityFilters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmEntityFilters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmEntityFilters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVMPlacementGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.VMPlacementGroups) { // not required
		return nil
	}

	if m.VMPlacementGroups != nil {
		if err := m.VMPlacementGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmPlacementGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmPlacementGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	if m.VMTemplates != nil {
		if err := m.VMTemplates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmTemplates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmTemplates")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	if m.VMVolumes != nil {
		if err := m.VMVolumes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmVolumes")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	if m.Vms != nil {
		if err := m.Vms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this table reporter params filter based on the context it is used
func (m *TableReporterParamsFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfDataStores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalAlertRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMEntityFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMPlacementGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TableReporterParamsFilter) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if m.Alerts != nil {
		if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "alerts")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "clusters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateConsistencyGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroups != nil {
		if err := m.ConsistencyGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "consistencyGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "consistencyGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateContentLibraryImages(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentLibraryImages != nil {
		if err := m.ContentLibraryImages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "contentLibraryImages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "contentLibraryImages")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateContentLibraryVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentLibraryVMTemplates != nil {
		if err := m.ContentLibraryVMTemplates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "contentLibraryVmTemplates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "contentLibraryVmTemplates")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	if m.Datacenters != nil {
		if err := m.Datacenters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "datacenters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "datacenters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.Disks != nil {
		if err := m.Disks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateElfDataStores(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfDataStores != nil {
		if err := m.ElfDataStores.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "elfDataStores")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "elfDataStores")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateElfImages(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfImages != nil {
		if err := m.ElfImages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "elfImages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "elfImages")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateGlobalAlertRules(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalAlertRules != nil {
		if err := m.GlobalAlertRules.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "globalAlertRules")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "globalAlertRules")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Hosts != nil {
		if err := m.Hosts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateIscsiConnections(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiConnections != nil {
		if err := m.IscsiConnections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiConnections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiConnections")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateIscsiLunSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLunSnapshots != nil {
		if err := m.IscsiLunSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiLunSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiLunSnapshots")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLuns != nil {
		if err := m.IscsiLuns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiLuns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiLuns")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateIscsiTargets(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiTargets != nil {
		if err := m.IscsiTargets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "iscsiTargets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "iscsiTargets")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNamespaceGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceGroups != nil {
		if err := m.NamespaceGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "namespaceGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "namespaceGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNfsExports(ctx context.Context, formats strfmt.Registry) error {

	if m.NfsExports != nil {
		if err := m.NfsExports.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nfsExports")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nfsExports")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	if m.Nics != nil {
		if err := m.Nics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNvmfNamespaceSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfNamespaceSnapshots != nil {
		if err := m.NvmfNamespaceSnapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfNamespaceSnapshots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfNamespaceSnapshots")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNvmfNamespaces(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfNamespaces != nil {
		if err := m.NvmfNamespaces.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfNamespaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfNamespaces")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateNvmfSubsystems(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfSubsystems != nil {
		if err := m.NvmfSubsystems.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "nvmfSubsystems")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "nvmfSubsystems")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateSnapshotPlans(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotPlans != nil {
		if err := m.SnapshotPlans.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "snapshotPlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "snapshotPlans")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateSystemAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemAuditLogs != nil {
		if err := m.SystemAuditLogs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "systemAuditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "systemAuditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	if m.Tasks != nil {
		if err := m.Tasks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "tasks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "tasks")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateUsbDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.UsbDevices != nil {
		if err := m.UsbDevices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "usbDevices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "usbDevices")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateUserAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.UserAuditLogs != nil {
		if err := m.UserAuditLogs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "userAuditLogs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "userAuditLogs")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {
		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "users")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	if m.Vdses != nil {
		if err := m.Vdses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vdses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vdses")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlans != nil {
		if err := m.Vlans.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vlans")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vlans")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVMEntityFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.VMEntityFilters != nil {
		if err := m.VMEntityFilters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmEntityFilters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmEntityFilters")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVMPlacementGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.VMPlacementGroups != nil {
		if err := m.VMPlacementGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmPlacementGroups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmPlacementGroups")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.VMTemplates != nil {
		if err := m.VMTemplates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmTemplates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmTemplates")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumes != nil {
		if err := m.VMVolumes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vmVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vmVolumes")
			}
			return err
		}
	}

	return nil
}

func (m *TableReporterParamsFilter) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	if m.Vms != nil {
		if err := m.Vms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TableReporterParamsFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableReporterParamsFilter) UnmarshalBinary(b []byte) error {
	var res TableReporterParamsFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
