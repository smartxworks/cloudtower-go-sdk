// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudWhereInput virtual private cloud where input
//
// swagger:model VirtualPrivateCloudWhereInput
type VirtualPrivateCloudWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudWhereInput `json:"OR,omitempty"`

	// associate external subnet num
	AssociateExternalSubnetNum *int32 `json:"associate_external_subnet_num,omitempty"`

	// associate external subnet num gt
	AssociateExternalSubnetNumGt *int32 `json:"associate_external_subnet_num_gt,omitempty"`

	// associate external subnet num gte
	AssociateExternalSubnetNumGte *int32 `json:"associate_external_subnet_num_gte,omitempty"`

	// associate external subnet num in
	AssociateExternalSubnetNumIn []int32 `json:"associate_external_subnet_num_in,omitempty"`

	// associate external subnet num lt
	AssociateExternalSubnetNumLt *int32 `json:"associate_external_subnet_num_lt,omitempty"`

	// associate external subnet num lte
	AssociateExternalSubnetNumLte *int32 `json:"associate_external_subnet_num_lte,omitempty"`

	// associate external subnet num not
	AssociateExternalSubnetNumNot *int32 `json:"associate_external_subnet_num_not,omitempty"`

	// associate external subnet num not in
	AssociateExternalSubnetNumNotIn []int32 `json:"associate_external_subnet_num_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// isolation policies every
	IsolationPoliciesEvery *VirtualPrivateCloudIsolationPolicyWhereInput `json:"isolation_policies_every,omitempty"`

	// isolation policies none
	IsolationPoliciesNone *VirtualPrivateCloudIsolationPolicyWhereInput `json:"isolation_policies_none,omitempty"`

	// isolation policies some
	IsolationPoliciesSome *VirtualPrivateCloudIsolationPolicyWhereInput `json:"isolation_policies_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// mtu
	Mtu *int32 `json:"mtu,omitempty"`

	// mtu gt
	MtuGt *int32 `json:"mtu_gt,omitempty"`

	// mtu gte
	MtuGte *int32 `json:"mtu_gte,omitempty"`

	// mtu in
	MtuIn []int32 `json:"mtu_in,omitempty"`

	// mtu lt
	MtuLt *int32 `json:"mtu_lt,omitempty"`

	// mtu lte
	MtuLte *int32 `json:"mtu_lte,omitempty"`

	// mtu not
	MtuNot *int32 `json:"mtu_not,omitempty"`

	// mtu not in
	MtuNotIn []int32 `json:"mtu_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// route tables every
	RouteTablesEvery *VirtualPrivateCloudRouteTableWhereInput `json:"route_tables_every,omitempty"`

	// route tables none
	RouteTablesNone *VirtualPrivateCloudRouteTableWhereInput `json:"route_tables_none,omitempty"`

	// route tables some
	RouteTablesSome *VirtualPrivateCloudRouteTableWhereInput `json:"route_tables_some,omitempty"`

	// security groups every
	SecurityGroupsEvery *VirtualPrivateCloudSecurityGroupWhereInput `json:"security_groups_every,omitempty"`

	// security groups none
	SecurityGroupsNone *VirtualPrivateCloudSecurityGroupWhereInput `json:"security_groups_none,omitempty"`

	// security groups some
	SecurityGroupsSome *VirtualPrivateCloudSecurityGroupWhereInput `json:"security_groups_some,omitempty"`

	// security policies every
	SecurityPoliciesEvery *VirtualPrivateCloudSecurityPolicyWhereInput `json:"security_policies_every,omitempty"`

	// security policies none
	SecurityPoliciesNone *VirtualPrivateCloudSecurityPolicyWhereInput `json:"security_policies_none,omitempty"`

	// security policies some
	SecurityPoliciesSome *VirtualPrivateCloudSecurityPolicyWhereInput `json:"security_policies_some,omitempty"`

	// subnets every
	SubnetsEvery *VirtualPrivateCloudSubnetWhereInput `json:"subnets_every,omitempty"`

	// subnets none
	SubnetsNone *VirtualPrivateCloudSubnetWhereInput `json:"subnets_none,omitempty"`

	// subnets some
	SubnetsSome *VirtualPrivateCloudSubnetWhereInput `json:"subnets_some,omitempty"`

	// vpc service
	VpcService *VirtualPrivateCloudServiceWhereInput `json:"vpc_service,omitempty"`

	MarshalOpts *VirtualPrivateCloudWhereInputMarshalOpts `json:"-"`
}

type VirtualPrivateCloudWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNum_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumGt_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumGte_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumIn_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumLt_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumLte_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumNot_Explicit_Null_When_Empty bool

	AssociateExternalSubnetNumNotIn_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IsolationPoliciesEvery_Explicit_Null_When_Empty bool

	IsolationPoliciesNone_Explicit_Null_When_Empty bool

	IsolationPoliciesSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Mtu_Explicit_Null_When_Empty bool

	MtuGt_Explicit_Null_When_Empty bool

	MtuGte_Explicit_Null_When_Empty bool

	MtuIn_Explicit_Null_When_Empty bool

	MtuLt_Explicit_Null_When_Empty bool

	MtuLte_Explicit_Null_When_Empty bool

	MtuNot_Explicit_Null_When_Empty bool

	MtuNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	RouteTablesEvery_Explicit_Null_When_Empty bool

	RouteTablesNone_Explicit_Null_When_Empty bool

	RouteTablesSome_Explicit_Null_When_Empty bool

	SecurityGroupsEvery_Explicit_Null_When_Empty bool

	SecurityGroupsNone_Explicit_Null_When_Empty bool

	SecurityGroupsSome_Explicit_Null_When_Empty bool

	SecurityPoliciesEvery_Explicit_Null_When_Empty bool

	SecurityPoliciesNone_Explicit_Null_When_Empty bool

	SecurityPoliciesSome_Explicit_Null_When_Empty bool

	SubnetsEvery_Explicit_Null_When_Empty bool

	SubnetsNone_Explicit_Null_When_Empty bool

	SubnetsSome_Explicit_Null_When_Empty bool

	VpcService_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field associate_external_subnet_num
	if m.AssociateExternalSubnetNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num\":null")
		first = false
	}

	// handle nullable field associate_external_subnet_num_gt
	if m.AssociateExternalSubnetNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_gt\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_gt\":null")
		first = false
	}

	// handle nullable field associate_external_subnet_num_gte
	if m.AssociateExternalSubnetNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_gte\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_gte\":null")
		first = false
	}

	// handle non nullable field associate_external_subnet_num_in with omitempty
	if swag.IsZero(m.AssociateExternalSubnetNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_in\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field associate_external_subnet_num_lt
	if m.AssociateExternalSubnetNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_lt\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_lt\":null")
		first = false
	}

	// handle nullable field associate_external_subnet_num_lte
	if m.AssociateExternalSubnetNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_lte\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_lte\":null")
		first = false
	}

	// handle nullable field associate_external_subnet_num_not
	if m.AssociateExternalSubnetNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_not\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssociateExternalSubnetNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_not\":null")
		first = false
	}

	// handle non nullable field associate_external_subnet_num_not_in with omitempty
	if swag.IsZero(m.AssociateExternalSubnetNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associate_external_subnet_num_not_in\":")
		bytes, err := swag.WriteJSON(m.AssociateExternalSubnetNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field isolation_policies_every
	if m.IsolationPoliciesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_every\":")
		bytes, err := swag.WriteJSON(m.IsolationPoliciesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsolationPoliciesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_every\":null")
		first = false
	}

	// handle nullable field isolation_policies_none
	if m.IsolationPoliciesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_none\":")
		bytes, err := swag.WriteJSON(m.IsolationPoliciesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsolationPoliciesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_none\":null")
		first = false
	}

	// handle nullable field isolation_policies_some
	if m.IsolationPoliciesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_some\":")
		bytes, err := swag.WriteJSON(m.IsolationPoliciesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsolationPoliciesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field mtu
	if m.Mtu != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":")
		bytes, err := swag.WriteJSON(m.Mtu)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mtu_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":null")
		first = false
	}

	// handle nullable field mtu_gt
	if m.MtuGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gt\":")
		bytes, err := swag.WriteJSON(m.MtuGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gt\":null")
		first = false
	}

	// handle nullable field mtu_gte
	if m.MtuGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gte\":")
		bytes, err := swag.WriteJSON(m.MtuGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_gte\":null")
		first = false
	}

	// handle non nullable field mtu_in with omitempty
	if swag.IsZero(m.MtuIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_in\":")
		bytes, err := swag.WriteJSON(m.MtuIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field mtu_lt
	if m.MtuLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lt\":")
		bytes, err := swag.WriteJSON(m.MtuLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lt\":null")
		first = false
	}

	// handle nullable field mtu_lte
	if m.MtuLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lte\":")
		bytes, err := swag.WriteJSON(m.MtuLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_lte\":null")
		first = false
	}

	// handle nullable field mtu_not
	if m.MtuNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not\":")
		bytes, err := swag.WriteJSON(m.MtuNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MtuNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not\":null")
		first = false
	}

	// handle non nullable field mtu_not_in with omitempty
	if swag.IsZero(m.MtuNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu_not_in\":")
		bytes, err := swag.WriteJSON(m.MtuNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field route_tables_every
	if m.RouteTablesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_every\":")
		bytes, err := swag.WriteJSON(m.RouteTablesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RouteTablesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_every\":null")
		first = false
	}

	// handle nullable field route_tables_none
	if m.RouteTablesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_none\":")
		bytes, err := swag.WriteJSON(m.RouteTablesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RouteTablesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_none\":null")
		first = false
	}

	// handle nullable field route_tables_some
	if m.RouteTablesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_some\":")
		bytes, err := swag.WriteJSON(m.RouteTablesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RouteTablesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"route_tables_some\":null")
		first = false
	}

	// handle nullable field security_groups_every
	if m.SecurityGroupsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_every\":")
		bytes, err := swag.WriteJSON(m.SecurityGroupsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityGroupsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_every\":null")
		first = false
	}

	// handle nullable field security_groups_none
	if m.SecurityGroupsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_none\":")
		bytes, err := swag.WriteJSON(m.SecurityGroupsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityGroupsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_none\":null")
		first = false
	}

	// handle nullable field security_groups_some
	if m.SecurityGroupsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_some\":")
		bytes, err := swag.WriteJSON(m.SecurityGroupsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityGroupsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_groups_some\":null")
		first = false
	}

	// handle nullable field security_policies_every
	if m.SecurityPoliciesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_every\":")
		bytes, err := swag.WriteJSON(m.SecurityPoliciesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityPoliciesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_every\":null")
		first = false
	}

	// handle nullable field security_policies_none
	if m.SecurityPoliciesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_none\":")
		bytes, err := swag.WriteJSON(m.SecurityPoliciesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityPoliciesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_none\":null")
		first = false
	}

	// handle nullable field security_policies_some
	if m.SecurityPoliciesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_some\":")
		bytes, err := swag.WriteJSON(m.SecurityPoliciesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityPoliciesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies_some\":null")
		first = false
	}

	// handle nullable field subnets_every
	if m.SubnetsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_every\":")
		bytes, err := swag.WriteJSON(m.SubnetsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_every\":null")
		first = false
	}

	// handle nullable field subnets_none
	if m.SubnetsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_none\":")
		bytes, err := swag.WriteJSON(m.SubnetsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_none\":null")
		first = false
	}

	// handle nullable field subnets_some
	if m.SubnetsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_some\":")
		bytes, err := swag.WriteJSON(m.SubnetsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnets_some\":null")
		first = false
	}

	// handle nullable field vpc_service
	if m.VpcService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":")
		bytes, err := swag.WriteJSON(m.VpcService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud where input
func (m *VirtualPrivateCloudWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTablesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTablesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteTablesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateIsolationPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesEvery) { // not required
		return nil
	}

	if m.IsolationPoliciesEvery != nil {
		if err := m.IsolationPoliciesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateIsolationPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesNone) { // not required
		return nil
	}

	if m.IsolationPoliciesNone != nil {
		if err := m.IsolationPoliciesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateIsolationPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesSome) { // not required
		return nil
	}

	if m.IsolationPoliciesSome != nil {
		if err := m.IsolationPoliciesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateRouteTablesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteTablesEvery) { // not required
		return nil
	}

	if m.RouteTablesEvery != nil {
		if err := m.RouteTablesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateRouteTablesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteTablesNone) { // not required
		return nil
	}

	if m.RouteTablesNone != nil {
		if err := m.RouteTablesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateRouteTablesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.RouteTablesSome) { // not required
		return nil
	}

	if m.RouteTablesSome != nil {
		if err := m.RouteTablesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroupsEvery) { // not required
		return nil
	}

	if m.SecurityGroupsEvery != nil {
		if err := m.SecurityGroupsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroupsNone) { // not required
		return nil
	}

	if m.SecurityGroupsNone != nil {
		if err := m.SecurityGroupsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroupsSome) { // not required
		return nil
	}

	if m.SecurityGroupsSome != nil {
		if err := m.SecurityGroupsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesEvery) { // not required
		return nil
	}

	if m.SecurityPoliciesEvery != nil {
		if err := m.SecurityPoliciesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesNone) { // not required
		return nil
	}

	if m.SecurityPoliciesNone != nil {
		if err := m.SecurityPoliciesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSecurityPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesSome) { // not required
		return nil
	}

	if m.SecurityPoliciesSome != nil {
		if err := m.SecurityPoliciesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSubnetsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetsEvery) { // not required
		return nil
	}

	if m.SubnetsEvery != nil {
		if err := m.SubnetsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSubnetsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetsNone) { // not required
		return nil
	}

	if m.SubnetsNone != nil {
		if err := m.SubnetsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateSubnetsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetsSome) { // not required
		return nil
	}

	if m.SubnetsSome != nil {
		if err := m.SubnetsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) validateVpcService(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcService) { // not required
		return nil
	}

	if m.VpcService != nil {
		if err := m.VpcService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud where input based on the context it is used
func (m *VirtualPrivateCloudWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteTablesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteTablesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRouteTablesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateIsolationPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesEvery != nil {
		if err := m.IsolationPoliciesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateIsolationPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesNone != nil {
		if err := m.IsolationPoliciesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateIsolationPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.IsolationPoliciesSome != nil {
		if err := m.IsolationPoliciesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isolation_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isolation_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateRouteTablesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.RouteTablesEvery != nil {
		if err := m.RouteTablesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateRouteTablesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.RouteTablesNone != nil {
		if err := m.RouteTablesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateRouteTablesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.RouteTablesSome != nil {
		if err := m.RouteTablesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_tables_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route_tables_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityGroupsEvery != nil {
		if err := m.SecurityGroupsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityGroupsNone != nil {
		if err := m.SecurityGroupsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityGroupsSome != nil {
		if err := m.SecurityGroupsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesEvery != nil {
		if err := m.SecurityPoliciesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesNone != nil {
		if err := m.SecurityPoliciesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSecurityPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityPoliciesSome != nil {
		if err := m.SecurityPoliciesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_policies_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_policies_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSubnetsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.SubnetsEvery != nil {
		if err := m.SubnetsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSubnetsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.SubnetsNone != nil {
		if err := m.SubnetsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateSubnetsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.SubnetsSome != nil {
		if err := m.SubnetsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subnets_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudWhereInput) contextValidateVpcService(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcService != nil {
		if err := m.VpcService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
