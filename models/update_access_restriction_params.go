// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAccessRestrictionParams update access restriction params
//
// swagger:model UpdateAccessRestrictionParams
type UpdateAccessRestrictionParams struct {

	// access list
	// Required: true
	AccessList []string `json:"access_list"`

	// access mode
	// Required: true
	AccessMode *AccessMode `json:"access_mode"`

	MarshalOpts *UpdateAccessRestrictionParamsMarshalOpts `json:"-"`
}

type UpdateAccessRestrictionParamsMarshalOpts struct {
	AccessList_Explicit_Null_When_Empty bool

	AccessMode_Explicit_Null_When_Empty bool
}

func (m UpdateAccessRestrictionParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field access_list without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_list\":")
		bytes, err := swag.WriteJSON(m.AccessList)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field access_mode
	if m.AccessMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_mode\":")
		bytes, err := swag.WriteJSON(m.AccessMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AccessMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_mode\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this update access restriction params
func (m *UpdateAccessRestrictionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccessRestrictionParams) validateAccessList(formats strfmt.Registry) error {

	if err := validate.Required("access_list", "body", m.AccessList); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccessRestrictionParams) validateAccessMode(formats strfmt.Registry) error {

	if err := validate.Required("access_mode", "body", m.AccessMode); err != nil {
		return err
	}

	if err := validate.Required("access_mode", "body", m.AccessMode); err != nil {
		return err
	}

	if m.AccessMode != nil {
		if err := m.AccessMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update access restriction params based on the context it is used
func (m *UpdateAccessRestrictionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccessRestrictionParams) contextValidateAccessMode(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessMode != nil {
		if err := m.AccessMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAccessRestrictionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAccessRestrictionParams) UnmarshalBinary(b []byte) error {
	var res UpdateAccessRestrictionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
