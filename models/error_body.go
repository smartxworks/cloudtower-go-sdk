// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorBody error body
//
// swagger:model ErrorBody
type ErrorBody struct {

	// code
	Code *ErrorCode `json:"code,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`

	// operation name
	OperationName *string `json:"operationName,omitempty"`

	// path
	// Required: true
	Path *string `json:"path"`

	// props
	Props interface{} `json:"props,omitempty"`

	// stack
	Stack *string `json:"stack,omitempty"`

	// status
	// Required: true
	Status *int32 `json:"status"`

	MarshalOpts *ErrorBodyMarshalOpts `json:"-"`
}

type ErrorBodyMarshalOpts struct {
	Code_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	OperationName_Explicit_Null_When_Empty bool

	Path_Explicit_Null_When_Empty bool

	Stack_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool
}

func (m ErrorBody) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field code
	if m.Code != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code\":")
		bytes, err := swag.WriteJSON(m.Code)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Code_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"code\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field operationName
	if m.OperationName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"operationName\":")
		bytes, err := swag.WriteJSON(m.OperationName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OperationName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"operationName\":null")
		first = false
	}

	// handle nullable field path
	if m.Path != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":")
		bytes, err := swag.WriteJSON(m.Path)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Path_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":null")
		first = false
	}

	// handle non nullable field props with omitempty
	if !swag.IsZero(m.Props) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"props\":")
		bytes, err := swag.WriteJSON(m.Props)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field stack
	if m.Stack != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stack\":")
		bytes, err := swag.WriteJSON(m.Stack)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Stack_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stack\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this error body
func (m *ErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorBody) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *ErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *ErrorBody) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *ErrorBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this error body based on the context it is used
func (m *ErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorBody) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {
		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorBody) UnmarshalBinary(b []byte) error {
	var res ErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
