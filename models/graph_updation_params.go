// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphUpdationParams graph updation params
//
// swagger:model GraphUpdationParams
type GraphUpdationParams struct {

	// data
	Data *GraphUpdationParamsData `json:"data,omitempty"`

	// where
	// Required: true
	Where *GraphWhereInput `json:"where"`

	MarshalOpts *GraphUpdationParamsMarshalOpts `json:"-"`
}

type GraphUpdationParamsMarshalOpts struct {
	Data_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m GraphUpdationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field data
	if m.Data != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Data_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this graph updation params
func (m *GraphUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParams) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph updation params based on the context it is used
func (m *GraphUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParams) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphUpdationParams) UnmarshalBinary(b []byte) error {
	var res GraphUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GraphUpdationParamsData graph updation params data
//
// swagger:model GraphUpdationParamsData
type GraphUpdationParamsData struct {

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// connect id
	ConnectID []string `json:"connect_id,omitempty"`

	// disks
	Disks *DiskWhereInput `json:"disks,omitempty"`

	// hosts
	Hosts *HostWhereInput `json:"hosts,omitempty"`

	// instance ids
	InstanceIds []string `json:"instance_ids,omitempty"`

	// luns
	Luns *IscsiLunWhereInput `json:"luns,omitempty"`

	// metric count
	MetricCount *int32 `json:"metric_count,omitempty"`

	// metric name
	MetricName *string `json:"metric_name,omitempty"`

	// metric type
	MetricType *MetricType `json:"metric_type,omitempty"`

	// network
	Network *NetworkType `json:"network,omitempty"`

	// nics
	Nics *NicWhereInput `json:"nics,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// service
	Service *string `json:"service,omitempty"`

	// title
	Title *string `json:"title,omitempty"`

	// type
	Type *GraphType `json:"type,omitempty"`

	// vm nics
	VMNics *VMNicWhereInput `json:"vmNics,omitempty"`

	// vm volumes
	VMVolumes *VMVolumeWhereInput `json:"vmVolumes,omitempty"`

	// vms
	Vms *VMWhereInput `json:"vms,omitempty"`

	MarshalOpts *GraphUpdationParamsDataMarshalOpts `json:"-"`
}

type GraphUpdationParamsDataMarshalOpts struct {
	Cluster_Explicit_Null_When_Empty bool

	Disks_Explicit_Null_When_Empty bool

	Hosts_Explicit_Null_When_Empty bool

	Luns_Explicit_Null_When_Empty bool

	MetricCount_Explicit_Null_When_Empty bool

	MetricName_Explicit_Null_When_Empty bool

	MetricType_Explicit_Null_When_Empty bool

	Network_Explicit_Null_When_Empty bool

	Nics_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	Service_Explicit_Null_When_Empty bool

	Title_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	VMNics_Explicit_Null_When_Empty bool

	VMVolumes_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m GraphUpdationParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle non nullable field connect_id with omitempty
	if swag.IsZero(m.ConnectID) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"connect_id\":")
		bytes, err := swag.WriteJSON(m.ConnectID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field disks
	if m.Disks != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":")
		bytes, err := swag.WriteJSON(m.Disks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disks_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks\":null")
		first = false
	}

	// handle nullable field hosts
	if m.Hosts != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":")
		bytes, err := swag.WriteJSON(m.Hosts)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Hosts_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts\":null")
		first = false
	}

	// handle non nullable field instance_ids with omitempty
	if swag.IsZero(m.InstanceIds) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"instance_ids\":")
		bytes, err := swag.WriteJSON(m.InstanceIds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field luns
	if m.Luns != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns\":")
		bytes, err := swag.WriteJSON(m.Luns)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Luns_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns\":null")
		first = false
	}

	// handle nullable field metric_count
	if m.MetricCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":")
		bytes, err := swag.WriteJSON(m.MetricCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":null")
		first = false
	}

	// handle nullable field metric_name
	if m.MetricName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":")
		bytes, err := swag.WriteJSON(m.MetricName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":null")
		first = false
	}

	// handle nullable field metric_type
	if m.MetricType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":")
		bytes, err := swag.WriteJSON(m.MetricType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":null")
		first = false
	}

	// handle nullable field network
	if m.Network != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":")
		bytes, err := swag.WriteJSON(m.Network)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Network_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":null")
		first = false
	}

	// handle nullable field nics
	if m.Nics != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":")
		bytes, err := swag.WriteJSON(m.Nics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Nics_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle nullable field service
	if m.Service != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":")
		bytes, err := swag.WriteJSON(m.Service)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Service_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":null")
		first = false
	}

	// handle nullable field title
	if m.Title != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":")
		bytes, err := swag.WriteJSON(m.Title)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Title_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field vmNics
	if m.VMNics != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics\":")
		bytes, err := swag.WriteJSON(m.VMNics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNics_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics\":null")
		first = false
	}

	// handle nullable field vmVolumes
	if m.VMVolumes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes\":")
		bytes, err := swag.WriteJSON(m.VMVolumes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes\":null")
		first = false
	}

	// handle nullable field vms
	if m.Vms != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vms_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this graph updation params data
func (m *GraphUpdationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParamsData) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	if m.Disks != nil {
		if err := m.Disks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	if m.Hosts != nil {
		if err := m.Hosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.Luns) { // not required
		return nil
	}

	if m.Luns != nil {
		if err := m.Luns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "luns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "luns")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateMetricType(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricType) { // not required
		return nil
	}

	if m.MetricType != nil {
		if err := m.MetricType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	if m.Nics != nil {
		if err := m.Nics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateVMNics(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNics) { // not required
		return nil
	}

	if m.VMNics != nil {
		if err := m.VMNics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vmNics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vmNics")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	if m.VMVolumes != nil {
		if err := m.VMVolumes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vmVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vmVolumes")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	if m.Vms != nil {
		if err := m.Vms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph updation params data based on the context it is used
func (m *GraphUpdationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParamsData) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.Disks != nil {
		if err := m.Disks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "disks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "disks")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Hosts != nil {
		if err := m.Hosts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hosts")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateLuns(ctx context.Context, formats strfmt.Registry) error {

	if m.Luns != nil {
		if err := m.Luns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "luns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "luns")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateMetricType(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricType != nil {
		if err := m.MetricType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	if m.Nics != nil {
		if err := m.Nics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "nics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "nics")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateVMNics(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNics != nil {
		if err := m.VMNics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vmNics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vmNics")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumes != nil {
		if err := m.VMVolumes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vmVolumes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vmVolumes")
			}
			return err
		}
	}

	return nil
}

func (m *GraphUpdationParamsData) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	if m.Vms != nil {
		if err := m.Vms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "vms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphUpdationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphUpdationParamsData) UnmarshalBinary(b []byte) error {
	var res GraphUpdationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
