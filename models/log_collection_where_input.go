// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogCollectionWhereInput log collection where input
//
// swagger:model LogCollectionWhereInput
type LogCollectionWhereInput struct {

	// a n d
	AND []*LogCollectionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*LogCollectionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*LogCollectionWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// hosts every
	HostsEvery *HostWhereInput `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone *HostWhereInput `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome *HostWhereInput `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// log ended at
	LogEndedAt *string `json:"log_ended_at,omitempty"`

	// log ended at gt
	LogEndedAtGt *string `json:"log_ended_at_gt,omitempty"`

	// log ended at gte
	LogEndedAtGte *string `json:"log_ended_at_gte,omitempty"`

	// log ended at in
	LogEndedAtIn []string `json:"log_ended_at_in,omitempty"`

	// log ended at lt
	LogEndedAtLt *string `json:"log_ended_at_lt,omitempty"`

	// log ended at lte
	LogEndedAtLte *string `json:"log_ended_at_lte,omitempty"`

	// log ended at not
	LogEndedAtNot *string `json:"log_ended_at_not,omitempty"`

	// log ended at not in
	LogEndedAtNotIn []string `json:"log_ended_at_not_in,omitempty"`

	// log started at
	LogStartedAt *string `json:"log_started_at,omitempty"`

	// log started at gt
	LogStartedAtGt *string `json:"log_started_at_gt,omitempty"`

	// log started at gte
	LogStartedAtGte *string `json:"log_started_at_gte,omitempty"`

	// log started at in
	LogStartedAtIn []string `json:"log_started_at_in,omitempty"`

	// log started at lt
	LogStartedAtLt *string `json:"log_started_at_lt,omitempty"`

	// log started at lte
	LogStartedAtLte *string `json:"log_started_at_lte,omitempty"`

	// log started at not
	LogStartedAtNot *string `json:"log_started_at_not,omitempty"`

	// log started at not in
	LogStartedAtNotIn []string `json:"log_started_at_not_in,omitempty"`

	// owner
	Owner *string `json:"owner,omitempty"`

	// owner contains
	OwnerContains *string `json:"owner_contains,omitempty"`

	// owner ends with
	OwnerEndsWith *string `json:"owner_ends_with,omitempty"`

	// owner gt
	OwnerGt *string `json:"owner_gt,omitempty"`

	// owner gte
	OwnerGte *string `json:"owner_gte,omitempty"`

	// owner in
	OwnerIn []string `json:"owner_in,omitempty"`

	// owner lt
	OwnerLt *string `json:"owner_lt,omitempty"`

	// owner lte
	OwnerLte *string `json:"owner_lte,omitempty"`

	// owner not
	OwnerNot *string `json:"owner_not,omitempty"`

	// owner not contains
	OwnerNotContains *string `json:"owner_not_contains,omitempty"`

	// owner not ends with
	OwnerNotEndsWith *string `json:"owner_not_ends_with,omitempty"`

	// owner not in
	OwnerNotIn []string `json:"owner_not_in,omitempty"`

	// owner not starts with
	OwnerNotStartsWith *string `json:"owner_not_starts_with,omitempty"`

	// owner starts with
	OwnerStartsWith *string `json:"owner_starts_with,omitempty"`

	// path
	Path *string `json:"path,omitempty"`

	// path contains
	PathContains *string `json:"path_contains,omitempty"`

	// path ends with
	PathEndsWith *string `json:"path_ends_with,omitempty"`

	// path gt
	PathGt *string `json:"path_gt,omitempty"`

	// path gte
	PathGte *string `json:"path_gte,omitempty"`

	// path in
	PathIn []string `json:"path_in,omitempty"`

	// path lt
	PathLt *string `json:"path_lt,omitempty"`

	// path lte
	PathLte *string `json:"path_lte,omitempty"`

	// path not
	PathNot *string `json:"path_not,omitempty"`

	// path not contains
	PathNotContains *string `json:"path_not_contains,omitempty"`

	// path not ends with
	PathNotEndsWith *string `json:"path_not_ends_with,omitempty"`

	// path not in
	PathNotIn []string `json:"path_not_in,omitempty"`

	// path not starts with
	PathNotStartsWith *string `json:"path_not_starts_with,omitempty"`

	// path starts with
	PathStartsWith *string `json:"path_starts_with,omitempty"`

	// progress
	Progress *float64 `json:"progress,omitempty"`

	// progress gt
	ProgressGt *float64 `json:"progress_gt,omitempty"`

	// progress gte
	ProgressGte *float64 `json:"progress_gte,omitempty"`

	// progress in
	ProgressIn []float64 `json:"progress_in,omitempty"`

	// progress lt
	ProgressLt *float64 `json:"progress_lt,omitempty"`

	// progress lte
	ProgressLte *float64 `json:"progress_lte,omitempty"`

	// progress not
	ProgressNot *float64 `json:"progress_not,omitempty"`

	// progress not in
	ProgressNotIn []float64 `json:"progress_not_in,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// status
	Status *LogCollectionStatus `json:"status,omitempty"`

	// status in
	StatusIn []LogCollectionStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *LogCollectionStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []LogCollectionStatus `json:"status_not_in,omitempty"`

	// witness
	Witness *WitnessWhereInput `json:"witness,omitempty"`

	MarshalOpts *LogCollectionWhereInputMarshalOpts `json:"-"`
}

type LogCollectionWhereInputMarshalOpts struct {
	Cluster_Explicit_Null_When_Empty bool

	HostsEvery_Explicit_Null_When_Empty bool

	HostsNone_Explicit_Null_When_Empty bool

	HostsSome_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	LogEndedAt_Explicit_Null_When_Empty bool

	LogEndedAtGt_Explicit_Null_When_Empty bool

	LogEndedAtGte_Explicit_Null_When_Empty bool

	LogEndedAtLt_Explicit_Null_When_Empty bool

	LogEndedAtLte_Explicit_Null_When_Empty bool

	LogEndedAtNot_Explicit_Null_When_Empty bool

	LogStartedAt_Explicit_Null_When_Empty bool

	LogStartedAtGt_Explicit_Null_When_Empty bool

	LogStartedAtGte_Explicit_Null_When_Empty bool

	LogStartedAtLt_Explicit_Null_When_Empty bool

	LogStartedAtLte_Explicit_Null_When_Empty bool

	LogStartedAtNot_Explicit_Null_When_Empty bool

	Owner_Explicit_Null_When_Empty bool

	OwnerContains_Explicit_Null_When_Empty bool

	OwnerEndsWith_Explicit_Null_When_Empty bool

	OwnerGt_Explicit_Null_When_Empty bool

	OwnerGte_Explicit_Null_When_Empty bool

	OwnerLt_Explicit_Null_When_Empty bool

	OwnerLte_Explicit_Null_When_Empty bool

	OwnerNot_Explicit_Null_When_Empty bool

	OwnerNotContains_Explicit_Null_When_Empty bool

	OwnerNotEndsWith_Explicit_Null_When_Empty bool

	OwnerNotStartsWith_Explicit_Null_When_Empty bool

	OwnerStartsWith_Explicit_Null_When_Empty bool

	Path_Explicit_Null_When_Empty bool

	PathContains_Explicit_Null_When_Empty bool

	PathEndsWith_Explicit_Null_When_Empty bool

	PathGt_Explicit_Null_When_Empty bool

	PathGte_Explicit_Null_When_Empty bool

	PathLt_Explicit_Null_When_Empty bool

	PathLte_Explicit_Null_When_Empty bool

	PathNot_Explicit_Null_When_Empty bool

	PathNotContains_Explicit_Null_When_Empty bool

	PathNotEndsWith_Explicit_Null_When_Empty bool

	PathNotStartsWith_Explicit_Null_When_Empty bool

	PathStartsWith_Explicit_Null_When_Empty bool

	Progress_Explicit_Null_When_Empty bool

	ProgressGt_Explicit_Null_When_Empty bool

	ProgressGte_Explicit_Null_When_Empty bool

	ProgressLt_Explicit_Null_When_Empty bool

	ProgressLte_Explicit_Null_When_Empty bool

	ProgressNot_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SizeGt_Explicit_Null_When_Empty bool

	SizeGte_Explicit_Null_When_Empty bool

	SizeLt_Explicit_Null_When_Empty bool

	SizeLte_Explicit_Null_When_Empty bool

	SizeNot_Explicit_Null_When_Empty bool

	StartedAt_Explicit_Null_When_Empty bool

	StartedAtGt_Explicit_Null_When_Empty bool

	StartedAtGte_Explicit_Null_When_Empty bool

	StartedAtLt_Explicit_Null_When_Empty bool

	StartedAtLte_Explicit_Null_When_Empty bool

	StartedAtNot_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	Witness_Explicit_Null_When_Empty bool
}

func (m LogCollectionWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field hosts_every
	if m.HostsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_every\":")
		bytes, err := swag.WriteJSON(m.HostsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_every\":null")
		first = false
	}

	// handle nullable field hosts_none
	if m.HostsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_none\":")
		bytes, err := swag.WriteJSON(m.HostsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_none\":null")
		first = false
	}

	// handle nullable field hosts_some
	if m.HostsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_some\":")
		bytes, err := swag.WriteJSON(m.HostsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_some\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field log_ended_at
	if m.LogEndedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at\":")
		bytes, err := swag.WriteJSON(m.LogEndedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at\":null")
		first = false
	}

	// handle nullable field log_ended_at_gt
	if m.LogEndedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_gt\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_gt\":null")
		first = false
	}

	// handle nullable field log_ended_at_gte
	if m.LogEndedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_gte\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_gte\":null")
		first = false
	}

	// handle non nullable field log_ended_at_in with omitempty
	if swag.IsZero(m.LogEndedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_in\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field log_ended_at_lt
	if m.LogEndedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_lt\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_lt\":null")
		first = false
	}

	// handle nullable field log_ended_at_lte
	if m.LogEndedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_lte\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_lte\":null")
		first = false
	}

	// handle nullable field log_ended_at_not
	if m.LogEndedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_not\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogEndedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_not\":null")
		first = false
	}

	// handle non nullable field log_ended_at_not_in with omitempty
	if swag.IsZero(m.LogEndedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_ended_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LogEndedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field log_started_at
	if m.LogStartedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at\":")
		bytes, err := swag.WriteJSON(m.LogStartedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at\":null")
		first = false
	}

	// handle nullable field log_started_at_gt
	if m.LogStartedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_gt\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_gt\":null")
		first = false
	}

	// handle nullable field log_started_at_gte
	if m.LogStartedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_gte\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_gte\":null")
		first = false
	}

	// handle non nullable field log_started_at_in with omitempty
	if swag.IsZero(m.LogStartedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_in\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field log_started_at_lt
	if m.LogStartedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_lt\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_lt\":null")
		first = false
	}

	// handle nullable field log_started_at_lte
	if m.LogStartedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_lte\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_lte\":null")
		first = false
	}

	// handle nullable field log_started_at_not
	if m.LogStartedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_not\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogStartedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_not\":null")
		first = false
	}

	// handle non nullable field log_started_at_not_in with omitempty
	if swag.IsZero(m.LogStartedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"log_started_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LogStartedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field owner
	if m.Owner != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner\":")
		bytes, err := swag.WriteJSON(m.Owner)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Owner_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner\":null")
		first = false
	}

	// handle nullable field owner_contains
	if m.OwnerContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_contains\":")
		bytes, err := swag.WriteJSON(m.OwnerContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_contains\":null")
		first = false
	}

	// handle nullable field owner_ends_with
	if m.OwnerEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_ends_with\":")
		bytes, err := swag.WriteJSON(m.OwnerEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_ends_with\":null")
		first = false
	}

	// handle nullable field owner_gt
	if m.OwnerGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_gt\":")
		bytes, err := swag.WriteJSON(m.OwnerGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_gt\":null")
		first = false
	}

	// handle nullable field owner_gte
	if m.OwnerGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_gte\":")
		bytes, err := swag.WriteJSON(m.OwnerGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_gte\":null")
		first = false
	}

	// handle non nullable field owner_in with omitempty
	if swag.IsZero(m.OwnerIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_in\":")
		bytes, err := swag.WriteJSON(m.OwnerIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field owner_lt
	if m.OwnerLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_lt\":")
		bytes, err := swag.WriteJSON(m.OwnerLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_lt\":null")
		first = false
	}

	// handle nullable field owner_lte
	if m.OwnerLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_lte\":")
		bytes, err := swag.WriteJSON(m.OwnerLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_lte\":null")
		first = false
	}

	// handle nullable field owner_not
	if m.OwnerNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not\":")
		bytes, err := swag.WriteJSON(m.OwnerNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not\":null")
		first = false
	}

	// handle nullable field owner_not_contains
	if m.OwnerNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_contains\":")
		bytes, err := swag.WriteJSON(m.OwnerNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_contains\":null")
		first = false
	}

	// handle nullable field owner_not_ends_with
	if m.OwnerNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OwnerNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_ends_with\":null")
		first = false
	}

	// handle non nullable field owner_not_in with omitempty
	if swag.IsZero(m.OwnerNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_in\":")
		bytes, err := swag.WriteJSON(m.OwnerNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field owner_not_starts_with
	if m.OwnerNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OwnerNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_not_starts_with\":null")
		first = false
	}

	// handle nullable field owner_starts_with
	if m.OwnerStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_starts_with\":")
		bytes, err := swag.WriteJSON(m.OwnerStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OwnerStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"owner_starts_with\":null")
		first = false
	}

	// handle nullable field path
	if m.Path != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":")
		bytes, err := swag.WriteJSON(m.Path)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Path_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":null")
		first = false
	}

	// handle nullable field path_contains
	if m.PathContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_contains\":")
		bytes, err := swag.WriteJSON(m.PathContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_contains\":null")
		first = false
	}

	// handle nullable field path_ends_with
	if m.PathEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_ends_with\":")
		bytes, err := swag.WriteJSON(m.PathEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_ends_with\":null")
		first = false
	}

	// handle nullable field path_gt
	if m.PathGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gt\":")
		bytes, err := swag.WriteJSON(m.PathGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gt\":null")
		first = false
	}

	// handle nullable field path_gte
	if m.PathGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gte\":")
		bytes, err := swag.WriteJSON(m.PathGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gte\":null")
		first = false
	}

	// handle non nullable field path_in with omitempty
	if swag.IsZero(m.PathIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_in\":")
		bytes, err := swag.WriteJSON(m.PathIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field path_lt
	if m.PathLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lt\":")
		bytes, err := swag.WriteJSON(m.PathLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lt\":null")
		first = false
	}

	// handle nullable field path_lte
	if m.PathLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lte\":")
		bytes, err := swag.WriteJSON(m.PathLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lte\":null")
		first = false
	}

	// handle nullable field path_not
	if m.PathNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not\":")
		bytes, err := swag.WriteJSON(m.PathNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not\":null")
		first = false
	}

	// handle nullable field path_not_contains
	if m.PathNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_contains\":")
		bytes, err := swag.WriteJSON(m.PathNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_contains\":null")
		first = false
	}

	// handle nullable field path_not_ends_with
	if m.PathNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.PathNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_ends_with\":null")
		first = false
	}

	// handle non nullable field path_not_in with omitempty
	if swag.IsZero(m.PathNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_in\":")
		bytes, err := swag.WriteJSON(m.PathNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field path_not_starts_with
	if m.PathNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.PathNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_starts_with\":null")
		first = false
	}

	// handle nullable field path_starts_with
	if m.PathStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_starts_with\":")
		bytes, err := swag.WriteJSON(m.PathStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_starts_with\":null")
		first = false
	}

	// handle nullable field progress
	if m.Progress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress\":")
		bytes, err := swag.WriteJSON(m.Progress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Progress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress\":null")
		first = false
	}

	// handle nullable field progress_gt
	if m.ProgressGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_gt\":")
		bytes, err := swag.WriteJSON(m.ProgressGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProgressGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_gt\":null")
		first = false
	}

	// handle nullable field progress_gte
	if m.ProgressGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_gte\":")
		bytes, err := swag.WriteJSON(m.ProgressGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProgressGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_gte\":null")
		first = false
	}

	// handle non nullable field progress_in with omitempty
	if swag.IsZero(m.ProgressIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_in\":")
		bytes, err := swag.WriteJSON(m.ProgressIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field progress_lt
	if m.ProgressLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_lt\":")
		bytes, err := swag.WriteJSON(m.ProgressLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProgressLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_lt\":null")
		first = false
	}

	// handle nullable field progress_lte
	if m.ProgressLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_lte\":")
		bytes, err := swag.WriteJSON(m.ProgressLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProgressLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_lte\":null")
		first = false
	}

	// handle nullable field progress_not
	if m.ProgressNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_not\":")
		bytes, err := swag.WriteJSON(m.ProgressNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProgressNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_not\":null")
		first = false
	}

	// handle non nullable field progress_not_in with omitempty
	if swag.IsZero(m.ProgressNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"progress_not_in\":")
		bytes, err := swag.WriteJSON(m.ProgressNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_gt
	if m.SizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":")
		bytes, err := swag.WriteJSON(m.SizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":null")
		first = false
	}

	// handle nullable field size_gte
	if m.SizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":")
		bytes, err := swag.WriteJSON(m.SizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":null")
		first = false
	}

	// handle non nullable field size_in with omitempty
	if swag.IsZero(m.SizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_in\":")
		bytes, err := swag.WriteJSON(m.SizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size_lt
	if m.SizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":")
		bytes, err := swag.WriteJSON(m.SizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":null")
		first = false
	}

	// handle nullable field size_lte
	if m.SizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":")
		bytes, err := swag.WriteJSON(m.SizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":null")
		first = false
	}

	// handle nullable field size_not
	if m.SizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":")
		bytes, err := swag.WriteJSON(m.SizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":null")
		first = false
	}

	// handle non nullable field size_not_in with omitempty
	if swag.IsZero(m.SizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not_in\":")
		bytes, err := swag.WriteJSON(m.SizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at
	if m.StartedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":")
		bytes, err := swag.WriteJSON(m.StartedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at\":null")
		first = false
	}

	// handle nullable field started_at_gt
	if m.StartedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":")
		bytes, err := swag.WriteJSON(m.StartedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gt\":null")
		first = false
	}

	// handle nullable field started_at_gte
	if m.StartedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":")
		bytes, err := swag.WriteJSON(m.StartedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_gte\":null")
		first = false
	}

	// handle non nullable field started_at_in with omitempty
	if swag.IsZero(m.StartedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field started_at_lt
	if m.StartedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":")
		bytes, err := swag.WriteJSON(m.StartedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lt\":null")
		first = false
	}

	// handle nullable field started_at_lte
	if m.StartedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":")
		bytes, err := swag.WriteJSON(m.StartedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_lte\":null")
		first = false
	}

	// handle nullable field started_at_not
	if m.StartedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":")
		bytes, err := swag.WriteJSON(m.StartedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not\":null")
		first = false
	}

	// handle non nullable field started_at_not_in with omitempty
	if swag.IsZero(m.StartedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"started_at_not_in\":")
		bytes, err := swag.WriteJSON(m.StartedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field witness
	if m.Witness != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witness\":")
		bytes, err := swag.WriteJSON(m.Witness)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Witness_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witness\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this log collection where input
func (m *LogCollectionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateHostsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsEvery) { // not required
		return nil
	}

	if m.HostsEvery != nil {
		if err := m.HostsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateHostsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsNone) { // not required
		return nil
	}

	if m.HostsNone != nil {
		if err := m.HostsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateHostsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsSome) { // not required
		return nil
	}

	if m.HostsSome != nil {
		if err := m.HostsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateWitness(formats strfmt.Registry) error {
	if swag.IsZero(m.Witness) { // not required
		return nil
	}

	if m.Witness != nil {
		if err := m.Witness.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witness")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witness")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this log collection where input based on the context it is used
func (m *LogCollectionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateHostsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsEvery != nil {
		if err := m.HostsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateHostsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsNone != nil {
		if err := m.HostsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateHostsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsSome != nil {
		if err := m.HostsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateWitness(ctx context.Context, formats strfmt.Registry) error {

	if m.Witness != nil {
		if err := m.Witness.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witness")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witness")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogCollectionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogCollectionWhereInput) UnmarshalBinary(b []byte) error {
	var res LogCollectionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
