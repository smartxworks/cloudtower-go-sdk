// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PmemDimmWhereInput pmem dimm where input
//
// swagger:model PmemDimmWhereInput
type PmemDimmWhereInput struct {

	// a n d
	AND []*PmemDimmWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*PmemDimmWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*PmemDimmWhereInput `json:"OR,omitempty"`

	// capacity
	Capacity *int64 `json:"capacity,omitempty"`

	// capacity gt
	CapacityGt *int64 `json:"capacity_gt,omitempty"`

	// capacity gte
	CapacityGte *int64 `json:"capacity_gte,omitempty"`

	// capacity in
	CapacityIn []int64 `json:"capacity_in,omitempty"`

	// capacity lt
	CapacityLt *int64 `json:"capacity_lt,omitempty"`

	// capacity lte
	CapacityLte *int64 `json:"capacity_lte,omitempty"`

	// capacity not
	CapacityNot *int64 `json:"capacity_not,omitempty"`

	// capacity not in
	CapacityNotIn []int64 `json:"capacity_not_in,omitempty"`

	// device locator
	DeviceLocator *string `json:"device_locator,omitempty"`

	// device locator contains
	DeviceLocatorContains *string `json:"device_locator_contains,omitempty"`

	// device locator ends with
	DeviceLocatorEndsWith *string `json:"device_locator_ends_with,omitempty"`

	// device locator gt
	DeviceLocatorGt *string `json:"device_locator_gt,omitempty"`

	// device locator gte
	DeviceLocatorGte *string `json:"device_locator_gte,omitempty"`

	// device locator in
	DeviceLocatorIn []string `json:"device_locator_in,omitempty"`

	// device locator lt
	DeviceLocatorLt *string `json:"device_locator_lt,omitempty"`

	// device locator lte
	DeviceLocatorLte *string `json:"device_locator_lte,omitempty"`

	// device locator not
	DeviceLocatorNot *string `json:"device_locator_not,omitempty"`

	// device locator not contains
	DeviceLocatorNotContains *string `json:"device_locator_not_contains,omitempty"`

	// device locator not ends with
	DeviceLocatorNotEndsWith *string `json:"device_locator_not_ends_with,omitempty"`

	// device locator not in
	DeviceLocatorNotIn []string `json:"device_locator_not_in,omitempty"`

	// device locator not starts with
	DeviceLocatorNotStartsWith *string `json:"device_locator_not_starts_with,omitempty"`

	// device locator starts with
	DeviceLocatorStartsWith *string `json:"device_locator_starts_with,omitempty"`

	// disk
	Disk *DiskWhereInput `json:"disk,omitempty"`

	// health status
	HealthStatus *DiskHealthStatus `json:"health_status,omitempty"`

	// health status in
	HealthStatusIn []DiskHealthStatus `json:"health_status_in,omitempty"`

	// health status not
	HealthStatusNot *DiskHealthStatus `json:"health_status_not,omitempty"`

	// health status not in
	HealthStatusNotIn []DiskHealthStatus `json:"health_status_not_in,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// numa node
	NumaNode *int32 `json:"numa_node,omitempty"`

	// numa node gt
	NumaNodeGt *int32 `json:"numa_node_gt,omitempty"`

	// numa node gte
	NumaNodeGte *int32 `json:"numa_node_gte,omitempty"`

	// numa node in
	NumaNodeIn []int32 `json:"numa_node_in,omitempty"`

	// numa node lt
	NumaNodeLt *int32 `json:"numa_node_lt,omitempty"`

	// numa node lte
	NumaNodeLte *int32 `json:"numa_node_lte,omitempty"`

	// numa node not
	NumaNodeNot *int32 `json:"numa_node_not,omitempty"`

	// numa node not in
	NumaNodeNotIn []int32 `json:"numa_node_not_in,omitempty"`

	// part number
	PartNumber *string `json:"part_number,omitempty"`

	// part number contains
	PartNumberContains *string `json:"part_number_contains,omitempty"`

	// part number ends with
	PartNumberEndsWith *string `json:"part_number_ends_with,omitempty"`

	// part number gt
	PartNumberGt *string `json:"part_number_gt,omitempty"`

	// part number gte
	PartNumberGte *string `json:"part_number_gte,omitempty"`

	// part number in
	PartNumberIn []string `json:"part_number_in,omitempty"`

	// part number lt
	PartNumberLt *string `json:"part_number_lt,omitempty"`

	// part number lte
	PartNumberLte *string `json:"part_number_lte,omitempty"`

	// part number not
	PartNumberNot *string `json:"part_number_not,omitempty"`

	// part number not contains
	PartNumberNotContains *string `json:"part_number_not_contains,omitempty"`

	// part number not ends with
	PartNumberNotEndsWith *string `json:"part_number_not_ends_with,omitempty"`

	// part number not in
	PartNumberNotIn []string `json:"part_number_not_in,omitempty"`

	// part number not starts with
	PartNumberNotStartsWith *string `json:"part_number_not_starts_with,omitempty"`

	// part number starts with
	PartNumberStartsWith *string `json:"part_number_starts_with,omitempty"`

	// remaining life percent
	RemainingLifePercent *int32 `json:"remaining_life_percent,omitempty"`

	// remaining life percent gt
	RemainingLifePercentGt *int32 `json:"remaining_life_percent_gt,omitempty"`

	// remaining life percent gte
	RemainingLifePercentGte *int32 `json:"remaining_life_percent_gte,omitempty"`

	// remaining life percent in
	RemainingLifePercentIn []int32 `json:"remaining_life_percent_in,omitempty"`

	// remaining life percent lt
	RemainingLifePercentLt *int32 `json:"remaining_life_percent_lt,omitempty"`

	// remaining life percent lte
	RemainingLifePercentLte *int32 `json:"remaining_life_percent_lte,omitempty"`

	// remaining life percent not
	RemainingLifePercentNot *int32 `json:"remaining_life_percent_not,omitempty"`

	// remaining life percent not in
	RemainingLifePercentNotIn []int32 `json:"remaining_life_percent_not_in,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	MarshalOpts *PmemDimmWhereInputMarshalOpts `json:"-"`
}

type PmemDimmWhereInputMarshalOpts struct {
	Capacity_Explicit_Null_When_Empty bool

	CapacityGt_Explicit_Null_When_Empty bool

	CapacityGte_Explicit_Null_When_Empty bool

	CapacityLt_Explicit_Null_When_Empty bool

	CapacityLte_Explicit_Null_When_Empty bool

	CapacityNot_Explicit_Null_When_Empty bool

	DeviceLocator_Explicit_Null_When_Empty bool

	DeviceLocatorContains_Explicit_Null_When_Empty bool

	DeviceLocatorEndsWith_Explicit_Null_When_Empty bool

	DeviceLocatorGt_Explicit_Null_When_Empty bool

	DeviceLocatorGte_Explicit_Null_When_Empty bool

	DeviceLocatorLt_Explicit_Null_When_Empty bool

	DeviceLocatorLte_Explicit_Null_When_Empty bool

	DeviceLocatorNot_Explicit_Null_When_Empty bool

	DeviceLocatorNotContains_Explicit_Null_When_Empty bool

	DeviceLocatorNotEndsWith_Explicit_Null_When_Empty bool

	DeviceLocatorNotStartsWith_Explicit_Null_When_Empty bool

	DeviceLocatorStartsWith_Explicit_Null_When_Empty bool

	Disk_Explicit_Null_When_Empty bool

	HealthStatus_Explicit_Null_When_Empty bool

	HealthStatusNot_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NumaNode_Explicit_Null_When_Empty bool

	NumaNodeGt_Explicit_Null_When_Empty bool

	NumaNodeGte_Explicit_Null_When_Empty bool

	NumaNodeLt_Explicit_Null_When_Empty bool

	NumaNodeLte_Explicit_Null_When_Empty bool

	NumaNodeNot_Explicit_Null_When_Empty bool

	PartNumber_Explicit_Null_When_Empty bool

	PartNumberContains_Explicit_Null_When_Empty bool

	PartNumberEndsWith_Explicit_Null_When_Empty bool

	PartNumberGt_Explicit_Null_When_Empty bool

	PartNumberGte_Explicit_Null_When_Empty bool

	PartNumberLt_Explicit_Null_When_Empty bool

	PartNumberLte_Explicit_Null_When_Empty bool

	PartNumberNot_Explicit_Null_When_Empty bool

	PartNumberNotContains_Explicit_Null_When_Empty bool

	PartNumberNotEndsWith_Explicit_Null_When_Empty bool

	PartNumberNotStartsWith_Explicit_Null_When_Empty bool

	PartNumberStartsWith_Explicit_Null_When_Empty bool

	RemainingLifePercent_Explicit_Null_When_Empty bool

	RemainingLifePercentGt_Explicit_Null_When_Empty bool

	RemainingLifePercentGte_Explicit_Null_When_Empty bool

	RemainingLifePercentLt_Explicit_Null_When_Empty bool

	RemainingLifePercentLte_Explicit_Null_When_Empty bool

	RemainingLifePercentNot_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VersionContains_Explicit_Null_When_Empty bool

	VersionEndsWith_Explicit_Null_When_Empty bool

	VersionGt_Explicit_Null_When_Empty bool

	VersionGte_Explicit_Null_When_Empty bool

	VersionLt_Explicit_Null_When_Empty bool

	VersionLte_Explicit_Null_When_Empty bool

	VersionNot_Explicit_Null_When_Empty bool

	VersionNotContains_Explicit_Null_When_Empty bool

	VersionNotEndsWith_Explicit_Null_When_Empty bool

	VersionNotStartsWith_Explicit_Null_When_Empty bool

	VersionStartsWith_Explicit_Null_When_Empty bool
}

func (m PmemDimmWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field capacity
	if m.Capacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":")
		bytes, err := swag.WriteJSON(m.Capacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Capacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity\":null")
		first = false
	}

	// handle nullable field capacity_gt
	if m.CapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_gt\":")
		bytes, err := swag.WriteJSON(m.CapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_gt\":null")
		first = false
	}

	// handle nullable field capacity_gte
	if m.CapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_gte\":")
		bytes, err := swag.WriteJSON(m.CapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_gte\":null")
		first = false
	}

	// handle non nullable field capacity_in with omitempty
	if swag.IsZero(m.CapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_in\":")
		bytes, err := swag.WriteJSON(m.CapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field capacity_lt
	if m.CapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_lt\":")
		bytes, err := swag.WriteJSON(m.CapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_lt\":null")
		first = false
	}

	// handle nullable field capacity_lte
	if m.CapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_lte\":")
		bytes, err := swag.WriteJSON(m.CapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_lte\":null")
		first = false
	}

	// handle nullable field capacity_not
	if m.CapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_not\":")
		bytes, err := swag.WriteJSON(m.CapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_not\":null")
		first = false
	}

	// handle non nullable field capacity_not_in with omitempty
	if swag.IsZero(m.CapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.CapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_locator
	if m.DeviceLocator != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator\":")
		bytes, err := swag.WriteJSON(m.DeviceLocator)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocator_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator\":null")
		first = false
	}

	// handle nullable field device_locator_contains
	if m.DeviceLocatorContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_contains\":null")
		first = false
	}

	// handle nullable field device_locator_ends_with
	if m.DeviceLocatorEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_ends_with\":null")
		first = false
	}

	// handle nullable field device_locator_gt
	if m.DeviceLocatorGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_gt\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_gt\":null")
		first = false
	}

	// handle nullable field device_locator_gte
	if m.DeviceLocatorGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_gte\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_gte\":null")
		first = false
	}

	// handle non nullable field device_locator_in with omitempty
	if swag.IsZero(m.DeviceLocatorIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_in\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_locator_lt
	if m.DeviceLocatorLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_lt\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_lt\":null")
		first = false
	}

	// handle nullable field device_locator_lte
	if m.DeviceLocatorLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_lte\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_lte\":null")
		first = false
	}

	// handle nullable field device_locator_not
	if m.DeviceLocatorNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not\":null")
		first = false
	}

	// handle nullable field device_locator_not_contains
	if m.DeviceLocatorNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_contains\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_contains\":null")
		first = false
	}

	// handle nullable field device_locator_not_ends_with
	if m.DeviceLocatorNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_ends_with\":null")
		first = false
	}

	// handle non nullable field device_locator_not_in with omitempty
	if swag.IsZero(m.DeviceLocatorNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_in\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field device_locator_not_starts_with
	if m.DeviceLocatorNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_not_starts_with\":null")
		first = false
	}

	// handle nullable field device_locator_starts_with
	if m.DeviceLocatorStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeviceLocatorStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeviceLocatorStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"device_locator_starts_with\":null")
		first = false
	}

	// handle nullable field disk
	if m.Disk != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":")
		bytes, err := swag.WriteJSON(m.Disk)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Disk_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk\":null")
		first = false
	}

	// handle nullable field health_status
	if m.HealthStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":")
		bytes, err := swag.WriteJSON(m.HealthStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":null")
		first = false
	}

	// handle non nullable field health_status_in with omitempty
	if swag.IsZero(m.HealthStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_in\":")
		bytes, err := swag.WriteJSON(m.HealthStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field health_status_not
	if m.HealthStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not\":")
		bytes, err := swag.WriteJSON(m.HealthStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not\":null")
		first = false
	}

	// handle non nullable field health_status_not_in with omitempty
	if swag.IsZero(m.HealthStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not_in\":")
		bytes, err := swag.WriteJSON(m.HealthStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field numa_node
	if m.NumaNode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":")
		bytes, err := swag.WriteJSON(m.NumaNode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":null")
		first = false
	}

	// handle nullable field numa_node_gt
	if m.NumaNodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gt\":")
		bytes, err := swag.WriteJSON(m.NumaNodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gt\":null")
		first = false
	}

	// handle nullable field numa_node_gte
	if m.NumaNodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gte\":")
		bytes, err := swag.WriteJSON(m.NumaNodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gte\":null")
		first = false
	}

	// handle non nullable field numa_node_in with omitempty
	if swag.IsZero(m.NumaNodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_in\":")
		bytes, err := swag.WriteJSON(m.NumaNodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field numa_node_lt
	if m.NumaNodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lt\":")
		bytes, err := swag.WriteJSON(m.NumaNodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lt\":null")
		first = false
	}

	// handle nullable field numa_node_lte
	if m.NumaNodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lte\":")
		bytes, err := swag.WriteJSON(m.NumaNodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lte\":null")
		first = false
	}

	// handle nullable field numa_node_not
	if m.NumaNodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not\":")
		bytes, err := swag.WriteJSON(m.NumaNodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not\":null")
		first = false
	}

	// handle non nullable field numa_node_not_in with omitempty
	if swag.IsZero(m.NumaNodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not_in\":")
		bytes, err := swag.WriteJSON(m.NumaNodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field part_number
	if m.PartNumber != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number\":")
		bytes, err := swag.WriteJSON(m.PartNumber)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumber_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number\":null")
		first = false
	}

	// handle nullable field part_number_contains
	if m.PartNumberContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_contains\":")
		bytes, err := swag.WriteJSON(m.PartNumberContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_contains\":null")
		first = false
	}

	// handle nullable field part_number_ends_with
	if m.PartNumberEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_ends_with\":")
		bytes, err := swag.WriteJSON(m.PartNumberEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_ends_with\":null")
		first = false
	}

	// handle nullable field part_number_gt
	if m.PartNumberGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_gt\":")
		bytes, err := swag.WriteJSON(m.PartNumberGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_gt\":null")
		first = false
	}

	// handle nullable field part_number_gte
	if m.PartNumberGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_gte\":")
		bytes, err := swag.WriteJSON(m.PartNumberGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_gte\":null")
		first = false
	}

	// handle non nullable field part_number_in with omitempty
	if swag.IsZero(m.PartNumberIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_in\":")
		bytes, err := swag.WriteJSON(m.PartNumberIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field part_number_lt
	if m.PartNumberLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_lt\":")
		bytes, err := swag.WriteJSON(m.PartNumberLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_lt\":null")
		first = false
	}

	// handle nullable field part_number_lte
	if m.PartNumberLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_lte\":")
		bytes, err := swag.WriteJSON(m.PartNumberLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_lte\":null")
		first = false
	}

	// handle nullable field part_number_not
	if m.PartNumberNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not\":")
		bytes, err := swag.WriteJSON(m.PartNumberNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not\":null")
		first = false
	}

	// handle nullable field part_number_not_contains
	if m.PartNumberNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_contains\":")
		bytes, err := swag.WriteJSON(m.PartNumberNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_contains\":null")
		first = false
	}

	// handle nullable field part_number_not_ends_with
	if m.PartNumberNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.PartNumberNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_ends_with\":null")
		first = false
	}

	// handle non nullable field part_number_not_in with omitempty
	if swag.IsZero(m.PartNumberNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_in\":")
		bytes, err := swag.WriteJSON(m.PartNumberNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field part_number_not_starts_with
	if m.PartNumberNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.PartNumberNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_not_starts_with\":null")
		first = false
	}

	// handle nullable field part_number_starts_with
	if m.PartNumberStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_starts_with\":")
		bytes, err := swag.WriteJSON(m.PartNumberStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PartNumberStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"part_number_starts_with\":null")
		first = false
	}

	// handle nullable field remaining_life_percent
	if m.RemainingLifePercent != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercent)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercent_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_gt
	if m.RemainingLifePercentGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gt\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gt\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_gte
	if m.RemainingLifePercentGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gte\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gte\":null")
		first = false
	}

	// handle non nullable field remaining_life_percent_in with omitempty
	if swag.IsZero(m.RemainingLifePercentIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_in\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field remaining_life_percent_lt
	if m.RemainingLifePercentLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lt\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lt\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_lte
	if m.RemainingLifePercentLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lte\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lte\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_not
	if m.RemainingLifePercentNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not\":null")
		first = false
	}

	// handle non nullable field remaining_life_percent_not_in with omitempty
	if swag.IsZero(m.RemainingLifePercentNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not_in\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field version_contains
	if m.VersionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":")
		bytes, err := swag.WriteJSON(m.VersionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":null")
		first = false
	}

	// handle nullable field version_ends_with
	if m.VersionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":null")
		first = false
	}

	// handle nullable field version_gt
	if m.VersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":")
		bytes, err := swag.WriteJSON(m.VersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":null")
		first = false
	}

	// handle nullable field version_gte
	if m.VersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":")
		bytes, err := swag.WriteJSON(m.VersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":null")
		first = false
	}

	// handle non nullable field version_in with omitempty
	if swag.IsZero(m.VersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_in\":")
		bytes, err := swag.WriteJSON(m.VersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_lt
	if m.VersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":")
		bytes, err := swag.WriteJSON(m.VersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":null")
		first = false
	}

	// handle nullable field version_lte
	if m.VersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":")
		bytes, err := swag.WriteJSON(m.VersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":null")
		first = false
	}

	// handle nullable field version_not
	if m.VersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":")
		bytes, err := swag.WriteJSON(m.VersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":null")
		first = false
	}

	// handle nullable field version_not_contains
	if m.VersionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":")
		bytes, err := swag.WriteJSON(m.VersionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":null")
		first = false
	}

	// handle nullable field version_not_ends_with
	if m.VersionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":null")
		first = false
	}

	// handle non nullable field version_not_in with omitempty
	if swag.IsZero(m.VersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_in\":")
		bytes, err := swag.WriteJSON(m.VersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_not_starts_with
	if m.VersionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":null")
		first = false
	}

	// handle nullable field version_starts_with
	if m.VersionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this pmem dimm where input
func (m *PmemDimmWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimmWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if m.HealthStatus != nil {
		if err := m.HealthStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNot) { // not required
		return nil
	}

	if m.HealthStatusNot != nil {
		if err := m.HealthStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pmem dimm where input based on the context it is used
func (m *PmemDimmWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimmWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthStatus != nil {
		if err := m.HealthStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthStatusNot != nil {
		if err := m.HealthStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PmemDimmWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PmemDimmWhereInput) UnmarshalBinary(b []byte) error {
	var res PmemDimmWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
