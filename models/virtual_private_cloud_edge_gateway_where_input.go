// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualPrivateCloudEdgeGatewayWhereInput virtual private cloud edge gateway where input
//
// swagger:model VirtualPrivateCloudEdgeGatewayWhereInput
type VirtualPrivateCloudEdgeGatewayWhereInput struct {

	// a n d
	AND []*VirtualPrivateCloudEdgeGatewayWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VirtualPrivateCloudEdgeGatewayWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VirtualPrivateCloudEdgeGatewayWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// cpu number
	CPUNumber *int32 `json:"cpu_number,omitempty"`

	// cpu number gt
	CPUNumberGt *int32 `json:"cpu_number_gt,omitempty"`

	// cpu number gte
	CPUNumberGte *int32 `json:"cpu_number_gte,omitempty"`

	// cpu number in
	CPUNumberIn []int32 `json:"cpu_number_in,omitempty"`

	// cpu number lt
	CPUNumberLt *int32 `json:"cpu_number_lt,omitempty"`

	// cpu number lte
	CPUNumberLte *int32 `json:"cpu_number_lte,omitempty"`

	// cpu number not
	CPUNumberNot *int32 `json:"cpu_number_not,omitempty"`

	// cpu number not in
	CPUNumberNotIn []int32 `json:"cpu_number_not_in,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// data volume size
	DataVolumeSize *int32 `json:"data_volume_size,omitempty"`

	// data volume size gt
	DataVolumeSizeGt *int32 `json:"data_volume_size_gt,omitempty"`

	// data volume size gte
	DataVolumeSizeGte *int32 `json:"data_volume_size_gte,omitempty"`

	// data volume size in
	DataVolumeSizeIn []int32 `json:"data_volume_size_in,omitempty"`

	// data volume size lt
	DataVolumeSizeLt *int32 `json:"data_volume_size_lt,omitempty"`

	// data volume size lte
	DataVolumeSizeLte *int32 `json:"data_volume_size_lte,omitempty"`

	// data volume size not
	DataVolumeSizeNot *int32 `json:"data_volume_size_not,omitempty"`

	// data volume size not in
	DataVolumeSizeNotIn []int32 `json:"data_volume_size_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// edge gateway group
	EdgeGatewayGroup *VirtualPrivateCloudEdgeGatewayGroupWhereInput `json:"edge_gateway_group,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// gateway
	Gateway *string `json:"gateway,omitempty"`

	// gateway contains
	GatewayContains *string `json:"gateway_contains,omitempty"`

	// gateway ends with
	GatewayEndsWith *string `json:"gateway_ends_with,omitempty"`

	// gateway gt
	GatewayGt *string `json:"gateway_gt,omitempty"`

	// gateway gte
	GatewayGte *string `json:"gateway_gte,omitempty"`

	// gateway in
	GatewayIn []string `json:"gateway_in,omitempty"`

	// gateway lt
	GatewayLt *string `json:"gateway_lt,omitempty"`

	// gateway lte
	GatewayLte *string `json:"gateway_lte,omitempty"`

	// gateway not
	GatewayNot *string `json:"gateway_not,omitempty"`

	// gateway not contains
	GatewayNotContains *string `json:"gateway_not_contains,omitempty"`

	// gateway not ends with
	GatewayNotEndsWith *string `json:"gateway_not_ends_with,omitempty"`

	// gateway not in
	GatewayNotIn []string `json:"gateway_not_in,omitempty"`

	// gateway not starts with
	GatewayNotStartsWith *string `json:"gateway_not_starts_with,omitempty"`

	// gateway starts with
	GatewayStartsWith *string `json:"gateway_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// memory size
	MemorySize *int32 `json:"memory_size,omitempty"`

	// memory size gt
	MemorySizeGt *int32 `json:"memory_size_gt,omitempty"`

	// memory size gte
	MemorySizeGte *int32 `json:"memory_size_gte,omitempty"`

	// memory size in
	MemorySizeIn []int32 `json:"memory_size_in,omitempty"`

	// memory size lt
	MemorySizeLt *int32 `json:"memory_size_lt,omitempty"`

	// memory size lte
	MemorySizeLte *int32 `json:"memory_size_lte,omitempty"`

	// memory size not
	MemorySizeNot *int32 `json:"memory_size_not,omitempty"`

	// memory size not in
	MemorySizeNotIn []int32 `json:"memory_size_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// phase in
	PhaseIn []EverouteClusterPhase `json:"phase_in,omitempty"`

	// phase not
	PhaseNot *EverouteClusterPhase `json:"phase_not,omitempty"`

	// phase not in
	PhaseNotIn []EverouteClusterPhase `json:"phase_not_in,omitempty"`

	// subnet mask
	SubnetMask *string `json:"subnet_mask,omitempty"`

	// subnet mask contains
	SubnetMaskContains *string `json:"subnet_mask_contains,omitempty"`

	// subnet mask ends with
	SubnetMaskEndsWith *string `json:"subnet_mask_ends_with,omitempty"`

	// subnet mask gt
	SubnetMaskGt *string `json:"subnet_mask_gt,omitempty"`

	// subnet mask gte
	SubnetMaskGte *string `json:"subnet_mask_gte,omitempty"`

	// subnet mask in
	SubnetMaskIn []string `json:"subnet_mask_in,omitempty"`

	// subnet mask lt
	SubnetMaskLt *string `json:"subnet_mask_lt,omitempty"`

	// subnet mask lte
	SubnetMaskLte *string `json:"subnet_mask_lte,omitempty"`

	// subnet mask not
	SubnetMaskNot *string `json:"subnet_mask_not,omitempty"`

	// subnet mask not contains
	SubnetMaskNotContains *string `json:"subnet_mask_not_contains,omitempty"`

	// subnet mask not ends with
	SubnetMaskNotEndsWith *string `json:"subnet_mask_not_ends_with,omitempty"`

	// subnet mask not in
	SubnetMaskNotIn []string `json:"subnet_mask_not_in,omitempty"`

	// subnet mask not starts with
	SubnetMaskNotStartsWith *string `json:"subnet_mask_not_starts_with,omitempty"`

	// subnet mask starts with
	SubnetMaskStartsWith *string `json:"subnet_mask_starts_with,omitempty"`

	// vdses every
	VdsesEvery *VdsWhereInput `json:"vdses_every,omitempty"`

	// vdses none
	VdsesNone *VdsWhereInput `json:"vdses_none,omitempty"`

	// vdses some
	VdsesSome *VdsWhereInput `json:"vdses_some,omitempty"`

	// vm instances every
	VMInstancesEvery *VMWhereInput `json:"vm_instances_every,omitempty"`

	// vm instances none
	VMInstancesNone *VMWhereInput `json:"vm_instances_none,omitempty"`

	// vm instances some
	VMInstancesSome *VMWhereInput `json:"vm_instances_some,omitempty"`

	// vpc service
	VpcService *VirtualPrivateCloudServiceWhereInput `json:"vpc_service,omitempty"`
}

// Validate validates this virtual private cloud edge gateway where input
func (m *VirtualPrivateCloudEdgeGatewayWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeGatewayGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInstancesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInstancesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInstancesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateEdgeGatewayGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeGatewayGroup) { // not required
		return nil
	}

	if m.EdgeGatewayGroup != nil {
		if err := m.EdgeGatewayGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_group")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validatePhaseIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validatePhaseNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNot) { // not required
		return nil
	}

	if m.PhaseNot != nil {
		if err := m.PhaseNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validatePhaseNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PhaseNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVdsesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesEvery) { // not required
		return nil
	}

	if m.VdsesEvery != nil {
		if err := m.VdsesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVdsesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesNone) { // not required
		return nil
	}

	if m.VdsesNone != nil {
		if err := m.VdsesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVdsesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesSome) { // not required
		return nil
	}

	if m.VdsesSome != nil {
		if err := m.VdsesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVMInstancesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMInstancesEvery) { // not required
		return nil
	}

	if m.VMInstancesEvery != nil {
		if err := m.VMInstancesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVMInstancesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMInstancesNone) { // not required
		return nil
	}

	if m.VMInstancesNone != nil {
		if err := m.VMInstancesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVMInstancesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMInstancesSome) { // not required
		return nil
	}

	if m.VMInstancesSome != nil {
		if err := m.VMInstancesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) validateVpcService(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcService) { // not required
		return nil
	}

	if m.VpcService != nil {
		if err := m.VpcService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud edge gateway where input based on the context it is used
func (m *VirtualPrivateCloudEdgeGatewayWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeGatewayGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhaseNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInstancesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInstancesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInstancesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateEdgeGatewayGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeGatewayGroup != nil {
		if err := m.EdgeGatewayGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edge_gateway_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edge_gateway_group")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidatePhaseIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseIn); i++ {

		if err := m.PhaseIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidatePhaseNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PhaseNot != nil {
		if err := m.PhaseNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidatePhaseNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhaseNotIn); i++ {

		if err := m.PhaseNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVdsesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VdsesEvery != nil {
		if err := m.VdsesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVdsesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VdsesNone != nil {
		if err := m.VdsesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVdsesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VdsesSome != nil {
		if err := m.VdsesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vdses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vdses_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVMInstancesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMInstancesEvery != nil {
		if err := m.VMInstancesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_every")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVMInstancesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMInstancesNone != nil {
		if err := m.VMInstancesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_none")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVMInstancesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMInstancesSome != nil {
		if err := m.VMInstancesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_instances_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_instances_some")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudEdgeGatewayWhereInput) contextValidateVpcService(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcService != nil {
		if err := m.VpcService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudEdgeGatewayWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudEdgeGatewayWhereInput) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudEdgeGatewayWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
