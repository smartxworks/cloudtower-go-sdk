// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudRouterGatewayRuleInputType virtual private cloud router gateway rule input type
//
// swagger:model VirtualPrivateCloudRouterGatewayRuleInputType
type VirtualPrivateCloudRouterGatewayRuleInputType struct {

	// dst
	// Required: true
	Dst *string `json:"dst"`

	// nexthop
	Nexthop *string `json:"nexthop,omitempty"`

	// nexthops
	Nexthops []*VirtualPrivateCloudRouterGatewayNexthopInputType `json:"nexthops,omitempty"`

	MarshalOpts *VirtualPrivateCloudRouterGatewayRuleInputTypeMarshalOpts `json:"-"`
}

type VirtualPrivateCloudRouterGatewayRuleInputTypeMarshalOpts struct {
	Dst_Explicit_Null_When_Empty bool

	Nexthop_Explicit_Null_When_Empty bool

	Nexthops_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudRouterGatewayRuleInputType) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field dst
	if m.Dst != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dst\":")
		bytes, err := swag.WriteJSON(m.Dst)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Dst_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dst\":null")
		first = false
	}

	// handle nullable field nexthop
	if m.Nexthop != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nexthop\":")
		bytes, err := swag.WriteJSON(m.Nexthop)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Nexthop_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nexthop\":null")
		first = false
	}

	// handle non nullable field nexthops with omitempty
	if !swag.IsZero(m.Nexthops) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nexthops\":")
		bytes, err := swag.WriteJSON(m.Nexthops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud router gateway rule input type
func (m *VirtualPrivateCloudRouterGatewayRuleInputType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNexthops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayRuleInputType) validateDst(formats strfmt.Registry) error {

	if err := validate.Required("dst", "body", m.Dst); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayRuleInputType) validateNexthops(formats strfmt.Registry) error {
	if swag.IsZero(m.Nexthops) { // not required
		return nil
	}

	for i := 0; i < len(m.Nexthops); i++ {
		if swag.IsZero(m.Nexthops[i]) { // not required
			continue
		}

		if m.Nexthops[i] != nil {
			if err := m.Nexthops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nexthops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nexthops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this virtual private cloud router gateway rule input type based on the context it is used
func (m *VirtualPrivateCloudRouterGatewayRuleInputType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNexthops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayRuleInputType) contextValidateNexthops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nexthops); i++ {

		if m.Nexthops[i] != nil {
			if err := m.Nexthops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nexthops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nexthops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayRuleInputType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayRuleInputType) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudRouterGatewayRuleInputType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
