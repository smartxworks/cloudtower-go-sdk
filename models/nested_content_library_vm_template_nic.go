// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedContentLibraryVMTemplateNic nested content library Vm template nic
//
// swagger:model NestedContentLibraryVmTemplateNic
type NestedContentLibraryVMTemplateNic struct {

	// egress rate limit burst in bit
	EgressRateLimitBurstInBit *float64 `json:"egress_rate_limit_burst_in_bit,omitempty"`

	// egress rate limit enabled
	EgressRateLimitEnabled *bool `json:"egress_rate_limit_enabled,omitempty"`

	// egress rate limit max rate in bitps
	EgressRateLimitMaxRateInBitps *float64 `json:"egress_rate_limit_max_rate_in_bitps,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// index
	// Required: true
	Index *int32 `json:"index"`

	// ingress rate limit burst in bit
	IngressRateLimitBurstInBit *float64 `json:"ingress_rate_limit_burst_in_bit,omitempty"`

	// ingress rate limit enabled
	IngressRateLimitEnabled *bool `json:"ingress_rate_limit_enabled,omitempty"`

	// ingress rate limit max rate in bitps
	IngressRateLimitMaxRateInBitps *float64 `json:"ingress_rate_limit_max_rate_in_bitps,omitempty"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// model
	Model *VMNicModel `json:"model,omitempty"`

	// type
	Type *VMNicType `json:"type,omitempty"`

	// vlan
	Vlan *NestedFrozenVlan `json:"vlan,omitempty"`

	// vpc nic
	VpcNic *NestedTemplateVpcNic `json:"vpc_nic,omitempty"`
}

// Validate validates this nested content library Vm template nic
func (m *NestedContentLibraryVMTemplateNic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcNic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateVlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateVpcNic(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcNic) { // not required
		return nil
	}

	if m.VpcNic != nil {
		if err := m.VpcNic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_nic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_nic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested content library Vm template nic based on the context it is used
func (m *NestedContentLibraryVMTemplateNic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcNic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {
		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateVpcNic(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcNic != nil {
		if err := m.VpcNic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_nic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_nic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedContentLibraryVMTemplateNic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedContentLibraryVMTemplateNic) UnmarshalBinary(b []byte) error {
	var res NestedContentLibraryVMTemplateNic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
