// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedContentLibraryVMTemplateNic nested content library Vm template nic
//
// swagger:model NestedContentLibraryVmTemplateNic
type NestedContentLibraryVMTemplateNic struct {

	// egress rate limit burst in bit
	EgressRateLimitBurstInBit *float64 `json:"egress_rate_limit_burst_in_bit,omitempty"`

	// egress rate limit enabled
	EgressRateLimitEnabled *bool `json:"egress_rate_limit_enabled,omitempty"`

	// egress rate limit max rate in bitps
	EgressRateLimitMaxRateInBitps *float64 `json:"egress_rate_limit_max_rate_in_bitps,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// index
	// Required: true
	Index *int32 `json:"index"`

	// ingress rate limit burst in bit
	IngressRateLimitBurstInBit *float64 `json:"ingress_rate_limit_burst_in_bit,omitempty"`

	// ingress rate limit enabled
	IngressRateLimitEnabled *bool `json:"ingress_rate_limit_enabled,omitempty"`

	// ingress rate limit max rate in bitps
	IngressRateLimitMaxRateInBitps *float64 `json:"ingress_rate_limit_max_rate_in_bitps,omitempty"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// model
	Model *VMNicModel `json:"model,omitempty"`

	// type
	Type *VMNicType `json:"type,omitempty"`

	// vlan
	Vlan *NestedFrozenVlan `json:"vlan,omitempty"`

	// vpc nic
	VpcNic *NestedTemplateVpcNic `json:"vpc_nic,omitempty"`

	MarshalOpts *NestedContentLibraryVMTemplateNicMarshalOpts `json:"-"`
}

type NestedContentLibraryVMTemplateNicMarshalOpts struct {
	EgressRateLimitBurstInBit_Explicit_Null_When_Empty bool

	EgressRateLimitEnabled_Explicit_Null_When_Empty bool

	EgressRateLimitMaxRateInBitps_Explicit_Null_When_Empty bool

	Enabled_Explicit_Null_When_Empty bool

	Index_Explicit_Null_When_Empty bool

	IngressRateLimitBurstInBit_Explicit_Null_When_Empty bool

	IngressRateLimitEnabled_Explicit_Null_When_Empty bool

	IngressRateLimitMaxRateInBitps_Explicit_Null_When_Empty bool

	Mirror_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	Vlan_Explicit_Null_When_Empty bool

	VpcNic_Explicit_Null_When_Empty bool
}

func (m NestedContentLibraryVMTemplateNic) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field egress_rate_limit_burst_in_bit
	if m.EgressRateLimitBurstInBit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_burst_in_bit\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitBurstInBit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitBurstInBit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_burst_in_bit\":null")
		first = false
	}

	// handle nullable field egress_rate_limit_enabled
	if m.EgressRateLimitEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_enabled\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_enabled\":null")
		first = false
	}

	// handle nullable field egress_rate_limit_max_rate_in_bitps
	if m.EgressRateLimitMaxRateInBitps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_max_rate_in_bitps\":")
		bytes, err := swag.WriteJSON(m.EgressRateLimitMaxRateInBitps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EgressRateLimitMaxRateInBitps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress_rate_limit_max_rate_in_bitps\":null")
		first = false
	}

	// handle nullable field enabled
	if m.Enabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":")
		bytes, err := swag.WriteJSON(m.Enabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Enabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":null")
		first = false
	}

	// handle nullable field index
	if m.Index != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"index\":")
		bytes, err := swag.WriteJSON(m.Index)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Index_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"index\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_burst_in_bit
	if m.IngressRateLimitBurstInBit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_burst_in_bit\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitBurstInBit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitBurstInBit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_burst_in_bit\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_enabled
	if m.IngressRateLimitEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_enabled\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_enabled\":null")
		first = false
	}

	// handle nullable field ingress_rate_limit_max_rate_in_bitps
	if m.IngressRateLimitMaxRateInBitps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_max_rate_in_bitps\":")
		bytes, err := swag.WriteJSON(m.IngressRateLimitMaxRateInBitps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IngressRateLimitMaxRateInBitps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress_rate_limit_max_rate_in_bitps\":null")
		first = false
	}

	// handle nullable field mirror
	if m.Mirror != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mirror\":")
		bytes, err := swag.WriteJSON(m.Mirror)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mirror_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mirror\":null")
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field vlan
	if m.Vlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan\":")
		bytes, err := swag.WriteJSON(m.Vlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan\":null")
		first = false
	}

	// handle nullable field vpc_nic
	if m.VpcNic != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_nic\":")
		bytes, err := swag.WriteJSON(m.VpcNic)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcNic_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_nic\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested content library Vm template nic
func (m *NestedContentLibraryVMTemplateNic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcNic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateVlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlan) { // not required
		return nil
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) validateVpcNic(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcNic) { // not required
		return nil
	}

	if m.VpcNic != nil {
		if err := m.VpcNic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_nic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_nic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested content library Vm template nic based on the context it is used
func (m *NestedContentLibraryVMTemplateNic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcNic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {
		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

func (m *NestedContentLibraryVMTemplateNic) contextValidateVpcNic(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcNic != nil {
		if err := m.VpcNic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_nic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_nic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedContentLibraryVMTemplateNic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedContentLibraryVMTemplateNic) UnmarshalBinary(b []byte) error {
	var res NestedContentLibraryVMTemplateNic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
