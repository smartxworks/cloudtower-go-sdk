// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EcpEdition ecp edition
//
// swagger:model EcpEdition
type EcpEdition string

func NewEcpEdition(value EcpEdition) *EcpEdition {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EcpEdition.
func (m EcpEdition) Pointer() *EcpEdition {
	return &m
}

const (

	// EcpEditionECPADVANCED captures enum value "ECP_ADVANCED"
	EcpEditionECPADVANCED EcpEdition = "ECP_ADVANCED"

	// EcpEditionECPESSENTIAL captures enum value "ECP_ESSENTIAL"
	EcpEditionECPESSENTIAL EcpEdition = "ECP_ESSENTIAL"

	// EcpEditionECPSTANDARD captures enum value "ECP_STANDARD"
	EcpEditionECPSTANDARD EcpEdition = "ECP_STANDARD"

	// EcpEditionECPVDIESSENTIAL captures enum value "ECP_VDI_ESSENTIAL"
	EcpEditionECPVDIESSENTIAL EcpEdition = "ECP_VDI_ESSENTIAL"
)

// for schema
var ecpEditionEnum []interface{}

func init() {
	var res []EcpEdition
	if err := json.Unmarshal([]byte(`["ECP_ADVANCED","ECP_ESSENTIAL","ECP_STANDARD","ECP_VDI_ESSENTIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ecpEditionEnum = append(ecpEditionEnum, v)
	}
}

func (m EcpEdition) validateEcpEditionEnum(path, location string, value EcpEdition) error {
	if err := validate.EnumCase(path, location, value, ecpEditionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ecp edition
func (m EcpEdition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEcpEditionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ecp edition based on context it is used
func (m EcpEdition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
