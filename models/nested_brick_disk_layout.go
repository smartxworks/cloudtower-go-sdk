// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedBrickDiskLayout nested brick disk layout
//
// swagger:model NestedBrickDiskLayout
type NestedBrickDiskLayout struct {

	// column
	// Required: true
	Column *int32 `json:"column"`

	// direction
	// Required: true
	Direction *Direction `json:"direction"`

	// phase
	// Required: true
	Phase *BrickPhaseEnum `json:"phase"`

	// row
	// Required: true
	Row *int32 `json:"row"`

	MarshalOpts *NestedBrickDiskLayoutMarshalOpts `json:"-"`
}

type NestedBrickDiskLayoutMarshalOpts struct {
	Column_Explicit_Null_When_Empty bool

	Direction_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	Row_Explicit_Null_When_Empty bool
}

func (m NestedBrickDiskLayout) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field column
	if m.Column != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"column\":")
		bytes, err := swag.WriteJSON(m.Column)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Column_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"column\":null")
		first = false
	}

	// handle nullable field direction
	if m.Direction != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"direction\":")
		bytes, err := swag.WriteJSON(m.Direction)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Direction_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"direction\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field row
	if m.Row != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"row\":")
		bytes, err := swag.WriteJSON(m.Row)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Row_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"row\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested brick disk layout
func (m *NestedBrickDiskLayout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedBrickDiskLayout) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

func (m *NestedBrickDiskLayout) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	if m.Direction != nil {
		if err := m.Direction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("direction")
			}
			return err
		}
	}

	return nil
}

func (m *NestedBrickDiskLayout) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedBrickDiskLayout) validateRow(formats strfmt.Registry) error {

	if err := validate.Required("row", "body", m.Row); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested brick disk layout based on the context it is used
func (m *NestedBrickDiskLayout) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedBrickDiskLayout) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if m.Direction != nil {
		if err := m.Direction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("direction")
			}
			return err
		}
	}

	return nil
}

func (m *NestedBrickDiskLayout) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedBrickDiskLayout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedBrickDiskLayout) UnmarshalBinary(b []byte) error {
	var res NestedBrickDiskLayout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
