// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicationService replication service
//
// swagger:model ReplicationService
type ReplicationService struct {

	// application
	Application *NestedCloudTowerApplication `json:"application,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// description
	Description *string `json:"description,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// failover executions
	FailoverExecutions []*NestedFailoverExecution `json:"failover_executions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// kube config
	// Required: true
	KubeConfig *string `json:"kube_config"`

	// management network
	// Required: true
	ManagementNetwork *NestedReplicationServiceNetwork `json:"management_network"`

	// max failback jobs
	MaxFailbackJobs *int32 `json:"max_failback_jobs,omitempty"`

	// max failback speed limit
	MaxFailbackSpeedLimit *float64 `json:"max_failback_speed_limit,omitempty"`

	// max replication jobs
	MaxReplicationJobs *int32 `json:"max_replication_jobs,omitempty"`

	// max replication speed limit
	MaxReplicationSpeedLimit *float64 `json:"max_replication_speed_limit,omitempty"`

	// max retry times
	MaxRetryTimes *int32 `json:"max_retry_times,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// permanent failover execution
	PermanentFailoverExecution []*NestedPermanentFailoverExecution `json:"permanent_failover_execution,omitempty"`

	// replication clusters
	ReplicationClusters []*NestedCluster `json:"replication_clusters,omitempty"`

	// replication clusters descriptor
	// Required: true
	ReplicationClustersDescriptor []*NestedReplicationClusterDescriptor `json:"replication_clusters_descriptor"`

	// replication network
	// Required: true
	ReplicationNetwork *NestedReplicationServiceNetwork `json:"replication_network"`

	// replication plans
	ReplicationPlans []*NestedReplicationPlan `json:"replication_plans,omitempty"`

	// retry interval
	RetryInterval *int32 `json:"retry_interval,omitempty"`

	// storage network
	// Required: true
	StorageNetwork *NestedReplicationServiceNetwork `json:"storage_network"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`

	MarshalOpts *ReplicationServiceMarshalOpts `json:"-"`
}

type ReplicationServiceMarshalOpts struct {
	Application_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	FailoverExecutions_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	KubeConfig_Explicit_Null_When_Empty bool

	ManagementNetwork_Explicit_Null_When_Empty bool

	MaxFailbackJobs_Explicit_Null_When_Empty bool

	MaxFailbackSpeedLimit_Explicit_Null_When_Empty bool

	MaxReplicationJobs_Explicit_Null_When_Empty bool

	MaxReplicationSpeedLimit_Explicit_Null_When_Empty bool

	MaxRetryTimes_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	PermanentFailoverExecution_Explicit_Null_When_Empty bool

	ReplicationClusters_Explicit_Null_When_Empty bool

	ReplicationClustersDescriptor_Explicit_Null_When_Empty bool

	ReplicationNetwork_Explicit_Null_When_Empty bool

	ReplicationPlans_Explicit_Null_When_Empty bool

	RetryInterval_Explicit_Null_When_Empty bool

	StorageNetwork_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool
}

func (m ReplicationService) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field application
	if m.Application != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":")
		bytes, err := swag.WriteJSON(m.Application)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Application_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"application\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field failover_executions with omitempty
	if !swag.IsZero(m.FailoverExecutions) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutions)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field kube_config
	if m.KubeConfig != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":")
		bytes, err := swag.WriteJSON(m.KubeConfig)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KubeConfig_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"kube_config\":null")
		first = false
	}

	// handle nullable field management_network
	if m.ManagementNetwork != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network\":")
		bytes, err := swag.WriteJSON(m.ManagementNetwork)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementNetwork_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_network\":null")
		first = false
	}

	// handle nullable field max_failback_jobs
	if m.MaxFailbackJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_jobs\":null")
		first = false
	}

	// handle nullable field max_failback_speed_limit
	if m.MaxFailbackSpeedLimit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit\":")
		bytes, err := swag.WriteJSON(m.MaxFailbackSpeedLimit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxFailbackSpeedLimit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_failback_speed_limit\":null")
		first = false
	}

	// handle nullable field max_replication_jobs
	if m.MaxReplicationJobs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationJobs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationJobs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_jobs\":null")
		first = false
	}

	// handle nullable field max_replication_speed_limit
	if m.MaxReplicationSpeedLimit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit\":")
		bytes, err := swag.WriteJSON(m.MaxReplicationSpeedLimit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxReplicationSpeedLimit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_replication_speed_limit\":null")
		first = false
	}

	// handle nullable field max_retry_times
	if m.MaxRetryTimes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times\":")
		bytes, err := swag.WriteJSON(m.MaxRetryTimes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxRetryTimes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_retry_times\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field permanent_failover_execution with omitempty
	if !swag.IsZero(m.PermanentFailoverExecution) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_execution\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field replication_clusters with omitempty
	if !swag.IsZero(m.ReplicationClusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters\":")
		bytes, err := swag.WriteJSON(m.ReplicationClusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field replication_clusters_descriptor without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_clusters_descriptor\":")
		bytes, err := swag.WriteJSON(m.ReplicationClustersDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replication_network
	if m.ReplicationNetwork != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_network\":")
		bytes, err := swag.WriteJSON(m.ReplicationNetwork)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationNetwork_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_network\":null")
		first = false
	}

	// handle non nullable field replication_plans with omitempty
	if !swag.IsZero(m.ReplicationPlans) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlans)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field retry_interval
	if m.RetryInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":")
		bytes, err := swag.WriteJSON(m.RetryInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RetryInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retry_interval\":null")
		first = false
	}

	// handle nullable field storage_network
	if m.StorageNetwork != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network\":")
		bytes, err := swag.WriteJSON(m.StorageNetwork)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StorageNetwork_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"storage_network\":null")
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replication service
func (m *ReplicationService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationClustersDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationService) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationService) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) validateFailoverExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.FailoverExecutions); i++ {
		if swag.IsZero(m.FailoverExecutions[i]) { // not required
			continue
		}

		if m.FailoverExecutions[i] != nil {
			if err := m.FailoverExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failover_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failover_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationService) validateKubeConfig(formats strfmt.Registry) error {

	if err := validate.Required("kube_config", "body", m.KubeConfig); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationService) validateManagementNetwork(formats strfmt.Registry) error {

	if err := validate.Required("management_network", "body", m.ManagementNetwork); err != nil {
		return err
	}

	if m.ManagementNetwork != nil {
		if err := m.ManagementNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_network")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReplicationService) validatePermanentFailoverExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecution) { // not required
		return nil
	}

	for i := 0; i < len(m.PermanentFailoverExecution); i++ {
		if swag.IsZero(m.PermanentFailoverExecution[i]) { // not required
			continue
		}

		if m.PermanentFailoverExecution[i] != nil {
			if err := m.PermanentFailoverExecution[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permanent_failover_execution" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permanent_failover_execution" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) validateReplicationClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationClusters); i++ {
		if swag.IsZero(m.ReplicationClusters[i]) { // not required
			continue
		}

		if m.ReplicationClusters[i] != nil {
			if err := m.ReplicationClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) validateReplicationClustersDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("replication_clusters_descriptor", "body", m.ReplicationClustersDescriptor); err != nil {
		return err
	}

	for i := 0; i < len(m.ReplicationClustersDescriptor); i++ {
		if swag.IsZero(m.ReplicationClustersDescriptor[i]) { // not required
			continue
		}

		if m.ReplicationClustersDescriptor[i] != nil {
			if err := m.ReplicationClustersDescriptor[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_clusters_descriptor" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_clusters_descriptor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) validateReplicationNetwork(formats strfmt.Registry) error {

	if err := validate.Required("replication_network", "body", m.ReplicationNetwork); err != nil {
		return err
	}

	if m.ReplicationNetwork != nil {
		if err := m.ReplicationNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_network")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) validateReplicationPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlans) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationPlans); i++ {
		if swag.IsZero(m.ReplicationPlans[i]) { // not required
			continue
		}

		if m.ReplicationPlans[i] != nil {
			if err := m.ReplicationPlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) validateStorageNetwork(formats strfmt.Registry) error {

	if err := validate.Required("storage_network", "body", m.StorageNetwork); err != nil {
		return err
	}

	if m.StorageNetwork != nil {
		if err := m.StorageNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_network")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this replication service based on the context it is used
func (m *ReplicationService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationClustersDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationService) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {
		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) contextValidateFailoverExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FailoverExecutions); i++ {

		if m.FailoverExecutions[i] != nil {
			if err := m.FailoverExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failover_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("failover_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) contextValidateManagementNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementNetwork != nil {
		if err := m.ManagementNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_network")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) contextValidatePermanentFailoverExecution(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PermanentFailoverExecution); i++ {

		if m.PermanentFailoverExecution[i] != nil {
			if err := m.PermanentFailoverExecution[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permanent_failover_execution" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permanent_failover_execution" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) contextValidateReplicationClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationClusters); i++ {

		if m.ReplicationClusters[i] != nil {
			if err := m.ReplicationClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) contextValidateReplicationClustersDescriptor(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationClustersDescriptor); i++ {

		if m.ReplicationClustersDescriptor[i] != nil {
			if err := m.ReplicationClustersDescriptor[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_clusters_descriptor" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_clusters_descriptor" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) contextValidateReplicationNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationNetwork != nil {
		if err := m.ReplicationNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_network")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationService) contextValidateReplicationPlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationPlans); i++ {

		if m.ReplicationPlans[i] != nil {
			if err := m.ReplicationPlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_plans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_plans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationService) contextValidateStorageNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageNetwork != nil {
		if err := m.StorageNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage_network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationService) UnmarshalBinary(b []byte) error {
	var res ReplicationService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
