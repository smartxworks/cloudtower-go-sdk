// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedSnapshotGroupVMDiskInfo nested snapshot group Vm disk info
//
// swagger:model NestedSnapshotGroupVmDiskInfo
type NestedSnapshotGroupVMDiskInfo struct {

	// disk id
	// Required: true
	DiskID *string `json:"disk_id"`

	// disk snapshot status
	// Required: true
	DiskSnapshotStatus *ProtectSnapshotStatus `json:"disk_snapshot_status"`

	MarshalOpts *NestedSnapshotGroupVMDiskInfoMarshalOpts `json:"-"`
}

type NestedSnapshotGroupVMDiskInfoMarshalOpts struct {
	DiskID_Explicit_Null_When_Empty bool

	DiskSnapshotStatus_Explicit_Null_When_Empty bool
}

func (m NestedSnapshotGroupVMDiskInfo) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field disk_id
	if m.DiskID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_id\":")
		bytes, err := swag.WriteJSON(m.DiskID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_id\":null")
		first = false
	}

	// handle nullable field disk_snapshot_status
	if m.DiskSnapshotStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_snapshot_status\":")
		bytes, err := swag.WriteJSON(m.DiskSnapshotStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DiskSnapshotStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disk_snapshot_status\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested snapshot group Vm disk info
func (m *NestedSnapshotGroupVMDiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSnapshotStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedSnapshotGroupVMDiskInfo) validateDiskID(formats strfmt.Registry) error {

	if err := validate.Required("disk_id", "body", m.DiskID); err != nil {
		return err
	}

	return nil
}

func (m *NestedSnapshotGroupVMDiskInfo) validateDiskSnapshotStatus(formats strfmt.Registry) error {

	if err := validate.Required("disk_snapshot_status", "body", m.DiskSnapshotStatus); err != nil {
		return err
	}

	if err := validate.Required("disk_snapshot_status", "body", m.DiskSnapshotStatus); err != nil {
		return err
	}

	if m.DiskSnapshotStatus != nil {
		if err := m.DiskSnapshotStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_snapshot_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested snapshot group Vm disk info based on the context it is used
func (m *NestedSnapshotGroupVMDiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskSnapshotStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedSnapshotGroupVMDiskInfo) contextValidateDiskSnapshotStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskSnapshotStatus != nil {
		if err := m.DiskSnapshotStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_snapshot_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedSnapshotGroupVMDiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedSnapshotGroupVMDiskInfo) UnmarshalBinary(b []byte) error {
	var res NestedSnapshotGroupVMDiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
