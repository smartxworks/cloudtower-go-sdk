// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationVMSpecPlacement application Vm spec placement
//
// swagger:model ApplicationVmSpecPlacement
type ApplicationVMSpecPlacement struct {

	// situation
	// Required: true
	Situation *ApplicationVMSpecPlacementSituation `json:"situation"`

	// verb
	// Required: true
	Verb *ApplicationVMSpecPlacementVerb `json:"verb"`

	MarshalOpts *ApplicationVMSpecPlacementMarshalOpts `json:"-"`
}

type ApplicationVMSpecPlacementMarshalOpts struct {
	Situation_Explicit_Null_When_Empty bool

	Verb_Explicit_Null_When_Empty bool
}

func (m ApplicationVMSpecPlacement) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field situation
	if m.Situation != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"situation\":")
		bytes, err := swag.WriteJSON(m.Situation)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Situation_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"situation\":null")
		first = false
	}

	// handle nullable field verb
	if m.Verb != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verb\":")
		bytes, err := swag.WriteJSON(m.Verb)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Verb_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"verb\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this application Vm spec placement
func (m *ApplicationVMSpecPlacement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSituation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpecPlacement) validateSituation(formats strfmt.Registry) error {

	if err := validate.Required("situation", "body", m.Situation); err != nil {
		return err
	}

	if err := validate.Required("situation", "body", m.Situation); err != nil {
		return err
	}

	if m.Situation != nil {
		if err := m.Situation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("situation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("situation")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecPlacement) validateVerb(formats strfmt.Registry) error {

	if err := validate.Required("verb", "body", m.Verb); err != nil {
		return err
	}

	if err := validate.Required("verb", "body", m.Verb); err != nil {
		return err
	}

	if m.Verb != nil {
		if err := m.Verb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verb")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application Vm spec placement based on the context it is used
func (m *ApplicationVMSpecPlacement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSituation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationVMSpecPlacement) contextValidateSituation(ctx context.Context, formats strfmt.Registry) error {

	if m.Situation != nil {
		if err := m.Situation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("situation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("situation")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationVMSpecPlacement) contextValidateVerb(ctx context.Context, formats strfmt.Registry) error {

	if m.Verb != nil {
		if err := m.Verb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationVMSpecPlacement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationVMSpecPlacement) UnmarshalBinary(b []byte) error {
	var res ApplicationVMSpecPlacement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
