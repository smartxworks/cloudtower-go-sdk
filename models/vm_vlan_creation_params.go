// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMVlanCreationParams Vm vlan creation params
//
// swagger:model VmVlanCreationParams
type VMVlanCreationParams struct {

	// mode type
	ModeType *VlanModeType `json:"mode_type,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// network ids
	NetworkIds []string `json:"network_ids,omitempty"`

	// qos burst
	QosBurst *int64 `json:"qos_burst,omitempty"`

	// qos burst unit
	QosBurstUnit *ByteUnit `json:"qos_burst_unit,omitempty"`

	// qos max bandwidth
	QosMaxBandwidth *int64 `json:"qos_max_bandwidth,omitempty"`

	// qos max bandwidth unit
	QosMaxBandwidthUnit *BPSUnit `json:"qos_max_bandwidth_unit,omitempty"`

	// qos min bandwidth
	QosMinBandwidth *int64 `json:"qos_min_bandwidth,omitempty"`

	// qos min bandwidth unit
	QosMinBandwidthUnit *BPSUnit `json:"qos_min_bandwidth_unit,omitempty"`

	// qos priority
	QosPriority *Priority `json:"qos_priority,omitempty"`

	// vds id
	// Required: true
	VdsID *string `json:"vds_id"`

	// vlan id
	VlanID *VlanID `json:"vlan_id,omitempty"`

	MarshalOpts *VMVlanCreationParamsMarshalOpts `json:"-"`
}

type VMVlanCreationParamsMarshalOpts struct {
	ModeType_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NetworkIds_Explicit_Null_When_Empty bool

	QosBurst_Explicit_Null_When_Empty bool

	QosBurstUnit_Explicit_Null_When_Empty bool

	QosMaxBandwidth_Explicit_Null_When_Empty bool

	QosMaxBandwidthUnit_Explicit_Null_When_Empty bool

	QosMinBandwidth_Explicit_Null_When_Empty bool

	QosMinBandwidthUnit_Explicit_Null_When_Empty bool

	QosPriority_Explicit_Null_When_Empty bool

	VdsID_Explicit_Null_When_Empty bool

	VlanID_Explicit_Null_When_Empty bool
}

func (m VMVlanCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field mode_type
	if m.ModeType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type\":")
		bytes, err := swag.WriteJSON(m.ModeType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModeType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mode_type\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field network_ids with omitempty
	if !swag.IsZero(m.NetworkIds) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_ids\":")
		bytes, err := swag.WriteJSON(m.NetworkIds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field qos_burst
	if m.QosBurst != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst\":")
		bytes, err := swag.WriteJSON(m.QosBurst)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurst_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst\":null")
		first = false
	}

	// handle nullable field qos_burst_unit
	if m.QosBurstUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_unit\":")
		bytes, err := swag.WriteJSON(m.QosBurstUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosBurstUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_burst_unit\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth
	if m.QosMaxBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth\":null")
		first = false
	}

	// handle nullable field qos_max_bandwidth_unit
	if m.QosMaxBandwidthUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_unit\":")
		bytes, err := swag.WriteJSON(m.QosMaxBandwidthUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMaxBandwidthUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_max_bandwidth_unit\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth
	if m.QosMinBandwidth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth\":null")
		first = false
	}

	// handle nullable field qos_min_bandwidth_unit
	if m.QosMinBandwidthUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_unit\":")
		bytes, err := swag.WriteJSON(m.QosMinBandwidthUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosMinBandwidthUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_min_bandwidth_unit\":null")
		first = false
	}

	// handle nullable field qos_priority
	if m.QosPriority != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority\":")
		bytes, err := swag.WriteJSON(m.QosPriority)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.QosPriority_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"qos_priority\":null")
		first = false
	}

	// handle nullable field vds_id
	if m.VdsID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_id\":")
		bytes, err := swag.WriteJSON(m.VdsID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VdsID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vds_id\":null")
		first = false
	}

	// handle nullable field vlan_id
	if m.VlanID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":")
		bytes, err := swag.WriteJSON(m.VlanID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm vlan creation params
func (m *VMVlanCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosBurstUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosMaxBandwidthUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosMinBandwidthUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVlanCreationParams) validateModeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ModeType) { // not required
		return nil
	}

	if m.ModeType != nil {
		if err := m.ModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMVlanCreationParams) validateQosBurstUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.QosBurstUnit) { // not required
		return nil
	}

	if m.QosBurstUnit != nil {
		if err := m.QosBurstUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_burst_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_burst_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) validateQosMaxBandwidthUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.QosMaxBandwidthUnit) { // not required
		return nil
	}

	if m.QosMaxBandwidthUnit != nil {
		if err := m.QosMaxBandwidthUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_max_bandwidth_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_max_bandwidth_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) validateQosMinBandwidthUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.QosMinBandwidthUnit) { // not required
		return nil
	}

	if m.QosMinBandwidthUnit != nil {
		if err := m.QosMinBandwidthUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_min_bandwidth_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_min_bandwidth_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) validateQosPriority(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPriority) { // not required
		return nil
	}

	if m.QosPriority != nil {
		if err := m.QosPriority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_priority")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) validateVdsID(formats strfmt.Registry) error {

	if err := validate.Required("vds_id", "body", m.VdsID); err != nil {
		return err
	}

	return nil
}

func (m *VMVlanCreationParams) validateVlanID(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanID) { // not required
		return nil
	}

	if m.VlanID != nil {
		if err := m.VlanID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm vlan creation params based on the context it is used
func (m *VMVlanCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosBurstUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosMaxBandwidthUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosMinBandwidthUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQosPriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVlanCreationParams) contextValidateModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.ModeType != nil {
		if err := m.ModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode_type")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) contextValidateQosBurstUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.QosBurstUnit != nil {
		if err := m.QosBurstUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_burst_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_burst_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) contextValidateQosMaxBandwidthUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.QosMaxBandwidthUnit != nil {
		if err := m.QosMaxBandwidthUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_max_bandwidth_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_max_bandwidth_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) contextValidateQosMinBandwidthUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.QosMinBandwidthUnit != nil {
		if err := m.QosMinBandwidthUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_min_bandwidth_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_min_bandwidth_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) contextValidateQosPriority(ctx context.Context, formats strfmt.Registry) error {

	if m.QosPriority != nil {
		if err := m.QosPriority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos_priority")
			}
			return err
		}
	}

	return nil
}

func (m *VMVlanCreationParams) contextValidateVlanID(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanID != nil {
		if err := m.VlanID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlan_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMVlanCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMVlanCreationParams) UnmarshalBinary(b []byte) error {
	var res VMVlanCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
