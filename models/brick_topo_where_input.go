// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BrickTopoWhereInput brick topo where input
//
// swagger:model BrickTopoWhereInput
type BrickTopoWhereInput struct {

	// a n d
	AND []*BrickTopoWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BrickTopoWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BrickTopoWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// cluster topo
	ClusterTopo *ClusterTopoWhereInput `json:"cluster_topo,omitempty"`

	// height
	Height *int32 `json:"height,omitempty"`

	// height gt
	HeightGt *int32 `json:"height_gt,omitempty"`

	// height gte
	HeightGte *int32 `json:"height_gte,omitempty"`

	// height in
	HeightIn []int32 `json:"height_in,omitempty"`

	// height lt
	HeightLt *int32 `json:"height_lt,omitempty"`

	// height lte
	HeightLte *int32 `json:"height_lte,omitempty"`

	// height not
	HeightNot *int32 `json:"height_not,omitempty"`

	// height not in
	HeightNotIn []int32 `json:"height_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// node topoes every
	NodeTopoesEvery *NodeTopoWhereInput `json:"node_topoes_every,omitempty"`

	// node topoes none
	NodeTopoesNone *NodeTopoWhereInput `json:"node_topoes_none,omitempty"`

	// node topoes some
	NodeTopoesSome *NodeTopoWhereInput `json:"node_topoes_some,omitempty"`

	// position
	Position *int32 `json:"position,omitempty"`

	// position gt
	PositionGt *int32 `json:"position_gt,omitempty"`

	// position gte
	PositionGte *int32 `json:"position_gte,omitempty"`

	// position in
	PositionIn []int32 `json:"position_in,omitempty"`

	// position lt
	PositionLt *int32 `json:"position_lt,omitempty"`

	// position lte
	PositionLte *int32 `json:"position_lte,omitempty"`

	// position not
	PositionNot *int32 `json:"position_not,omitempty"`

	// position not in
	PositionNotIn []int32 `json:"position_not_in,omitempty"`

	// power layout
	PowerLayout *Direction `json:"power_layout,omitempty"`

	// power layout in
	PowerLayoutIn []Direction `json:"power_layout_in,omitempty"`

	// power layout not
	PowerLayoutNot *Direction `json:"power_layout_not,omitempty"`

	// power layout not in
	PowerLayoutNotIn []Direction `json:"power_layout_not_in,omitempty"`

	// power position
	PowerPosition *PowerPosition `json:"power_position,omitempty"`

	// power position in
	PowerPositionIn []PowerPosition `json:"power_position_in,omitempty"`

	// power position not
	PowerPositionNot *PowerPosition `json:"power_position_not,omitempty"`

	// power position not in
	PowerPositionNotIn []PowerPosition `json:"power_position_not_in,omitempty"`

	// rack topo
	RackTopo *RackTopoWhereInput `json:"rack_topo,omitempty"`

	MarshalOpts *BrickTopoWhereInputMarshalOpts `json:"-"`
}

type BrickTopoWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	ClusterTopo_Explicit_Null_When_Empty bool

	Height_Explicit_Null_When_Empty bool

	HeightGt_Explicit_Null_When_Empty bool

	HeightGte_Explicit_Null_When_Empty bool

	HeightIn_Explicit_Null_When_Empty bool

	HeightLt_Explicit_Null_When_Empty bool

	HeightLte_Explicit_Null_When_Empty bool

	HeightNot_Explicit_Null_When_Empty bool

	HeightNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	ModelContains_Explicit_Null_When_Empty bool

	ModelEndsWith_Explicit_Null_When_Empty bool

	ModelGt_Explicit_Null_When_Empty bool

	ModelGte_Explicit_Null_When_Empty bool

	ModelIn_Explicit_Null_When_Empty bool

	ModelLt_Explicit_Null_When_Empty bool

	ModelLte_Explicit_Null_When_Empty bool

	ModelNot_Explicit_Null_When_Empty bool

	ModelNotContains_Explicit_Null_When_Empty bool

	ModelNotEndsWith_Explicit_Null_When_Empty bool

	ModelNotIn_Explicit_Null_When_Empty bool

	ModelNotStartsWith_Explicit_Null_When_Empty bool

	ModelStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NodeTopoesEvery_Explicit_Null_When_Empty bool

	NodeTopoesNone_Explicit_Null_When_Empty bool

	NodeTopoesSome_Explicit_Null_When_Empty bool

	Position_Explicit_Null_When_Empty bool

	PositionGt_Explicit_Null_When_Empty bool

	PositionGte_Explicit_Null_When_Empty bool

	PositionIn_Explicit_Null_When_Empty bool

	PositionLt_Explicit_Null_When_Empty bool

	PositionLte_Explicit_Null_When_Empty bool

	PositionNot_Explicit_Null_When_Empty bool

	PositionNotIn_Explicit_Null_When_Empty bool

	PowerLayout_Explicit_Null_When_Empty bool

	PowerLayoutIn_Explicit_Null_When_Empty bool

	PowerLayoutNot_Explicit_Null_When_Empty bool

	PowerLayoutNotIn_Explicit_Null_When_Empty bool

	PowerPosition_Explicit_Null_When_Empty bool

	PowerPositionIn_Explicit_Null_When_Empty bool

	PowerPositionNot_Explicit_Null_When_Empty bool

	PowerPositionNotIn_Explicit_Null_When_Empty bool

	RackTopo_Explicit_Null_When_Empty bool
}

func (m BrickTopoWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field cluster_topo
	if m.ClusterTopo != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo\":")
		bytes, err := swag.WriteJSON(m.ClusterTopo)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterTopo_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo\":null")
		first = false
	}

	// handle nullable field height
	if m.Height != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height\":")
		bytes, err := swag.WriteJSON(m.Height)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Height_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height\":null")
		first = false
	}

	// handle nullable field height_gt
	if m.HeightGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_gt\":")
		bytes, err := swag.WriteJSON(m.HeightGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HeightGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_gt\":null")
		first = false
	}

	// handle nullable field height_gte
	if m.HeightGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_gte\":")
		bytes, err := swag.WriteJSON(m.HeightGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HeightGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_gte\":null")
		first = false
	}

	// handle non nullable field height_in with omitempty
	if swag.IsZero(m.HeightIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_in\":")
		bytes, err := swag.WriteJSON(m.HeightIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field height_lt
	if m.HeightLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_lt\":")
		bytes, err := swag.WriteJSON(m.HeightLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HeightLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_lt\":null")
		first = false
	}

	// handle nullable field height_lte
	if m.HeightLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_lte\":")
		bytes, err := swag.WriteJSON(m.HeightLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HeightLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_lte\":null")
		first = false
	}

	// handle nullable field height_not
	if m.HeightNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_not\":")
		bytes, err := swag.WriteJSON(m.HeightNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HeightNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_not\":null")
		first = false
	}

	// handle non nullable field height_not_in with omitempty
	if swag.IsZero(m.HeightNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"height_not_in\":")
		bytes, err := swag.WriteJSON(m.HeightNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field model_contains
	if m.ModelContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":")
		bytes, err := swag.WriteJSON(m.ModelContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":null")
		first = false
	}

	// handle nullable field model_ends_with
	if m.ModelEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":null")
		first = false
	}

	// handle nullable field model_gt
	if m.ModelGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":")
		bytes, err := swag.WriteJSON(m.ModelGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":null")
		first = false
	}

	// handle nullable field model_gte
	if m.ModelGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":")
		bytes, err := swag.WriteJSON(m.ModelGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":null")
		first = false
	}

	// handle non nullable field model_in with omitempty
	if swag.IsZero(m.ModelIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_in\":")
		bytes, err := swag.WriteJSON(m.ModelIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_lt
	if m.ModelLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":")
		bytes, err := swag.WriteJSON(m.ModelLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":null")
		first = false
	}

	// handle nullable field model_lte
	if m.ModelLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":")
		bytes, err := swag.WriteJSON(m.ModelLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":null")
		first = false
	}

	// handle nullable field model_not
	if m.ModelNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":")
		bytes, err := swag.WriteJSON(m.ModelNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":null")
		first = false
	}

	// handle nullable field model_not_contains
	if m.ModelNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":")
		bytes, err := swag.WriteJSON(m.ModelNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":null")
		first = false
	}

	// handle nullable field model_not_ends_with
	if m.ModelNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":null")
		first = false
	}

	// handle non nullable field model_not_in with omitempty
	if swag.IsZero(m.ModelNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_in\":")
		bytes, err := swag.WriteJSON(m.ModelNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_not_starts_with
	if m.ModelNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":null")
		first = false
	}

	// handle nullable field model_starts_with
	if m.ModelStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field node_topoes_every
	if m.NodeTopoesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_every\":")
		bytes, err := swag.WriteJSON(m.NodeTopoesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NodeTopoesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_every\":null")
		first = false
	}

	// handle nullable field node_topoes_none
	if m.NodeTopoesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_none\":")
		bytes, err := swag.WriteJSON(m.NodeTopoesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NodeTopoesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_none\":null")
		first = false
	}

	// handle nullable field node_topoes_some
	if m.NodeTopoesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_some\":")
		bytes, err := swag.WriteJSON(m.NodeTopoesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NodeTopoesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"node_topoes_some\":null")
		first = false
	}

	// handle nullable field position
	if m.Position != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":")
		bytes, err := swag.WriteJSON(m.Position)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Position_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":null")
		first = false
	}

	// handle nullable field position_gt
	if m.PositionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_gt\":")
		bytes, err := swag.WriteJSON(m.PositionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PositionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_gt\":null")
		first = false
	}

	// handle nullable field position_gte
	if m.PositionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_gte\":")
		bytes, err := swag.WriteJSON(m.PositionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PositionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_gte\":null")
		first = false
	}

	// handle non nullable field position_in with omitempty
	if swag.IsZero(m.PositionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_in\":")
		bytes, err := swag.WriteJSON(m.PositionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field position_lt
	if m.PositionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_lt\":")
		bytes, err := swag.WriteJSON(m.PositionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PositionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_lt\":null")
		first = false
	}

	// handle nullable field position_lte
	if m.PositionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_lte\":")
		bytes, err := swag.WriteJSON(m.PositionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PositionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_lte\":null")
		first = false
	}

	// handle nullable field position_not
	if m.PositionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_not\":")
		bytes, err := swag.WriteJSON(m.PositionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PositionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_not\":null")
		first = false
	}

	// handle non nullable field position_not_in with omitempty
	if swag.IsZero(m.PositionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position_not_in\":")
		bytes, err := swag.WriteJSON(m.PositionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field power_layout
	if m.PowerLayout != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout\":")
		bytes, err := swag.WriteJSON(m.PowerLayout)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerLayout_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout\":null")
		first = false
	}

	// handle non nullable field power_layout_in with omitempty
	if swag.IsZero(m.PowerLayoutIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout_in\":")
		bytes, err := swag.WriteJSON(m.PowerLayoutIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field power_layout_not
	if m.PowerLayoutNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout_not\":")
		bytes, err := swag.WriteJSON(m.PowerLayoutNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerLayoutNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout_not\":null")
		first = false
	}

	// handle non nullable field power_layout_not_in with omitempty
	if swag.IsZero(m.PowerLayoutNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_layout_not_in\":")
		bytes, err := swag.WriteJSON(m.PowerLayoutNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field power_position
	if m.PowerPosition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position\":")
		bytes, err := swag.WriteJSON(m.PowerPosition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerPosition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position\":null")
		first = false
	}

	// handle non nullable field power_position_in with omitempty
	if swag.IsZero(m.PowerPositionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position_in\":")
		bytes, err := swag.WriteJSON(m.PowerPositionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field power_position_not
	if m.PowerPositionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position_not\":")
		bytes, err := swag.WriteJSON(m.PowerPositionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PowerPositionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position_not\":null")
		first = false
	}

	// handle non nullable field power_position_not_in with omitempty
	if swag.IsZero(m.PowerPositionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"power_position_not_in\":")
		bytes, err := swag.WriteJSON(m.PowerPositionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field rack_topo
	if m.RackTopo != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rack_topo\":")
		bytes, err := swag.WriteJSON(m.RackTopo)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RackTopo_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rack_topo\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this brick topo where input
func (m *BrickTopoWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTopo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayoutIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayoutNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayoutNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPositionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPositionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPositionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackTopo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validateClusterTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterTopo) { // not required
		return nil
	}

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validateNodeTopoesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesEvery) { // not required
		return nil
	}

	if m.NodeTopoesEvery != nil {
		if err := m.NodeTopoesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validateNodeTopoesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesNone) { // not required
		return nil
	}

	if m.NodeTopoesNone != nil {
		if err := m.NodeTopoesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validateNodeTopoesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesSome) { // not required
		return nil
	}

	if m.NodeTopoesSome != nil {
		if err := m.NodeTopoesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayout(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayout) { // not required
		return nil
	}

	if m.PowerLayout != nil {
		if err := m.PowerLayout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayoutIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayoutIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerLayoutIn); i++ {

		if err := m.PowerLayoutIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayoutNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayoutNot) { // not required
		return nil
	}

	if m.PowerLayoutNot != nil {
		if err := m.PowerLayoutNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_not")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayoutNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayoutNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerLayoutNotIn); i++ {

		if err := m.PowerLayoutNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPosition(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPosition) { // not required
		return nil
	}

	if m.PowerPosition != nil {
		if err := m.PowerPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPositionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPositionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerPositionIn); i++ {

		if err := m.PowerPositionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPositionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPositionNot) { // not required
		return nil
	}

	if m.PowerPositionNot != nil {
		if err := m.PowerPositionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_not")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPositionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPositionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerPositionNotIn); i++ {

		if err := m.PowerPositionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateRackTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.RackTopo) { // not required
		return nil
	}

	if m.RackTopo != nil {
		if err := m.RackTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this brick topo where input based on the context it is used
func (m *BrickTopoWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayoutIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayoutNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayoutNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPositionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPositionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPositionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRackTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateClusterTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateNodeTopoesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesEvery != nil {
		if err := m.NodeTopoesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateNodeTopoesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesNone != nil {
		if err := m.NodeTopoesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateNodeTopoesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesSome != nil {
		if err := m.NodeTopoesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayout(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerLayout != nil {
		if err := m.PowerLayout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayoutIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerLayoutIn); i++ {

		if err := m.PowerLayoutIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayoutNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerLayoutNot != nil {
		if err := m.PowerLayoutNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_not")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayoutNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerLayoutNotIn); i++ {

		if err := m.PowerLayoutNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPosition(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerPosition != nil {
		if err := m.PowerPosition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPositionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerPositionIn); i++ {

		if err := m.PowerPositionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPositionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerPositionNot != nil {
		if err := m.PowerPositionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_not")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPositionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerPositionNotIn); i++ {

		if err := m.PowerPositionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateRackTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.RackTopo != nil {
		if err := m.RackTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoWhereInput) UnmarshalBinary(b []byte) error {
	var res BrickTopoWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
