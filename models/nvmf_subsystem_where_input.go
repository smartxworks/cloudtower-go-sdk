// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NvmfSubsystemWhereInput nvmf subsystem where input
//
// swagger:model NvmfSubsystemWhereInput
type NvmfSubsystemWhereInput struct {

	// a n d
	AND []*NvmfSubsystemWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*NvmfSubsystemWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*NvmfSubsystemWhereInput `json:"OR,omitempty"`

	// bps
	Bps *int64 `json:"bps,omitempty"`

	// bps gt
	BpsGt *int64 `json:"bps_gt,omitempty"`

	// bps gte
	BpsGte *int64 `json:"bps_gte,omitempty"`

	// bps in
	BpsIn []int64 `json:"bps_in,omitempty"`

	// bps lt
	BpsLt *int64 `json:"bps_lt,omitempty"`

	// bps lte
	BpsLte *int64 `json:"bps_lte,omitempty"`

	// bps max
	BpsMax *int64 `json:"bps_max,omitempty"`

	// bps max gt
	BpsMaxGt *int64 `json:"bps_max_gt,omitempty"`

	// bps max gte
	BpsMaxGte *int64 `json:"bps_max_gte,omitempty"`

	// bps max in
	BpsMaxIn []int64 `json:"bps_max_in,omitempty"`

	// bps max length
	BpsMaxLength *int64 `json:"bps_max_length,omitempty"`

	// bps max length gt
	BpsMaxLengthGt *int64 `json:"bps_max_length_gt,omitempty"`

	// bps max length gte
	BpsMaxLengthGte *int64 `json:"bps_max_length_gte,omitempty"`

	// bps max length in
	BpsMaxLengthIn []int64 `json:"bps_max_length_in,omitempty"`

	// bps max length lt
	BpsMaxLengthLt *int64 `json:"bps_max_length_lt,omitempty"`

	// bps max length lte
	BpsMaxLengthLte *int64 `json:"bps_max_length_lte,omitempty"`

	// bps max length not
	BpsMaxLengthNot *int64 `json:"bps_max_length_not,omitempty"`

	// bps max length not in
	BpsMaxLengthNotIn []int64 `json:"bps_max_length_not_in,omitempty"`

	// bps max lt
	BpsMaxLt *int64 `json:"bps_max_lt,omitempty"`

	// bps max lte
	BpsMaxLte *int64 `json:"bps_max_lte,omitempty"`

	// bps max not
	BpsMaxNot *int64 `json:"bps_max_not,omitempty"`

	// bps max not in
	BpsMaxNotIn []int64 `json:"bps_max_not_in,omitempty"`

	// bps not
	BpsNot *int64 `json:"bps_not,omitempty"`

	// bps not in
	BpsNotIn []int64 `json:"bps_not_in,omitempty"`

	// bps rd
	BpsRd *int64 `json:"bps_rd,omitempty"`

	// bps rd gt
	BpsRdGt *int64 `json:"bps_rd_gt,omitempty"`

	// bps rd gte
	BpsRdGte *int64 `json:"bps_rd_gte,omitempty"`

	// bps rd in
	BpsRdIn []int64 `json:"bps_rd_in,omitempty"`

	// bps rd lt
	BpsRdLt *int64 `json:"bps_rd_lt,omitempty"`

	// bps rd lte
	BpsRdLte *int64 `json:"bps_rd_lte,omitempty"`

	// bps rd max
	BpsRdMax *int64 `json:"bps_rd_max,omitempty"`

	// bps rd max gt
	BpsRdMaxGt *int64 `json:"bps_rd_max_gt,omitempty"`

	// bps rd max gte
	BpsRdMaxGte *int64 `json:"bps_rd_max_gte,omitempty"`

	// bps rd max in
	BpsRdMaxIn []int64 `json:"bps_rd_max_in,omitempty"`

	// bps rd max length
	BpsRdMaxLength *int64 `json:"bps_rd_max_length,omitempty"`

	// bps rd max length gt
	BpsRdMaxLengthGt *int64 `json:"bps_rd_max_length_gt,omitempty"`

	// bps rd max length gte
	BpsRdMaxLengthGte *int64 `json:"bps_rd_max_length_gte,omitempty"`

	// bps rd max length in
	BpsRdMaxLengthIn []int64 `json:"bps_rd_max_length_in,omitempty"`

	// bps rd max length lt
	BpsRdMaxLengthLt *int64 `json:"bps_rd_max_length_lt,omitempty"`

	// bps rd max length lte
	BpsRdMaxLengthLte *int64 `json:"bps_rd_max_length_lte,omitempty"`

	// bps rd max length not
	BpsRdMaxLengthNot *int64 `json:"bps_rd_max_length_not,omitempty"`

	// bps rd max length not in
	BpsRdMaxLengthNotIn []int64 `json:"bps_rd_max_length_not_in,omitempty"`

	// bps rd max lt
	BpsRdMaxLt *int64 `json:"bps_rd_max_lt,omitempty"`

	// bps rd max lte
	BpsRdMaxLte *int64 `json:"bps_rd_max_lte,omitempty"`

	// bps rd max not
	BpsRdMaxNot *int64 `json:"bps_rd_max_not,omitempty"`

	// bps rd max not in
	BpsRdMaxNotIn []int64 `json:"bps_rd_max_not_in,omitempty"`

	// bps rd not
	BpsRdNot *int64 `json:"bps_rd_not,omitempty"`

	// bps rd not in
	BpsRdNotIn []int64 `json:"bps_rd_not_in,omitempty"`

	// bps wr
	BpsWr *int64 `json:"bps_wr,omitempty"`

	// bps wr gt
	BpsWrGt *int64 `json:"bps_wr_gt,omitempty"`

	// bps wr gte
	BpsWrGte *int64 `json:"bps_wr_gte,omitempty"`

	// bps wr in
	BpsWrIn []int64 `json:"bps_wr_in,omitempty"`

	// bps wr lt
	BpsWrLt *int64 `json:"bps_wr_lt,omitempty"`

	// bps wr lte
	BpsWrLte *int64 `json:"bps_wr_lte,omitempty"`

	// bps wr max
	BpsWrMax *int64 `json:"bps_wr_max,omitempty"`

	// bps wr max gt
	BpsWrMaxGt *int64 `json:"bps_wr_max_gt,omitempty"`

	// bps wr max gte
	BpsWrMaxGte *int64 `json:"bps_wr_max_gte,omitempty"`

	// bps wr max in
	BpsWrMaxIn []int64 `json:"bps_wr_max_in,omitempty"`

	// bps wr max length
	BpsWrMaxLength *int64 `json:"bps_wr_max_length,omitempty"`

	// bps wr max length gt
	BpsWrMaxLengthGt *int64 `json:"bps_wr_max_length_gt,omitempty"`

	// bps wr max length gte
	BpsWrMaxLengthGte *int64 `json:"bps_wr_max_length_gte,omitempty"`

	// bps wr max length in
	BpsWrMaxLengthIn []int64 `json:"bps_wr_max_length_in,omitempty"`

	// bps wr max length lt
	BpsWrMaxLengthLt *int64 `json:"bps_wr_max_length_lt,omitempty"`

	// bps wr max length lte
	BpsWrMaxLengthLte *int64 `json:"bps_wr_max_length_lte,omitempty"`

	// bps wr max length not
	BpsWrMaxLengthNot *int64 `json:"bps_wr_max_length_not,omitempty"`

	// bps wr max length not in
	BpsWrMaxLengthNotIn []int64 `json:"bps_wr_max_length_not_in,omitempty"`

	// bps wr max lt
	BpsWrMaxLt *int64 `json:"bps_wr_max_lt,omitempty"`

	// bps wr max lte
	BpsWrMaxLte *int64 `json:"bps_wr_max_lte,omitempty"`

	// bps wr max not
	BpsWrMaxNot *int64 `json:"bps_wr_max_not,omitempty"`

	// bps wr max not in
	BpsWrMaxNotIn []int64 `json:"bps_wr_max_not_in,omitempty"`

	// bps wr not
	BpsWrNot *int64 `json:"bps_wr_not,omitempty"`

	// bps wr not in
	BpsWrNotIn []int64 `json:"bps_wr_not_in,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// external use
	ExternalUse *bool `json:"external_use,omitempty"`

	// external use not
	ExternalUseNot *bool `json:"external_use_not,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// internal not
	InternalNot *bool `json:"internal_not,omitempty"`

	// io size
	IoSize *int64 `json:"io_size,omitempty"`

	// io size gt
	IoSizeGt *int64 `json:"io_size_gt,omitempty"`

	// io size gte
	IoSizeGte *int64 `json:"io_size_gte,omitempty"`

	// io size in
	IoSizeIn []int64 `json:"io_size_in,omitempty"`

	// io size lt
	IoSizeLt *int64 `json:"io_size_lt,omitempty"`

	// io size lte
	IoSizeLte *int64 `json:"io_size_lte,omitempty"`

	// io size not
	IoSizeNot *int64 `json:"io_size_not,omitempty"`

	// io size not in
	IoSizeNotIn []int64 `json:"io_size_not_in,omitempty"`

	// iops
	Iops *int64 `json:"iops,omitempty"`

	// iops gt
	IopsGt *int64 `json:"iops_gt,omitempty"`

	// iops gte
	IopsGte *int64 `json:"iops_gte,omitempty"`

	// iops in
	IopsIn []int64 `json:"iops_in,omitempty"`

	// iops lt
	IopsLt *int64 `json:"iops_lt,omitempty"`

	// iops lte
	IopsLte *int64 `json:"iops_lte,omitempty"`

	// iops max
	IopsMax *int64 `json:"iops_max,omitempty"`

	// iops max gt
	IopsMaxGt *int64 `json:"iops_max_gt,omitempty"`

	// iops max gte
	IopsMaxGte *int64 `json:"iops_max_gte,omitempty"`

	// iops max in
	IopsMaxIn []int64 `json:"iops_max_in,omitempty"`

	// iops max length
	IopsMaxLength *int64 `json:"iops_max_length,omitempty"`

	// iops max length gt
	IopsMaxLengthGt *int64 `json:"iops_max_length_gt,omitempty"`

	// iops max length gte
	IopsMaxLengthGte *int64 `json:"iops_max_length_gte,omitempty"`

	// iops max length in
	IopsMaxLengthIn []int64 `json:"iops_max_length_in,omitempty"`

	// iops max length lt
	IopsMaxLengthLt *int64 `json:"iops_max_length_lt,omitempty"`

	// iops max length lte
	IopsMaxLengthLte *int64 `json:"iops_max_length_lte,omitempty"`

	// iops max length not
	IopsMaxLengthNot *int64 `json:"iops_max_length_not,omitempty"`

	// iops max length not in
	IopsMaxLengthNotIn []int64 `json:"iops_max_length_not_in,omitempty"`

	// iops max lt
	IopsMaxLt *int64 `json:"iops_max_lt,omitempty"`

	// iops max lte
	IopsMaxLte *int64 `json:"iops_max_lte,omitempty"`

	// iops max not
	IopsMaxNot *int64 `json:"iops_max_not,omitempty"`

	// iops max not in
	IopsMaxNotIn []int64 `json:"iops_max_not_in,omitempty"`

	// iops not
	IopsNot *int64 `json:"iops_not,omitempty"`

	// iops not in
	IopsNotIn []int64 `json:"iops_not_in,omitempty"`

	// iops rd
	IopsRd *int64 `json:"iops_rd,omitempty"`

	// iops rd gt
	IopsRdGt *int64 `json:"iops_rd_gt,omitempty"`

	// iops rd gte
	IopsRdGte *int64 `json:"iops_rd_gte,omitempty"`

	// iops rd in
	IopsRdIn []int64 `json:"iops_rd_in,omitempty"`

	// iops rd lt
	IopsRdLt *int64 `json:"iops_rd_lt,omitempty"`

	// iops rd lte
	IopsRdLte *int64 `json:"iops_rd_lte,omitempty"`

	// iops rd max
	IopsRdMax *int64 `json:"iops_rd_max,omitempty"`

	// iops rd max gt
	IopsRdMaxGt *int64 `json:"iops_rd_max_gt,omitempty"`

	// iops rd max gte
	IopsRdMaxGte *int64 `json:"iops_rd_max_gte,omitempty"`

	// iops rd max in
	IopsRdMaxIn []int64 `json:"iops_rd_max_in,omitempty"`

	// iops rd max length
	IopsRdMaxLength *int64 `json:"iops_rd_max_length,omitempty"`

	// iops rd max length gt
	IopsRdMaxLengthGt *int64 `json:"iops_rd_max_length_gt,omitempty"`

	// iops rd max length gte
	IopsRdMaxLengthGte *int64 `json:"iops_rd_max_length_gte,omitempty"`

	// iops rd max length in
	IopsRdMaxLengthIn []int64 `json:"iops_rd_max_length_in,omitempty"`

	// iops rd max length lt
	IopsRdMaxLengthLt *int64 `json:"iops_rd_max_length_lt,omitempty"`

	// iops rd max length lte
	IopsRdMaxLengthLte *int64 `json:"iops_rd_max_length_lte,omitempty"`

	// iops rd max length not
	IopsRdMaxLengthNot *int64 `json:"iops_rd_max_length_not,omitempty"`

	// iops rd max length not in
	IopsRdMaxLengthNotIn []int64 `json:"iops_rd_max_length_not_in,omitempty"`

	// iops rd max lt
	IopsRdMaxLt *int64 `json:"iops_rd_max_lt,omitempty"`

	// iops rd max lte
	IopsRdMaxLte *int64 `json:"iops_rd_max_lte,omitempty"`

	// iops rd max not
	IopsRdMaxNot *int64 `json:"iops_rd_max_not,omitempty"`

	// iops rd max not in
	IopsRdMaxNotIn []int64 `json:"iops_rd_max_not_in,omitempty"`

	// iops rd not
	IopsRdNot *int64 `json:"iops_rd_not,omitempty"`

	// iops rd not in
	IopsRdNotIn []int64 `json:"iops_rd_not_in,omitempty"`

	// iops wr
	IopsWr *int64 `json:"iops_wr,omitempty"`

	// iops wr gt
	IopsWrGt *int64 `json:"iops_wr_gt,omitempty"`

	// iops wr gte
	IopsWrGte *int64 `json:"iops_wr_gte,omitempty"`

	// iops wr in
	IopsWrIn []int64 `json:"iops_wr_in,omitempty"`

	// iops wr lt
	IopsWrLt *int64 `json:"iops_wr_lt,omitempty"`

	// iops wr lte
	IopsWrLte *int64 `json:"iops_wr_lte,omitempty"`

	// iops wr max
	IopsWrMax *int64 `json:"iops_wr_max,omitempty"`

	// iops wr max gt
	IopsWrMaxGt *int64 `json:"iops_wr_max_gt,omitempty"`

	// iops wr max gte
	IopsWrMaxGte *int64 `json:"iops_wr_max_gte,omitempty"`

	// iops wr max in
	IopsWrMaxIn []int64 `json:"iops_wr_max_in,omitempty"`

	// iops wr max length
	IopsWrMaxLength *int64 `json:"iops_wr_max_length,omitempty"`

	// iops wr max length gt
	IopsWrMaxLengthGt *int64 `json:"iops_wr_max_length_gt,omitempty"`

	// iops wr max length gte
	IopsWrMaxLengthGte *int64 `json:"iops_wr_max_length_gte,omitempty"`

	// iops wr max length in
	IopsWrMaxLengthIn []int64 `json:"iops_wr_max_length_in,omitempty"`

	// iops wr max length lt
	IopsWrMaxLengthLt *int64 `json:"iops_wr_max_length_lt,omitempty"`

	// iops wr max length lte
	IopsWrMaxLengthLte *int64 `json:"iops_wr_max_length_lte,omitempty"`

	// iops wr max length not
	IopsWrMaxLengthNot *int64 `json:"iops_wr_max_length_not,omitempty"`

	// iops wr max length not in
	IopsWrMaxLengthNotIn []int64 `json:"iops_wr_max_length_not_in,omitempty"`

	// iops wr max lt
	IopsWrMaxLt *int64 `json:"iops_wr_max_lt,omitempty"`

	// iops wr max lte
	IopsWrMaxLte *int64 `json:"iops_wr_max_lte,omitempty"`

	// iops wr max not
	IopsWrMaxNot *int64 `json:"iops_wr_max_not,omitempty"`

	// iops wr max not in
	IopsWrMaxNotIn []int64 `json:"iops_wr_max_not_in,omitempty"`

	// iops wr not
	IopsWrNot *int64 `json:"iops_wr_not,omitempty"`

	// iops wr not in
	IopsWrNotIn []int64 `json:"iops_wr_not_in,omitempty"`

	// ip whitelist
	IPWhitelist *string `json:"ip_whitelist,omitempty"`

	// ip whitelist contains
	IPWhitelistContains *string `json:"ip_whitelist_contains,omitempty"`

	// ip whitelist ends with
	IPWhitelistEndsWith *string `json:"ip_whitelist_ends_with,omitempty"`

	// ip whitelist gt
	IPWhitelistGt *string `json:"ip_whitelist_gt,omitempty"`

	// ip whitelist gte
	IPWhitelistGte *string `json:"ip_whitelist_gte,omitempty"`

	// ip whitelist in
	IPWhitelistIn []string `json:"ip_whitelist_in,omitempty"`

	// ip whitelist lt
	IPWhitelistLt *string `json:"ip_whitelist_lt,omitempty"`

	// ip whitelist lte
	IPWhitelistLte *string `json:"ip_whitelist_lte,omitempty"`

	// ip whitelist not
	IPWhitelistNot *string `json:"ip_whitelist_not,omitempty"`

	// ip whitelist not contains
	IPWhitelistNotContains *string `json:"ip_whitelist_not_contains,omitempty"`

	// ip whitelist not ends with
	IPWhitelistNotEndsWith *string `json:"ip_whitelist_not_ends_with,omitempty"`

	// ip whitelist not in
	IPWhitelistNotIn []string `json:"ip_whitelist_not_in,omitempty"`

	// ip whitelist not starts with
	IPWhitelistNotStartsWith *string `json:"ip_whitelist_not_starts_with,omitempty"`

	// ip whitelist starts with
	IPWhitelistStartsWith *string `json:"ip_whitelist_starts_with,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// namespace groups every
	NamespaceGroupsEvery *NamespaceGroupWhereInput `json:"namespace_groups_every,omitempty"`

	// namespace groups none
	NamespaceGroupsNone *NamespaceGroupWhereInput `json:"namespace_groups_none,omitempty"`

	// namespace groups some
	NamespaceGroupsSome *NamespaceGroupWhereInput `json:"namespace_groups_some,omitempty"`

	// namespaces every
	NamespacesEvery *NvmfNamespaceWhereInput `json:"namespaces_every,omitempty"`

	// namespaces none
	NamespacesNone *NvmfNamespaceWhereInput `json:"namespaces_none,omitempty"`

	// namespaces some
	NamespacesSome *NvmfNamespaceWhereInput `json:"namespaces_some,omitempty"`

	// nqn name
	NqnName *string `json:"nqn_name,omitempty"`

	// nqn name contains
	NqnNameContains *string `json:"nqn_name_contains,omitempty"`

	// nqn name ends with
	NqnNameEndsWith *string `json:"nqn_name_ends_with,omitempty"`

	// nqn name gt
	NqnNameGt *string `json:"nqn_name_gt,omitempty"`

	// nqn name gte
	NqnNameGte *string `json:"nqn_name_gte,omitempty"`

	// nqn name in
	NqnNameIn []string `json:"nqn_name_in,omitempty"`

	// nqn name lt
	NqnNameLt *string `json:"nqn_name_lt,omitempty"`

	// nqn name lte
	NqnNameLte *string `json:"nqn_name_lte,omitempty"`

	// nqn name not
	NqnNameNot *string `json:"nqn_name_not,omitempty"`

	// nqn name not contains
	NqnNameNotContains *string `json:"nqn_name_not_contains,omitempty"`

	// nqn name not ends with
	NqnNameNotEndsWith *string `json:"nqn_name_not_ends_with,omitempty"`

	// nqn name not in
	NqnNameNotIn []string `json:"nqn_name_not_in,omitempty"`

	// nqn name not starts with
	NqnNameNotStartsWith *string `json:"nqn_name_not_starts_with,omitempty"`

	// nqn name starts with
	NqnNameStartsWith *string `json:"nqn_name_starts_with,omitempty"`

	// nqn whitelist
	NqnWhitelist *string `json:"nqn_whitelist,omitempty"`

	// nqn whitelist contains
	NqnWhitelistContains *string `json:"nqn_whitelist_contains,omitempty"`

	// nqn whitelist ends with
	NqnWhitelistEndsWith *string `json:"nqn_whitelist_ends_with,omitempty"`

	// nqn whitelist gt
	NqnWhitelistGt *string `json:"nqn_whitelist_gt,omitempty"`

	// nqn whitelist gte
	NqnWhitelistGte *string `json:"nqn_whitelist_gte,omitempty"`

	// nqn whitelist in
	NqnWhitelistIn []string `json:"nqn_whitelist_in,omitempty"`

	// nqn whitelist lt
	NqnWhitelistLt *string `json:"nqn_whitelist_lt,omitempty"`

	// nqn whitelist lte
	NqnWhitelistLte *string `json:"nqn_whitelist_lte,omitempty"`

	// nqn whitelist not
	NqnWhitelistNot *string `json:"nqn_whitelist_not,omitempty"`

	// nqn whitelist not contains
	NqnWhitelistNotContains *string `json:"nqn_whitelist_not_contains,omitempty"`

	// nqn whitelist not ends with
	NqnWhitelistNotEndsWith *string `json:"nqn_whitelist_not_ends_with,omitempty"`

	// nqn whitelist not in
	NqnWhitelistNotIn []string `json:"nqn_whitelist_not_in,omitempty"`

	// nqn whitelist not starts with
	NqnWhitelistNotStartsWith *string `json:"nqn_whitelist_not_starts_with,omitempty"`

	// nqn whitelist starts with
	NqnWhitelistStartsWith *string `json:"nqn_whitelist_starts_with,omitempty"`

	// policy
	Policy *NvmfSubsystemPolicyType `json:"policy,omitempty"`

	// policy in
	PolicyIn []NvmfSubsystemPolicyType `json:"policy_in,omitempty"`

	// policy not
	PolicyNot *NvmfSubsystemPolicyType `json:"policy_not,omitempty"`

	// policy not in
	PolicyNotIn []NvmfSubsystemPolicyType `json:"policy_not_in,omitempty"`

	// replica num
	ReplicaNum *int32 `json:"replica_num,omitempty"`

	// replica num gt
	ReplicaNumGt *int32 `json:"replica_num_gt,omitempty"`

	// replica num gte
	ReplicaNumGte *int32 `json:"replica_num_gte,omitempty"`

	// replica num in
	ReplicaNumIn []int32 `json:"replica_num_in,omitempty"`

	// replica num lt
	ReplicaNumLt *int32 `json:"replica_num_lt,omitempty"`

	// replica num lte
	ReplicaNumLte *int32 `json:"replica_num_lte,omitempty"`

	// replica num not
	ReplicaNumNot *int32 `json:"replica_num_not,omitempty"`

	// replica num not in
	ReplicaNumNotIn []int32 `json:"replica_num_not_in,omitempty"`

	// stripe num
	StripeNum *int32 `json:"stripe_num,omitempty"`

	// stripe num gt
	StripeNumGt *int32 `json:"stripe_num_gt,omitempty"`

	// stripe num gte
	StripeNumGte *int32 `json:"stripe_num_gte,omitempty"`

	// stripe num in
	StripeNumIn []int32 `json:"stripe_num_in,omitempty"`

	// stripe num lt
	StripeNumLt *int32 `json:"stripe_num_lt,omitempty"`

	// stripe num lte
	StripeNumLte *int32 `json:"stripe_num_lte,omitempty"`

	// stripe num not
	StripeNumNot *int32 `json:"stripe_num_not,omitempty"`

	// stripe num not in
	StripeNumNotIn []int32 `json:"stripe_num_not_in,omitempty"`

	// stripe size
	StripeSize *int64 `json:"stripe_size,omitempty"`

	// stripe size gt
	StripeSizeGt *int64 `json:"stripe_size_gt,omitempty"`

	// stripe size gte
	StripeSizeGte *int64 `json:"stripe_size_gte,omitempty"`

	// stripe size in
	StripeSizeIn []int64 `json:"stripe_size_in,omitempty"`

	// stripe size lt
	StripeSizeLt *int64 `json:"stripe_size_lt,omitempty"`

	// stripe size lte
	StripeSizeLte *int64 `json:"stripe_size_lte,omitempty"`

	// stripe size not
	StripeSizeNot *int64 `json:"stripe_size_not,omitempty"`

	// stripe size not in
	StripeSizeNotIn []int64 `json:"stripe_size_not_in,omitempty"`

	// thin provision
	ThinProvision *bool `json:"thin_provision,omitempty"`

	// thin provision not
	ThinProvisionNot *bool `json:"thin_provision_not,omitempty"`

	MarshalOpts *NvmfSubsystemWhereInputMarshalOpts `json:"-"`
}

type NvmfSubsystemWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Bps_Explicit_Null_When_Empty bool

	BpsGt_Explicit_Null_When_Empty bool

	BpsGte_Explicit_Null_When_Empty bool

	BpsIn_Explicit_Null_When_Empty bool

	BpsLt_Explicit_Null_When_Empty bool

	BpsLte_Explicit_Null_When_Empty bool

	BpsMax_Explicit_Null_When_Empty bool

	BpsMaxGt_Explicit_Null_When_Empty bool

	BpsMaxGte_Explicit_Null_When_Empty bool

	BpsMaxIn_Explicit_Null_When_Empty bool

	BpsMaxLength_Explicit_Null_When_Empty bool

	BpsMaxLengthGt_Explicit_Null_When_Empty bool

	BpsMaxLengthGte_Explicit_Null_When_Empty bool

	BpsMaxLengthIn_Explicit_Null_When_Empty bool

	BpsMaxLengthLt_Explicit_Null_When_Empty bool

	BpsMaxLengthLte_Explicit_Null_When_Empty bool

	BpsMaxLengthNot_Explicit_Null_When_Empty bool

	BpsMaxLengthNotIn_Explicit_Null_When_Empty bool

	BpsMaxLt_Explicit_Null_When_Empty bool

	BpsMaxLte_Explicit_Null_When_Empty bool

	BpsMaxNot_Explicit_Null_When_Empty bool

	BpsMaxNotIn_Explicit_Null_When_Empty bool

	BpsNot_Explicit_Null_When_Empty bool

	BpsNotIn_Explicit_Null_When_Empty bool

	BpsRd_Explicit_Null_When_Empty bool

	BpsRdGt_Explicit_Null_When_Empty bool

	BpsRdGte_Explicit_Null_When_Empty bool

	BpsRdIn_Explicit_Null_When_Empty bool

	BpsRdLt_Explicit_Null_When_Empty bool

	BpsRdLte_Explicit_Null_When_Empty bool

	BpsRdMax_Explicit_Null_When_Empty bool

	BpsRdMaxGt_Explicit_Null_When_Empty bool

	BpsRdMaxGte_Explicit_Null_When_Empty bool

	BpsRdMaxIn_Explicit_Null_When_Empty bool

	BpsRdMaxLength_Explicit_Null_When_Empty bool

	BpsRdMaxLengthGt_Explicit_Null_When_Empty bool

	BpsRdMaxLengthGte_Explicit_Null_When_Empty bool

	BpsRdMaxLengthIn_Explicit_Null_When_Empty bool

	BpsRdMaxLengthLt_Explicit_Null_When_Empty bool

	BpsRdMaxLengthLte_Explicit_Null_When_Empty bool

	BpsRdMaxLengthNot_Explicit_Null_When_Empty bool

	BpsRdMaxLengthNotIn_Explicit_Null_When_Empty bool

	BpsRdMaxLt_Explicit_Null_When_Empty bool

	BpsRdMaxLte_Explicit_Null_When_Empty bool

	BpsRdMaxNot_Explicit_Null_When_Empty bool

	BpsRdMaxNotIn_Explicit_Null_When_Empty bool

	BpsRdNot_Explicit_Null_When_Empty bool

	BpsRdNotIn_Explicit_Null_When_Empty bool

	BpsWr_Explicit_Null_When_Empty bool

	BpsWrGt_Explicit_Null_When_Empty bool

	BpsWrGte_Explicit_Null_When_Empty bool

	BpsWrIn_Explicit_Null_When_Empty bool

	BpsWrLt_Explicit_Null_When_Empty bool

	BpsWrLte_Explicit_Null_When_Empty bool

	BpsWrMax_Explicit_Null_When_Empty bool

	BpsWrMaxGt_Explicit_Null_When_Empty bool

	BpsWrMaxGte_Explicit_Null_When_Empty bool

	BpsWrMaxIn_Explicit_Null_When_Empty bool

	BpsWrMaxLength_Explicit_Null_When_Empty bool

	BpsWrMaxLengthGt_Explicit_Null_When_Empty bool

	BpsWrMaxLengthGte_Explicit_Null_When_Empty bool

	BpsWrMaxLengthIn_Explicit_Null_When_Empty bool

	BpsWrMaxLengthLt_Explicit_Null_When_Empty bool

	BpsWrMaxLengthLte_Explicit_Null_When_Empty bool

	BpsWrMaxLengthNot_Explicit_Null_When_Empty bool

	BpsWrMaxLengthNotIn_Explicit_Null_When_Empty bool

	BpsWrMaxLt_Explicit_Null_When_Empty bool

	BpsWrMaxLte_Explicit_Null_When_Empty bool

	BpsWrMaxNot_Explicit_Null_When_Empty bool

	BpsWrMaxNotIn_Explicit_Null_When_Empty bool

	BpsWrNot_Explicit_Null_When_Empty bool

	BpsWrNotIn_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ExternalUse_Explicit_Null_When_Empty bool

	ExternalUseNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Internal_Explicit_Null_When_Empty bool

	InternalNot_Explicit_Null_When_Empty bool

	IoSize_Explicit_Null_When_Empty bool

	IoSizeGt_Explicit_Null_When_Empty bool

	IoSizeGte_Explicit_Null_When_Empty bool

	IoSizeIn_Explicit_Null_When_Empty bool

	IoSizeLt_Explicit_Null_When_Empty bool

	IoSizeLte_Explicit_Null_When_Empty bool

	IoSizeNot_Explicit_Null_When_Empty bool

	IoSizeNotIn_Explicit_Null_When_Empty bool

	Iops_Explicit_Null_When_Empty bool

	IopsGt_Explicit_Null_When_Empty bool

	IopsGte_Explicit_Null_When_Empty bool

	IopsIn_Explicit_Null_When_Empty bool

	IopsLt_Explicit_Null_When_Empty bool

	IopsLte_Explicit_Null_When_Empty bool

	IopsMax_Explicit_Null_When_Empty bool

	IopsMaxGt_Explicit_Null_When_Empty bool

	IopsMaxGte_Explicit_Null_When_Empty bool

	IopsMaxIn_Explicit_Null_When_Empty bool

	IopsMaxLength_Explicit_Null_When_Empty bool

	IopsMaxLengthGt_Explicit_Null_When_Empty bool

	IopsMaxLengthGte_Explicit_Null_When_Empty bool

	IopsMaxLengthIn_Explicit_Null_When_Empty bool

	IopsMaxLengthLt_Explicit_Null_When_Empty bool

	IopsMaxLengthLte_Explicit_Null_When_Empty bool

	IopsMaxLengthNot_Explicit_Null_When_Empty bool

	IopsMaxLengthNotIn_Explicit_Null_When_Empty bool

	IopsMaxLt_Explicit_Null_When_Empty bool

	IopsMaxLte_Explicit_Null_When_Empty bool

	IopsMaxNot_Explicit_Null_When_Empty bool

	IopsMaxNotIn_Explicit_Null_When_Empty bool

	IopsNot_Explicit_Null_When_Empty bool

	IopsNotIn_Explicit_Null_When_Empty bool

	IopsRd_Explicit_Null_When_Empty bool

	IopsRdGt_Explicit_Null_When_Empty bool

	IopsRdGte_Explicit_Null_When_Empty bool

	IopsRdIn_Explicit_Null_When_Empty bool

	IopsRdLt_Explicit_Null_When_Empty bool

	IopsRdLte_Explicit_Null_When_Empty bool

	IopsRdMax_Explicit_Null_When_Empty bool

	IopsRdMaxGt_Explicit_Null_When_Empty bool

	IopsRdMaxGte_Explicit_Null_When_Empty bool

	IopsRdMaxIn_Explicit_Null_When_Empty bool

	IopsRdMaxLength_Explicit_Null_When_Empty bool

	IopsRdMaxLengthGt_Explicit_Null_When_Empty bool

	IopsRdMaxLengthGte_Explicit_Null_When_Empty bool

	IopsRdMaxLengthIn_Explicit_Null_When_Empty bool

	IopsRdMaxLengthLt_Explicit_Null_When_Empty bool

	IopsRdMaxLengthLte_Explicit_Null_When_Empty bool

	IopsRdMaxLengthNot_Explicit_Null_When_Empty bool

	IopsRdMaxLengthNotIn_Explicit_Null_When_Empty bool

	IopsRdMaxLt_Explicit_Null_When_Empty bool

	IopsRdMaxLte_Explicit_Null_When_Empty bool

	IopsRdMaxNot_Explicit_Null_When_Empty bool

	IopsRdMaxNotIn_Explicit_Null_When_Empty bool

	IopsRdNot_Explicit_Null_When_Empty bool

	IopsRdNotIn_Explicit_Null_When_Empty bool

	IopsWr_Explicit_Null_When_Empty bool

	IopsWrGt_Explicit_Null_When_Empty bool

	IopsWrGte_Explicit_Null_When_Empty bool

	IopsWrIn_Explicit_Null_When_Empty bool

	IopsWrLt_Explicit_Null_When_Empty bool

	IopsWrLte_Explicit_Null_When_Empty bool

	IopsWrMax_Explicit_Null_When_Empty bool

	IopsWrMaxGt_Explicit_Null_When_Empty bool

	IopsWrMaxGte_Explicit_Null_When_Empty bool

	IopsWrMaxIn_Explicit_Null_When_Empty bool

	IopsWrMaxLength_Explicit_Null_When_Empty bool

	IopsWrMaxLengthGt_Explicit_Null_When_Empty bool

	IopsWrMaxLengthGte_Explicit_Null_When_Empty bool

	IopsWrMaxLengthIn_Explicit_Null_When_Empty bool

	IopsWrMaxLengthLt_Explicit_Null_When_Empty bool

	IopsWrMaxLengthLte_Explicit_Null_When_Empty bool

	IopsWrMaxLengthNot_Explicit_Null_When_Empty bool

	IopsWrMaxLengthNotIn_Explicit_Null_When_Empty bool

	IopsWrMaxLt_Explicit_Null_When_Empty bool

	IopsWrMaxLte_Explicit_Null_When_Empty bool

	IopsWrMaxNot_Explicit_Null_When_Empty bool

	IopsWrMaxNotIn_Explicit_Null_When_Empty bool

	IopsWrNot_Explicit_Null_When_Empty bool

	IopsWrNotIn_Explicit_Null_When_Empty bool

	IPWhitelist_Explicit_Null_When_Empty bool

	IPWhitelistContains_Explicit_Null_When_Empty bool

	IPWhitelistEndsWith_Explicit_Null_When_Empty bool

	IPWhitelistGt_Explicit_Null_When_Empty bool

	IPWhitelistGte_Explicit_Null_When_Empty bool

	IPWhitelistIn_Explicit_Null_When_Empty bool

	IPWhitelistLt_Explicit_Null_When_Empty bool

	IPWhitelistLte_Explicit_Null_When_Empty bool

	IPWhitelistNot_Explicit_Null_When_Empty bool

	IPWhitelistNotContains_Explicit_Null_When_Empty bool

	IPWhitelistNotEndsWith_Explicit_Null_When_Empty bool

	IPWhitelistNotIn_Explicit_Null_When_Empty bool

	IPWhitelistNotStartsWith_Explicit_Null_When_Empty bool

	IPWhitelistStartsWith_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NamespaceGroupsEvery_Explicit_Null_When_Empty bool

	NamespaceGroupsNone_Explicit_Null_When_Empty bool

	NamespaceGroupsSome_Explicit_Null_When_Empty bool

	NamespacesEvery_Explicit_Null_When_Empty bool

	NamespacesNone_Explicit_Null_When_Empty bool

	NamespacesSome_Explicit_Null_When_Empty bool

	NqnName_Explicit_Null_When_Empty bool

	NqnNameContains_Explicit_Null_When_Empty bool

	NqnNameEndsWith_Explicit_Null_When_Empty bool

	NqnNameGt_Explicit_Null_When_Empty bool

	NqnNameGte_Explicit_Null_When_Empty bool

	NqnNameIn_Explicit_Null_When_Empty bool

	NqnNameLt_Explicit_Null_When_Empty bool

	NqnNameLte_Explicit_Null_When_Empty bool

	NqnNameNot_Explicit_Null_When_Empty bool

	NqnNameNotContains_Explicit_Null_When_Empty bool

	NqnNameNotEndsWith_Explicit_Null_When_Empty bool

	NqnNameNotIn_Explicit_Null_When_Empty bool

	NqnNameNotStartsWith_Explicit_Null_When_Empty bool

	NqnNameStartsWith_Explicit_Null_When_Empty bool

	NqnWhitelist_Explicit_Null_When_Empty bool

	NqnWhitelistContains_Explicit_Null_When_Empty bool

	NqnWhitelistEndsWith_Explicit_Null_When_Empty bool

	NqnWhitelistGt_Explicit_Null_When_Empty bool

	NqnWhitelistGte_Explicit_Null_When_Empty bool

	NqnWhitelistIn_Explicit_Null_When_Empty bool

	NqnWhitelistLt_Explicit_Null_When_Empty bool

	NqnWhitelistLte_Explicit_Null_When_Empty bool

	NqnWhitelistNot_Explicit_Null_When_Empty bool

	NqnWhitelistNotContains_Explicit_Null_When_Empty bool

	NqnWhitelistNotEndsWith_Explicit_Null_When_Empty bool

	NqnWhitelistNotIn_Explicit_Null_When_Empty bool

	NqnWhitelistNotStartsWith_Explicit_Null_When_Empty bool

	NqnWhitelistStartsWith_Explicit_Null_When_Empty bool

	Policy_Explicit_Null_When_Empty bool

	PolicyIn_Explicit_Null_When_Empty bool

	PolicyNot_Explicit_Null_When_Empty bool

	PolicyNotIn_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	ReplicaNumGt_Explicit_Null_When_Empty bool

	ReplicaNumGte_Explicit_Null_When_Empty bool

	ReplicaNumIn_Explicit_Null_When_Empty bool

	ReplicaNumLt_Explicit_Null_When_Empty bool

	ReplicaNumLte_Explicit_Null_When_Empty bool

	ReplicaNumNot_Explicit_Null_When_Empty bool

	ReplicaNumNotIn_Explicit_Null_When_Empty bool

	StripeNum_Explicit_Null_When_Empty bool

	StripeNumGt_Explicit_Null_When_Empty bool

	StripeNumGte_Explicit_Null_When_Empty bool

	StripeNumIn_Explicit_Null_When_Empty bool

	StripeNumLt_Explicit_Null_When_Empty bool

	StripeNumLte_Explicit_Null_When_Empty bool

	StripeNumNot_Explicit_Null_When_Empty bool

	StripeNumNotIn_Explicit_Null_When_Empty bool

	StripeSize_Explicit_Null_When_Empty bool

	StripeSizeGt_Explicit_Null_When_Empty bool

	StripeSizeGte_Explicit_Null_When_Empty bool

	StripeSizeIn_Explicit_Null_When_Empty bool

	StripeSizeLt_Explicit_Null_When_Empty bool

	StripeSizeLte_Explicit_Null_When_Empty bool

	StripeSizeNot_Explicit_Null_When_Empty bool

	StripeSizeNotIn_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool

	ThinProvisionNot_Explicit_Null_When_Empty bool
}

func (m NvmfSubsystemWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps
	if m.Bps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":")
		bytes, err := swag.WriteJSON(m.Bps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":null")
		first = false
	}

	// handle nullable field bps_gt
	if m.BpsGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_gt\":")
		bytes, err := swag.WriteJSON(m.BpsGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_gt\":null")
		first = false
	}

	// handle nullable field bps_gte
	if m.BpsGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_gte\":")
		bytes, err := swag.WriteJSON(m.BpsGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_gte\":null")
		first = false
	}

	// handle non nullable field bps_in with omitempty
	if !swag.IsZero(m.BpsIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_in\":")
		bytes, err := swag.WriteJSON(m.BpsIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_lt
	if m.BpsLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_lt\":")
		bytes, err := swag.WriteJSON(m.BpsLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_lt\":null")
		first = false
	}

	// handle nullable field bps_lte
	if m.BpsLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_lte\":")
		bytes, err := swag.WriteJSON(m.BpsLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_lte\":null")
		first = false
	}

	// handle nullable field bps_max
	if m.BpsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":")
		bytes, err := swag.WriteJSON(m.BpsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":null")
		first = false
	}

	// handle nullable field bps_max_gt
	if m.BpsMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_gt\":")
		bytes, err := swag.WriteJSON(m.BpsMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_gt\":null")
		first = false
	}

	// handle nullable field bps_max_gte
	if m.BpsMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_gte\":")
		bytes, err := swag.WriteJSON(m.BpsMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_gte\":null")
		first = false
	}

	// handle non nullable field bps_max_in with omitempty
	if !swag.IsZero(m.BpsMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_in\":")
		bytes, err := swag.WriteJSON(m.BpsMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_max_length
	if m.BpsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":null")
		first = false
	}

	// handle nullable field bps_max_length_gt
	if m.BpsMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_gt\":null")
		first = false
	}

	// handle nullable field bps_max_length_gte
	if m.BpsMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_gte\":null")
		first = false
	}

	// handle non nullable field bps_max_length_in with omitempty
	if !swag.IsZero(m.BpsMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_in\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_max_length_lt
	if m.BpsMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_lt\":null")
		first = false
	}

	// handle nullable field bps_max_length_lte
	if m.BpsMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_lte\":null")
		first = false
	}

	// handle nullable field bps_max_length_not
	if m.BpsMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_not\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_not\":null")
		first = false
	}

	// handle non nullable field bps_max_length_not_in with omitempty
	if !swag.IsZero(m.BpsMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_max_lt
	if m.BpsMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_lt\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_lt\":null")
		first = false
	}

	// handle nullable field bps_max_lte
	if m.BpsMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_lte\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_lte\":null")
		first = false
	}

	// handle nullable field bps_max_not
	if m.BpsMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_not\":")
		bytes, err := swag.WriteJSON(m.BpsMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_not\":null")
		first = false
	}

	// handle non nullable field bps_max_not_in with omitempty
	if !swag.IsZero(m.BpsMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_not
	if m.BpsNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_not\":")
		bytes, err := swag.WriteJSON(m.BpsNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_not\":null")
		first = false
	}

	// handle non nullable field bps_not_in with omitempty
	if !swag.IsZero(m.BpsNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd
	if m.BpsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":")
		bytes, err := swag.WriteJSON(m.BpsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":null")
		first = false
	}

	// handle nullable field bps_rd_gt
	if m.BpsRdGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_gt\":")
		bytes, err := swag.WriteJSON(m.BpsRdGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_gt\":null")
		first = false
	}

	// handle nullable field bps_rd_gte
	if m.BpsRdGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_gte\":")
		bytes, err := swag.WriteJSON(m.BpsRdGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_gte\":null")
		first = false
	}

	// handle non nullable field bps_rd_in with omitempty
	if !swag.IsZero(m.BpsRdIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd_lt
	if m.BpsRdLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_lt\":")
		bytes, err := swag.WriteJSON(m.BpsRdLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_lt\":null")
		first = false
	}

	// handle nullable field bps_rd_lte
	if m.BpsRdLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_lte\":")
		bytes, err := swag.WriteJSON(m.BpsRdLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_lte\":null")
		first = false
	}

	// handle nullable field bps_rd_max
	if m.BpsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":")
		bytes, err := swag.WriteJSON(m.BpsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":null")
		first = false
	}

	// handle nullable field bps_rd_max_gt
	if m.BpsRdMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_gt\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_gt\":null")
		first = false
	}

	// handle nullable field bps_rd_max_gte
	if m.BpsRdMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_gte\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_gte\":null")
		first = false
	}

	// handle non nullable field bps_rd_max_in with omitempty
	if !swag.IsZero(m.BpsRdMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd_max_length
	if m.BpsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length_gt
	if m.BpsRdMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_gt\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length_gte
	if m.BpsRdMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_gte\":null")
		first = false
	}

	// handle non nullable field bps_rd_max_length_in with omitempty
	if !swag.IsZero(m.BpsRdMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd_max_length_lt
	if m.BpsRdMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_lt\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length_lte
	if m.BpsRdMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_lte\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length_not
	if m.BpsRdMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_not\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_not\":null")
		first = false
	}

	// handle non nullable field bps_rd_max_length_not_in with omitempty
	if !swag.IsZero(m.BpsRdMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd_max_lt
	if m.BpsRdMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_lt\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_lt\":null")
		first = false
	}

	// handle nullable field bps_rd_max_lte
	if m.BpsRdMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_lte\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_lte\":null")
		first = false
	}

	// handle nullable field bps_rd_max_not
	if m.BpsRdMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_not\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_not\":null")
		first = false
	}

	// handle non nullable field bps_rd_max_not_in with omitempty
	if !swag.IsZero(m.BpsRdMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_rd_not
	if m.BpsRdNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_not\":")
		bytes, err := swag.WriteJSON(m.BpsRdNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_not\":null")
		first = false
	}

	// handle non nullable field bps_rd_not_in with omitempty
	if !swag.IsZero(m.BpsRdNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsRdNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr
	if m.BpsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":")
		bytes, err := swag.WriteJSON(m.BpsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":null")
		first = false
	}

	// handle nullable field bps_wr_gt
	if m.BpsWrGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_gt\":")
		bytes, err := swag.WriteJSON(m.BpsWrGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_gt\":null")
		first = false
	}

	// handle nullable field bps_wr_gte
	if m.BpsWrGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_gte\":")
		bytes, err := swag.WriteJSON(m.BpsWrGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_gte\":null")
		first = false
	}

	// handle non nullable field bps_wr_in with omitempty
	if !swag.IsZero(m.BpsWrIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr_lt
	if m.BpsWrLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_lt\":")
		bytes, err := swag.WriteJSON(m.BpsWrLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_lt\":null")
		first = false
	}

	// handle nullable field bps_wr_lte
	if m.BpsWrLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_lte\":")
		bytes, err := swag.WriteJSON(m.BpsWrLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_lte\":null")
		first = false
	}

	// handle nullable field bps_wr_max
	if m.BpsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":")
		bytes, err := swag.WriteJSON(m.BpsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":null")
		first = false
	}

	// handle nullable field bps_wr_max_gt
	if m.BpsWrMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_gt\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_gt\":null")
		first = false
	}

	// handle nullable field bps_wr_max_gte
	if m.BpsWrMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_gte\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_gte\":null")
		first = false
	}

	// handle non nullable field bps_wr_max_in with omitempty
	if !swag.IsZero(m.BpsWrMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr_max_length
	if m.BpsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length_gt
	if m.BpsWrMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_gt\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length_gte
	if m.BpsWrMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_gte\":null")
		first = false
	}

	// handle non nullable field bps_wr_max_length_in with omitempty
	if !swag.IsZero(m.BpsWrMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr_max_length_lt
	if m.BpsWrMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_lt\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length_lte
	if m.BpsWrMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_lte\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length_not
	if m.BpsWrMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_not\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_not\":null")
		first = false
	}

	// handle non nullable field bps_wr_max_length_not_in with omitempty
	if !swag.IsZero(m.BpsWrMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr_max_lt
	if m.BpsWrMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_lt\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_lt\":null")
		first = false
	}

	// handle nullable field bps_wr_max_lte
	if m.BpsWrMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_lte\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_lte\":null")
		first = false
	}

	// handle nullable field bps_wr_max_not
	if m.BpsWrMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_not\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_not\":null")
		first = false
	}

	// handle non nullable field bps_wr_max_not_in with omitempty
	if !swag.IsZero(m.BpsWrMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field bps_wr_not
	if m.BpsWrNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_not\":")
		bytes, err := swag.WriteJSON(m.BpsWrNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_not\":null")
		first = false
	}

	// handle non nullable field bps_wr_not_in with omitempty
	if !swag.IsZero(m.BpsWrNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_not_in\":")
		bytes, err := swag.WriteJSON(m.BpsWrNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_use
	if m.ExternalUse != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use\":")
		bytes, err := swag.WriteJSON(m.ExternalUse)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalUse_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use\":null")
		first = false
	}

	// handle nullable field external_use_not
	if m.ExternalUseNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use_not\":")
		bytes, err := swag.WriteJSON(m.ExternalUseNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalUseNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_use_not\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field internal
	if m.Internal != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":")
		bytes, err := swag.WriteJSON(m.Internal)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Internal_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal\":null")
		first = false
	}

	// handle nullable field internal_not
	if m.InternalNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal_not\":")
		bytes, err := swag.WriteJSON(m.InternalNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.InternalNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"internal_not\":null")
		first = false
	}

	// handle nullable field io_size
	if m.IoSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":")
		bytes, err := swag.WriteJSON(m.IoSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":null")
		first = false
	}

	// handle nullable field io_size_gt
	if m.IoSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_gt\":")
		bytes, err := swag.WriteJSON(m.IoSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_gt\":null")
		first = false
	}

	// handle nullable field io_size_gte
	if m.IoSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_gte\":")
		bytes, err := swag.WriteJSON(m.IoSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_gte\":null")
		first = false
	}

	// handle non nullable field io_size_in with omitempty
	if !swag.IsZero(m.IoSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_in\":")
		bytes, err := swag.WriteJSON(m.IoSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field io_size_lt
	if m.IoSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_lt\":")
		bytes, err := swag.WriteJSON(m.IoSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_lt\":null")
		first = false
	}

	// handle nullable field io_size_lte
	if m.IoSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_lte\":")
		bytes, err := swag.WriteJSON(m.IoSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_lte\":null")
		first = false
	}

	// handle nullable field io_size_not
	if m.IoSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_not\":")
		bytes, err := swag.WriteJSON(m.IoSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_not\":null")
		first = false
	}

	// handle non nullable field io_size_not_in with omitempty
	if !swag.IsZero(m.IoSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size_not_in\":")
		bytes, err := swag.WriteJSON(m.IoSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops
	if m.Iops != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":")
		bytes, err := swag.WriteJSON(m.Iops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Iops_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":null")
		first = false
	}

	// handle nullable field iops_gt
	if m.IopsGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_gt\":")
		bytes, err := swag.WriteJSON(m.IopsGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_gt\":null")
		first = false
	}

	// handle nullable field iops_gte
	if m.IopsGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_gte\":")
		bytes, err := swag.WriteJSON(m.IopsGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_gte\":null")
		first = false
	}

	// handle non nullable field iops_in with omitempty
	if !swag.IsZero(m.IopsIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_in\":")
		bytes, err := swag.WriteJSON(m.IopsIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_lt
	if m.IopsLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_lt\":")
		bytes, err := swag.WriteJSON(m.IopsLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_lt\":null")
		first = false
	}

	// handle nullable field iops_lte
	if m.IopsLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_lte\":")
		bytes, err := swag.WriteJSON(m.IopsLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_lte\":null")
		first = false
	}

	// handle nullable field iops_max
	if m.IopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":")
		bytes, err := swag.WriteJSON(m.IopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":null")
		first = false
	}

	// handle nullable field iops_max_gt
	if m.IopsMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_gt\":")
		bytes, err := swag.WriteJSON(m.IopsMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_gt\":null")
		first = false
	}

	// handle nullable field iops_max_gte
	if m.IopsMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_gte\":")
		bytes, err := swag.WriteJSON(m.IopsMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_gte\":null")
		first = false
	}

	// handle non nullable field iops_max_in with omitempty
	if !swag.IsZero(m.IopsMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_in\":")
		bytes, err := swag.WriteJSON(m.IopsMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_max_length
	if m.IopsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":null")
		first = false
	}

	// handle nullable field iops_max_length_gt
	if m.IopsMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_gt\":null")
		first = false
	}

	// handle nullable field iops_max_length_gte
	if m.IopsMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_gte\":null")
		first = false
	}

	// handle non nullable field iops_max_length_in with omitempty
	if !swag.IsZero(m.IopsMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_in\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_max_length_lt
	if m.IopsMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_lt\":null")
		first = false
	}

	// handle nullable field iops_max_length_lte
	if m.IopsMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_lte\":null")
		first = false
	}

	// handle nullable field iops_max_length_not
	if m.IopsMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_not\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_not\":null")
		first = false
	}

	// handle non nullable field iops_max_length_not_in with omitempty
	if !swag.IsZero(m.IopsMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_max_lt
	if m.IopsMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_lt\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_lt\":null")
		first = false
	}

	// handle nullable field iops_max_lte
	if m.IopsMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_lte\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_lte\":null")
		first = false
	}

	// handle nullable field iops_max_not
	if m.IopsMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_not\":")
		bytes, err := swag.WriteJSON(m.IopsMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_not\":null")
		first = false
	}

	// handle non nullable field iops_max_not_in with omitempty
	if !swag.IsZero(m.IopsMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_not
	if m.IopsNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_not\":")
		bytes, err := swag.WriteJSON(m.IopsNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_not\":null")
		first = false
	}

	// handle non nullable field iops_not_in with omitempty
	if !swag.IsZero(m.IopsNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd
	if m.IopsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":")
		bytes, err := swag.WriteJSON(m.IopsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":null")
		first = false
	}

	// handle nullable field iops_rd_gt
	if m.IopsRdGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_gt\":")
		bytes, err := swag.WriteJSON(m.IopsRdGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_gt\":null")
		first = false
	}

	// handle nullable field iops_rd_gte
	if m.IopsRdGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_gte\":")
		bytes, err := swag.WriteJSON(m.IopsRdGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_gte\":null")
		first = false
	}

	// handle non nullable field iops_rd_in with omitempty
	if !swag.IsZero(m.IopsRdIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd_lt
	if m.IopsRdLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_lt\":")
		bytes, err := swag.WriteJSON(m.IopsRdLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_lt\":null")
		first = false
	}

	// handle nullable field iops_rd_lte
	if m.IopsRdLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_lte\":")
		bytes, err := swag.WriteJSON(m.IopsRdLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_lte\":null")
		first = false
	}

	// handle nullable field iops_rd_max
	if m.IopsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":")
		bytes, err := swag.WriteJSON(m.IopsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":null")
		first = false
	}

	// handle nullable field iops_rd_max_gt
	if m.IopsRdMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_gt\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_gt\":null")
		first = false
	}

	// handle nullable field iops_rd_max_gte
	if m.IopsRdMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_gte\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_gte\":null")
		first = false
	}

	// handle non nullable field iops_rd_max_in with omitempty
	if !swag.IsZero(m.IopsRdMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd_max_length
	if m.IopsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length_gt
	if m.IopsRdMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_gt\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length_gte
	if m.IopsRdMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_gte\":null")
		first = false
	}

	// handle non nullable field iops_rd_max_length_in with omitempty
	if !swag.IsZero(m.IopsRdMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd_max_length_lt
	if m.IopsRdMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_lt\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length_lte
	if m.IopsRdMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_lte\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length_not
	if m.IopsRdMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_not\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_not\":null")
		first = false
	}

	// handle non nullable field iops_rd_max_length_not_in with omitempty
	if !swag.IsZero(m.IopsRdMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd_max_lt
	if m.IopsRdMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_lt\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_lt\":null")
		first = false
	}

	// handle nullable field iops_rd_max_lte
	if m.IopsRdMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_lte\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_lte\":null")
		first = false
	}

	// handle nullable field iops_rd_max_not
	if m.IopsRdMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_not\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_not\":null")
		first = false
	}

	// handle non nullable field iops_rd_max_not_in with omitempty
	if !swag.IsZero(m.IopsRdMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_rd_not
	if m.IopsRdNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_not\":")
		bytes, err := swag.WriteJSON(m.IopsRdNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_not\":null")
		first = false
	}

	// handle non nullable field iops_rd_not_in with omitempty
	if !swag.IsZero(m.IopsRdNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsRdNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr
	if m.IopsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":")
		bytes, err := swag.WriteJSON(m.IopsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":null")
		first = false
	}

	// handle nullable field iops_wr_gt
	if m.IopsWrGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_gt\":")
		bytes, err := swag.WriteJSON(m.IopsWrGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_gt\":null")
		first = false
	}

	// handle nullable field iops_wr_gte
	if m.IopsWrGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_gte\":")
		bytes, err := swag.WriteJSON(m.IopsWrGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_gte\":null")
		first = false
	}

	// handle non nullable field iops_wr_in with omitempty
	if !swag.IsZero(m.IopsWrIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr_lt
	if m.IopsWrLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_lt\":")
		bytes, err := swag.WriteJSON(m.IopsWrLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_lt\":null")
		first = false
	}

	// handle nullable field iops_wr_lte
	if m.IopsWrLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_lte\":")
		bytes, err := swag.WriteJSON(m.IopsWrLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_lte\":null")
		first = false
	}

	// handle nullable field iops_wr_max
	if m.IopsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":")
		bytes, err := swag.WriteJSON(m.IopsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":null")
		first = false
	}

	// handle nullable field iops_wr_max_gt
	if m.IopsWrMaxGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_gt\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_gt\":null")
		first = false
	}

	// handle nullable field iops_wr_max_gte
	if m.IopsWrMaxGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_gte\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_gte\":null")
		first = false
	}

	// handle non nullable field iops_wr_max_in with omitempty
	if !swag.IsZero(m.IopsWrMaxIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr_max_length
	if m.IopsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length_gt
	if m.IopsWrMaxLengthGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_gt\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLengthGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_gt\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length_gte
	if m.IopsWrMaxLengthGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_gte\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLengthGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_gte\":null")
		first = false
	}

	// handle non nullable field iops_wr_max_length_in with omitempty
	if !swag.IsZero(m.IopsWrMaxLengthIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr_max_length_lt
	if m.IopsWrMaxLengthLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_lt\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLengthLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_lt\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length_lte
	if m.IopsWrMaxLengthLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_lte\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLengthLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_lte\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length_not
	if m.IopsWrMaxLengthNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_not\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLengthNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_not\":null")
		first = false
	}

	// handle non nullable field iops_wr_max_length_not_in with omitempty
	if !swag.IsZero(m.IopsWrMaxLengthNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLengthNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr_max_lt
	if m.IopsWrMaxLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_lt\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_lt\":null")
		first = false
	}

	// handle nullable field iops_wr_max_lte
	if m.IopsWrMaxLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_lte\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_lte\":null")
		first = false
	}

	// handle nullable field iops_wr_max_not
	if m.IopsWrMaxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_not\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_not\":null")
		first = false
	}

	// handle non nullable field iops_wr_max_not_in with omitempty
	if !swag.IsZero(m.IopsWrMaxNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iops_wr_not
	if m.IopsWrNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_not\":")
		bytes, err := swag.WriteJSON(m.IopsWrNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_not\":null")
		first = false
	}

	// handle non nullable field iops_wr_not_in with omitempty
	if !swag.IsZero(m.IopsWrNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_not_in\":")
		bytes, err := swag.WriteJSON(m.IopsWrNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_whitelist
	if m.IPWhitelist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist\":")
		bytes, err := swag.WriteJSON(m.IPWhitelist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist\":null")
		first = false
	}

	// handle nullable field ip_whitelist_contains
	if m.IPWhitelistContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_contains\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_contains\":null")
		first = false
	}

	// handle nullable field ip_whitelist_ends_with
	if m.IPWhitelistEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_ends_with\":null")
		first = false
	}

	// handle nullable field ip_whitelist_gt
	if m.IPWhitelistGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_gt\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_gt\":null")
		first = false
	}

	// handle nullable field ip_whitelist_gte
	if m.IPWhitelistGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_gte\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_gte\":null")
		first = false
	}

	// handle non nullable field ip_whitelist_in with omitempty
	if !swag.IsZero(m.IPWhitelistIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_in\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_whitelist_lt
	if m.IPWhitelistLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_lt\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_lt\":null")
		first = false
	}

	// handle nullable field ip_whitelist_lte
	if m.IPWhitelistLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_lte\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_lte\":null")
		first = false
	}

	// handle nullable field ip_whitelist_not
	if m.IPWhitelistNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not\":null")
		first = false
	}

	// handle nullable field ip_whitelist_not_contains
	if m.IPWhitelistNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_contains\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_contains\":null")
		first = false
	}

	// handle nullable field ip_whitelist_not_ends_with
	if m.IPWhitelistNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_ends_with\":null")
		first = false
	}

	// handle non nullable field ip_whitelist_not_in with omitempty
	if !swag.IsZero(m.IPWhitelistNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_in\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ip_whitelist_not_starts_with
	if m.IPWhitelistNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_not_starts_with\":null")
		first = false
	}

	// handle nullable field ip_whitelist_starts_with
	if m.IPWhitelistStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_starts_with\":")
		bytes, err := swag.WriteJSON(m.IPWhitelistStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPWhitelistStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_whitelist_starts_with\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field namespace_groups_every
	if m.NamespaceGroupsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_every\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroupsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroupsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_every\":null")
		first = false
	}

	// handle nullable field namespace_groups_none
	if m.NamespaceGroupsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_none\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroupsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroupsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_none\":null")
		first = false
	}

	// handle nullable field namespace_groups_some
	if m.NamespaceGroupsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_some\":")
		bytes, err := swag.WriteJSON(m.NamespaceGroupsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespaceGroupsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespace_groups_some\":null")
		first = false
	}

	// handle nullable field namespaces_every
	if m.NamespacesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_every\":")
		bytes, err := swag.WriteJSON(m.NamespacesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_every\":null")
		first = false
	}

	// handle nullable field namespaces_none
	if m.NamespacesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_none\":")
		bytes, err := swag.WriteJSON(m.NamespacesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_none\":null")
		first = false
	}

	// handle nullable field namespaces_some
	if m.NamespacesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_some\":")
		bytes, err := swag.WriteJSON(m.NamespacesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_some\":null")
		first = false
	}

	// handle nullable field nqn_name
	if m.NqnName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name\":")
		bytes, err := swag.WriteJSON(m.NqnName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name\":null")
		first = false
	}

	// handle nullable field nqn_name_contains
	if m.NqnNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_contains\":")
		bytes, err := swag.WriteJSON(m.NqnNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_contains\":null")
		first = false
	}

	// handle nullable field nqn_name_ends_with
	if m.NqnNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NqnNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_ends_with\":null")
		first = false
	}

	// handle nullable field nqn_name_gt
	if m.NqnNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_gt\":")
		bytes, err := swag.WriteJSON(m.NqnNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_gt\":null")
		first = false
	}

	// handle nullable field nqn_name_gte
	if m.NqnNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_gte\":")
		bytes, err := swag.WriteJSON(m.NqnNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_gte\":null")
		first = false
	}

	// handle non nullable field nqn_name_in with omitempty
	if !swag.IsZero(m.NqnNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_in\":")
		bytes, err := swag.WriteJSON(m.NqnNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nqn_name_lt
	if m.NqnNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_lt\":")
		bytes, err := swag.WriteJSON(m.NqnNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_lt\":null")
		first = false
	}

	// handle nullable field nqn_name_lte
	if m.NqnNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_lte\":")
		bytes, err := swag.WriteJSON(m.NqnNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_lte\":null")
		first = false
	}

	// handle nullable field nqn_name_not
	if m.NqnNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not\":")
		bytes, err := swag.WriteJSON(m.NqnNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not\":null")
		first = false
	}

	// handle nullable field nqn_name_not_contains
	if m.NqnNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NqnNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_contains\":null")
		first = false
	}

	// handle nullable field nqn_name_not_ends_with
	if m.NqnNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NqnNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field nqn_name_not_in with omitempty
	if !swag.IsZero(m.NqnNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_in\":")
		bytes, err := swag.WriteJSON(m.NqnNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nqn_name_not_starts_with
	if m.NqnNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NqnNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field nqn_name_starts_with
	if m.NqnNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NqnNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_name_starts_with\":null")
		first = false
	}

	// handle nullable field nqn_whitelist
	if m.NqnWhitelist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_contains
	if m.NqnWhitelistContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_contains\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_contains\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_ends_with
	if m.NqnWhitelistEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_ends_with\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_ends_with\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_gt
	if m.NqnWhitelistGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_gt\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_gt\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_gte
	if m.NqnWhitelistGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_gte\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_gte\":null")
		first = false
	}

	// handle non nullable field nqn_whitelist_in with omitempty
	if !swag.IsZero(m.NqnWhitelistIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_in\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nqn_whitelist_lt
	if m.NqnWhitelistLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_lt\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_lt\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_lte
	if m.NqnWhitelistLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_lte\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_lte\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_not
	if m.NqnWhitelistNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_not_contains
	if m.NqnWhitelistNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_contains\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_contains\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_not_ends_with
	if m.NqnWhitelistNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_ends_with\":null")
		first = false
	}

	// handle non nullable field nqn_whitelist_not_in with omitempty
	if !swag.IsZero(m.NqnWhitelistNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_in\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nqn_whitelist_not_starts_with
	if m.NqnWhitelistNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_not_starts_with\":null")
		first = false
	}

	// handle nullable field nqn_whitelist_starts_with
	if m.NqnWhitelistStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_starts_with\":")
		bytes, err := swag.WriteJSON(m.NqnWhitelistStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NqnWhitelistStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nqn_whitelist_starts_with\":null")
		first = false
	}

	// handle nullable field policy
	if m.Policy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy\":")
		bytes, err := swag.WriteJSON(m.Policy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Policy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy\":null")
		first = false
	}

	// handle non nullable field policy_in with omitempty
	if !swag.IsZero(m.PolicyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy_in\":")
		bytes, err := swag.WriteJSON(m.PolicyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field policy_not
	if m.PolicyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy_not\":")
		bytes, err := swag.WriteJSON(m.PolicyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PolicyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy_not\":null")
		first = false
	}

	// handle non nullable field policy_not_in with omitempty
	if !swag.IsZero(m.PolicyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"policy_not_in\":")
		bytes, err := swag.WriteJSON(m.PolicyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle nullable field replica_num_gt
	if m.ReplicaNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gt\":null")
		first = false
	}

	// handle nullable field replica_num_gte
	if m.ReplicaNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_gte\":null")
		first = false
	}

	// handle non nullable field replica_num_in with omitempty
	if !swag.IsZero(m.ReplicaNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field replica_num_lt
	if m.ReplicaNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lt\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lt\":null")
		first = false
	}

	// handle nullable field replica_num_lte
	if m.ReplicaNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lte\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_lte\":null")
		first = false
	}

	// handle nullable field replica_num_not
	if m.ReplicaNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not\":null")
		first = false
	}

	// handle non nullable field replica_num_not_in with omitempty
	if !swag.IsZero(m.ReplicaNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num_not_in\":")
		bytes, err := swag.WriteJSON(m.ReplicaNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field stripe_num
	if m.StripeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":")
		bytes, err := swag.WriteJSON(m.StripeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":null")
		first = false
	}

	// handle nullable field stripe_num_gt
	if m.StripeNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_gt\":")
		bytes, err := swag.WriteJSON(m.StripeNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_gt\":null")
		first = false
	}

	// handle nullable field stripe_num_gte
	if m.StripeNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_gte\":")
		bytes, err := swag.WriteJSON(m.StripeNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_gte\":null")
		first = false
	}

	// handle non nullable field stripe_num_in with omitempty
	if !swag.IsZero(m.StripeNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_in\":")
		bytes, err := swag.WriteJSON(m.StripeNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field stripe_num_lt
	if m.StripeNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_lt\":")
		bytes, err := swag.WriteJSON(m.StripeNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_lt\":null")
		first = false
	}

	// handle nullable field stripe_num_lte
	if m.StripeNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_lte\":")
		bytes, err := swag.WriteJSON(m.StripeNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_lte\":null")
		first = false
	}

	// handle nullable field stripe_num_not
	if m.StripeNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_not\":")
		bytes, err := swag.WriteJSON(m.StripeNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_not\":null")
		first = false
	}

	// handle non nullable field stripe_num_not_in with omitempty
	if !swag.IsZero(m.StripeNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num_not_in\":")
		bytes, err := swag.WriteJSON(m.StripeNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field stripe_size
	if m.StripeSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":")
		bytes, err := swag.WriteJSON(m.StripeSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":null")
		first = false
	}

	// handle nullable field stripe_size_gt
	if m.StripeSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_gt\":")
		bytes, err := swag.WriteJSON(m.StripeSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_gt\":null")
		first = false
	}

	// handle nullable field stripe_size_gte
	if m.StripeSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_gte\":")
		bytes, err := swag.WriteJSON(m.StripeSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_gte\":null")
		first = false
	}

	// handle non nullable field stripe_size_in with omitempty
	if !swag.IsZero(m.StripeSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_in\":")
		bytes, err := swag.WriteJSON(m.StripeSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field stripe_size_lt
	if m.StripeSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_lt\":")
		bytes, err := swag.WriteJSON(m.StripeSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_lt\":null")
		first = false
	}

	// handle nullable field stripe_size_lte
	if m.StripeSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_lte\":")
		bytes, err := swag.WriteJSON(m.StripeSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_lte\":null")
		first = false
	}

	// handle nullable field stripe_size_not
	if m.StripeSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_not\":")
		bytes, err := swag.WriteJSON(m.StripeSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_not\":null")
		first = false
	}

	// handle non nullable field stripe_size_not_in with omitempty
	if !swag.IsZero(m.StripeSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size_not_in\":")
		bytes, err := swag.WriteJSON(m.StripeSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}

	// handle nullable field thin_provision_not
	if m.ThinProvisionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision_not\":")
		bytes, err := swag.WriteJSON(m.ThinProvisionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvisionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision_not\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nvmf subsystem where input
func (m *NvmfSubsystemWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfSubsystemWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespaceGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsEvery) { // not required
		return nil
	}

	if m.NamespaceGroupsEvery != nil {
		if err := m.NamespaceGroupsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespaceGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsNone) { // not required
		return nil
	}

	if m.NamespaceGroupsNone != nil {
		if err := m.NamespaceGroupsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespaceGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsSome) { // not required
		return nil
	}

	if m.NamespaceGroupsSome != nil {
		if err := m.NamespaceGroupsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespacesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesEvery) { // not required
		return nil
	}

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespacesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesNone) { // not required
		return nil
	}

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validateNamespacesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesSome) { // not required
		return nil
	}

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validatePolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyIn); i++ {

		if err := m.PolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validatePolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyNot) { // not required
		return nil
	}

	if m.PolicyNot != nil {
		if err := m.PolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) validatePolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyNotIn); i++ {

		if err := m.PolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this nvmf subsystem where input based on the context it is used
func (m *NvmfSubsystemWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespaceGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceGroupsEvery != nil {
		if err := m.NamespaceGroupsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespaceGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceGroupsNone != nil {
		if err := m.NamespaceGroupsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespaceGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceGroupsSome != nil {
		if err := m.NamespaceGroupsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespace_groups_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespace_groups_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespacesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespacesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidateNamespacesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {
		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidatePolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyIn); i++ {

		if err := m.PolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidatePolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyNot != nil {
		if err := m.PolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfSubsystemWhereInput) contextValidatePolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyNotIn); i++ {

		if err := m.PolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NvmfSubsystemWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfSubsystemWhereInput) UnmarshalBinary(b []byte) error {
	var res NvmfSubsystemWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
