// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResiliencyType resiliency type
//
// swagger:model ResiliencyType
type ResiliencyType string

func NewResiliencyType(value ResiliencyType) *ResiliencyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResiliencyType.
func (m ResiliencyType) Pointer() *ResiliencyType {
	return &m
}

const (

	// ResiliencyTypeEC captures enum value "EC"
	ResiliencyTypeEC ResiliencyType = "EC"

	// ResiliencyTypeREPLICA captures enum value "REPLICA"
	ResiliencyTypeREPLICA ResiliencyType = "REPLICA"
)

// for schema
var resiliencyTypeEnum []interface{}

func init() {
	var res []ResiliencyType
	if err := json.Unmarshal([]byte(`["EC","REPLICA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resiliencyTypeEnum = append(resiliencyTypeEnum, v)
	}
}

func (m ResiliencyType) validateResiliencyTypeEnum(path, location string, value ResiliencyType) error {
	if err := validate.EnumCase(path, location, value, resiliencyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resiliency type
func (m ResiliencyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResiliencyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resiliency type based on context it is used
func (m ResiliencyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
