// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteAgentStatus nested everoute agent status
//
// swagger:model NestedEverouteAgentStatus
type NestedEverouteAgentStatus struct {

	// host
	Host *NestedHost `json:"host,omitempty"`

	// host ID
	HostID *string `json:"hostID,omitempty"`

	// ip addr
	IPAddr *string `json:"ipAddr,omitempty"`

	// is health
	// Required: true
	IsHealth *bool `json:"isHealth"`

	// message
	Message *string `json:"message,omitempty"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// reason
	Reason *string `json:"reason,omitempty"`

	MarshalOpts *NestedEverouteAgentStatusMarshalOpts `json:"-"`
}

type NestedEverouteAgentStatusMarshalOpts struct {
	Host_Explicit_Null_When_Empty bool

	HostID_Explicit_Null_When_Empty bool

	IPAddr_Explicit_Null_When_Empty bool

	IsHealth_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	Reason_Explicit_Null_When_Empty bool
}

func (m NestedEverouteAgentStatus) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field hostID
	if m.HostID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hostID\":")
		bytes, err := swag.WriteJSON(m.HostID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hostID\":null")
		first = false
	}

	// handle nullable field ipAddr
	if m.IPAddr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipAddr\":")
		bytes, err := swag.WriteJSON(m.IPAddr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipAddr\":null")
		first = false
	}

	// handle nullable field isHealth
	if m.IsHealth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isHealth\":")
		bytes, err := swag.WriteJSON(m.IsHealth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsHealth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isHealth\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field reason
	if m.Reason != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":")
		bytes, err := swag.WriteJSON(m.Reason)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Reason_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested everoute agent status
func (m *NestedEverouteAgentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteAgentStatus) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteAgentStatus) validateIsHealth(formats strfmt.Registry) error {

	if err := validate.Required("isHealth", "body", m.IsHealth); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteAgentStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested everoute agent status based on the context it is used
func (m *NestedEverouteAgentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteAgentStatus) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteAgentStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteAgentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteAgentStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteAgentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
