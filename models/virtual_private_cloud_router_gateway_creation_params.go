// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudRouterGatewayCreationParams virtual private cloud router gateway creation params
//
// swagger:model VirtualPrivateCloudRouterGatewayCreationParams
type VirtualPrivateCloudRouterGatewayCreationParams struct {

	// associated subnets ids
	// Required: true
	AssociatedSubnetsIds []string `json:"associated_subnets_ids"`

	// external ip
	ExternalIP *string `json:"external_ip,omitempty"`

	// external ips
	ExternalIps []*VirtualPrivateCloudExternalIpsParams `json:"external_ips,omitempty"`

	// external subnet group id
	ExternalSubnetGroupID *string `json:"external_subnet_group_id,omitempty"`

	// external subnet id
	ExternalSubnetID *string `json:"external_subnet_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rules
	// Required: true
	Rules []*VirtualPrivateCloudRouterGatewayRuleInputType `json:"rules"`

	// vpc id
	// Required: true
	VpcID *string `json:"vpc_id"`

	MarshalOpts *VirtualPrivateCloudRouterGatewayCreationParamsMarshalOpts `json:"-"`
}

type VirtualPrivateCloudRouterGatewayCreationParamsMarshalOpts struct {
	AssociatedSubnetsIds_Explicit_Null_When_Empty bool

	ExternalIP_Explicit_Null_When_Empty bool

	ExternalIps_Explicit_Null_When_Empty bool

	ExternalSubnetGroupID_Explicit_Null_When_Empty bool

	ExternalSubnetID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Rules_Explicit_Null_When_Empty bool

	VpcID_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudRouterGatewayCreationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field associated_subnets_ids without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"associated_subnets_ids\":")
		bytes, err := swag.WriteJSON(m.AssociatedSubnetsIds)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_ip
	if m.ExternalIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_ip\":")
		bytes, err := swag.WriteJSON(m.ExternalIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_ip\":null")
		first = false
	}

	// handle non nullable field external_ips with omitempty
	if !swag.IsZero(m.ExternalIps) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_ips\":")
		bytes, err := swag.WriteJSON(m.ExternalIps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_subnet_group_id
	if m.ExternalSubnetGroupID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_group_id\":")
		bytes, err := swag.WriteJSON(m.ExternalSubnetGroupID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalSubnetGroupID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_group_id\":null")
		first = false
	}

	// handle nullable field external_subnet_id
	if m.ExternalSubnetID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_id\":")
		bytes, err := swag.WriteJSON(m.ExternalSubnetID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalSubnetID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_subnet_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field rules without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rules\":")
		bytes, err := swag.WriteJSON(m.Rules)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vpc_id
	if m.VpcID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_id\":")
		bytes, err := swag.WriteJSON(m.VpcID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud router gateway creation params
func (m *VirtualPrivateCloudRouterGatewayCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedSubnetsIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateAssociatedSubnetsIds(formats strfmt.Registry) error {

	if err := validate.Required("associated_subnets_ids", "body", m.AssociatedSubnetsIds); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateExternalIps(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalIps) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalIps); i++ {
		if swag.IsZero(m.ExternalIps[i]) { // not required
			continue
		}

		if m.ExternalIps[i] != nil {
			if err := m.ExternalIps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_ips" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) validateVpcID(formats strfmt.Registry) error {

	if err := validate.Required("vpc_id", "body", m.VpcID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this virtual private cloud router gateway creation params based on the context it is used
func (m *VirtualPrivateCloudRouterGatewayCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalIps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) contextValidateExternalIps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalIps); i++ {

		if m.ExternalIps[i] != nil {
			if err := m.ExternalIps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_ips" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualPrivateCloudRouterGatewayCreationParams) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {
			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudRouterGatewayCreationParams) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudRouterGatewayCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
