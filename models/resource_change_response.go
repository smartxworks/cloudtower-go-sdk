// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceChangeResponse resource change response
//
// swagger:model ResourceChangeResponse
type ResourceChangeResponse struct {

	// compact revision
	// Required: true
	CompactRevision *string `json:"compactRevision"`

	// current revision
	// Required: true
	CurrentRevision *string `json:"currentRevision"`

	// data
	// Required: true
	Data []*ResourceChangeEvent `json:"data"`

	// ec
	// Required: true
	Ec *string `json:"ec"`

	// error
	Error interface{} `json:"error,omitempty"`

	MarshalOpts *ResourceChangeResponseMarshalOpts `json:"-"`
}

type ResourceChangeResponseMarshalOpts struct {
	CompactRevision_Explicit_Null_When_Empty bool

	CurrentRevision_Explicit_Null_When_Empty bool

	Data_Explicit_Null_When_Empty bool

	Ec_Explicit_Null_When_Empty bool
}

func (m ResourceChangeResponse) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field compactRevision
	if m.CompactRevision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compactRevision\":")
		bytes, err := swag.WriteJSON(m.CompactRevision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompactRevision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compactRevision\":null")
		first = false
	}

	// handle nullable field currentRevision
	if m.CurrentRevision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"currentRevision\":")
		bytes, err := swag.WriteJSON(m.CurrentRevision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CurrentRevision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"currentRevision\":null")
		first = false
	}

	// handle non nullable field data without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ec
	if m.Ec != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec\":")
		bytes, err := swag.WriteJSON(m.Ec)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ec_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ec\":null")
		first = false
	}

	// handle non nullable field error with omitempty
	if !swag.IsZero(m.Error) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error\":")
		bytes, err := swag.WriteJSON(m.Error)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this resource change response
func (m *ResourceChangeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompactRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceChangeResponse) validateCompactRevision(formats strfmt.Registry) error {

	if err := validate.Required("compactRevision", "body", m.CompactRevision); err != nil {
		return err
	}

	return nil
}

func (m *ResourceChangeResponse) validateCurrentRevision(formats strfmt.Registry) error {

	if err := validate.Required("currentRevision", "body", m.CurrentRevision); err != nil {
		return err
	}

	return nil
}

func (m *ResourceChangeResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceChangeResponse) validateEc(formats strfmt.Registry) error {

	if err := validate.Required("ec", "body", m.Ec); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resource change response based on the context it is used
func (m *ResourceChangeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceChangeResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceChangeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceChangeResponse) UnmarshalBinary(b []byte) error {
	var res ResourceChangeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
