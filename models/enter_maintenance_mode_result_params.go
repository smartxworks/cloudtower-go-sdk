// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnterMaintenanceModeResultParams enter maintenance mode result params
//
// swagger:model EnterMaintenanceModeResultParams
type EnterMaintenanceModeResultParams struct {

	// where
	// Required: true
	Where *EnterMaintenanceModeResultParamsWhere `json:"where"`

	MarshalOpts *EnterMaintenanceModeResultParamsMarshalOpts `json:"-"`
}

type EnterMaintenanceModeResultParamsMarshalOpts struct {
	Where_Explicit_Null_When_Empty bool
}

func (m EnterMaintenanceModeResultParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this enter maintenance mode result params
func (m *EnterMaintenanceModeResultParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnterMaintenanceModeResultParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this enter maintenance mode result params based on the context it is used
func (m *EnterMaintenanceModeResultParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnterMaintenanceModeResultParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnterMaintenanceModeResultParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnterMaintenanceModeResultParams) UnmarshalBinary(b []byte) error {
	var res EnterMaintenanceModeResultParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EnterMaintenanceModeResultParamsWhere enter maintenance mode result params where
//
// swagger:model EnterMaintenanceModeResultParamsWhere
type EnterMaintenanceModeResultParamsWhere struct {

	// task id
	// Required: true
	TaskID *string `json:"task_id"`

	MarshalOpts *EnterMaintenanceModeResultParamsWhereMarshalOpts `json:"-"`
}

type EnterMaintenanceModeResultParamsWhereMarshalOpts struct {
	TaskID_Explicit_Null_When_Empty bool
}

func (m EnterMaintenanceModeResultParamsWhere) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field task_id
	if m.TaskID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_id\":")
		bytes, err := swag.WriteJSON(m.TaskID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this enter maintenance mode result params where
func (m *EnterMaintenanceModeResultParamsWhere) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnterMaintenanceModeResultParamsWhere) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("where"+"."+"task_id", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this enter maintenance mode result params where based on context it is used
func (m *EnterMaintenanceModeResultParamsWhere) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnterMaintenanceModeResultParamsWhere) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnterMaintenanceModeResultParamsWhere) UnmarshalBinary(b []byte) error {
	var res EnterMaintenanceModeResultParamsWhere
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
