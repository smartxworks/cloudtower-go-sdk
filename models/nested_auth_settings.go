// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NestedAuthSettings nested auth settings
//
// swagger:model NestedAuthSettings
type NestedAuthSettings struct {

	// access list
	AccessList []string `json:"access_list,omitempty"`

	// access mode
	AccessMode *AccessMode `json:"access_mode,omitempty"`

	// enable single session login
	EnableSingleSessionLogin *bool `json:"enable_single_session_login,omitempty"`

	// login miss num threshold
	LoginMissNumThreshold *int32 `json:"login_miss_num_threshold,omitempty"`

	// login miss time threshold
	LoginMissTimeThreshold *int32 `json:"login_miss_time_threshold,omitempty"`

	// password complexity
	PasswordComplexity *PasswordComplexity `json:"password_complexity,omitempty"`

	// password expire days
	PasswordExpireDays *int32 `json:"password_expire_days,omitempty"`

	// session max age
	SessionMaxAge *int32 `json:"session_max_age,omitempty"`

	MarshalOpts *NestedAuthSettingsMarshalOpts `json:"-"`
}

type NestedAuthSettingsMarshalOpts struct {
	AccessList_Explicit_Null_When_Empty bool

	AccessMode_Explicit_Null_When_Empty bool

	EnableSingleSessionLogin_Explicit_Null_When_Empty bool

	LoginMissNumThreshold_Explicit_Null_When_Empty bool

	LoginMissTimeThreshold_Explicit_Null_When_Empty bool

	PasswordComplexity_Explicit_Null_When_Empty bool

	PasswordExpireDays_Explicit_Null_When_Empty bool

	SessionMaxAge_Explicit_Null_When_Empty bool
}

func (m NestedAuthSettings) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field access_list with omitempty
	if swag.IsZero(m.AccessList) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_list\":")
		bytes, err := swag.WriteJSON(m.AccessList)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field access_mode
	if m.AccessMode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_mode\":")
		bytes, err := swag.WriteJSON(m.AccessMode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AccessMode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"access_mode\":null")
		first = false
	}

	// handle nullable field enable_single_session_login
	if m.EnableSingleSessionLogin != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_single_session_login\":")
		bytes, err := swag.WriteJSON(m.EnableSingleSessionLogin)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableSingleSessionLogin_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_single_session_login\":null")
		first = false
	}

	// handle nullable field login_miss_num_threshold
	if m.LoginMissNumThreshold != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_num_threshold\":")
		bytes, err := swag.WriteJSON(m.LoginMissNumThreshold)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LoginMissNumThreshold_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_num_threshold\":null")
		first = false
	}

	// handle nullable field login_miss_time_threshold
	if m.LoginMissTimeThreshold != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_time_threshold\":")
		bytes, err := swag.WriteJSON(m.LoginMissTimeThreshold)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LoginMissTimeThreshold_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"login_miss_time_threshold\":null")
		first = false
	}

	// handle nullable field password_complexity
	if m.PasswordComplexity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_complexity\":")
		bytes, err := swag.WriteJSON(m.PasswordComplexity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordComplexity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_complexity\":null")
		first = false
	}

	// handle nullable field password_expire_days
	if m.PasswordExpireDays != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expire_days\":")
		bytes, err := swag.WriteJSON(m.PasswordExpireDays)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PasswordExpireDays_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"password_expire_days\":null")
		first = false
	}

	// handle nullable field session_max_age
	if m.SessionMaxAge != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"session_max_age\":")
		bytes, err := swag.WriteJSON(m.SessionMaxAge)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SessionMaxAge_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"session_max_age\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested auth settings
func (m *NestedAuthSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordComplexity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedAuthSettings) validateAccessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessMode) { // not required
		return nil
	}

	if m.AccessMode != nil {
		if err := m.AccessMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

func (m *NestedAuthSettings) validatePasswordComplexity(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordComplexity) { // not required
		return nil
	}

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested auth settings based on the context it is used
func (m *NestedAuthSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordComplexity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedAuthSettings) contextValidateAccessMode(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessMode != nil {
		if err := m.AccessMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

func (m *NestedAuthSettings) contextValidatePasswordComplexity(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedAuthSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedAuthSettings) UnmarshalBinary(b []byte) error {
	var res NestedAuthSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
