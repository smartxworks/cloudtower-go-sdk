// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteControllerStatus nested everoute controller status
//
// swagger:model NestedEverouteControllerStatus
type NestedEverouteControllerStatus struct {

	// ip addr
	IPAddr *string `json:"ipAddr,omitempty"`

	// is health
	// Required: true
	IsHealth *bool `json:"isHealth"`

	// message
	Message *string `json:"message,omitempty"`

	// metrics
	Metrics *NestedEverouteClusterVMMetrics `json:"metrics,omitempty"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// reason
	Reason *string `json:"reason,omitempty"`

	// vm
	VM *NestedVM `json:"vm,omitempty"`

	// vm ID
	VMID *string `json:"vmID,omitempty"`

	MarshalOpts *NestedEverouteControllerStatusMarshalOpts `json:"-"`
}

type NestedEverouteControllerStatusMarshalOpts struct {
	IPAddr_Explicit_Null_When_Empty bool

	IsHealth_Explicit_Null_When_Empty bool

	Message_Explicit_Null_When_Empty bool

	Metrics_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	Reason_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool

	VMID_Explicit_Null_When_Empty bool
}

func (m NestedEverouteControllerStatus) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field ipAddr
	if m.IPAddr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipAddr\":")
		bytes, err := swag.WriteJSON(m.IPAddr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipAddr\":null")
		first = false
	}

	// handle nullable field isHealth
	if m.IsHealth != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isHealth\":")
		bytes, err := swag.WriteJSON(m.IsHealth)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IsHealth_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isHealth\":null")
		first = false
	}

	// handle nullable field message
	if m.Message != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":")
		bytes, err := swag.WriteJSON(m.Message)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Message_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"message\":null")
		first = false
	}

	// handle nullable field metrics
	if m.Metrics != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metrics\":")
		bytes, err := swag.WriteJSON(m.Metrics)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Metrics_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metrics\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field reason
	if m.Reason != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":")
		bytes, err := swag.WriteJSON(m.Reason)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Reason_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":null")
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	// handle nullable field vmID
	if m.VMID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmID\":")
		bytes, err := swag.WriteJSON(m.VMID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmID\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested everoute controller status
func (m *NestedEverouteControllerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteControllerStatus) validateIsHealth(formats strfmt.Registry) error {

	if err := validate.Required("isHealth", "body", m.IsHealth); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteControllerStatus) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteControllerStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteControllerStatus) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested everoute controller status based on the context it is used
func (m *NestedEverouteControllerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteControllerStatus) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {
		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteControllerStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteControllerStatus) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteControllerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteControllerStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteControllerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
