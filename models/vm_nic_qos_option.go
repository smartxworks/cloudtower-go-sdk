// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMNicQosOption Vm nic qos option
//
// swagger:model VmNicQosOption
type VMNicQosOption struct {

	// egress
	Egress *VMNicQosTraffic `json:"egress,omitempty"`

	// ingress
	Ingress *VMNicQosTraffic `json:"ingress,omitempty"`

	MarshalOpts *VMNicQosOptionMarshalOpts `json:"-"`
}

type VMNicQosOptionMarshalOpts struct {
	Egress_Explicit_Null_When_Empty bool

	Ingress_Explicit_Null_When_Empty bool
}

func (m VMNicQosOption) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field egress
	if m.Egress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress\":")
		bytes, err := swag.WriteJSON(m.Egress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Egress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"egress\":null")
		first = false
	}

	// handle nullable field ingress
	if m.Ingress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress\":")
		bytes, err := swag.WriteJSON(m.Ingress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Ingress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ingress\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm nic qos option
func (m *VMNicQosOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicQosOption) validateEgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Egress) { // not required
		return nil
	}

	if m.Egress != nil {
		if err := m.Egress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("egress")
			}
			return err
		}
	}

	return nil
}

func (m *VMNicQosOption) validateIngress(formats strfmt.Registry) error {
	if swag.IsZero(m.Ingress) { // not required
		return nil
	}

	if m.Ingress != nil {
		if err := m.Ingress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm nic qos option based on the context it is used
func (m *VMNicQosOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicQosOption) contextValidateEgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Egress != nil {
		if err := m.Egress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("egress")
			}
			return err
		}
	}

	return nil
}

func (m *VMNicQosOption) contextValidateIngress(ctx context.Context, formats strfmt.Registry) error {

	if m.Ingress != nil {
		if err := m.Ingress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMNicQosOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMNicQosOption) UnmarshalBinary(b []byte) error {
	var res VMNicQosOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
