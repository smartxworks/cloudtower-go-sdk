// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GraphWhereInput graph where input
//
// swagger:model GraphWhereInput
type GraphWhereInput struct {

	// a n d
	AND []*GraphWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*GraphWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*GraphWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// disks every
	DisksEvery *DiskWhereInput `json:"disks_every,omitempty"`

	// disks none
	DisksNone *DiskWhereInput `json:"disks_none,omitempty"`

	// disks some
	DisksSome *DiskWhereInput `json:"disks_some,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// hosts every
	HostsEvery *HostWhereInput `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone *HostWhereInput `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome *HostWhereInput `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// luns every
	LunsEvery *IscsiLunWhereInput `json:"luns_every,omitempty"`

	// luns none
	LunsNone *IscsiLunWhereInput `json:"luns_none,omitempty"`

	// luns some
	LunsSome *IscsiLunWhereInput `json:"luns_some,omitempty"`

	// metric count
	MetricCount *int32 `json:"metric_count,omitempty"`

	// metric count gt
	MetricCountGt *int32 `json:"metric_count_gt,omitempty"`

	// metric count gte
	MetricCountGte *int32 `json:"metric_count_gte,omitempty"`

	// metric count in
	MetricCountIn []int32 `json:"metric_count_in,omitempty"`

	// metric count lt
	MetricCountLt *int32 `json:"metric_count_lt,omitempty"`

	// metric count lte
	MetricCountLte *int32 `json:"metric_count_lte,omitempty"`

	// metric count not
	MetricCountNot *int32 `json:"metric_count_not,omitempty"`

	// metric count not in
	MetricCountNotIn []int32 `json:"metric_count_not_in,omitempty"`

	// metric name
	MetricName *string `json:"metric_name,omitempty"`

	// metric name contains
	MetricNameContains *string `json:"metric_name_contains,omitempty"`

	// metric name ends with
	MetricNameEndsWith *string `json:"metric_name_ends_with,omitempty"`

	// metric name gt
	MetricNameGt *string `json:"metric_name_gt,omitempty"`

	// metric name gte
	MetricNameGte *string `json:"metric_name_gte,omitempty"`

	// metric name in
	MetricNameIn []string `json:"metric_name_in,omitempty"`

	// metric name lt
	MetricNameLt *string `json:"metric_name_lt,omitempty"`

	// metric name lte
	MetricNameLte *string `json:"metric_name_lte,omitempty"`

	// metric name not
	MetricNameNot *string `json:"metric_name_not,omitempty"`

	// metric name not contains
	MetricNameNotContains *string `json:"metric_name_not_contains,omitempty"`

	// metric name not ends with
	MetricNameNotEndsWith *string `json:"metric_name_not_ends_with,omitempty"`

	// metric name not in
	MetricNameNotIn []string `json:"metric_name_not_in,omitempty"`

	// metric name not starts with
	MetricNameNotStartsWith *string `json:"metric_name_not_starts_with,omitempty"`

	// metric name starts with
	MetricNameStartsWith *string `json:"metric_name_starts_with,omitempty"`

	// metric type
	MetricType *MetricType `json:"metric_type,omitempty"`

	// metric type in
	MetricTypeIn []MetricType `json:"metric_type_in,omitempty"`

	// metric type not
	MetricTypeNot *MetricType `json:"metric_type_not,omitempty"`

	// metric type not in
	MetricTypeNotIn []MetricType `json:"metric_type_not_in,omitempty"`

	// namespaces every
	NamespacesEvery *NvmfNamespaceWhereInput `json:"namespaces_every,omitempty"`

	// namespaces none
	NamespacesNone *NvmfNamespaceWhereInput `json:"namespaces_none,omitempty"`

	// namespaces some
	NamespacesSome *NvmfNamespaceWhereInput `json:"namespaces_some,omitempty"`

	// network
	Network *NetworkType `json:"network,omitempty"`

	// network in
	NetworkIn []NetworkType `json:"network_in,omitempty"`

	// network not
	NetworkNot *NetworkType `json:"network_not,omitempty"`

	// network not in
	NetworkNotIn []NetworkType `json:"network_not_in,omitempty"`

	// nics every
	NicsEvery *NicWhereInput `json:"nics_every,omitempty"`

	// nics none
	NicsNone *NicWhereInput `json:"nics_none,omitempty"`

	// nics some
	NicsSome *NicWhereInput `json:"nics_some,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// resource type contains
	ResourceTypeContains *string `json:"resource_type_contains,omitempty"`

	// resource type ends with
	ResourceTypeEndsWith *string `json:"resource_type_ends_with,omitempty"`

	// resource type gt
	ResourceTypeGt *string `json:"resource_type_gt,omitempty"`

	// resource type gte
	ResourceTypeGte *string `json:"resource_type_gte,omitempty"`

	// resource type in
	ResourceTypeIn []string `json:"resource_type_in,omitempty"`

	// resource type lt
	ResourceTypeLt *string `json:"resource_type_lt,omitempty"`

	// resource type lte
	ResourceTypeLte *string `json:"resource_type_lte,omitempty"`

	// resource type not
	ResourceTypeNot *string `json:"resource_type_not,omitempty"`

	// resource type not contains
	ResourceTypeNotContains *string `json:"resource_type_not_contains,omitempty"`

	// resource type not ends with
	ResourceTypeNotEndsWith *string `json:"resource_type_not_ends_with,omitempty"`

	// resource type not in
	ResourceTypeNotIn []string `json:"resource_type_not_in,omitempty"`

	// resource type not starts with
	ResourceTypeNotStartsWith *string `json:"resource_type_not_starts_with,omitempty"`

	// resource type starts with
	ResourceTypeStartsWith *string `json:"resource_type_starts_with,omitempty"`

	// service
	Service *string `json:"service,omitempty"`

	// service contains
	ServiceContains *string `json:"service_contains,omitempty"`

	// service ends with
	ServiceEndsWith *string `json:"service_ends_with,omitempty"`

	// service gt
	ServiceGt *string `json:"service_gt,omitempty"`

	// service gte
	ServiceGte *string `json:"service_gte,omitempty"`

	// service in
	ServiceIn []string `json:"service_in,omitempty"`

	// service lt
	ServiceLt *string `json:"service_lt,omitempty"`

	// service lte
	ServiceLte *string `json:"service_lte,omitempty"`

	// service not
	ServiceNot *string `json:"service_not,omitempty"`

	// service not contains
	ServiceNotContains *string `json:"service_not_contains,omitempty"`

	// service not ends with
	ServiceNotEndsWith *string `json:"service_not_ends_with,omitempty"`

	// service not in
	ServiceNotIn []string `json:"service_not_in,omitempty"`

	// service not starts with
	ServiceNotStartsWith *string `json:"service_not_starts_with,omitempty"`

	// service starts with
	ServiceStartsWith *string `json:"service_starts_with,omitempty"`

	// title
	Title *string `json:"title,omitempty"`

	// title contains
	TitleContains *string `json:"title_contains,omitempty"`

	// title ends with
	TitleEndsWith *string `json:"title_ends_with,omitempty"`

	// title gt
	TitleGt *string `json:"title_gt,omitempty"`

	// title gte
	TitleGte *string `json:"title_gte,omitempty"`

	// title in
	TitleIn []string `json:"title_in,omitempty"`

	// title lt
	TitleLt *string `json:"title_lt,omitempty"`

	// title lte
	TitleLte *string `json:"title_lte,omitempty"`

	// title not
	TitleNot *string `json:"title_not,omitempty"`

	// title not contains
	TitleNotContains *string `json:"title_not_contains,omitempty"`

	// title not ends with
	TitleNotEndsWith *string `json:"title_not_ends_with,omitempty"`

	// title not in
	TitleNotIn []string `json:"title_not_in,omitempty"`

	// title not starts with
	TitleNotStartsWith *string `json:"title_not_starts_with,omitempty"`

	// title starts with
	TitleStartsWith *string `json:"title_starts_with,omitempty"`

	// type
	Type *GraphType `json:"type,omitempty"`

	// type in
	TypeIn []GraphType `json:"type_in,omitempty"`

	// type not
	TypeNot *GraphType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []GraphType `json:"type_not_in,omitempty"`

	// view
	View *ViewWhereInput `json:"view,omitempty"`

	// vm nics every
	VMNicsEvery *VMNicWhereInput `json:"vmNics_every,omitempty"`

	// vm nics none
	VMNicsNone *VMNicWhereInput `json:"vmNics_none,omitempty"`

	// vm nics some
	VMNicsSome *VMNicWhereInput `json:"vmNics_some,omitempty"`

	// vm volumes every
	VMVolumesEvery *VMVolumeWhereInput `json:"vmVolumes_every,omitempty"`

	// vm volumes none
	VMVolumesNone *VMVolumeWhereInput `json:"vmVolumes_none,omitempty"`

	// vm volumes some
	VMVolumesSome *VMVolumeWhereInput `json:"vmVolumes_some,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`

	// witnesses every
	WitnessesEvery *WitnessWhereInput `json:"witnesses_every,omitempty"`

	// witnesses none
	WitnessesNone *WitnessWhereInput `json:"witnesses_none,omitempty"`

	// witnesses some
	WitnessesSome *WitnessWhereInput `json:"witnesses_some,omitempty"`

	// zones every
	ZonesEvery *ZoneWhereInput `json:"zones_every,omitempty"`

	// zones none
	ZonesNone *ZoneWhereInput `json:"zones_none,omitempty"`

	// zones some
	ZonesSome *ZoneWhereInput `json:"zones_some,omitempty"`

	MarshalOpts *GraphWhereInputMarshalOpts `json:"-"`
}

type GraphWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	DisksEvery_Explicit_Null_When_Empty bool

	DisksNone_Explicit_Null_When_Empty bool

	DisksSome_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	HostsEvery_Explicit_Null_When_Empty bool

	HostsNone_Explicit_Null_When_Empty bool

	HostsSome_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	LunsEvery_Explicit_Null_When_Empty bool

	LunsNone_Explicit_Null_When_Empty bool

	LunsSome_Explicit_Null_When_Empty bool

	MetricCount_Explicit_Null_When_Empty bool

	MetricCountGt_Explicit_Null_When_Empty bool

	MetricCountGte_Explicit_Null_When_Empty bool

	MetricCountIn_Explicit_Null_When_Empty bool

	MetricCountLt_Explicit_Null_When_Empty bool

	MetricCountLte_Explicit_Null_When_Empty bool

	MetricCountNot_Explicit_Null_When_Empty bool

	MetricCountNotIn_Explicit_Null_When_Empty bool

	MetricName_Explicit_Null_When_Empty bool

	MetricNameContains_Explicit_Null_When_Empty bool

	MetricNameEndsWith_Explicit_Null_When_Empty bool

	MetricNameGt_Explicit_Null_When_Empty bool

	MetricNameGte_Explicit_Null_When_Empty bool

	MetricNameIn_Explicit_Null_When_Empty bool

	MetricNameLt_Explicit_Null_When_Empty bool

	MetricNameLte_Explicit_Null_When_Empty bool

	MetricNameNot_Explicit_Null_When_Empty bool

	MetricNameNotContains_Explicit_Null_When_Empty bool

	MetricNameNotEndsWith_Explicit_Null_When_Empty bool

	MetricNameNotIn_Explicit_Null_When_Empty bool

	MetricNameNotStartsWith_Explicit_Null_When_Empty bool

	MetricNameStartsWith_Explicit_Null_When_Empty bool

	MetricType_Explicit_Null_When_Empty bool

	MetricTypeIn_Explicit_Null_When_Empty bool

	MetricTypeNot_Explicit_Null_When_Empty bool

	MetricTypeNotIn_Explicit_Null_When_Empty bool

	NamespacesEvery_Explicit_Null_When_Empty bool

	NamespacesNone_Explicit_Null_When_Empty bool

	NamespacesSome_Explicit_Null_When_Empty bool

	Network_Explicit_Null_When_Empty bool

	NetworkIn_Explicit_Null_When_Empty bool

	NetworkNot_Explicit_Null_When_Empty bool

	NetworkNotIn_Explicit_Null_When_Empty bool

	NicsEvery_Explicit_Null_When_Empty bool

	NicsNone_Explicit_Null_When_Empty bool

	NicsSome_Explicit_Null_When_Empty bool

	ResourceType_Explicit_Null_When_Empty bool

	ResourceTypeContains_Explicit_Null_When_Empty bool

	ResourceTypeEndsWith_Explicit_Null_When_Empty bool

	ResourceTypeGt_Explicit_Null_When_Empty bool

	ResourceTypeGte_Explicit_Null_When_Empty bool

	ResourceTypeIn_Explicit_Null_When_Empty bool

	ResourceTypeLt_Explicit_Null_When_Empty bool

	ResourceTypeLte_Explicit_Null_When_Empty bool

	ResourceTypeNot_Explicit_Null_When_Empty bool

	ResourceTypeNotContains_Explicit_Null_When_Empty bool

	ResourceTypeNotEndsWith_Explicit_Null_When_Empty bool

	ResourceTypeNotIn_Explicit_Null_When_Empty bool

	ResourceTypeNotStartsWith_Explicit_Null_When_Empty bool

	ResourceTypeStartsWith_Explicit_Null_When_Empty bool

	Service_Explicit_Null_When_Empty bool

	ServiceContains_Explicit_Null_When_Empty bool

	ServiceEndsWith_Explicit_Null_When_Empty bool

	ServiceGt_Explicit_Null_When_Empty bool

	ServiceGte_Explicit_Null_When_Empty bool

	ServiceIn_Explicit_Null_When_Empty bool

	ServiceLt_Explicit_Null_When_Empty bool

	ServiceLte_Explicit_Null_When_Empty bool

	ServiceNot_Explicit_Null_When_Empty bool

	ServiceNotContains_Explicit_Null_When_Empty bool

	ServiceNotEndsWith_Explicit_Null_When_Empty bool

	ServiceNotIn_Explicit_Null_When_Empty bool

	ServiceNotStartsWith_Explicit_Null_When_Empty bool

	ServiceStartsWith_Explicit_Null_When_Empty bool

	Title_Explicit_Null_When_Empty bool

	TitleContains_Explicit_Null_When_Empty bool

	TitleEndsWith_Explicit_Null_When_Empty bool

	TitleGt_Explicit_Null_When_Empty bool

	TitleGte_Explicit_Null_When_Empty bool

	TitleIn_Explicit_Null_When_Empty bool

	TitleLt_Explicit_Null_When_Empty bool

	TitleLte_Explicit_Null_When_Empty bool

	TitleNot_Explicit_Null_When_Empty bool

	TitleNotContains_Explicit_Null_When_Empty bool

	TitleNotEndsWith_Explicit_Null_When_Empty bool

	TitleNotIn_Explicit_Null_When_Empty bool

	TitleNotStartsWith_Explicit_Null_When_Empty bool

	TitleStartsWith_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	View_Explicit_Null_When_Empty bool

	VMNicsEvery_Explicit_Null_When_Empty bool

	VMNicsNone_Explicit_Null_When_Empty bool

	VMNicsSome_Explicit_Null_When_Empty bool

	VMVolumesEvery_Explicit_Null_When_Empty bool

	VMVolumesNone_Explicit_Null_When_Empty bool

	VMVolumesSome_Explicit_Null_When_Empty bool

	VmsEvery_Explicit_Null_When_Empty bool

	VmsNone_Explicit_Null_When_Empty bool

	VmsSome_Explicit_Null_When_Empty bool

	WitnessesEvery_Explicit_Null_When_Empty bool

	WitnessesNone_Explicit_Null_When_Empty bool

	WitnessesSome_Explicit_Null_When_Empty bool

	ZonesEvery_Explicit_Null_When_Empty bool

	ZonesNone_Explicit_Null_When_Empty bool

	ZonesSome_Explicit_Null_When_Empty bool
}

func (m GraphWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field disks_every
	if m.DisksEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_every\":")
		bytes, err := swag.WriteJSON(m.DisksEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisksEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_every\":null")
		first = false
	}

	// handle nullable field disks_none
	if m.DisksNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_none\":")
		bytes, err := swag.WriteJSON(m.DisksNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisksNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_none\":null")
		first = false
	}

	// handle nullable field disks_some
	if m.DisksSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_some\":")
		bytes, err := swag.WriteJSON(m.DisksSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DisksSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"disks_some\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field hosts_every
	if m.HostsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_every\":")
		bytes, err := swag.WriteJSON(m.HostsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_every\":null")
		first = false
	}

	// handle nullable field hosts_none
	if m.HostsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_none\":")
		bytes, err := swag.WriteJSON(m.HostsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_none\":null")
		first = false
	}

	// handle nullable field hosts_some
	if m.HostsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_some\":")
		bytes, err := swag.WriteJSON(m.HostsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"hosts_some\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field luns_every
	if m.LunsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_every\":")
		bytes, err := swag.WriteJSON(m.LunsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LunsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_every\":null")
		first = false
	}

	// handle nullable field luns_none
	if m.LunsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_none\":")
		bytes, err := swag.WriteJSON(m.LunsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LunsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_none\":null")
		first = false
	}

	// handle nullable field luns_some
	if m.LunsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_some\":")
		bytes, err := swag.WriteJSON(m.LunsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LunsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"luns_some\":null")
		first = false
	}

	// handle nullable field metric_count
	if m.MetricCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":")
		bytes, err := swag.WriteJSON(m.MetricCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count\":null")
		first = false
	}

	// handle nullable field metric_count_gt
	if m.MetricCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_gt\":")
		bytes, err := swag.WriteJSON(m.MetricCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_gt\":null")
		first = false
	}

	// handle nullable field metric_count_gte
	if m.MetricCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_gte\":")
		bytes, err := swag.WriteJSON(m.MetricCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_gte\":null")
		first = false
	}

	// handle non nullable field metric_count_in with omitempty
	if swag.IsZero(m.MetricCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_in\":")
		bytes, err := swag.WriteJSON(m.MetricCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_count_lt
	if m.MetricCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_lt\":")
		bytes, err := swag.WriteJSON(m.MetricCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_lt\":null")
		first = false
	}

	// handle nullable field metric_count_lte
	if m.MetricCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_lte\":")
		bytes, err := swag.WriteJSON(m.MetricCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_lte\":null")
		first = false
	}

	// handle nullable field metric_count_not
	if m.MetricCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_not\":")
		bytes, err := swag.WriteJSON(m.MetricCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_not\":null")
		first = false
	}

	// handle non nullable field metric_count_not_in with omitempty
	if swag.IsZero(m.MetricCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_count_not_in\":")
		bytes, err := swag.WriteJSON(m.MetricCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_name
	if m.MetricName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":")
		bytes, err := swag.WriteJSON(m.MetricName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name\":null")
		first = false
	}

	// handle nullable field metric_name_contains
	if m.MetricNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_contains\":")
		bytes, err := swag.WriteJSON(m.MetricNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_contains\":null")
		first = false
	}

	// handle nullable field metric_name_ends_with
	if m.MetricNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.MetricNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_ends_with\":null")
		first = false
	}

	// handle nullable field metric_name_gt
	if m.MetricNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_gt\":")
		bytes, err := swag.WriteJSON(m.MetricNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_gt\":null")
		first = false
	}

	// handle nullable field metric_name_gte
	if m.MetricNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_gte\":")
		bytes, err := swag.WriteJSON(m.MetricNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_gte\":null")
		first = false
	}

	// handle non nullable field metric_name_in with omitempty
	if swag.IsZero(m.MetricNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_in\":")
		bytes, err := swag.WriteJSON(m.MetricNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_name_lt
	if m.MetricNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_lt\":")
		bytes, err := swag.WriteJSON(m.MetricNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_lt\":null")
		first = false
	}

	// handle nullable field metric_name_lte
	if m.MetricNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_lte\":")
		bytes, err := swag.WriteJSON(m.MetricNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_lte\":null")
		first = false
	}

	// handle nullable field metric_name_not
	if m.MetricNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not\":")
		bytes, err := swag.WriteJSON(m.MetricNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not\":null")
		first = false
	}

	// handle nullable field metric_name_not_contains
	if m.MetricNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.MetricNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_contains\":null")
		first = false
	}

	// handle nullable field metric_name_not_ends_with
	if m.MetricNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MetricNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field metric_name_not_in with omitempty
	if swag.IsZero(m.MetricNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_in\":")
		bytes, err := swag.WriteJSON(m.MetricNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_name_not_starts_with
	if m.MetricNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MetricNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field metric_name_starts_with
	if m.MetricNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.MetricNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_name_starts_with\":null")
		first = false
	}

	// handle nullable field metric_type
	if m.MetricType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":")
		bytes, err := swag.WriteJSON(m.MetricType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type\":null")
		first = false
	}

	// handle non nullable field metric_type_in with omitempty
	if swag.IsZero(m.MetricTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type_in\":")
		bytes, err := swag.WriteJSON(m.MetricTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field metric_type_not
	if m.MetricTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type_not\":")
		bytes, err := swag.WriteJSON(m.MetricTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetricTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type_not\":null")
		first = false
	}

	// handle non nullable field metric_type_not_in with omitempty
	if swag.IsZero(m.MetricTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"metric_type_not_in\":")
		bytes, err := swag.WriteJSON(m.MetricTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field namespaces_every
	if m.NamespacesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_every\":")
		bytes, err := swag.WriteJSON(m.NamespacesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_every\":null")
		first = false
	}

	// handle nullable field namespaces_none
	if m.NamespacesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_none\":")
		bytes, err := swag.WriteJSON(m.NamespacesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_none\":null")
		first = false
	}

	// handle nullable field namespaces_some
	if m.NamespacesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_some\":")
		bytes, err := swag.WriteJSON(m.NamespacesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NamespacesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"namespaces_some\":null")
		first = false
	}

	// handle nullable field network
	if m.Network != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":")
		bytes, err := swag.WriteJSON(m.Network)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Network_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network\":null")
		first = false
	}

	// handle non nullable field network_in with omitempty
	if swag.IsZero(m.NetworkIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_in\":")
		bytes, err := swag.WriteJSON(m.NetworkIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field network_not
	if m.NetworkNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_not\":")
		bytes, err := swag.WriteJSON(m.NetworkNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NetworkNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_not\":null")
		first = false
	}

	// handle non nullable field network_not_in with omitempty
	if swag.IsZero(m.NetworkNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"network_not_in\":")
		bytes, err := swag.WriteJSON(m.NetworkNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nics_every
	if m.NicsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_every\":")
		bytes, err := swag.WriteJSON(m.NicsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_every\":null")
		first = false
	}

	// handle nullable field nics_none
	if m.NicsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_none\":")
		bytes, err := swag.WriteJSON(m.NicsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_none\":null")
		first = false
	}

	// handle nullable field nics_some
	if m.NicsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_some\":")
		bytes, err := swag.WriteJSON(m.NicsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nics_some\":null")
		first = false
	}

	// handle nullable field resource_type
	if m.ResourceType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":")
		bytes, err := swag.WriteJSON(m.ResourceType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type\":null")
		first = false
	}

	// handle nullable field resource_type_contains
	if m.ResourceTypeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_contains\":null")
		first = false
	}

	// handle nullable field resource_type_ends_with
	if m.ResourceTypeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_ends_with\":null")
		first = false
	}

	// handle nullable field resource_type_gt
	if m.ResourceTypeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gt\":null")
		first = false
	}

	// handle nullable field resource_type_gte
	if m.ResourceTypeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_gte\":null")
		first = false
	}

	// handle non nullable field resource_type_in with omitempty
	if swag.IsZero(m.ResourceTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_type_lt
	if m.ResourceTypeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lt\":null")
		first = false
	}

	// handle nullable field resource_type_lte
	if m.ResourceTypeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_lte\":null")
		first = false
	}

	// handle nullable field resource_type_not
	if m.ResourceTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not\":null")
		first = false
	}

	// handle nullable field resource_type_not_contains
	if m.ResourceTypeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_contains\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_contains\":null")
		first = false
	}

	// handle nullable field resource_type_not_ends_with
	if m.ResourceTypeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_ends_with\":null")
		first = false
	}

	// handle non nullable field resource_type_not_in with omitempty
	if swag.IsZero(m.ResourceTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_type_not_starts_with
	if m.ResourceTypeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_not_starts_with\":null")
		first = false
	}

	// handle nullable field resource_type_starts_with
	if m.ResourceTypeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResourceTypeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceTypeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_type_starts_with\":null")
		first = false
	}

	// handle nullable field service
	if m.Service != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":")
		bytes, err := swag.WriteJSON(m.Service)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Service_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service\":null")
		first = false
	}

	// handle nullable field service_contains
	if m.ServiceContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_contains\":")
		bytes, err := swag.WriteJSON(m.ServiceContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_contains\":null")
		first = false
	}

	// handle nullable field service_ends_with
	if m.ServiceEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_ends_with\":")
		bytes, err := swag.WriteJSON(m.ServiceEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_ends_with\":null")
		first = false
	}

	// handle nullable field service_gt
	if m.ServiceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_gt\":")
		bytes, err := swag.WriteJSON(m.ServiceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_gt\":null")
		first = false
	}

	// handle nullable field service_gte
	if m.ServiceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_gte\":")
		bytes, err := swag.WriteJSON(m.ServiceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_gte\":null")
		first = false
	}

	// handle non nullable field service_in with omitempty
	if swag.IsZero(m.ServiceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_in\":")
		bytes, err := swag.WriteJSON(m.ServiceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field service_lt
	if m.ServiceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_lt\":")
		bytes, err := swag.WriteJSON(m.ServiceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_lt\":null")
		first = false
	}

	// handle nullable field service_lte
	if m.ServiceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_lte\":")
		bytes, err := swag.WriteJSON(m.ServiceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_lte\":null")
		first = false
	}

	// handle nullable field service_not
	if m.ServiceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not\":")
		bytes, err := swag.WriteJSON(m.ServiceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not\":null")
		first = false
	}

	// handle nullable field service_not_contains
	if m.ServiceNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_contains\":")
		bytes, err := swag.WriteJSON(m.ServiceNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_contains\":null")
		first = false
	}

	// handle nullable field service_not_ends_with
	if m.ServiceNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ServiceNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_ends_with\":null")
		first = false
	}

	// handle non nullable field service_not_in with omitempty
	if swag.IsZero(m.ServiceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_in\":")
		bytes, err := swag.WriteJSON(m.ServiceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field service_not_starts_with
	if m.ServiceNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ServiceNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_not_starts_with\":null")
		first = false
	}

	// handle nullable field service_starts_with
	if m.ServiceStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_starts_with\":")
		bytes, err := swag.WriteJSON(m.ServiceStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ServiceStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"service_starts_with\":null")
		first = false
	}

	// handle nullable field title
	if m.Title != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":")
		bytes, err := swag.WriteJSON(m.Title)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Title_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title\":null")
		first = false
	}

	// handle nullable field title_contains
	if m.TitleContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_contains\":")
		bytes, err := swag.WriteJSON(m.TitleContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_contains\":null")
		first = false
	}

	// handle nullable field title_ends_with
	if m.TitleEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_ends_with\":")
		bytes, err := swag.WriteJSON(m.TitleEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_ends_with\":null")
		first = false
	}

	// handle nullable field title_gt
	if m.TitleGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_gt\":")
		bytes, err := swag.WriteJSON(m.TitleGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_gt\":null")
		first = false
	}

	// handle nullable field title_gte
	if m.TitleGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_gte\":")
		bytes, err := swag.WriteJSON(m.TitleGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_gte\":null")
		first = false
	}

	// handle non nullable field title_in with omitempty
	if swag.IsZero(m.TitleIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_in\":")
		bytes, err := swag.WriteJSON(m.TitleIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field title_lt
	if m.TitleLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_lt\":")
		bytes, err := swag.WriteJSON(m.TitleLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_lt\":null")
		first = false
	}

	// handle nullable field title_lte
	if m.TitleLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_lte\":")
		bytes, err := swag.WriteJSON(m.TitleLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_lte\":null")
		first = false
	}

	// handle nullable field title_not
	if m.TitleNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not\":")
		bytes, err := swag.WriteJSON(m.TitleNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not\":null")
		first = false
	}

	// handle nullable field title_not_contains
	if m.TitleNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_contains\":")
		bytes, err := swag.WriteJSON(m.TitleNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_contains\":null")
		first = false
	}

	// handle nullable field title_not_ends_with
	if m.TitleNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.TitleNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_ends_with\":null")
		first = false
	}

	// handle non nullable field title_not_in with omitempty
	if swag.IsZero(m.TitleNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_in\":")
		bytes, err := swag.WriteJSON(m.TitleNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field title_not_starts_with
	if m.TitleNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.TitleNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_not_starts_with\":null")
		first = false
	}

	// handle nullable field title_starts_with
	if m.TitleStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_starts_with\":")
		bytes, err := swag.WriteJSON(m.TitleStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TitleStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"title_starts_with\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field view
	if m.View != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"view\":")
		bytes, err := swag.WriteJSON(m.View)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.View_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"view\":null")
		first = false
	}

	// handle nullable field vmNics_every
	if m.VMNicsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_every\":")
		bytes, err := swag.WriteJSON(m.VMNicsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_every\":null")
		first = false
	}

	// handle nullable field vmNics_none
	if m.VMNicsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_none\":")
		bytes, err := swag.WriteJSON(m.VMNicsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_none\":null")
		first = false
	}

	// handle nullable field vmNics_some
	if m.VMNicsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_some\":")
		bytes, err := swag.WriteJSON(m.VMNicsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNicsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmNics_some\":null")
		first = false
	}

	// handle nullable field vmVolumes_every
	if m.VMVolumesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_every\":")
		bytes, err := swag.WriteJSON(m.VMVolumesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_every\":null")
		first = false
	}

	// handle nullable field vmVolumes_none
	if m.VMVolumesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_none\":")
		bytes, err := swag.WriteJSON(m.VMVolumesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_none\":null")
		first = false
	}

	// handle nullable field vmVolumes_some
	if m.VMVolumesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_some\":")
		bytes, err := swag.WriteJSON(m.VMVolumesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMVolumesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vmVolumes_some\":null")
		first = false
	}

	// handle nullable field vms_every
	if m.VmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":")
		bytes, err := swag.WriteJSON(m.VmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_every\":null")
		first = false
	}

	// handle nullable field vms_none
	if m.VmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":")
		bytes, err := swag.WriteJSON(m.VmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_none\":null")
		first = false
	}

	// handle nullable field vms_some
	if m.VmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":")
		bytes, err := swag.WriteJSON(m.VmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms_some\":null")
		first = false
	}

	// handle nullable field witnesses_every
	if m.WitnessesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_every\":")
		bytes, err := swag.WriteJSON(m.WitnessesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WitnessesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_every\":null")
		first = false
	}

	// handle nullable field witnesses_none
	if m.WitnessesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_none\":")
		bytes, err := swag.WriteJSON(m.WitnessesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WitnessesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_none\":null")
		first = false
	}

	// handle nullable field witnesses_some
	if m.WitnessesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_some\":")
		bytes, err := swag.WriteJSON(m.WitnessesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WitnessesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"witnesses_some\":null")
		first = false
	}

	// handle nullable field zones_every
	if m.ZonesEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_every\":")
		bytes, err := swag.WriteJSON(m.ZonesEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZonesEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_every\":null")
		first = false
	}

	// handle nullable field zones_none
	if m.ZonesNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_none\":")
		bytes, err := swag.WriteJSON(m.ZonesNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZonesNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_none\":null")
		first = false
	}

	// handle nullable field zones_some
	if m.ZonesSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_some\":")
		bytes, err := swag.WriteJSON(m.ZonesSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZonesSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zones_some\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this graph where input
func (m *GraphWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksEvery) { // not required
		return nil
	}

	if m.DisksEvery != nil {
		if err := m.DisksEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksNone(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksNone) { // not required
		return nil
	}

	if m.DisksNone != nil {
		if err := m.DisksNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksSome(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksSome) { // not required
		return nil
	}

	if m.DisksSome != nil {
		if err := m.DisksSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateHostsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsEvery) { // not required
		return nil
	}

	if m.HostsEvery != nil {
		if err := m.HostsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateHostsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsNone) { // not required
		return nil
	}

	if m.HostsNone != nil {
		if err := m.HostsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateHostsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsSome) { // not required
		return nil
	}

	if m.HostsSome != nil {
		if err := m.HostsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsEvery) { // not required
		return nil
	}

	if m.LunsEvery != nil {
		if err := m.LunsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsNone) { // not required
		return nil
	}

	if m.LunsNone != nil {
		if err := m.LunsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsSome) { // not required
		return nil
	}

	if m.LunsSome != nil {
		if err := m.LunsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricType(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricType) { // not required
		return nil
	}

	if m.MetricType != nil {
		if err := m.MetricType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricTypeIn); i++ {

		if err := m.MetricTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeNot) { // not required
		return nil
	}

	if m.MetricTypeNot != nil {
		if err := m.MetricTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricTypeNotIn); i++ {

		if err := m.MetricTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesEvery) { // not required
		return nil
	}

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesNone) { // not required
		return nil
	}

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesSome) { // not required
		return nil
	}

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetworkIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkIn); i++ {

		if err := m.NetworkIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNetworkNot(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkNot) { // not required
		return nil
	}

	if m.NetworkNot != nil {
		if err := m.NetworkNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetworkNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkNotIn); i++ {

		if err := m.NetworkNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsEvery) { // not required
		return nil
	}

	if m.NicsEvery != nil {
		if err := m.NicsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsNone) { // not required
		return nil
	}

	if m.NicsNone != nil {
		if err := m.NicsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsSome) { // not required
		return nil
	}

	if m.NicsSome != nil {
		if err := m.NicsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateView(formats strfmt.Registry) error {
	if swag.IsZero(m.View) { // not required
		return nil
	}

	if m.View != nil {
		if err := m.View.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsEvery) { // not required
		return nil
	}

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsNone) { // not required
		return nil
	}

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsSome) { // not required
		return nil
	}

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesEvery) { // not required
		return nil
	}

	if m.VMVolumesEvery != nil {
		if err := m.VMVolumesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesNone) { // not required
		return nil
	}

	if m.VMVolumesNone != nil {
		if err := m.VMVolumesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesSome) { // not required
		return nil
	}

	if m.VMVolumesSome != nil {
		if err := m.VMVolumesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesEvery) { // not required
		return nil
	}

	if m.WitnessesEvery != nil {
		if err := m.WitnessesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesNone) { // not required
		return nil
	}

	if m.WitnessesNone != nil {
		if err := m.WitnessesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesSome) { // not required
		return nil
	}

	if m.WitnessesSome != nil {
		if err := m.WitnessesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesEvery) { // not required
		return nil
	}

	if m.ZonesEvery != nil {
		if err := m.ZonesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesNone) { // not required
		return nil
	}

	if m.ZonesNone != nil {
		if err := m.ZonesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesSome) { // not required
		return nil
	}

	if m.ZonesSome != nil {
		if err := m.ZonesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph where input based on the context it is used
func (m *GraphWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksEvery != nil {
		if err := m.DisksEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksNone(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksNone != nil {
		if err := m.DisksNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksSome(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksSome != nil {
		if err := m.DisksSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsEvery != nil {
		if err := m.HostsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsNone != nil {
		if err := m.HostsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsSome != nil {
		if err := m.HostsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsEvery != nil {
		if err := m.LunsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsNone != nil {
		if err := m.LunsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsSome != nil {
		if err := m.LunsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricType(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricType != nil {
		if err := m.MetricType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetricTypeIn); i++ {

		if err := m.MetricTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricTypeNot != nil {
		if err := m.MetricTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetricTypeNotIn); i++ {

		if err := m.MetricTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkIn); i++ {

		if err := m.NetworkIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkNot(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkNot != nil {
		if err := m.NetworkNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkNotIn); i++ {

		if err := m.NetworkNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsEvery != nil {
		if err := m.NicsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsNone != nil {
		if err := m.NicsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsSome != nil {
		if err := m.NicsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	if m.View != nil {
		if err := m.View.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesEvery != nil {
		if err := m.VMVolumesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesNone != nil {
		if err := m.VMVolumesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesSome != nil {
		if err := m.VMVolumesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesEvery != nil {
		if err := m.WitnessesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesNone != nil {
		if err := m.WitnessesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesSome != nil {
		if err := m.WitnessesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesEvery != nil {
		if err := m.ZonesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesNone != nil {
		if err := m.ZonesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesSome != nil {
		if err := m.ZonesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphWhereInput) UnmarshalBinary(b []byte) error {
	var res GraphWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
