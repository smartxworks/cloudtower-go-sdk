// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMNicQosTraffic Vm nic qos traffic
//
// swagger:model VmNicQosTraffic
type VMNicQosTraffic struct {

	// burst
	Burst *int64 `json:"burst,omitempty"`

	// burst unit
	BurstUnit *BitUnit `json:"burst_unit,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// rate limit
	RateLimit *int64 `json:"rate_limit,omitempty"`

	// rate limit unit
	RateLimitUnit *BitPSUnit `json:"rate_limit_unit,omitempty"`

	MarshalOpts *VMNicQosTrafficMarshalOpts `json:"-"`
}

type VMNicQosTrafficMarshalOpts struct {
	Burst_Explicit_Null_When_Empty bool

	BurstUnit_Explicit_Null_When_Empty bool

	Enabled_Explicit_Null_When_Empty bool

	RateLimit_Explicit_Null_When_Empty bool

	RateLimitUnit_Explicit_Null_When_Empty bool
}

func (m VMNicQosTraffic) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field burst
	if m.Burst != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"burst\":")
		bytes, err := swag.WriteJSON(m.Burst)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Burst_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"burst\":null")
		first = false
	}

	// handle nullable field burst_unit
	if m.BurstUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"burst_unit\":")
		bytes, err := swag.WriteJSON(m.BurstUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BurstUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"burst_unit\":null")
		first = false
	}

	// handle nullable field enabled
	if m.Enabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":")
		bytes, err := swag.WriteJSON(m.Enabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Enabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":null")
		first = false
	}

	// handle nullable field rate_limit
	if m.RateLimit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rate_limit\":")
		bytes, err := swag.WriteJSON(m.RateLimit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RateLimit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rate_limit\":null")
		first = false
	}

	// handle nullable field rate_limit_unit
	if m.RateLimitUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rate_limit_unit\":")
		bytes, err := swag.WriteJSON(m.RateLimitUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RateLimitUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rate_limit_unit\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm nic qos traffic
func (m *VMNicQosTraffic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBurstUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLimitUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicQosTraffic) validateBurstUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BurstUnit) { // not required
		return nil
	}

	if m.BurstUnit != nil {
		if err := m.BurstUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("burst_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("burst_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMNicQosTraffic) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *VMNicQosTraffic) validateRateLimitUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.RateLimitUnit) { // not required
		return nil
	}

	if m.RateLimitUnit != nil {
		if err := m.RateLimitUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate_limit_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate_limit_unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm nic qos traffic based on the context it is used
func (m *VMNicQosTraffic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBurstUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateLimitUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMNicQosTraffic) contextValidateBurstUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.BurstUnit != nil {
		if err := m.BurstUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("burst_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("burst_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMNicQosTraffic) contextValidateRateLimitUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.RateLimitUnit != nil {
		if err := m.RateLimitUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate_limit_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate_limit_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMNicQosTraffic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMNicQosTraffic) UnmarshalBinary(b []byte) error {
	var res VMNicQosTraffic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
