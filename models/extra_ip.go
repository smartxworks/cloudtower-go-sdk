// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtraIP extra Ip
//
// swagger:model ExtraIp
type ExtraIP struct {

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// management ip
	// Required: true
	ManagementIP *string `json:"management_ip"`

	MarshalOpts *ExtraIPMarshalOpts `json:"-"`
}

type ExtraIPMarshalOpts struct {
	HostID_Explicit_Null_When_Empty bool

	ManagementIP_Explicit_Null_When_Empty bool
}

func (m ExtraIP) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field host_id
	if m.HostID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_id\":")
		bytes, err := swag.WriteJSON(m.HostID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HostID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host_id\":null")
		first = false
	}

	// handle nullable field management_ip
	if m.ManagementIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip\":")
		bytes, err := swag.WriteJSON(m.ManagementIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this extra Ip
func (m *ExtraIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtraIP) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *ExtraIP) validateManagementIP(formats strfmt.Registry) error {

	if err := validate.Required("management_ip", "body", m.ManagementIP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this extra Ip based on context it is used
func (m *ExtraIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExtraIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtraIP) UnmarshalBinary(b []byte) error {
	var res ExtraIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
