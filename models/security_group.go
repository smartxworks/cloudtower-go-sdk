// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityGroup security group
//
// swagger:model SecurityGroup
type SecurityGroup struct {

	// description
	Description *string `json:"description,omitempty"`

	// everoute cluster
	// Required: true
	EverouteCluster *NestedEverouteCluster `json:"everoute_cluster"`

	// id
	// Required: true
	ID *string `json:"id"`

	// isolation policies
	IsolationPolicies []*NestedIsolationPolicy `json:"isolation_policies,omitempty"`

	// label groups
	LabelGroups []*NestedLabelGroup `json:"label_groups,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// security policies
	SecurityPolicies []*NestedSecurityPolicy `json:"security_policies,omitempty"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	MarshalOpts *SecurityGroupMarshalOpts `json:"-"`
}

type SecurityGroupMarshalOpts struct {
	Description_Explicit_Null_When_Empty bool

	EverouteCluster_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IsolationPolicies_Explicit_Null_When_Empty bool

	LabelGroups_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	SecurityPolicies_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool
}

func (m SecurityGroup) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field everoute_cluster
	if m.EverouteCluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster\":")
		bytes, err := swag.WriteJSON(m.EverouteCluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EverouteCluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"everoute_cluster\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle non nullable field isolation_policies with omitempty
	if swag.IsZero(m.IsolationPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"isolation_policies\":")
		bytes, err := swag.WriteJSON(m.IsolationPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field label_groups with omitempty
	if swag.IsZero(m.LabelGroups) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"label_groups\":")
		bytes, err := swag.WriteJSON(m.LabelGroups)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle non nullable field security_policies with omitempty
	if swag.IsZero(m.SecurityPolicies) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_policies\":")
		bytes, err := swag.WriteJSON(m.SecurityPolicies)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field vms with omitempty
	if swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this security group
func (m *SecurityGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEverouteCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroup) validateEverouteCluster(formats strfmt.Registry) error {

	if err := validate.Required("everoute_cluster", "body", m.EverouteCluster); err != nil {
		return err
	}

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroup) validateIsolationPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.IsolationPolicies); i++ {
		if swag.IsZero(m.IsolationPolicies[i]) { // not required
			continue
		}

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) validateLabelGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelGroups); i++ {
		if swag.IsZero(m.LabelGroups[i]) { // not required
			continue
		}

		if m.LabelGroups[i] != nil {
			if err := m.LabelGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("label_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("label_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroup) validateSecurityPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityPolicies); i++ {
		if swag.IsZero(m.SecurityPolicies[i]) { // not required
			continue
		}

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this security group based on the context it is used
func (m *SecurityGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEverouteCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroup) contextValidateEverouteCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.EverouteCluster != nil {
		if err := m.EverouteCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("everoute_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("everoute_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGroup) contextValidateIsolationPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IsolationPolicies); i++ {

		if m.IsolationPolicies[i] != nil {
			if err := m.IsolationPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("isolation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) contextValidateLabelGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelGroups); i++ {

		if m.LabelGroups[i] != nil {
			if err := m.LabelGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("label_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("label_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) contextValidateSecurityPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityPolicies); i++ {

		if m.SecurityPolicies[i] != nil {
			if err := m.SecurityPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecurityGroup) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroup) UnmarshalBinary(b []byte) error {
	var res SecurityGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
