// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NestedStep nested step
//
// swagger:model NestedStep
type NestedStep struct {

	// current
	Current *float64 `json:"current,omitempty"`

	// finished
	Finished *bool `json:"finished,omitempty"`

	// key
	Key *string `json:"key,omitempty"`

	// per second
	PerSecond *float64 `json:"per_second,omitempty"`

	// total
	Total *float64 `json:"total,omitempty"`

	// unit
	Unit *StepUnit `json:"unit,omitempty"`

	MarshalOpts *NestedStepMarshalOpts `json:"-"`
}

type NestedStepMarshalOpts struct {
	Current_Explicit_Null_When_Empty bool

	Finished_Explicit_Null_When_Empty bool

	Key_Explicit_Null_When_Empty bool

	PerSecond_Explicit_Null_When_Empty bool

	Total_Explicit_Null_When_Empty bool

	Unit_Explicit_Null_When_Empty bool
}

func (m NestedStep) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field current
	if m.Current != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current\":")
		bytes, err := swag.WriteJSON(m.Current)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Current_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"current\":null")
		first = false
	}

	// handle nullable field finished
	if m.Finished != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished\":")
		bytes, err := swag.WriteJSON(m.Finished)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Finished_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished\":null")
		first = false
	}

	// handle nullable field key
	if m.Key != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":")
		bytes, err := swag.WriteJSON(m.Key)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Key_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"key\":null")
		first = false
	}

	// handle nullable field per_second
	if m.PerSecond != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"per_second\":")
		bytes, err := swag.WriteJSON(m.PerSecond)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PerSecond_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"per_second\":null")
		first = false
	}

	// handle nullable field total
	if m.Total != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total\":")
		bytes, err := swag.WriteJSON(m.Total)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Total_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total\":null")
		first = false
	}

	// handle nullable field unit
	if m.Unit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unit\":")
		bytes, err := swag.WriteJSON(m.Unit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Unit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unit\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested step
func (m *NestedStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedStep) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested step based on the context it is used
func (m *NestedStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedStep) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {
		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedStep) UnmarshalBinary(b []byte) error {
	var res NestedStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
