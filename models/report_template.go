// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportTemplate report template
//
// swagger:model ReportTemplate
type ReportTemplate struct {

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// description
	// Required: true
	Description *string `json:"description"`

	// execute plan
	// Required: true
	ExecutePlan []*NestedExecutePlan `json:"execute_plan"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// preset
	Preset *string `json:"preset,omitempty"`

	// resource meta
	// Required: true
	ResourceMeta []*NestedResourceMeta `json:"resource_meta"`

	// task num
	// Required: true
	TaskNum *int32 `json:"task_num"`

	// tasks
	Tasks []*NestedReportTask `json:"tasks,omitempty"`

	MarshalOpts *ReportTemplateMarshalOpts `json:"-"`
}

type ReportTemplateMarshalOpts struct {
	CreatedAt_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	ExecutePlan_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Preset_Explicit_Null_When_Empty bool

	ResourceMeta_Explicit_Null_When_Empty bool

	TaskNum_Explicit_Null_When_Empty bool

	Tasks_Explicit_Null_When_Empty bool
}

func (m ReportTemplate) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle non nullable field execute_plan without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"execute_plan\":")
	{
		bytes, err := swag.WriteJSON(m.ExecutePlan)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field preset
	if m.Preset != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":")
		bytes, err := swag.WriteJSON(m.Preset)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Preset_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":null")
		first = false
	}

	// handle non nullable field resource_meta without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"resource_meta\":")
	{
		bytes, err := swag.WriteJSON(m.ResourceMeta)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field task_num
	if m.TaskNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_num\":")
		bytes, err := swag.WriteJSON(m.TaskNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_num\":null")
		first = false
	}

	// handle non nullable field tasks with omitempty
	if swag.IsZero(m.Tasks) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tasks\":")
		bytes, err := swag.WriteJSON(m.Tasks)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this report template
func (m *ReportTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplate) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateExecutePlan(formats strfmt.Registry) error {

	if err := validate.Required("execute_plan", "body", m.ExecutePlan); err != nil {
		return err
	}

	for i := 0; i < len(m.ExecutePlan); i++ {
		if swag.IsZero(m.ExecutePlan[i]) { // not required
			continue
		}

		if m.ExecutePlan[i] != nil {
			if err := m.ExecutePlan[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateResourceMeta(formats strfmt.Registry) error {

	if err := validate.Required("resource_meta", "body", m.ResourceMeta); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceMeta); i++ {
		if swag.IsZero(m.ResourceMeta[i]) { // not required
			continue
		}

		if m.ResourceMeta[i] != nil {
			if err := m.ResourceMeta[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) validateTaskNum(formats strfmt.Registry) error {

	if err := validate.Required("task_num", "body", m.TaskNum); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this report template based on the context it is used
func (m *ReportTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplate) contextValidateExecutePlan(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutePlan); i++ {

		if m.ExecutePlan[i] != nil {
			if err := m.ExecutePlan[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) contextValidateResourceMeta(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceMeta); i++ {

		if m.ResourceMeta[i] != nil {
			if err := m.ResourceMeta[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTemplate) UnmarshalBinary(b []byte) error {
	var res ReportTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
