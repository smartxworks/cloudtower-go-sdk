// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupPlan backup plan
//
// swagger:model BackupPlan
type BackupPlan struct {

	// backup delay option
	BackupDelayOption *BackupPlanDelayOption `json:"backup_delay_option,omitempty"`

	// backup plan executions
	BackupPlanExecutions []*NestedBackupPlanExecution `json:"backup_plan_executions,omitempty"`

	// backup restore point count
	BackupRestorePointCount *int32 `json:"backup_restore_point_count,omitempty"`

	// backup restore points
	BackupRestorePoints []*NestedBackupRestorePoint `json:"backup_restore_points,omitempty"`

	// backup service
	// Required: true
	BackupService *NestedBackupService `json:"backup_service"`

	// backup store repository
	// Required: true
	BackupStoreRepository *NestedBackupStoreRepository `json:"backup_store_repository"`

	// backup total size
	BackupTotalSize *int64 `json:"backup_total_size,omitempty"`

	// compression
	Compression *bool `json:"compression,omitempty"`

	// compression ratio
	CompressionRatio *float64 `json:"compression_ratio,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// delete strategy
	DeleteStrategy *BackupPlanDeleteStrategy `json:"delete_strategy,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// enable window
	// Required: true
	EnableWindow *bool `json:"enable_window"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// full interval
	// Required: true
	FullInterval *int32 `json:"full_interval"`

	// full period
	// Required: true
	FullPeriod *BackupPlanPeriod `json:"full_period"`

	// full time point
	// Required: true
	FullTimePoint *NestedBackupPlanTimePoint `json:"full_time_point"`

	// id
	// Required: true
	ID *string `json:"id"`

	// incremental interval
	IncrementalInterval *int32 `json:"incremental_interval,omitempty"`

	// incremental period
	// Required: true
	IncrementalPeriod *BackupPlanPeriod `json:"incremental_period"`

	// incremental time points
	// Required: true
	IncrementalTimePoints []*NestedBackupPlanTimePoint `json:"incremental_time_points"`

	// incremental weekdays
	IncrementalWeekdays []WeekdayTypeEnum `json:"incremental_weekdays,omitempty"`

	// keep policy
	KeepPolicy *BackupPlanKeepPolicy `json:"keep_policy,omitempty"`

	// keep policy value
	KeepPolicyValue *int32 `json:"keep_policy_value,omitempty"`

	// last execute status
	// Required: true
	LastExecuteStatus *BackupPlanExecutionStatus `json:"last_execute_status"`

	// last execute status message
	LastExecuteStatusMessage *string `json:"last_execute_status_message,omitempty"`

	// last execute success job count
	LastExecuteSuccessJobCount *int32 `json:"last_execute_success_job_count,omitempty"`

	// last execute total job count
	LastExecuteTotalJobCount *int32 `json:"last_execute_total_job_count,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last manual execute status
	// Required: true
	LastManualExecuteStatus *BackupPlanExecutionStatus `json:"last_manual_execute_status"`

	// last manual execute status message
	LastManualExecuteStatusMessage *string `json:"last_manual_execute_status_message,omitempty"`

	// last manual execute success job count
	LastManualExecuteSuccessJobCount *int32 `json:"last_manual_execute_success_job_count,omitempty"`

	// last manual execute total job count
	LastManualExecuteTotalJobCount *int32 `json:"last_manual_execute_total_job_count,omitempty"`

	// last manual executed at
	LastManualExecutedAt *string `json:"last_manual_executed_at,omitempty"`

	// logical size
	LogicalSize *int64 `json:"logical_size,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// next execute time
	NextExecuteTime *string `json:"next_execute_time,omitempty"`

	// phase
	Phase *BackupPlanPhase `json:"phase,omitempty"`

	// physical size
	PhysicalSize *int64 `json:"physical_size,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// status
	// Required: true
	Status *BackupPlanStatus `json:"status"`

	// valid size of backup object
	ValidSizeOfBackupObject *int64 `json:"valid_size_of_backup_object,omitempty"`

	// valid size of restore point
	ValidSizeOfRestorePoint *int64 `json:"valid_size_of_restore_point,omitempty"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	MarshalOpts *BackupPlanMarshalOpts `json:"-"`
}

type BackupPlanMarshalOpts struct {
	BackupDelayOption_Explicit_Null_When_Empty bool

	BackupPlanExecutions_Explicit_Null_When_Empty bool

	BackupRestorePointCount_Explicit_Null_When_Empty bool

	BackupRestorePoints_Explicit_Null_When_Empty bool

	BackupService_Explicit_Null_When_Empty bool

	BackupStoreRepository_Explicit_Null_When_Empty bool

	BackupTotalSize_Explicit_Null_When_Empty bool

	Compression_Explicit_Null_When_Empty bool

	CompressionRatio_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	DeleteStrategy_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	EnableWindow_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	FullInterval_Explicit_Null_When_Empty bool

	FullPeriod_Explicit_Null_When_Empty bool

	FullTimePoint_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IncrementalInterval_Explicit_Null_When_Empty bool

	IncrementalPeriod_Explicit_Null_When_Empty bool

	IncrementalTimePoints_Explicit_Null_When_Empty bool

	IncrementalWeekdays_Explicit_Null_When_Empty bool

	KeepPolicy_Explicit_Null_When_Empty bool

	KeepPolicyValue_Explicit_Null_When_Empty bool

	LastExecuteStatus_Explicit_Null_When_Empty bool

	LastExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	LastManualExecuteStatus_Explicit_Null_When_Empty bool

	LastManualExecuteStatusMessage_Explicit_Null_When_Empty bool

	LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty bool

	LastManualExecuteTotalJobCount_Explicit_Null_When_Empty bool

	LastManualExecutedAt_Explicit_Null_When_Empty bool

	LogicalSize_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NextExecuteTime_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	PhysicalSize_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	ValidSizeOfBackupObject_Explicit_Null_When_Empty bool

	ValidSizeOfRestorePoint_Explicit_Null_When_Empty bool

	Vms_Explicit_Null_When_Empty bool

	WindowEnd_Explicit_Null_When_Empty bool

	WindowStart_Explicit_Null_When_Empty bool
}

func (m BackupPlan) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field backup_delay_option
	if m.BackupDelayOption != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":")
		bytes, err := swag.WriteJSON(m.BackupDelayOption)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupDelayOption_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_delay_option\":null")
		first = false
	}

	// handle non nullable field backup_plan_executions with omitempty
	if swag.IsZero(m.BackupPlanExecutions) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan_executions\":")
		bytes, err := swag.WriteJSON(m.BackupPlanExecutions)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_restore_point_count
	if m.BackupRestorePointCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_point_count\":null")
		first = false
	}

	// handle non nullable field backup_restore_points with omitempty
	if swag.IsZero(m.BackupRestorePoints) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_service
	if m.BackupService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":")
		bytes, err := swag.WriteJSON(m.BackupService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":null")
		first = false
	}

	// handle nullable field backup_store_repository
	if m.BackupStoreRepository != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository\":")
		bytes, err := swag.WriteJSON(m.BackupStoreRepository)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupStoreRepository_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_store_repository\":null")
		first = false
	}

	// handle nullable field backup_total_size
	if m.BackupTotalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size\":")
		bytes, err := swag.WriteJSON(m.BackupTotalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTotalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_total_size\":null")
		first = false
	}

	// handle nullable field compression
	if m.Compression != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":")
		bytes, err := swag.WriteJSON(m.Compression)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compression_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression\":null")
		first = false
	}

	// handle nullable field compression_ratio
	if m.CompressionRatio != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":")
		bytes, err := swag.WriteJSON(m.CompressionRatio)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatio_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field delete_strategy
	if m.DeleteStrategy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":")
		bytes, err := swag.WriteJSON(m.DeleteStrategy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeleteStrategy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"delete_strategy\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field enable_window
	if m.EnableWindow != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":")
		bytes, err := swag.WriteJSON(m.EnableWindow)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableWindow_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_window\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field full_interval
	if m.FullInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":")
		bytes, err := swag.WriteJSON(m.FullInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_interval\":null")
		first = false
	}

	// handle nullable field full_period
	if m.FullPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":")
		bytes, err := swag.WriteJSON(m.FullPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_period\":null")
		first = false
	}

	// handle nullable field full_time_point
	if m.FullTimePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_time_point\":")
		bytes, err := swag.WriteJSON(m.FullTimePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FullTimePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"full_time_point\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field incremental_interval
	if m.IncrementalInterval != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":")
		bytes, err := swag.WriteJSON(m.IncrementalInterval)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalInterval_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_interval\":null")
		first = false
	}

	// handle nullable field incremental_period
	if m.IncrementalPeriod != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":")
		bytes, err := swag.WriteJSON(m.IncrementalPeriod)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IncrementalPeriod_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_period\":null")
		first = false
	}

	// handle non nullable field incremental_time_points without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_time_points\":")
		bytes, err := swag.WriteJSON(m.IncrementalTimePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field incremental_weekdays with omitempty
	if swag.IsZero(m.IncrementalWeekdays) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"incremental_weekdays\":")
		bytes, err := swag.WriteJSON(m.IncrementalWeekdays)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field keep_policy
	if m.KeepPolicy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":")
		bytes, err := swag.WriteJSON(m.KeepPolicy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy\":null")
		first = false
	}

	// handle nullable field keep_policy_value
	if m.KeepPolicyValue != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":")
		bytes, err := swag.WriteJSON(m.KeepPolicyValue)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.KeepPolicyValue_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"keep_policy_value\":null")
		first = false
	}

	// handle nullable field last_execute_status
	if m.LastExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status\":null")
		first = false
	}

	// handle nullable field last_execute_status_message
	if m.LastExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_execute_success_job_count
	if m.LastExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_execute_total_job_count
	if m.LastExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status
	if m.LastManualExecuteStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status\":null")
		first = false
	}

	// handle nullable field last_manual_execute_status_message
	if m.LastManualExecuteStatusMessage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteStatusMessage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteStatusMessage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_status_message\":null")
		first = false
	}

	// handle nullable field last_manual_execute_success_job_count
	if m.LastManualExecuteSuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteSuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteSuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_success_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_execute_total_job_count
	if m.LastManualExecuteTotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":")
		bytes, err := swag.WriteJSON(m.LastManualExecuteTotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecuteTotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_execute_total_job_count\":null")
		first = false
	}

	// handle nullable field last_manual_executed_at
	if m.LastManualExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastManualExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastManualExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_manual_executed_at\":null")
		first = false
	}

	// handle nullable field logical_size
	if m.LogicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":")
		bytes, err := swag.WriteJSON(m.LogicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field next_execute_time
	if m.NextExecuteTime != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time\":")
		bytes, err := swag.WriteJSON(m.NextExecuteTime)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NextExecuteTime_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"next_execute_time\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field physical_size
	if m.PhysicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":")
		bytes, err := swag.WriteJSON(m.PhysicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":null")
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle nullable field valid_size_of_backup_object
	if m.ValidSizeOfBackupObject != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfBackupObject)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfBackupObject_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_backup_object\":null")
		first = false
	}

	// handle nullable field valid_size_of_restore_point
	if m.ValidSizeOfRestorePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point\":")
		bytes, err := swag.WriteJSON(m.ValidSizeOfRestorePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeOfRestorePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_of_restore_point\":null")
		first = false
	}

	// handle non nullable field vms with omitempty
	if swag.IsZero(m.Vms) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vms\":")
		bytes, err := swag.WriteJSON(m.Vms)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field window_end
	if m.WindowEnd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":")
		bytes, err := swag.WriteJSON(m.WindowEnd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowEnd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_end\":null")
		first = false
	}

	// handle nullable field window_start
	if m.WindowStart != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":")
		bytes, err := swag.WriteJSON(m.WindowStart)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.WindowStart_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"window_start\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup plan
func (m *BackupPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupDelayOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlanExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupStoreRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullTimePoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalTimePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalWeekdays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastManualExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlan) validateBackupDelayOption(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOption) { // not required
		return nil
	}

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateBackupPlanExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlanExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupPlanExecutions); i++ {
		if swag.IsZero(m.BackupPlanExecutions[i]) { // not required
			continue
		}

		if m.BackupPlanExecutions[i] != nil {
			if err := m.BackupPlanExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plan_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plan_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) validateBackupRestorePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePoints) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupRestorePoints); i++ {
		if swag.IsZero(m.BackupRestorePoints[i]) { // not required
			continue
		}

		if m.BackupRestorePoints[i] != nil {
			if err := m.BackupRestorePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) validateBackupService(formats strfmt.Registry) error {

	if err := validate.Required("backup_service", "body", m.BackupService); err != nil {
		return err
	}

	if m.BackupService != nil {
		if err := m.BackupService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateBackupStoreRepository(formats strfmt.Registry) error {

	if err := validate.Required("backup_store_repository", "body", m.BackupStoreRepository); err != nil {
		return err
	}

	if m.BackupStoreRepository != nil {
		if err := m.BackupStoreRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_store_repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_store_repository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlan) validateDeleteStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategy) { // not required
		return nil
	}

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateEnableWindow(formats strfmt.Registry) error {

	if err := validate.Required("enable_window", "body", m.EnableWindow); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlan) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateFullInterval(formats strfmt.Registry) error {

	if err := validate.Required("full_interval", "body", m.FullInterval); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlan) validateFullPeriod(formats strfmt.Registry) error {

	if err := validate.Required("full_period", "body", m.FullPeriod); err != nil {
		return err
	}

	if err := validate.Required("full_period", "body", m.FullPeriod); err != nil {
		return err
	}

	if m.FullPeriod != nil {
		if err := m.FullPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateFullTimePoint(formats strfmt.Registry) error {

	if err := validate.Required("full_time_point", "body", m.FullTimePoint); err != nil {
		return err
	}

	if m.FullTimePoint != nil {
		if err := m.FullTimePoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_time_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_time_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlan) validateIncrementalPeriod(formats strfmt.Registry) error {

	if err := validate.Required("incremental_period", "body", m.IncrementalPeriod); err != nil {
		return err
	}

	if err := validate.Required("incremental_period", "body", m.IncrementalPeriod); err != nil {
		return err
	}

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateIncrementalTimePoints(formats strfmt.Registry) error {

	if err := validate.Required("incremental_time_points", "body", m.IncrementalTimePoints); err != nil {
		return err
	}

	for i := 0; i < len(m.IncrementalTimePoints); i++ {
		if swag.IsZero(m.IncrementalTimePoints[i]) { // not required
			continue
		}

		if m.IncrementalTimePoints[i] != nil {
			if err := m.IncrementalTimePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) validateIncrementalWeekdays(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalWeekdays) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalWeekdays); i++ {

		if err := m.IncrementalWeekdays[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlan) validateKeepPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicy) { // not required
		return nil
	}

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateLastExecuteStatus(formats strfmt.Registry) error {

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateLastManualExecuteStatus(formats strfmt.Registry) error {

	if err := validate.Required("last_manual_execute_status", "body", m.LastManualExecuteStatus); err != nil {
		return err
	}

	if err := validate.Required("last_manual_execute_status", "body", m.LastManualExecuteStatus); err != nil {
		return err
	}

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupPlan) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup plan based on the context it is used
func (m *BackupPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupDelayOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlanExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupStoreRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullTimePoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalTimePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalWeekdays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastManualExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlan) contextValidateBackupDelayOption(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupDelayOption != nil {
		if err := m.BackupDelayOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_delay_option")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateBackupPlanExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupPlanExecutions); i++ {

		if m.BackupPlanExecutions[i] != nil {
			if err := m.BackupPlanExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_plan_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_plan_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) contextValidateBackupRestorePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupRestorePoints); i++ {

		if m.BackupRestorePoints[i] != nil {
			if err := m.BackupRestorePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) contextValidateBackupService(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupService != nil {
		if err := m.BackupService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateBackupStoreRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupStoreRepository != nil {
		if err := m.BackupStoreRepository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_store_repository")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_store_repository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateDeleteStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteStrategy != nil {
		if err := m.DeleteStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateFullPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.FullPeriod != nil {
		if err := m.FullPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateFullTimePoint(ctx context.Context, formats strfmt.Registry) error {

	if m.FullTimePoint != nil {
		if err := m.FullTimePoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_time_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full_time_point")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateIncrementalPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalPeriod != nil {
		if err := m.IncrementalPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_period")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateIncrementalTimePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalTimePoints); i++ {

		if m.IncrementalTimePoints[i] != nil {
			if err := m.IncrementalTimePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("incremental_time_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlan) contextValidateIncrementalWeekdays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalWeekdays); i++ {

		if err := m.IncrementalWeekdays[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental_weekdays" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlan) contextValidateKeepPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.KeepPolicy != nil {
		if err := m.KeepPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keep_policy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateLastManualExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastManualExecuteStatus != nil {
		if err := m.LastManualExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_manual_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_manual_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPlan) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPlan) UnmarshalBinary(b []byte) error {
	var res BackupPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
