// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EcpLicenseWhereInput ecp license where input
//
// swagger:model EcpLicenseWhereInput
type EcpLicenseWhereInput struct {

	// a n d
	AND []*EcpLicenseWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*EcpLicenseWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*EcpLicenseWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// cluster local id
	ClusterLocalID *string `json:"cluster_local_id,omitempty"`

	// cluster local id contains
	ClusterLocalIDContains *string `json:"cluster_local_id_contains,omitempty"`

	// cluster local id ends with
	ClusterLocalIDEndsWith *string `json:"cluster_local_id_ends_with,omitempty"`

	// cluster local id gt
	ClusterLocalIDGt *string `json:"cluster_local_id_gt,omitempty"`

	// cluster local id gte
	ClusterLocalIDGte *string `json:"cluster_local_id_gte,omitempty"`

	// cluster local id in
	ClusterLocalIDIn []string `json:"cluster_local_id_in,omitempty"`

	// cluster local id lt
	ClusterLocalIDLt *string `json:"cluster_local_id_lt,omitempty"`

	// cluster local id lte
	ClusterLocalIDLte *string `json:"cluster_local_id_lte,omitempty"`

	// cluster local id not
	ClusterLocalIDNot *string `json:"cluster_local_id_not,omitempty"`

	// cluster local id not contains
	ClusterLocalIDNotContains *string `json:"cluster_local_id_not_contains,omitempty"`

	// cluster local id not ends with
	ClusterLocalIDNotEndsWith *string `json:"cluster_local_id_not_ends_with,omitempty"`

	// cluster local id not in
	ClusterLocalIDNotIn []string `json:"cluster_local_id_not_in,omitempty"`

	// cluster local id not starts with
	ClusterLocalIDNotStartsWith *string `json:"cluster_local_id_not_starts_with,omitempty"`

	// cluster local id starts with
	ClusterLocalIDStartsWith *string `json:"cluster_local_id_starts_with,omitempty"`

	// ecp edition
	EcpEdition *EcpEdition `json:"ecp_edition,omitempty"`

	// ecp edition in
	EcpEditionIn []EcpEdition `json:"ecp_edition_in,omitempty"`

	// ecp edition not
	EcpEditionNot *EcpEdition `json:"ecp_edition_not,omitempty"`

	// ecp edition not in
	EcpEditionNotIn []EcpEdition `json:"ecp_edition_not_in,omitempty"`

	// expire date
	ExpireDate *string `json:"expire_date,omitempty"`

	// expire date gt
	ExpireDateGt *string `json:"expire_date_gt,omitempty"`

	// expire date gte
	ExpireDateGte *string `json:"expire_date_gte,omitempty"`

	// expire date in
	ExpireDateIn []string `json:"expire_date_in,omitempty"`

	// expire date lt
	ExpireDateLt *string `json:"expire_date_lt,omitempty"`

	// expire date lte
	ExpireDateLte *string `json:"expire_date_lte,omitempty"`

	// expire date not
	ExpireDateNot *string `json:"expire_date_not,omitempty"`

	// expire date not in
	ExpireDateNotIn []string `json:"expire_date_not_in,omitempty"`

	// has metrox
	HasMetrox *bool `json:"has_metrox,omitempty"`

	// has metrox not
	HasMetroxNot *bool `json:"has_metrox_not,omitempty"`

	// has remote backup
	HasRemoteBackup *bool `json:"has_remote_backup,omitempty"`

	// has remote backup not
	HasRemoteBackupNot *bool `json:"has_remote_backup_not,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// license type
	LicenseType *LicenseType `json:"license_type,omitempty"`

	// license type in
	LicenseTypeIn []LicenseType `json:"license_type_in,omitempty"`

	// license type not
	LicenseTypeNot *LicenseType `json:"license_type_not,omitempty"`

	// license type not in
	LicenseTypeNotIn []LicenseType `json:"license_type_not_in,omitempty"`

	// max core num
	MaxCoreNum *int32 `json:"max_core_num,omitempty"`

	// max core num gt
	MaxCoreNumGt *int32 `json:"max_core_num_gt,omitempty"`

	// max core num gte
	MaxCoreNumGte *int32 `json:"max_core_num_gte,omitempty"`

	// max core num in
	MaxCoreNumIn []int32 `json:"max_core_num_in,omitempty"`

	// max core num lt
	MaxCoreNumLt *int32 `json:"max_core_num_lt,omitempty"`

	// max core num lte
	MaxCoreNumLte *int32 `json:"max_core_num_lte,omitempty"`

	// max core num not
	MaxCoreNumNot *int32 `json:"max_core_num_not,omitempty"`

	// max core num not in
	MaxCoreNumNotIn []int32 `json:"max_core_num_not_in,omitempty"`

	// max physical data capacity
	MaxPhysicalDataCapacity *float64 `json:"max_physical_data_capacity,omitempty"`

	// max physical data capacity gt
	MaxPhysicalDataCapacityGt *float64 `json:"max_physical_data_capacity_gt,omitempty"`

	// max physical data capacity gte
	MaxPhysicalDataCapacityGte *float64 `json:"max_physical_data_capacity_gte,omitempty"`

	// max physical data capacity in
	MaxPhysicalDataCapacityIn []float64 `json:"max_physical_data_capacity_in,omitempty"`

	// max physical data capacity lt
	MaxPhysicalDataCapacityLt *float64 `json:"max_physical_data_capacity_lt,omitempty"`

	// max physical data capacity lte
	MaxPhysicalDataCapacityLte *float64 `json:"max_physical_data_capacity_lte,omitempty"`

	// max physical data capacity not
	MaxPhysicalDataCapacityNot *float64 `json:"max_physical_data_capacity_not,omitempty"`

	// max physical data capacity not in
	MaxPhysicalDataCapacityNotIn []float64 `json:"max_physical_data_capacity_not_in,omitempty"`

	// original code
	OriginalCode *string `json:"original_code,omitempty"`

	// original code contains
	OriginalCodeContains *string `json:"original_code_contains,omitempty"`

	// original code ends with
	OriginalCodeEndsWith *string `json:"original_code_ends_with,omitempty"`

	// original code gt
	OriginalCodeGt *string `json:"original_code_gt,omitempty"`

	// original code gte
	OriginalCodeGte *string `json:"original_code_gte,omitempty"`

	// original code in
	OriginalCodeIn []string `json:"original_code_in,omitempty"`

	// original code lt
	OriginalCodeLt *string `json:"original_code_lt,omitempty"`

	// original code lte
	OriginalCodeLte *string `json:"original_code_lte,omitempty"`

	// original code not
	OriginalCodeNot *string `json:"original_code_not,omitempty"`

	// original code not contains
	OriginalCodeNotContains *string `json:"original_code_not_contains,omitempty"`

	// original code not ends with
	OriginalCodeNotEndsWith *string `json:"original_code_not_ends_with,omitempty"`

	// original code not in
	OriginalCodeNotIn []string `json:"original_code_not_in,omitempty"`

	// original code not starts with
	OriginalCodeNotStartsWith *string `json:"original_code_not_starts_with,omitempty"`

	// original code starts with
	OriginalCodeStartsWith *string `json:"original_code_starts_with,omitempty"`

	// product name
	ProductName *string `json:"product_name,omitempty"`

	// product name contains
	ProductNameContains *string `json:"product_name_contains,omitempty"`

	// product name ends with
	ProductNameEndsWith *string `json:"product_name_ends_with,omitempty"`

	// product name gt
	ProductNameGt *string `json:"product_name_gt,omitempty"`

	// product name gte
	ProductNameGte *string `json:"product_name_gte,omitempty"`

	// product name in
	ProductNameIn []string `json:"product_name_in,omitempty"`

	// product name lt
	ProductNameLt *string `json:"product_name_lt,omitempty"`

	// product name lte
	ProductNameLte *string `json:"product_name_lte,omitempty"`

	// product name not
	ProductNameNot *string `json:"product_name_not,omitempty"`

	// product name not contains
	ProductNameNotContains *string `json:"product_name_not_contains,omitempty"`

	// product name not ends with
	ProductNameNotEndsWith *string `json:"product_name_not_ends_with,omitempty"`

	// product name not in
	ProductNameNotIn []string `json:"product_name_not_in,omitempty"`

	// product name not starts with
	ProductNameNotStartsWith *string `json:"product_name_not_starts_with,omitempty"`

	// product name starts with
	ProductNameStartsWith *string `json:"product_name_starts_with,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// serial contains
	SerialContains *string `json:"serial_contains,omitempty"`

	// serial ends with
	SerialEndsWith *string `json:"serial_ends_with,omitempty"`

	// serial gt
	SerialGt *string `json:"serial_gt,omitempty"`

	// serial gte
	SerialGte *string `json:"serial_gte,omitempty"`

	// serial in
	SerialIn []string `json:"serial_in,omitempty"`

	// serial lt
	SerialLt *string `json:"serial_lt,omitempty"`

	// serial lte
	SerialLte *string `json:"serial_lte,omitempty"`

	// serial not
	SerialNot *string `json:"serial_not,omitempty"`

	// serial not contains
	SerialNotContains *string `json:"serial_not_contains,omitempty"`

	// serial not ends with
	SerialNotEndsWith *string `json:"serial_not_ends_with,omitempty"`

	// serial not in
	SerialNotIn []string `json:"serial_not_in,omitempty"`

	// serial not starts with
	SerialNotStartsWith *string `json:"serial_not_starts_with,omitempty"`

	// serial starts with
	SerialStartsWith *string `json:"serial_starts_with,omitempty"`

	// sign date
	SignDate *string `json:"sign_date,omitempty"`

	// sign date gt
	SignDateGt *string `json:"sign_date_gt,omitempty"`

	// sign date gte
	SignDateGte *string `json:"sign_date_gte,omitempty"`

	// sign date in
	SignDateIn []string `json:"sign_date_in,omitempty"`

	// sign date lt
	SignDateLt *string `json:"sign_date_lt,omitempty"`

	// sign date lte
	SignDateLte *string `json:"sign_date_lte,omitempty"`

	// sign date not
	SignDateNot *string `json:"sign_date_not,omitempty"`

	// sign date not in
	SignDateNotIn []string `json:"sign_date_not_in,omitempty"`

	// subscription expire date
	SubscriptionExpireDate *string `json:"subscription_expire_date,omitempty"`

	// subscription expire date gt
	SubscriptionExpireDateGt *string `json:"subscription_expire_date_gt,omitempty"`

	// subscription expire date gte
	SubscriptionExpireDateGte *string `json:"subscription_expire_date_gte,omitempty"`

	// subscription expire date in
	SubscriptionExpireDateIn []string `json:"subscription_expire_date_in,omitempty"`

	// subscription expire date lt
	SubscriptionExpireDateLt *string `json:"subscription_expire_date_lt,omitempty"`

	// subscription expire date lte
	SubscriptionExpireDateLte *string `json:"subscription_expire_date_lte,omitempty"`

	// subscription expire date not
	SubscriptionExpireDateNot *string `json:"subscription_expire_date_not,omitempty"`

	// subscription expire date not in
	SubscriptionExpireDateNotIn []string `json:"subscription_expire_date_not_in,omitempty"`

	// subscription start date
	SubscriptionStartDate *string `json:"subscription_start_date,omitempty"`

	// subscription start date gt
	SubscriptionStartDateGt *string `json:"subscription_start_date_gt,omitempty"`

	// subscription start date gte
	SubscriptionStartDateGte *string `json:"subscription_start_date_gte,omitempty"`

	// subscription start date in
	SubscriptionStartDateIn []string `json:"subscription_start_date_in,omitempty"`

	// subscription start date lt
	SubscriptionStartDateLt *string `json:"subscription_start_date_lt,omitempty"`

	// subscription start date lte
	SubscriptionStartDateLte *string `json:"subscription_start_date_lte,omitempty"`

	// subscription start date not
	SubscriptionStartDateNot *string `json:"subscription_start_date_not,omitempty"`

	// subscription start date not in
	SubscriptionStartDateNotIn []string `json:"subscription_start_date_not_in,omitempty"`

	// vendor
	Vendor *string `json:"vendor,omitempty"`

	// vendor contains
	VendorContains *string `json:"vendor_contains,omitempty"`

	// vendor ends with
	VendorEndsWith *string `json:"vendor_ends_with,omitempty"`

	// vendor gt
	VendorGt *string `json:"vendor_gt,omitempty"`

	// vendor gte
	VendorGte *string `json:"vendor_gte,omitempty"`

	// vendor in
	VendorIn []string `json:"vendor_in,omitempty"`

	// vendor lt
	VendorLt *string `json:"vendor_lt,omitempty"`

	// vendor lte
	VendorLte *string `json:"vendor_lte,omitempty"`

	// vendor not
	VendorNot *string `json:"vendor_not,omitempty"`

	// vendor not contains
	VendorNotContains *string `json:"vendor_not_contains,omitempty"`

	// vendor not ends with
	VendorNotEndsWith *string `json:"vendor_not_ends_with,omitempty"`

	// vendor not in
	VendorNotIn []string `json:"vendor_not_in,omitempty"`

	// vendor not starts with
	VendorNotStartsWith *string `json:"vendor_not_starts_with,omitempty"`

	// vendor starts with
	VendorStartsWith *string `json:"vendor_starts_with,omitempty"`

	// version
	Version *int32 `json:"version,omitempty"`

	// version gt
	VersionGt *int32 `json:"version_gt,omitempty"`

	// version gte
	VersionGte *int32 `json:"version_gte,omitempty"`

	// version in
	VersionIn []int32 `json:"version_in,omitempty"`

	// version lt
	VersionLt *int32 `json:"version_lt,omitempty"`

	// version lte
	VersionLte *int32 `json:"version_lte,omitempty"`

	// version not
	VersionNot *int32 `json:"version_not,omitempty"`

	// version not in
	VersionNotIn []int32 `json:"version_not_in,omitempty"`

	MarshalOpts *EcpLicenseWhereInputMarshalOpts `json:"-"`
}

type EcpLicenseWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	ClusterLocalID_Explicit_Null_When_Empty bool

	ClusterLocalIDContains_Explicit_Null_When_Empty bool

	ClusterLocalIDEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDGt_Explicit_Null_When_Empty bool

	ClusterLocalIDGte_Explicit_Null_When_Empty bool

	ClusterLocalIDIn_Explicit_Null_When_Empty bool

	ClusterLocalIDLt_Explicit_Null_When_Empty bool

	ClusterLocalIDLte_Explicit_Null_When_Empty bool

	ClusterLocalIDNot_Explicit_Null_When_Empty bool

	ClusterLocalIDNotContains_Explicit_Null_When_Empty bool

	ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDNotIn_Explicit_Null_When_Empty bool

	ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDStartsWith_Explicit_Null_When_Empty bool

	EcpEdition_Explicit_Null_When_Empty bool

	EcpEditionIn_Explicit_Null_When_Empty bool

	EcpEditionNot_Explicit_Null_When_Empty bool

	EcpEditionNotIn_Explicit_Null_When_Empty bool

	ExpireDate_Explicit_Null_When_Empty bool

	ExpireDateGt_Explicit_Null_When_Empty bool

	ExpireDateGte_Explicit_Null_When_Empty bool

	ExpireDateIn_Explicit_Null_When_Empty bool

	ExpireDateLt_Explicit_Null_When_Empty bool

	ExpireDateLte_Explicit_Null_When_Empty bool

	ExpireDateNot_Explicit_Null_When_Empty bool

	ExpireDateNotIn_Explicit_Null_When_Empty bool

	HasMetrox_Explicit_Null_When_Empty bool

	HasMetroxNot_Explicit_Null_When_Empty bool

	HasRemoteBackup_Explicit_Null_When_Empty bool

	HasRemoteBackupNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LicenseType_Explicit_Null_When_Empty bool

	LicenseTypeIn_Explicit_Null_When_Empty bool

	LicenseTypeNot_Explicit_Null_When_Empty bool

	LicenseTypeNotIn_Explicit_Null_When_Empty bool

	MaxCoreNum_Explicit_Null_When_Empty bool

	MaxCoreNumGt_Explicit_Null_When_Empty bool

	MaxCoreNumGte_Explicit_Null_When_Empty bool

	MaxCoreNumIn_Explicit_Null_When_Empty bool

	MaxCoreNumLt_Explicit_Null_When_Empty bool

	MaxCoreNumLte_Explicit_Null_When_Empty bool

	MaxCoreNumNot_Explicit_Null_When_Empty bool

	MaxCoreNumNotIn_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacity_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityGt_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityGte_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityIn_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityLt_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityLte_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityNot_Explicit_Null_When_Empty bool

	MaxPhysicalDataCapacityNotIn_Explicit_Null_When_Empty bool

	OriginalCode_Explicit_Null_When_Empty bool

	OriginalCodeContains_Explicit_Null_When_Empty bool

	OriginalCodeEndsWith_Explicit_Null_When_Empty bool

	OriginalCodeGt_Explicit_Null_When_Empty bool

	OriginalCodeGte_Explicit_Null_When_Empty bool

	OriginalCodeIn_Explicit_Null_When_Empty bool

	OriginalCodeLt_Explicit_Null_When_Empty bool

	OriginalCodeLte_Explicit_Null_When_Empty bool

	OriginalCodeNot_Explicit_Null_When_Empty bool

	OriginalCodeNotContains_Explicit_Null_When_Empty bool

	OriginalCodeNotEndsWith_Explicit_Null_When_Empty bool

	OriginalCodeNotIn_Explicit_Null_When_Empty bool

	OriginalCodeNotStartsWith_Explicit_Null_When_Empty bool

	OriginalCodeStartsWith_Explicit_Null_When_Empty bool

	ProductName_Explicit_Null_When_Empty bool

	ProductNameContains_Explicit_Null_When_Empty bool

	ProductNameEndsWith_Explicit_Null_When_Empty bool

	ProductNameGt_Explicit_Null_When_Empty bool

	ProductNameGte_Explicit_Null_When_Empty bool

	ProductNameIn_Explicit_Null_When_Empty bool

	ProductNameLt_Explicit_Null_When_Empty bool

	ProductNameLte_Explicit_Null_When_Empty bool

	ProductNameNot_Explicit_Null_When_Empty bool

	ProductNameNotContains_Explicit_Null_When_Empty bool

	ProductNameNotEndsWith_Explicit_Null_When_Empty bool

	ProductNameNotIn_Explicit_Null_When_Empty bool

	ProductNameNotStartsWith_Explicit_Null_When_Empty bool

	ProductNameStartsWith_Explicit_Null_When_Empty bool

	Serial_Explicit_Null_When_Empty bool

	SerialContains_Explicit_Null_When_Empty bool

	SerialEndsWith_Explicit_Null_When_Empty bool

	SerialGt_Explicit_Null_When_Empty bool

	SerialGte_Explicit_Null_When_Empty bool

	SerialIn_Explicit_Null_When_Empty bool

	SerialLt_Explicit_Null_When_Empty bool

	SerialLte_Explicit_Null_When_Empty bool

	SerialNot_Explicit_Null_When_Empty bool

	SerialNotContains_Explicit_Null_When_Empty bool

	SerialNotEndsWith_Explicit_Null_When_Empty bool

	SerialNotIn_Explicit_Null_When_Empty bool

	SerialNotStartsWith_Explicit_Null_When_Empty bool

	SerialStartsWith_Explicit_Null_When_Empty bool

	SignDate_Explicit_Null_When_Empty bool

	SignDateGt_Explicit_Null_When_Empty bool

	SignDateGte_Explicit_Null_When_Empty bool

	SignDateIn_Explicit_Null_When_Empty bool

	SignDateLt_Explicit_Null_When_Empty bool

	SignDateLte_Explicit_Null_When_Empty bool

	SignDateNot_Explicit_Null_When_Empty bool

	SignDateNotIn_Explicit_Null_When_Empty bool

	SubscriptionExpireDate_Explicit_Null_When_Empty bool

	SubscriptionExpireDateGt_Explicit_Null_When_Empty bool

	SubscriptionExpireDateGte_Explicit_Null_When_Empty bool

	SubscriptionExpireDateIn_Explicit_Null_When_Empty bool

	SubscriptionExpireDateLt_Explicit_Null_When_Empty bool

	SubscriptionExpireDateLte_Explicit_Null_When_Empty bool

	SubscriptionExpireDateNot_Explicit_Null_When_Empty bool

	SubscriptionExpireDateNotIn_Explicit_Null_When_Empty bool

	SubscriptionStartDate_Explicit_Null_When_Empty bool

	SubscriptionStartDateGt_Explicit_Null_When_Empty bool

	SubscriptionStartDateGte_Explicit_Null_When_Empty bool

	SubscriptionStartDateIn_Explicit_Null_When_Empty bool

	SubscriptionStartDateLt_Explicit_Null_When_Empty bool

	SubscriptionStartDateLte_Explicit_Null_When_Empty bool

	SubscriptionStartDateNot_Explicit_Null_When_Empty bool

	SubscriptionStartDateNotIn_Explicit_Null_When_Empty bool

	Vendor_Explicit_Null_When_Empty bool

	VendorContains_Explicit_Null_When_Empty bool

	VendorEndsWith_Explicit_Null_When_Empty bool

	VendorGt_Explicit_Null_When_Empty bool

	VendorGte_Explicit_Null_When_Empty bool

	VendorIn_Explicit_Null_When_Empty bool

	VendorLt_Explicit_Null_When_Empty bool

	VendorLte_Explicit_Null_When_Empty bool

	VendorNot_Explicit_Null_When_Empty bool

	VendorNotContains_Explicit_Null_When_Empty bool

	VendorNotEndsWith_Explicit_Null_When_Empty bool

	VendorNotIn_Explicit_Null_When_Empty bool

	VendorNotStartsWith_Explicit_Null_When_Empty bool

	VendorStartsWith_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VersionGt_Explicit_Null_When_Empty bool

	VersionGte_Explicit_Null_When_Empty bool

	VersionIn_Explicit_Null_When_Empty bool

	VersionLt_Explicit_Null_When_Empty bool

	VersionLte_Explicit_Null_When_Empty bool

	VersionNot_Explicit_Null_When_Empty bool

	VersionNotIn_Explicit_Null_When_Empty bool
}

func (m EcpLicenseWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field cluster_local_id_contains
	if m.ClusterLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_ends_with
	if m.ClusterLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gt
	if m.ClusterLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gte
	if m.ClusterLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_lt
	if m.ClusterLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_lte
	if m.ClusterLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not
	if m.ClusterLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_contains
	if m.ClusterLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_ends_with
	if m.ClusterLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_not_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_not_starts_with
	if m.ClusterLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_starts_with
	if m.ClusterLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field ecp_edition
	if m.EcpEdition != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition\":")
		bytes, err := swag.WriteJSON(m.EcpEdition)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcpEdition_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition\":null")
		first = false
	}

	// handle non nullable field ecp_edition_in with omitempty
	if !swag.IsZero(m.EcpEditionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition_in\":")
		bytes, err := swag.WriteJSON(m.EcpEditionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field ecp_edition_not
	if m.EcpEditionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition_not\":")
		bytes, err := swag.WriteJSON(m.EcpEditionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EcpEditionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition_not\":null")
		first = false
	}

	// handle non nullable field ecp_edition_not_in with omitempty
	if !swag.IsZero(m.EcpEditionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ecp_edition_not_in\":")
		bytes, err := swag.WriteJSON(m.EcpEditionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field expire_date
	if m.ExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":")
		bytes, err := swag.WriteJSON(m.ExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date\":null")
		first = false
	}

	// handle nullable field expire_date_gt
	if m.ExpireDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gt\":null")
		first = false
	}

	// handle nullable field expire_date_gte
	if m.ExpireDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_gte\":null")
		first = false
	}

	// handle non nullable field expire_date_in with omitempty
	if !swag.IsZero(m.ExpireDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field expire_date_lt
	if m.ExpireDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lt\":null")
		first = false
	}

	// handle nullable field expire_date_lte
	if m.ExpireDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":")
		bytes, err := swag.WriteJSON(m.ExpireDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_lte\":null")
		first = false
	}

	// handle nullable field expire_date_not
	if m.ExpireDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExpireDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not\":null")
		first = false
	}

	// handle non nullable field expire_date_not_in with omitempty
	if !swag.IsZero(m.ExpireDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"expire_date_not_in\":")
		bytes, err := swag.WriteJSON(m.ExpireDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field has_metrox
	if m.HasMetrox != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":")
		bytes, err := swag.WriteJSON(m.HasMetrox)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasMetrox_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox\":null")
		first = false
	}

	// handle nullable field has_metrox_not
	if m.HasMetroxNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox_not\":")
		bytes, err := swag.WriteJSON(m.HasMetroxNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasMetroxNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_metrox_not\":null")
		first = false
	}

	// handle nullable field has_remote_backup
	if m.HasRemoteBackup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup\":")
		bytes, err := swag.WriteJSON(m.HasRemoteBackup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasRemoteBackup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup\":null")
		first = false
	}

	// handle nullable field has_remote_backup_not
	if m.HasRemoteBackupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup_not\":")
		bytes, err := swag.WriteJSON(m.HasRemoteBackupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HasRemoteBackupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"has_remote_backup_not\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field license_type
	if m.LicenseType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":")
		bytes, err := swag.WriteJSON(m.LicenseType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type\":null")
		first = false
	}

	// handle non nullable field license_type_in with omitempty
	if !swag.IsZero(m.LicenseTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type_in\":")
		bytes, err := swag.WriteJSON(m.LicenseTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field license_type_not
	if m.LicenseTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type_not\":")
		bytes, err := swag.WriteJSON(m.LicenseTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LicenseTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type_not\":null")
		first = false
	}

	// handle non nullable field license_type_not_in with omitempty
	if !swag.IsZero(m.LicenseTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"license_type_not_in\":")
		bytes, err := swag.WriteJSON(m.LicenseTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_core_num
	if m.MaxCoreNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num\":null")
		first = false
	}

	// handle nullable field max_core_num_gt
	if m.MaxCoreNumGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_gt\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNumGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_gt\":null")
		first = false
	}

	// handle nullable field max_core_num_gte
	if m.MaxCoreNumGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_gte\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNumGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_gte\":null")
		first = false
	}

	// handle non nullable field max_core_num_in with omitempty
	if !swag.IsZero(m.MaxCoreNumIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_in\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_core_num_lt
	if m.MaxCoreNumLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_lt\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNumLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_lt\":null")
		first = false
	}

	// handle nullable field max_core_num_lte
	if m.MaxCoreNumLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_lte\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNumLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_lte\":null")
		first = false
	}

	// handle nullable field max_core_num_not
	if m.MaxCoreNumNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_not\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxCoreNumNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_not\":null")
		first = false
	}

	// handle non nullable field max_core_num_not_in with omitempty
	if !swag.IsZero(m.MaxCoreNumNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_core_num_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxCoreNumNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_physical_data_capacity
	if m.MaxPhysicalDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity_gt
	if m.MaxPhysicalDataCapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_gt\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_gt\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity_gte
	if m.MaxPhysicalDataCapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_gte\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_gte\":null")
		first = false
	}

	// handle non nullable field max_physical_data_capacity_in with omitempty
	if !swag.IsZero(m.MaxPhysicalDataCapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_in\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field max_physical_data_capacity_lt
	if m.MaxPhysicalDataCapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_lt\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_lt\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity_lte
	if m.MaxPhysicalDataCapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_lte\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_lte\":null")
		first = false
	}

	// handle nullable field max_physical_data_capacity_not
	if m.MaxPhysicalDataCapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_not\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MaxPhysicalDataCapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_not\":null")
		first = false
	}

	// handle non nullable field max_physical_data_capacity_not_in with omitempty
	if !swag.IsZero(m.MaxPhysicalDataCapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"max_physical_data_capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.MaxPhysicalDataCapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field original_code
	if m.OriginalCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code\":")
		bytes, err := swag.WriteJSON(m.OriginalCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code\":null")
		first = false
	}

	// handle nullable field original_code_contains
	if m.OriginalCodeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_contains\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_contains\":null")
		first = false
	}

	// handle nullable field original_code_ends_with
	if m.OriginalCodeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_ends_with\":null")
		first = false
	}

	// handle nullable field original_code_gt
	if m.OriginalCodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_gt\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_gt\":null")
		first = false
	}

	// handle nullable field original_code_gte
	if m.OriginalCodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_gte\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_gte\":null")
		first = false
	}

	// handle non nullable field original_code_in with omitempty
	if !swag.IsZero(m.OriginalCodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_in\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field original_code_lt
	if m.OriginalCodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_lt\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_lt\":null")
		first = false
	}

	// handle nullable field original_code_lte
	if m.OriginalCodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_lte\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_lte\":null")
		first = false
	}

	// handle nullable field original_code_not
	if m.OriginalCodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not\":null")
		first = false
	}

	// handle nullable field original_code_not_contains
	if m.OriginalCodeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_contains\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_contains\":null")
		first = false
	}

	// handle nullable field original_code_not_ends_with
	if m.OriginalCodeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_ends_with\":null")
		first = false
	}

	// handle non nullable field original_code_not_in with omitempty
	if !swag.IsZero(m.OriginalCodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_in\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field original_code_not_starts_with
	if m.OriginalCodeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_not_starts_with\":null")
		first = false
	}

	// handle nullable field original_code_starts_with
	if m.OriginalCodeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_starts_with\":")
		bytes, err := swag.WriteJSON(m.OriginalCodeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginalCodeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"original_code_starts_with\":null")
		first = false
	}

	// handle nullable field product_name
	if m.ProductName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name\":")
		bytes, err := swag.WriteJSON(m.ProductName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name\":null")
		first = false
	}

	// handle nullable field product_name_contains
	if m.ProductNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_contains\":")
		bytes, err := swag.WriteJSON(m.ProductNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_contains\":null")
		first = false
	}

	// handle nullable field product_name_ends_with
	if m.ProductNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.ProductNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_ends_with\":null")
		first = false
	}

	// handle nullable field product_name_gt
	if m.ProductNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_gt\":")
		bytes, err := swag.WriteJSON(m.ProductNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_gt\":null")
		first = false
	}

	// handle nullable field product_name_gte
	if m.ProductNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_gte\":")
		bytes, err := swag.WriteJSON(m.ProductNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_gte\":null")
		first = false
	}

	// handle non nullable field product_name_in with omitempty
	if !swag.IsZero(m.ProductNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_in\":")
		bytes, err := swag.WriteJSON(m.ProductNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field product_name_lt
	if m.ProductNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_lt\":")
		bytes, err := swag.WriteJSON(m.ProductNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_lt\":null")
		first = false
	}

	// handle nullable field product_name_lte
	if m.ProductNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_lte\":")
		bytes, err := swag.WriteJSON(m.ProductNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_lte\":null")
		first = false
	}

	// handle nullable field product_name_not
	if m.ProductNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not\":")
		bytes, err := swag.WriteJSON(m.ProductNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not\":null")
		first = false
	}

	// handle nullable field product_name_not_contains
	if m.ProductNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.ProductNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_contains\":null")
		first = false
	}

	// handle nullable field product_name_not_ends_with
	if m.ProductNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ProductNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field product_name_not_in with omitempty
	if !swag.IsZero(m.ProductNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_in\":")
		bytes, err := swag.WriteJSON(m.ProductNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field product_name_not_starts_with
	if m.ProductNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ProductNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field product_name_starts_with
	if m.ProductNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.ProductNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ProductNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"product_name_starts_with\":null")
		first = false
	}

	// handle nullable field serial
	if m.Serial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":")
		bytes, err := swag.WriteJSON(m.Serial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Serial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":null")
		first = false
	}

	// handle nullable field serial_contains
	if m.SerialContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":")
		bytes, err := swag.WriteJSON(m.SerialContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":null")
		first = false
	}

	// handle nullable field serial_ends_with
	if m.SerialEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":null")
		first = false
	}

	// handle nullable field serial_gt
	if m.SerialGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":")
		bytes, err := swag.WriteJSON(m.SerialGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":null")
		first = false
	}

	// handle nullable field serial_gte
	if m.SerialGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":")
		bytes, err := swag.WriteJSON(m.SerialGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":null")
		first = false
	}

	// handle non nullable field serial_in with omitempty
	if !swag.IsZero(m.SerialIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_in\":")
		bytes, err := swag.WriteJSON(m.SerialIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_lt
	if m.SerialLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":")
		bytes, err := swag.WriteJSON(m.SerialLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":null")
		first = false
	}

	// handle nullable field serial_lte
	if m.SerialLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":")
		bytes, err := swag.WriteJSON(m.SerialLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":null")
		first = false
	}

	// handle nullable field serial_not
	if m.SerialNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":")
		bytes, err := swag.WriteJSON(m.SerialNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":null")
		first = false
	}

	// handle nullable field serial_not_contains
	if m.SerialNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":")
		bytes, err := swag.WriteJSON(m.SerialNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":null")
		first = false
	}

	// handle nullable field serial_not_ends_with
	if m.SerialNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":null")
		first = false
	}

	// handle non nullable field serial_not_in with omitempty
	if !swag.IsZero(m.SerialNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_in\":")
		bytes, err := swag.WriteJSON(m.SerialNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_not_starts_with
	if m.SerialNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":null")
		first = false
	}

	// handle nullable field serial_starts_with
	if m.SerialStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":null")
		first = false
	}

	// handle nullable field sign_date
	if m.SignDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":")
		bytes, err := swag.WriteJSON(m.SignDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date\":null")
		first = false
	}

	// handle nullable field sign_date_gt
	if m.SignDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":")
		bytes, err := swag.WriteJSON(m.SignDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gt\":null")
		first = false
	}

	// handle nullable field sign_date_gte
	if m.SignDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":")
		bytes, err := swag.WriteJSON(m.SignDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_gte\":null")
		first = false
	}

	// handle non nullable field sign_date_in with omitempty
	if !swag.IsZero(m.SignDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_in\":")
		bytes, err := swag.WriteJSON(m.SignDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field sign_date_lt
	if m.SignDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":")
		bytes, err := swag.WriteJSON(m.SignDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lt\":null")
		first = false
	}

	// handle nullable field sign_date_lte
	if m.SignDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":")
		bytes, err := swag.WriteJSON(m.SignDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_lte\":null")
		first = false
	}

	// handle nullable field sign_date_not
	if m.SignDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":")
		bytes, err := swag.WriteJSON(m.SignDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SignDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not\":null")
		first = false
	}

	// handle non nullable field sign_date_not_in with omitempty
	if !swag.IsZero(m.SignDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"sign_date_not_in\":")
		bytes, err := swag.WriteJSON(m.SignDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subscription_expire_date
	if m.SubscriptionExpireDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date\":null")
		first = false
	}

	// handle nullable field subscription_expire_date_gt
	if m.SubscriptionExpireDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_gt\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_gt\":null")
		first = false
	}

	// handle nullable field subscription_expire_date_gte
	if m.SubscriptionExpireDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_gte\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_gte\":null")
		first = false
	}

	// handle non nullable field subscription_expire_date_in with omitempty
	if !swag.IsZero(m.SubscriptionExpireDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_in\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subscription_expire_date_lt
	if m.SubscriptionExpireDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_lt\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_lt\":null")
		first = false
	}

	// handle nullable field subscription_expire_date_lte
	if m.SubscriptionExpireDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_lte\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_lte\":null")
		first = false
	}

	// handle nullable field subscription_expire_date_not
	if m.SubscriptionExpireDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_not\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionExpireDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_not\":null")
		first = false
	}

	// handle non nullable field subscription_expire_date_not_in with omitempty
	if !swag.IsZero(m.SubscriptionExpireDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_expire_date_not_in\":")
		bytes, err := swag.WriteJSON(m.SubscriptionExpireDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subscription_start_date
	if m.SubscriptionStartDate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date\":null")
		first = false
	}

	// handle nullable field subscription_start_date_gt
	if m.SubscriptionStartDateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_gt\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_gt\":null")
		first = false
	}

	// handle nullable field subscription_start_date_gte
	if m.SubscriptionStartDateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_gte\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_gte\":null")
		first = false
	}

	// handle non nullable field subscription_start_date_in with omitempty
	if !swag.IsZero(m.SubscriptionStartDateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_in\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field subscription_start_date_lt
	if m.SubscriptionStartDateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_lt\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_lt\":null")
		first = false
	}

	// handle nullable field subscription_start_date_lte
	if m.SubscriptionStartDateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_lte\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_lte\":null")
		first = false
	}

	// handle nullable field subscription_start_date_not
	if m.SubscriptionStartDateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_not\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubscriptionStartDateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_not\":null")
		first = false
	}

	// handle non nullable field subscription_start_date_not_in with omitempty
	if !swag.IsZero(m.SubscriptionStartDateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subscription_start_date_not_in\":")
		bytes, err := swag.WriteJSON(m.SubscriptionStartDateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor
	if m.Vendor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor\":")
		bytes, err := swag.WriteJSON(m.Vendor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Vendor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor\":null")
		first = false
	}

	// handle nullable field vendor_contains
	if m.VendorContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_contains\":")
		bytes, err := swag.WriteJSON(m.VendorContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_contains\":null")
		first = false
	}

	// handle nullable field vendor_ends_with
	if m.VendorEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_ends_with\":")
		bytes, err := swag.WriteJSON(m.VendorEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_ends_with\":null")
		first = false
	}

	// handle nullable field vendor_gt
	if m.VendorGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_gt\":")
		bytes, err := swag.WriteJSON(m.VendorGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_gt\":null")
		first = false
	}

	// handle nullable field vendor_gte
	if m.VendorGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_gte\":")
		bytes, err := swag.WriteJSON(m.VendorGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_gte\":null")
		first = false
	}

	// handle non nullable field vendor_in with omitempty
	if !swag.IsZero(m.VendorIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_in\":")
		bytes, err := swag.WriteJSON(m.VendorIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor_lt
	if m.VendorLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_lt\":")
		bytes, err := swag.WriteJSON(m.VendorLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_lt\":null")
		first = false
	}

	// handle nullable field vendor_lte
	if m.VendorLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_lte\":")
		bytes, err := swag.WriteJSON(m.VendorLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_lte\":null")
		first = false
	}

	// handle nullable field vendor_not
	if m.VendorNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not\":")
		bytes, err := swag.WriteJSON(m.VendorNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not\":null")
		first = false
	}

	// handle nullable field vendor_not_contains
	if m.VendorNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_contains\":")
		bytes, err := swag.WriteJSON(m.VendorNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_contains\":null")
		first = false
	}

	// handle nullable field vendor_not_ends_with
	if m.VendorNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VendorNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vendor_not_in with omitempty
	if !swag.IsZero(m.VendorNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_in\":")
		bytes, err := swag.WriteJSON(m.VendorNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vendor_not_starts_with
	if m.VendorNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VendorNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_not_starts_with\":null")
		first = false
	}

	// handle nullable field vendor_starts_with
	if m.VendorStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_starts_with\":")
		bytes, err := swag.WriteJSON(m.VendorStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VendorStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vendor_starts_with\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field version_gt
	if m.VersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":")
		bytes, err := swag.WriteJSON(m.VersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":null")
		first = false
	}

	// handle nullable field version_gte
	if m.VersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":")
		bytes, err := swag.WriteJSON(m.VersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":null")
		first = false
	}

	// handle non nullable field version_in with omitempty
	if !swag.IsZero(m.VersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_in\":")
		bytes, err := swag.WriteJSON(m.VersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_lt
	if m.VersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":")
		bytes, err := swag.WriteJSON(m.VersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":null")
		first = false
	}

	// handle nullable field version_lte
	if m.VersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":")
		bytes, err := swag.WriteJSON(m.VersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":null")
		first = false
	}

	// handle nullable field version_not
	if m.VersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":")
		bytes, err := swag.WriteJSON(m.VersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":null")
		first = false
	}

	// handle non nullable field version_not_in with omitempty
	if !swag.IsZero(m.VersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_in\":")
		bytes, err := swag.WriteJSON(m.VersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this ecp license where input
func (m *EcpLicenseWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpEdition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpEditionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpEditionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcpEditionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EcpLicenseWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) validateEcpEdition(formats strfmt.Registry) error {
	if swag.IsZero(m.EcpEdition) { // not required
		return nil
	}

	if m.EcpEdition != nil {
		if err := m.EcpEdition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) validateEcpEditionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EcpEditionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EcpEditionIn); i++ {

		if err := m.EcpEditionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateEcpEditionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EcpEditionNot) { // not required
		return nil
	}

	if m.EcpEditionNot != nil {
		if err := m.EcpEditionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) validateEcpEditionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EcpEditionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EcpEditionNotIn); i++ {

		if err := m.EcpEditionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateLicenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	if m.LicenseType != nil {
		if err := m.LicenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) validateLicenseTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypeIn); i++ {

		if err := m.LicenseTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) validateLicenseTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypeNot) { // not required
		return nil
	}

	if m.LicenseTypeNot != nil {
		if err := m.LicenseTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) validateLicenseTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypeNotIn); i++ {

		if err := m.LicenseTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this ecp license where input based on the context it is used
func (m *EcpLicenseWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpEdition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpEditionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpEditionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcpEditionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EcpLicenseWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateEcpEdition(ctx context.Context, formats strfmt.Registry) error {

	if m.EcpEdition != nil {
		if err := m.EcpEdition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateEcpEditionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EcpEditionIn); i++ {

		if err := m.EcpEditionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateEcpEditionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EcpEditionNot != nil {
		if err := m.EcpEditionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_not")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateEcpEditionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EcpEditionNotIn); i++ {

		if err := m.EcpEditionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecp_edition_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecp_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateLicenseType(ctx context.Context, formats strfmt.Registry) error {

	if m.LicenseType != nil {
		if err := m.LicenseType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateLicenseTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicenseTypeIn); i++ {

		if err := m.LicenseTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateLicenseTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.LicenseTypeNot != nil {
		if err := m.LicenseTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EcpLicenseWhereInput) contextValidateLicenseTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicenseTypeNotIn); i++ {

		if err := m.LicenseTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EcpLicenseWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EcpLicenseWhereInput) UnmarshalBinary(b []byte) error {
	var res EcpLicenseWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
