// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContentLibraryVMTemplateWhereInput content library Vm template where input
//
// swagger:model ContentLibraryVmTemplateWhereInput
type ContentLibraryVMTemplateWhereInput struct {

	// a n d
	AND []*ContentLibraryVMTemplateWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ContentLibraryVMTemplateWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ContentLibraryVMTemplateWhereInput `json:"OR,omitempty"`

	// architecture
	Architecture *Architecture `json:"architecture,omitempty"`

	// architecture in
	ArchitectureIn []Architecture `json:"architecture_in,omitempty"`

	// architecture not
	ArchitectureNot *Architecture `json:"architecture_not,omitempty"`

	// architecture not in
	ArchitectureNotIn []Architecture `json:"architecture_not_in,omitempty"`

	// clock offset
	ClockOffset *VMClockOffset `json:"clock_offset,omitempty"`

	// clock offset in
	ClockOffsetIn []VMClockOffset `json:"clock_offset_in,omitempty"`

	// clock offset not
	ClockOffsetNot *VMClockOffset `json:"clock_offset_not,omitempty"`

	// clock offset not in
	ClockOffsetNotIn []VMClockOffset `json:"clock_offset_not_in,omitempty"`

	// cloud init supported
	CloudInitSupported *bool `json:"cloud_init_supported,omitempty"`

	// cloud init supported not
	CloudInitSupportedNot *bool `json:"cloud_init_supported_not,omitempty"`

	// clusters every
	ClustersEvery *ClusterWhereInput `json:"clusters_every,omitempty"`

	// clusters none
	ClustersNone *ClusterWhereInput `json:"clusters_none,omitempty"`

	// clusters some
	ClustersSome *ClusterWhereInput `json:"clusters_some,omitempty"`

	// cpu model
	CPUModel *string `json:"cpu_model,omitempty"`

	// cpu model contains
	CPUModelContains *string `json:"cpu_model_contains,omitempty"`

	// cpu model ends with
	CPUModelEndsWith *string `json:"cpu_model_ends_with,omitempty"`

	// cpu model gt
	CPUModelGt *string `json:"cpu_model_gt,omitempty"`

	// cpu model gte
	CPUModelGte *string `json:"cpu_model_gte,omitempty"`

	// cpu model in
	CPUModelIn []string `json:"cpu_model_in,omitempty"`

	// cpu model lt
	CPUModelLt *string `json:"cpu_model_lt,omitempty"`

	// cpu model lte
	CPUModelLte *string `json:"cpu_model_lte,omitempty"`

	// cpu model not
	CPUModelNot *string `json:"cpu_model_not,omitempty"`

	// cpu model not contains
	CPUModelNotContains *string `json:"cpu_model_not_contains,omitempty"`

	// cpu model not ends with
	CPUModelNotEndsWith *string `json:"cpu_model_not_ends_with,omitempty"`

	// cpu model not in
	CPUModelNotIn []string `json:"cpu_model_not_in,omitempty"`

	// cpu model not starts with
	CPUModelNotStartsWith *string `json:"cpu_model_not_starts_with,omitempty"`

	// cpu model starts with
	CPUModelStartsWith *string `json:"cpu_model_starts_with,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// firmware
	Firmware *VMFirmware `json:"firmware,omitempty"`

	// firmware in
	FirmwareIn []VMFirmware `json:"firmware_in,omitempty"`

	// firmware not
	FirmwareNot *VMFirmware `json:"firmware_not,omitempty"`

	// firmware not in
	FirmwareNotIn []VMFirmware `json:"firmware_not_in,omitempty"`

	// ha
	Ha *bool `json:"ha,omitempty"`

	// ha not
	HaNot *bool `json:"ha_not,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// io policy
	IoPolicy *VMDiskIoPolicy `json:"io_policy,omitempty"`

	// io policy in
	IoPolicyIn []VMDiskIoPolicy `json:"io_policy_in,omitempty"`

	// io policy not
	IoPolicyNot *VMDiskIoPolicy `json:"io_policy_not,omitempty"`

	// io policy not in
	IoPolicyNotIn []VMDiskIoPolicy `json:"io_policy_not_in,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// max bandwidth
	MaxBandwidth *int64 `json:"max_bandwidth,omitempty"`

	// max bandwidth gt
	MaxBandwidthGt *int64 `json:"max_bandwidth_gt,omitempty"`

	// max bandwidth gte
	MaxBandwidthGte *int64 `json:"max_bandwidth_gte,omitempty"`

	// max bandwidth in
	MaxBandwidthIn []int64 `json:"max_bandwidth_in,omitempty"`

	// max bandwidth lt
	MaxBandwidthLt *int64 `json:"max_bandwidth_lt,omitempty"`

	// max bandwidth lte
	MaxBandwidthLte *int64 `json:"max_bandwidth_lte,omitempty"`

	// max bandwidth not
	MaxBandwidthNot *int64 `json:"max_bandwidth_not,omitempty"`

	// max bandwidth not in
	MaxBandwidthNotIn []int64 `json:"max_bandwidth_not_in,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy *VMDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`

	// max bandwidth policy in
	MaxBandwidthPolicyIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_in,omitempty"`

	// max bandwidth policy not
	MaxBandwidthPolicyNot *VMDiskIoRestrictType `json:"max_bandwidth_policy_not,omitempty"`

	// max bandwidth policy not in
	MaxBandwidthPolicyNotIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_not_in,omitempty"`

	// max iops
	MaxIops *int32 `json:"max_iops,omitempty"`

	// max iops gt
	MaxIopsGt *int32 `json:"max_iops_gt,omitempty"`

	// max iops gte
	MaxIopsGte *int32 `json:"max_iops_gte,omitempty"`

	// max iops in
	MaxIopsIn []int32 `json:"max_iops_in,omitempty"`

	// max iops lt
	MaxIopsLt *int32 `json:"max_iops_lt,omitempty"`

	// max iops lte
	MaxIopsLte *int32 `json:"max_iops_lte,omitempty"`

	// max iops not
	MaxIopsNot *int32 `json:"max_iops_not,omitempty"`

	// max iops not in
	MaxIopsNotIn []int32 `json:"max_iops_not_in,omitempty"`

	// max iops policy
	MaxIopsPolicy *VMDiskIoRestrictType `json:"max_iops_policy,omitempty"`

	// max iops policy in
	MaxIopsPolicyIn []VMDiskIoRestrictType `json:"max_iops_policy_in,omitempty"`

	// max iops policy not
	MaxIopsPolicyNot *VMDiskIoRestrictType `json:"max_iops_policy_not,omitempty"`

	// max iops policy not in
	MaxIopsPolicyNotIn []VMDiskIoRestrictType `json:"max_iops_policy_not_in,omitempty"`

	// memory
	Memory *int64 `json:"memory,omitempty"`

	// memory gt
	MemoryGt *int64 `json:"memory_gt,omitempty"`

	// memory gte
	MemoryGte *int64 `json:"memory_gte,omitempty"`

	// memory in
	MemoryIn []int64 `json:"memory_in,omitempty"`

	// memory lt
	MemoryLt *int64 `json:"memory_lt,omitempty"`

	// memory lte
	MemoryLte *int64 `json:"memory_lte,omitempty"`

	// memory not
	MemoryNot *int64 `json:"memory_not,omitempty"`

	// memory not in
	MemoryNotIn []int64 `json:"memory_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// os
	Os *string `json:"os,omitempty"`

	// os contains
	OsContains *string `json:"os_contains,omitempty"`

	// os ends with
	OsEndsWith *string `json:"os_ends_with,omitempty"`

	// os gt
	OsGt *string `json:"os_gt,omitempty"`

	// os gte
	OsGte *string `json:"os_gte,omitempty"`

	// os in
	OsIn []string `json:"os_in,omitempty"`

	// os lt
	OsLt *string `json:"os_lt,omitempty"`

	// os lte
	OsLte *string `json:"os_lte,omitempty"`

	// os not
	OsNot *string `json:"os_not,omitempty"`

	// os not contains
	OsNotContains *string `json:"os_not_contains,omitempty"`

	// os not ends with
	OsNotEndsWith *string `json:"os_not_ends_with,omitempty"`

	// os not in
	OsNotIn []string `json:"os_not_in,omitempty"`

	// os not starts with
	OsNotStartsWith *string `json:"os_not_starts_with,omitempty"`

	// os starts with
	OsStartsWith *string `json:"os_starts_with,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// vcpu
	Vcpu *int32 `json:"vcpu,omitempty"`

	// vcpu gt
	VcpuGt *int32 `json:"vcpu_gt,omitempty"`

	// vcpu gte
	VcpuGte *int32 `json:"vcpu_gte,omitempty"`

	// vcpu in
	VcpuIn []int32 `json:"vcpu_in,omitempty"`

	// vcpu lt
	VcpuLt *int32 `json:"vcpu_lt,omitempty"`

	// vcpu lte
	VcpuLte *int32 `json:"vcpu_lte,omitempty"`

	// vcpu not
	VcpuNot *int32 `json:"vcpu_not,omitempty"`

	// vcpu not in
	VcpuNotIn []int32 `json:"vcpu_not_in,omitempty"`

	// video type
	VideoType *string `json:"video_type,omitempty"`

	// video type contains
	VideoTypeContains *string `json:"video_type_contains,omitempty"`

	// video type ends with
	VideoTypeEndsWith *string `json:"video_type_ends_with,omitempty"`

	// video type gt
	VideoTypeGt *string `json:"video_type_gt,omitempty"`

	// video type gte
	VideoTypeGte *string `json:"video_type_gte,omitempty"`

	// video type in
	VideoTypeIn []string `json:"video_type_in,omitempty"`

	// video type lt
	VideoTypeLt *string `json:"video_type_lt,omitempty"`

	// video type lte
	VideoTypeLte *string `json:"video_type_lte,omitempty"`

	// video type not
	VideoTypeNot *string `json:"video_type_not,omitempty"`

	// video type not contains
	VideoTypeNotContains *string `json:"video_type_not_contains,omitempty"`

	// video type not ends with
	VideoTypeNotEndsWith *string `json:"video_type_not_ends_with,omitempty"`

	// video type not in
	VideoTypeNotIn []string `json:"video_type_not_in,omitempty"`

	// video type not starts with
	VideoTypeNotStartsWith *string `json:"video_type_not_starts_with,omitempty"`

	// video type starts with
	VideoTypeStartsWith *string `json:"video_type_starts_with,omitempty"`

	// vm templates every
	VMTemplatesEvery *VMTemplateWhereInput `json:"vm_templates_every,omitempty"`

	// vm templates none
	VMTemplatesNone *VMTemplateWhereInput `json:"vm_templates_none,omitempty"`

	// vm templates some
	VMTemplatesSome *VMTemplateWhereInput `json:"vm_templates_some,omitempty"`

	// win opt
	WinOpt *bool `json:"win_opt,omitempty"`

	// win opt not
	WinOptNot *bool `json:"win_opt_not,omitempty"`
}

// Validate validates this content library Vm template where input
func (m *ContentLibraryVMTemplateWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffsetIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffsetNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffsetNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateArchitecture(formats strfmt.Registry) error {
	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	if m.Architecture != nil {
		if err := m.Architecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateArchitectureIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateArchitectureNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureNot) { // not required
		return nil
	}

	if m.ArchitectureNot != nil {
		if err := m.ArchitectureNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateArchitectureNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClockOffset(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffset) { // not required
		return nil
	}

	if m.ClockOffset != nil {
		if err := m.ClockOffset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClockOffsetIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffsetIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ClockOffsetIn); i++ {

		if err := m.ClockOffsetIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClockOffsetNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffsetNot) { // not required
		return nil
	}

	if m.ClockOffsetNot != nil {
		if err := m.ClockOffsetNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClockOffsetNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffsetNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ClockOffsetNotIn); i++ {

		if err := m.ClockOffsetNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersEvery) { // not required
		return nil
	}

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersNone) { // not required
		return nil
	}

	if m.ClustersNone != nil {
		if err := m.ClustersNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersSome) { // not required
		return nil
	}

	if m.ClustersSome != nil {
		if err := m.ClustersSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateFirmware(formats strfmt.Registry) error {
	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	if m.Firmware != nil {
		if err := m.Firmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateFirmwareIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FirmwareIn); i++ {

		if err := m.FirmwareIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateFirmwareNot(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareNot) { // not required
		return nil
	}

	if m.FirmwareNot != nil {
		if err := m.FirmwareNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateFirmwareNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FirmwareNotIn); i++ {

		if err := m.FirmwareNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateIoPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicy) { // not required
		return nil
	}

	if m.IoPolicy != nil {
		if err := m.IoPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateIoPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IoPolicyIn); i++ {

		if err := m.IoPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateIoPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicyNot) { // not required
		return nil
	}

	if m.IoPolicyNot != nil {
		if err := m.IoPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateIoPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IoPolicyNotIn); i++ {

		if err := m.IoPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxBandwidthPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicy) { // not required
		return nil
	}

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxBandwidthPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxBandwidthPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyNot) { // not required
		return nil
	}

	if m.MaxBandwidthPolicyNot != nil {
		if err := m.MaxBandwidthPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxBandwidthPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxIopsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicy) { // not required
		return nil
	}

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxIopsPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxIopsPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyNot) { // not required
		return nil
	}

	if m.MaxIopsPolicyNot != nil {
		if err := m.MaxIopsPolicyNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateMaxIopsPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateVMTemplatesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesEvery) { // not required
		return nil
	}

	if m.VMTemplatesEvery != nil {
		if err := m.VMTemplatesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateVMTemplatesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesNone) { // not required
		return nil
	}

	if m.VMTemplatesNone != nil {
		if err := m.VMTemplatesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) validateVMTemplatesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesSome) { // not required
		return nil
	}

	if m.VMTemplatesSome != nil {
		if err := m.VMTemplatesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this content library Vm template where input based on the context it is used
func (m *ContentLibraryVMTemplateWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffsetIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffsetNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffsetNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateArchitecture(ctx context.Context, formats strfmt.Registry) error {

	if m.Architecture != nil {
		if err := m.Architecture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateArchitectureIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateArchitectureNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchitectureNot != nil {
		if err := m.ArchitectureNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateArchitectureNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClockOffset(ctx context.Context, formats strfmt.Registry) error {

	if m.ClockOffset != nil {
		if err := m.ClockOffset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClockOffsetIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClockOffsetIn); i++ {

		if err := m.ClockOffsetIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClockOffsetNot(ctx context.Context, formats strfmt.Registry) error {

	if m.ClockOffsetNot != nil {
		if err := m.ClockOffsetNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClockOffsetNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClockOffsetNotIn); i++ {

		if err := m.ClockOffsetNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClustersNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersNone != nil {
		if err := m.ClustersNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateClustersSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersSome != nil {
		if err := m.ClustersSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	if m.Firmware != nil {
		if err := m.Firmware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateFirmwareIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirmwareIn); i++ {

		if err := m.FirmwareIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateFirmwareNot(ctx context.Context, formats strfmt.Registry) error {

	if m.FirmwareNot != nil {
		if err := m.FirmwareNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateFirmwareNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirmwareNotIn); i++ {

		if err := m.FirmwareNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateIoPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IoPolicy != nil {
		if err := m.IoPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateIoPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IoPolicyIn); i++ {

		if err := m.IoPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateIoPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.IoPolicyNot != nil {
		if err := m.IoPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateIoPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IoPolicyNotIn); i++ {

		if err := m.IoPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxBandwidthPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxBandwidthPolicy != nil {
		if err := m.MaxBandwidthPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxBandwidthPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxBandwidthPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxBandwidthPolicyNot != nil {
		if err := m.MaxBandwidthPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxBandwidthPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxIopsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxIopsPolicy != nil {
		if err := m.MaxIopsPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxIopsPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxIopsPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxIopsPolicyNot != nil {
		if err := m.MaxIopsPolicyNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateMaxIopsPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateVMTemplatesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMTemplatesEvery != nil {
		if err := m.VMTemplatesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_every")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateVMTemplatesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMTemplatesNone != nil {
		if err := m.VMTemplatesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_none")
			}
			return err
		}
	}

	return nil
}

func (m *ContentLibraryVMTemplateWhereInput) contextValidateVMTemplatesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMTemplatesSome != nil {
		if err := m.VMTemplatesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_templates_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_templates_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentLibraryVMTemplateWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentLibraryVMTemplateWhereInput) UnmarshalBinary(b []byte) error {
	var res ContentLibraryVMTemplateWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
