// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMExpandVMDiskParams Vm expand Vm disk params
//
// swagger:model VmExpandVmDiskParams
type VMExpandVMDiskParams struct {

	// size
	// Required: true
	Size *int64 `json:"size"`

	// size unit
	SizeUnit *ByteUnit `json:"size_unit,omitempty"`

	// where
	// Required: true
	Where *VMDiskWhereInput `json:"where"`

	MarshalOpts *VMExpandVMDiskParamsMarshalOpts `json:"-"`
}

type VMExpandVMDiskParamsMarshalOpts struct {
	Size_Explicit_Null_When_Empty bool

	SizeUnit_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m VMExpandVMDiskParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_unit
	if m.SizeUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_unit\":")
		bytes, err := swag.WriteJSON(m.SizeUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_unit\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this Vm expand Vm disk params
func (m *VMExpandVMDiskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMExpandVMDiskParams) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VMExpandVMDiskParams) validateSizeUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.SizeUnit) { // not required
		return nil
	}

	if m.SizeUnit != nil {
		if err := m.SizeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("size_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMExpandVMDiskParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm expand Vm disk params based on the context it is used
func (m *VMExpandVMDiskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSizeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMExpandVMDiskParams) contextValidateSizeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.SizeUnit != nil {
		if err := m.SizeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("size_unit")
			}
			return err
		}
	}

	return nil
}

func (m *VMExpandVMDiskParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMExpandVMDiskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMExpandVMDiskParams) UnmarshalBinary(b []byte) error {
	var res VMExpandVMDiskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
