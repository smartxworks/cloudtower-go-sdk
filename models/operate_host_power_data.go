// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperateHostPowerData operate host power data
//
// swagger:model OperateHostPowerData
type OperateHostPowerData struct {

	// action
	// Required: true
	Action *OperateActionEnum `json:"action"`

	// force
	// Required: true
	Force *bool `json:"force"`

	// reason
	Reason *string `json:"reason,omitempty"`

	MarshalOpts *OperateHostPowerDataMarshalOpts `json:"-"`
}

type OperateHostPowerDataMarshalOpts struct {
	Action_Explicit_Null_When_Empty bool

	Force_Explicit_Null_When_Empty bool

	Reason_Explicit_Null_When_Empty bool
}

func (m OperateHostPowerData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field action
	if m.Action != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":")
		bytes, err := swag.WriteJSON(m.Action)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Action_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"action\":null")
		first = false
	}

	// handle nullable field force
	if m.Force != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"force\":")
		bytes, err := swag.WriteJSON(m.Force)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Force_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"force\":null")
		first = false
	}

	// handle nullable field reason
	if m.Reason != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":")
		bytes, err := swag.WriteJSON(m.Reason)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Reason_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"reason\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this operate host power data
func (m *OperateHostPowerData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForce(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperateHostPowerData) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *OperateHostPowerData) validateForce(formats strfmt.Registry) error {

	if err := validate.Required("force", "body", m.Force); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this operate host power data based on the context it is used
func (m *OperateHostPowerData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperateHostPowerData) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if m.Action != nil {
		if err := m.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperateHostPowerData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperateHostPowerData) UnmarshalBinary(b []byte) error {
	var res OperateHostPowerData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
