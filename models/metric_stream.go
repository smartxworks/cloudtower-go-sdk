// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricStream metric stream
//
// swagger:model MetricStream
type MetricStream struct {

	// typename
	// Enum: [MetricStream]
	Typename *string `json:"__typename,omitempty"`

	// labels
	// Required: true
	Labels *MetricLabel `json:"labels"`

	// points
	Points []*DataPoint `json:"points,omitempty"`

	MarshalOpts *MetricStreamMarshalOpts `json:"-"`
}

type MetricStreamMarshalOpts struct {
	Typename_Explicit_Null_When_Empty bool

	Labels_Explicit_Null_When_Empty bool

	Points_Explicit_Null_When_Empty bool
}

func (m MetricStream) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field __typename
	if m.Typename != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":")
		bytes, err := swag.WriteJSON(m.Typename)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Typename_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":null")
		first = false
	}

	// handle nullable field labels
	if m.Labels != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Labels_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":null")
		first = false
	}

	// handle non nullable field points with omitempty
	if !swag.IsZero(m.Points) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"points\":")
		bytes, err := swag.WriteJSON(m.Points)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this metric stream
func (m *MetricStream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metricStreamTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MetricStream"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricStreamTypeTypenamePropEnum = append(metricStreamTypeTypenamePropEnum, v)
	}
}

const (

	// MetricStreamTypenameMetricStream captures enum value "MetricStream"
	MetricStreamTypenameMetricStream string = "MetricStream"
)

// prop value enum
func (m *MetricStream) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricStreamTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetricStream) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

func (m *MetricStream) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *MetricStream) validatePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Points) { // not required
		return nil
	}

	for i := 0; i < len(m.Points); i++ {
		if swag.IsZero(m.Points[i]) { // not required
			continue
		}

		if m.Points[i] != nil {
			if err := m.Points[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this metric stream based on the context it is used
func (m *MetricStream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricStream) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	if m.Labels != nil {
		if err := m.Labels.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *MetricStream) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Points); i++ {

		if m.Points[i] != nil {
			if err := m.Points[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricStream) UnmarshalBinary(b []byte) error {
	var res MetricStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
