// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplicaVMState replica Vm state
//
// swagger:model ReplicaVmState
type ReplicaVMState string

func NewReplicaVMState(value ReplicaVMState) *ReplicaVMState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplicaVMState.
func (m ReplicaVMState) Pointer() *ReplicaVMState {
	return &m
}

const (

	// ReplicaVMStateFAILBACK captures enum value "FAILBACK"
	ReplicaVMStateFAILBACK ReplicaVMState = "FAILBACK"

	// ReplicaVMStateFAILOVER captures enum value "FAILOVER"
	ReplicaVMStateFAILOVER ReplicaVMState = "FAILOVER"

	// ReplicaVMStateFAILOVERTEST captures enum value "FAILOVER_TEST"
	ReplicaVMStateFAILOVERTEST ReplicaVMState = "FAILOVER_TEST"

	// ReplicaVMStateNOTREADY captures enum value "NOT_READY"
	ReplicaVMStateNOTREADY ReplicaVMState = "NOT_READY"

	// ReplicaVMStatePERMANENTFAILOVER captures enum value "PERMANENT_FAILOVER"
	ReplicaVMStatePERMANENTFAILOVER ReplicaVMState = "PERMANENT_FAILOVER"

	// ReplicaVMStateREADY captures enum value "READY"
	ReplicaVMStateREADY ReplicaVMState = "READY"

	// ReplicaVMStateREPLICATING captures enum value "REPLICATING"
	ReplicaVMStateREPLICATING ReplicaVMState = "REPLICATING"
)

// for schema
var replicaVmStateEnum []interface{}

func init() {
	var res []ReplicaVMState
	if err := json.Unmarshal([]byte(`["FAILBACK","FAILOVER","FAILOVER_TEST","NOT_READY","PERMANENT_FAILOVER","READY","REPLICATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicaVmStateEnum = append(replicaVmStateEnum, v)
	}
}

func (m ReplicaVMState) validateReplicaVMStateEnum(path, location string, value ReplicaVMState) error {
	if err := validate.EnumCase(path, location, value, replicaVmStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replica Vm state
func (m ReplicaVMState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplicaVMStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replica Vm state based on context it is used
func (m ReplicaVMState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
