// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTopNMetricInput get top n metric input
//
// swagger:model GetTopNMetricInput
type GetTopNMetricInput struct {

	// clusters
	// Required: true
	Clusters *ClusterWhereInput `json:"clusters"`

	// metrics
	// Required: true
	Metrics []string `json:"metrics"`

	// n
	// Required: true
	N *int32 `json:"n"`

	// range
	// Required: true
	Range *string `json:"range"`

	// type
	// Required: true
	// Enum: [top bottom]
	Type string `json:"type"`

	MarshalOpts *GetTopNMetricInputMarshalOpts `json:"-"`
}

type GetTopNMetricInputMarshalOpts struct {
	Clusters_Explicit_Null_When_Empty bool

	Metrics_Explicit_Null_When_Empty bool

	N_Explicit_Null_When_Empty bool

	Range_Explicit_Null_When_Empty bool
}

func (m GetTopNMetricInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field clusters
	if m.Clusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":")
		bytes, err := swag.WriteJSON(m.Clusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Clusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters\":null")
		first = false
	}

	// handle non nullable field metrics without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"metrics\":")
	{
		bytes, err := swag.WriteJSON(m.Metrics)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field n
	if m.N != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"n\":")
		bytes, err := swag.WriteJSON(m.N)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.N_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"n\":null")
		first = false
	}

	// handle nullable field range
	if m.Range != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"range\":")
		bytes, err := swag.WriteJSON(m.Range)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Range_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"range\":null")
		first = false
	}

	// handle non nullable field type with omitempty
	if swag.IsZero(m.Type) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this get top n metric input
func (m *GetTopNMetricInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTopNMetricInput) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	if m.Clusters != nil {
		if err := m.Clusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

func (m *GetTopNMetricInput) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("metrics", "body", m.Metrics); err != nil {
		return err
	}

	return nil
}

func (m *GetTopNMetricInput) validateN(formats strfmt.Registry) error {

	if err := validate.Required("n", "body", m.N); err != nil {
		return err
	}

	return nil
}

func (m *GetTopNMetricInput) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	return nil
}

var getTopNMetricInputTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["top","bottom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getTopNMetricInputTypeTypePropEnum = append(getTopNMetricInputTypeTypePropEnum, v)
	}
}

const (

	// GetTopNMetricInputTypeTop captures enum value "top"
	GetTopNMetricInputTypeTop string = "top"

	// GetTopNMetricInputTypeBottom captures enum value "bottom"
	GetTopNMetricInputTypeBottom string = "bottom"
)

// prop value enum
func (m *GetTopNMetricInput) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getTopNMetricInputTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetTopNMetricInput) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get top n metric input based on the context it is used
func (m *GetTopNMetricInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTopNMetricInput) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusters != nil {
		if err := m.Clusters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTopNMetricInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTopNMetricInput) UnmarshalBinary(b []byte) error {
	var res GetTopNMetricInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
