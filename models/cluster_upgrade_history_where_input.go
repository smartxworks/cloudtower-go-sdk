// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterUpgradeHistoryWhereInput cluster upgrade history where input
//
// swagger:model ClusterUpgradeHistoryWhereInput
type ClusterUpgradeHistoryWhereInput struct {

	// a n d
	AND []*ClusterUpgradeHistoryWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ClusterUpgradeHistoryWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ClusterUpgradeHistoryWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// date
	Date *string `json:"date,omitempty"`

	// date gt
	DateGt *string `json:"date_gt,omitempty"`

	// date gte
	DateGte *string `json:"date_gte,omitempty"`

	// date in
	DateIn []string `json:"date_in,omitempty"`

	// date lt
	DateLt *string `json:"date_lt,omitempty"`

	// date lte
	DateLte *string `json:"date_lte,omitempty"`

	// date not
	DateNot *string `json:"date_not,omitempty"`

	// date not in
	DateNotIn []string `json:"date_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// result
	Result *string `json:"result,omitempty"`

	// result contains
	ResultContains *string `json:"result_contains,omitempty"`

	// result ends with
	ResultEndsWith *string `json:"result_ends_with,omitempty"`

	// result gt
	ResultGt *string `json:"result_gt,omitempty"`

	// result gte
	ResultGte *string `json:"result_gte,omitempty"`

	// result in
	ResultIn []string `json:"result_in,omitempty"`

	// result lt
	ResultLt *string `json:"result_lt,omitempty"`

	// result lte
	ResultLte *string `json:"result_lte,omitempty"`

	// result not
	ResultNot *string `json:"result_not,omitempty"`

	// result not contains
	ResultNotContains *string `json:"result_not_contains,omitempty"`

	// result not ends with
	ResultNotEndsWith *string `json:"result_not_ends_with,omitempty"`

	// result not in
	ResultNotIn []string `json:"result_not_in,omitempty"`

	// result not starts with
	ResultNotStartsWith *string `json:"result_not_starts_with,omitempty"`

	// result starts with
	ResultStartsWith *string `json:"result_starts_with,omitempty"`

	// task uuid
	TaskUUID *string `json:"task_uuid,omitempty"`

	// task uuid contains
	TaskUUIDContains *string `json:"task_uuid_contains,omitempty"`

	// task uuid ends with
	TaskUUIDEndsWith *string `json:"task_uuid_ends_with,omitempty"`

	// task uuid gt
	TaskUUIDGt *string `json:"task_uuid_gt,omitempty"`

	// task uuid gte
	TaskUUIDGte *string `json:"task_uuid_gte,omitempty"`

	// task uuid in
	TaskUUIDIn []string `json:"task_uuid_in,omitempty"`

	// task uuid lt
	TaskUUIDLt *string `json:"task_uuid_lt,omitempty"`

	// task uuid lte
	TaskUUIDLte *string `json:"task_uuid_lte,omitempty"`

	// task uuid not
	TaskUUIDNot *string `json:"task_uuid_not,omitempty"`

	// task uuid not contains
	TaskUUIDNotContains *string `json:"task_uuid_not_contains,omitempty"`

	// task uuid not ends with
	TaskUUIDNotEndsWith *string `json:"task_uuid_not_ends_with,omitempty"`

	// task uuid not in
	TaskUUIDNotIn []string `json:"task_uuid_not_in,omitempty"`

	// task uuid not starts with
	TaskUUIDNotStartsWith *string `json:"task_uuid_not_starts_with,omitempty"`

	// task uuid starts with
	TaskUUIDStartsWith *string `json:"task_uuid_starts_with,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	MarshalOpts *ClusterUpgradeHistoryWhereInputMarshalOpts `json:"-"`
}

type ClusterUpgradeHistoryWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	Date_Explicit_Null_When_Empty bool

	DateGt_Explicit_Null_When_Empty bool

	DateGte_Explicit_Null_When_Empty bool

	DateIn_Explicit_Null_When_Empty bool

	DateLt_Explicit_Null_When_Empty bool

	DateLte_Explicit_Null_When_Empty bool

	DateNot_Explicit_Null_When_Empty bool

	DateNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Result_Explicit_Null_When_Empty bool

	ResultContains_Explicit_Null_When_Empty bool

	ResultEndsWith_Explicit_Null_When_Empty bool

	ResultGt_Explicit_Null_When_Empty bool

	ResultGte_Explicit_Null_When_Empty bool

	ResultIn_Explicit_Null_When_Empty bool

	ResultLt_Explicit_Null_When_Empty bool

	ResultLte_Explicit_Null_When_Empty bool

	ResultNot_Explicit_Null_When_Empty bool

	ResultNotContains_Explicit_Null_When_Empty bool

	ResultNotEndsWith_Explicit_Null_When_Empty bool

	ResultNotIn_Explicit_Null_When_Empty bool

	ResultNotStartsWith_Explicit_Null_When_Empty bool

	ResultStartsWith_Explicit_Null_When_Empty bool

	TaskUUID_Explicit_Null_When_Empty bool

	TaskUUIDContains_Explicit_Null_When_Empty bool

	TaskUUIDEndsWith_Explicit_Null_When_Empty bool

	TaskUUIDGt_Explicit_Null_When_Empty bool

	TaskUUIDGte_Explicit_Null_When_Empty bool

	TaskUUIDIn_Explicit_Null_When_Empty bool

	TaskUUIDLt_Explicit_Null_When_Empty bool

	TaskUUIDLte_Explicit_Null_When_Empty bool

	TaskUUIDNot_Explicit_Null_When_Empty bool

	TaskUUIDNotContains_Explicit_Null_When_Empty bool

	TaskUUIDNotEndsWith_Explicit_Null_When_Empty bool

	TaskUUIDNotIn_Explicit_Null_When_Empty bool

	TaskUUIDNotStartsWith_Explicit_Null_When_Empty bool

	TaskUUIDStartsWith_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VersionContains_Explicit_Null_When_Empty bool

	VersionEndsWith_Explicit_Null_When_Empty bool

	VersionGt_Explicit_Null_When_Empty bool

	VersionGte_Explicit_Null_When_Empty bool

	VersionIn_Explicit_Null_When_Empty bool

	VersionLt_Explicit_Null_When_Empty bool

	VersionLte_Explicit_Null_When_Empty bool

	VersionNot_Explicit_Null_When_Empty bool

	VersionNotContains_Explicit_Null_When_Empty bool

	VersionNotEndsWith_Explicit_Null_When_Empty bool

	VersionNotIn_Explicit_Null_When_Empty bool

	VersionNotStartsWith_Explicit_Null_When_Empty bool

	VersionStartsWith_Explicit_Null_When_Empty bool
}

func (m ClusterUpgradeHistoryWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field date
	if m.Date != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date\":")
		bytes, err := swag.WriteJSON(m.Date)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Date_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date\":null")
		first = false
	}

	// handle nullable field date_gt
	if m.DateGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_gt\":")
		bytes, err := swag.WriteJSON(m.DateGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DateGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_gt\":null")
		first = false
	}

	// handle nullable field date_gte
	if m.DateGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_gte\":")
		bytes, err := swag.WriteJSON(m.DateGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DateGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_gte\":null")
		first = false
	}

	// handle non nullable field date_in with omitempty
	if !swag.IsZero(m.DateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_in\":")
		bytes, err := swag.WriteJSON(m.DateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field date_lt
	if m.DateLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_lt\":")
		bytes, err := swag.WriteJSON(m.DateLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DateLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_lt\":null")
		first = false
	}

	// handle nullable field date_lte
	if m.DateLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_lte\":")
		bytes, err := swag.WriteJSON(m.DateLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DateLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_lte\":null")
		first = false
	}

	// handle nullable field date_not
	if m.DateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_not\":")
		bytes, err := swag.WriteJSON(m.DateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_not\":null")
		first = false
	}

	// handle non nullable field date_not_in with omitempty
	if !swag.IsZero(m.DateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"date_not_in\":")
		bytes, err := swag.WriteJSON(m.DateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field result
	if m.Result != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result\":")
		bytes, err := swag.WriteJSON(m.Result)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Result_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result\":null")
		first = false
	}

	// handle nullable field result_contains
	if m.ResultContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_contains\":")
		bytes, err := swag.WriteJSON(m.ResultContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_contains\":null")
		first = false
	}

	// handle nullable field result_ends_with
	if m.ResultEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResultEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_ends_with\":null")
		first = false
	}

	// handle nullable field result_gt
	if m.ResultGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_gt\":")
		bytes, err := swag.WriteJSON(m.ResultGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_gt\":null")
		first = false
	}

	// handle nullable field result_gte
	if m.ResultGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_gte\":")
		bytes, err := swag.WriteJSON(m.ResultGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_gte\":null")
		first = false
	}

	// handle non nullable field result_in with omitempty
	if !swag.IsZero(m.ResultIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_in\":")
		bytes, err := swag.WriteJSON(m.ResultIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field result_lt
	if m.ResultLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_lt\":")
		bytes, err := swag.WriteJSON(m.ResultLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_lt\":null")
		first = false
	}

	// handle nullable field result_lte
	if m.ResultLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_lte\":")
		bytes, err := swag.WriteJSON(m.ResultLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_lte\":null")
		first = false
	}

	// handle nullable field result_not
	if m.ResultNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not\":")
		bytes, err := swag.WriteJSON(m.ResultNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not\":null")
		first = false
	}

	// handle nullable field result_not_contains
	if m.ResultNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_contains\":")
		bytes, err := swag.WriteJSON(m.ResultNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_contains\":null")
		first = false
	}

	// handle nullable field result_not_ends_with
	if m.ResultNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ResultNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_ends_with\":null")
		first = false
	}

	// handle non nullable field result_not_in with omitempty
	if !swag.IsZero(m.ResultNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_in\":")
		bytes, err := swag.WriteJSON(m.ResultNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field result_not_starts_with
	if m.ResultNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResultNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_not_starts_with\":null")
		first = false
	}

	// handle nullable field result_starts_with
	if m.ResultStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_starts_with\":")
		bytes, err := swag.WriteJSON(m.ResultStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResultStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"result_starts_with\":null")
		first = false
	}

	// handle nullable field task_uuid
	if m.TaskUUID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid\":")
		bytes, err := swag.WriteJSON(m.TaskUUID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid\":null")
		first = false
	}

	// handle nullable field task_uuid_contains
	if m.TaskUUIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_contains\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_contains\":null")
		first = false
	}

	// handle nullable field task_uuid_ends_with
	if m.TaskUUIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_ends_with\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_ends_with\":null")
		first = false
	}

	// handle nullable field task_uuid_gt
	if m.TaskUUIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_gt\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_gt\":null")
		first = false
	}

	// handle nullable field task_uuid_gte
	if m.TaskUUIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_gte\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_gte\":null")
		first = false
	}

	// handle non nullable field task_uuid_in with omitempty
	if !swag.IsZero(m.TaskUUIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_in\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field task_uuid_lt
	if m.TaskUUIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_lt\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_lt\":null")
		first = false
	}

	// handle nullable field task_uuid_lte
	if m.TaskUUIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_lte\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_lte\":null")
		first = false
	}

	// handle nullable field task_uuid_not
	if m.TaskUUIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not\":null")
		first = false
	}

	// handle nullable field task_uuid_not_contains
	if m.TaskUUIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_contains\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_contains\":null")
		first = false
	}

	// handle nullable field task_uuid_not_ends_with
	if m.TaskUUIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_ends_with\":null")
		first = false
	}

	// handle non nullable field task_uuid_not_in with omitempty
	if !swag.IsZero(m.TaskUUIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_in\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field task_uuid_not_starts_with
	if m.TaskUUIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_not_starts_with\":null")
		first = false
	}

	// handle nullable field task_uuid_starts_with
	if m.TaskUUIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_starts_with\":")
		bytes, err := swag.WriteJSON(m.TaskUUIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TaskUUIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"task_uuid_starts_with\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field version_contains
	if m.VersionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":")
		bytes, err := swag.WriteJSON(m.VersionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":null")
		first = false
	}

	// handle nullable field version_ends_with
	if m.VersionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":null")
		first = false
	}

	// handle nullable field version_gt
	if m.VersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":")
		bytes, err := swag.WriteJSON(m.VersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":null")
		first = false
	}

	// handle nullable field version_gte
	if m.VersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":")
		bytes, err := swag.WriteJSON(m.VersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":null")
		first = false
	}

	// handle non nullable field version_in with omitempty
	if !swag.IsZero(m.VersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_in\":")
		bytes, err := swag.WriteJSON(m.VersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_lt
	if m.VersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":")
		bytes, err := swag.WriteJSON(m.VersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":null")
		first = false
	}

	// handle nullable field version_lte
	if m.VersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":")
		bytes, err := swag.WriteJSON(m.VersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":null")
		first = false
	}

	// handle nullable field version_not
	if m.VersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":")
		bytes, err := swag.WriteJSON(m.VersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":null")
		first = false
	}

	// handle nullable field version_not_contains
	if m.VersionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":")
		bytes, err := swag.WriteJSON(m.VersionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":null")
		first = false
	}

	// handle nullable field version_not_ends_with
	if m.VersionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":null")
		first = false
	}

	// handle non nullable field version_not_in with omitempty
	if !swag.IsZero(m.VersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_in\":")
		bytes, err := swag.WriteJSON(m.VersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_not_starts_with
	if m.VersionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":null")
		first = false
	}

	// handle nullable field version_starts_with
	if m.VersionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster upgrade history where input
func (m *ClusterUpgradeHistoryWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster upgrade history where input based on the context it is used
func (m *ClusterUpgradeHistoryWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpgradeHistoryWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpgradeHistoryWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpgradeHistoryWhereInput) UnmarshalBinary(b []byte) error {
	var res ClusterUpgradeHistoryWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
