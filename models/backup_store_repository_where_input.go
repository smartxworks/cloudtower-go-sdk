// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStoreRepositoryWhereInput backup store repository where input
//
// swagger:model BackupStoreRepositoryWhereInput
type BackupStoreRepositoryWhereInput struct {

	// a n d
	AND []*BackupStoreRepositoryWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupStoreRepositoryWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupStoreRepositoryWhereInput `json:"OR,omitempty"`

	// backup plans every
	BackupPlansEvery *BackupPlanWhereInput `json:"backup_plans_every,omitempty"`

	// backup plans none
	BackupPlansNone *BackupPlanWhereInput `json:"backup_plans_none,omitempty"`

	// backup plans some
	BackupPlansSome *BackupPlanWhereInput `json:"backup_plans_some,omitempty"`

	// backup restore points every
	BackupRestorePointsEvery *BackupRestorePointWhereInput `json:"backup_restore_points_every,omitempty"`

	// backup restore points none
	BackupRestorePointsNone *BackupRestorePointWhereInput `json:"backup_restore_points_none,omitempty"`

	// backup restore points some
	BackupRestorePointsSome *BackupRestorePointWhereInput `json:"backup_restore_points_some,omitempty"`

	// backup service
	BackupService *BackupServiceWhereInput `json:"backup_service,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// error code
	ErrorCode *string `json:"error_code,omitempty"`

	// error code contains
	ErrorCodeContains *string `json:"error_code_contains,omitempty"`

	// error code ends with
	ErrorCodeEndsWith *string `json:"error_code_ends_with,omitempty"`

	// error code gt
	ErrorCodeGt *string `json:"error_code_gt,omitempty"`

	// error code gte
	ErrorCodeGte *string `json:"error_code_gte,omitempty"`

	// error code in
	ErrorCodeIn []string `json:"error_code_in,omitempty"`

	// error code lt
	ErrorCodeLt *string `json:"error_code_lt,omitempty"`

	// error code lte
	ErrorCodeLte *string `json:"error_code_lte,omitempty"`

	// error code not
	ErrorCodeNot *string `json:"error_code_not,omitempty"`

	// error code not contains
	ErrorCodeNotContains *string `json:"error_code_not_contains,omitempty"`

	// error code not ends with
	ErrorCodeNotEndsWith *string `json:"error_code_not_ends_with,omitempty"`

	// error code not in
	ErrorCodeNotIn []string `json:"error_code_not_in,omitempty"`

	// error code not starts with
	ErrorCodeNotStartsWith *string `json:"error_code_not_starts_with,omitempty"`

	// error code starts with
	ErrorCodeStartsWith *string `json:"error_code_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iscsi chap name
	IscsiChapName *string `json:"iscsi_chap_name,omitempty"`

	// iscsi chap name contains
	IscsiChapNameContains *string `json:"iscsi_chap_name_contains,omitempty"`

	// iscsi chap name ends with
	IscsiChapNameEndsWith *string `json:"iscsi_chap_name_ends_with,omitempty"`

	// iscsi chap name gt
	IscsiChapNameGt *string `json:"iscsi_chap_name_gt,omitempty"`

	// iscsi chap name gte
	IscsiChapNameGte *string `json:"iscsi_chap_name_gte,omitempty"`

	// iscsi chap name in
	IscsiChapNameIn []string `json:"iscsi_chap_name_in,omitempty"`

	// iscsi chap name lt
	IscsiChapNameLt *string `json:"iscsi_chap_name_lt,omitempty"`

	// iscsi chap name lte
	IscsiChapNameLte *string `json:"iscsi_chap_name_lte,omitempty"`

	// iscsi chap name not
	IscsiChapNameNot *string `json:"iscsi_chap_name_not,omitempty"`

	// iscsi chap name not contains
	IscsiChapNameNotContains *string `json:"iscsi_chap_name_not_contains,omitempty"`

	// iscsi chap name not ends with
	IscsiChapNameNotEndsWith *string `json:"iscsi_chap_name_not_ends_with,omitempty"`

	// iscsi chap name not in
	IscsiChapNameNotIn []string `json:"iscsi_chap_name_not_in,omitempty"`

	// iscsi chap name not starts with
	IscsiChapNameNotStartsWith *string `json:"iscsi_chap_name_not_starts_with,omitempty"`

	// iscsi chap name starts with
	IscsiChapNameStartsWith *string `json:"iscsi_chap_name_starts_with,omitempty"`

	// iscsi chap secret
	IscsiChapSecret *string `json:"iscsi_chap_secret,omitempty"`

	// iscsi chap secret contains
	IscsiChapSecretContains *string `json:"iscsi_chap_secret_contains,omitempty"`

	// iscsi chap secret ends with
	IscsiChapSecretEndsWith *string `json:"iscsi_chap_secret_ends_with,omitempty"`

	// iscsi chap secret gt
	IscsiChapSecretGt *string `json:"iscsi_chap_secret_gt,omitempty"`

	// iscsi chap secret gte
	IscsiChapSecretGte *string `json:"iscsi_chap_secret_gte,omitempty"`

	// iscsi chap secret in
	IscsiChapSecretIn []string `json:"iscsi_chap_secret_in,omitempty"`

	// iscsi chap secret lt
	IscsiChapSecretLt *string `json:"iscsi_chap_secret_lt,omitempty"`

	// iscsi chap secret lte
	IscsiChapSecretLte *string `json:"iscsi_chap_secret_lte,omitempty"`

	// iscsi chap secret not
	IscsiChapSecretNot *string `json:"iscsi_chap_secret_not,omitempty"`

	// iscsi chap secret not contains
	IscsiChapSecretNotContains *string `json:"iscsi_chap_secret_not_contains,omitempty"`

	// iscsi chap secret not ends with
	IscsiChapSecretNotEndsWith *string `json:"iscsi_chap_secret_not_ends_with,omitempty"`

	// iscsi chap secret not in
	IscsiChapSecretNotIn []string `json:"iscsi_chap_secret_not_in,omitempty"`

	// iscsi chap secret not starts with
	IscsiChapSecretNotStartsWith *string `json:"iscsi_chap_secret_not_starts_with,omitempty"`

	// iscsi chap secret starts with
	IscsiChapSecretStartsWith *string `json:"iscsi_chap_secret_starts_with,omitempty"`

	// iscsi ip
	IscsiIP *string `json:"iscsi_ip,omitempty"`

	// iscsi ip contains
	IscsiIPContains *string `json:"iscsi_ip_contains,omitempty"`

	// iscsi ip ends with
	IscsiIPEndsWith *string `json:"iscsi_ip_ends_with,omitempty"`

	// iscsi ip gt
	IscsiIPGt *string `json:"iscsi_ip_gt,omitempty"`

	// iscsi ip gte
	IscsiIPGte *string `json:"iscsi_ip_gte,omitempty"`

	// iscsi ip in
	IscsiIPIn []string `json:"iscsi_ip_in,omitempty"`

	// iscsi ip lt
	IscsiIPLt *string `json:"iscsi_ip_lt,omitempty"`

	// iscsi ip lte
	IscsiIPLte *string `json:"iscsi_ip_lte,omitempty"`

	// iscsi ip not
	IscsiIPNot *string `json:"iscsi_ip_not,omitempty"`

	// iscsi ip not contains
	IscsiIPNotContains *string `json:"iscsi_ip_not_contains,omitempty"`

	// iscsi ip not ends with
	IscsiIPNotEndsWith *string `json:"iscsi_ip_not_ends_with,omitempty"`

	// iscsi ip not in
	IscsiIPNotIn []string `json:"iscsi_ip_not_in,omitempty"`

	// iscsi ip not starts with
	IscsiIPNotStartsWith *string `json:"iscsi_ip_not_starts_with,omitempty"`

	// iscsi ip starts with
	IscsiIPStartsWith *string `json:"iscsi_ip_starts_with,omitempty"`

	// iscsi lun id
	IscsiLunID *string `json:"iscsi_lun_id,omitempty"`

	// iscsi lun id contains
	IscsiLunIDContains *string `json:"iscsi_lun_id_contains,omitempty"`

	// iscsi lun id ends with
	IscsiLunIDEndsWith *string `json:"iscsi_lun_id_ends_with,omitempty"`

	// iscsi lun id gt
	IscsiLunIDGt *string `json:"iscsi_lun_id_gt,omitempty"`

	// iscsi lun id gte
	IscsiLunIDGte *string `json:"iscsi_lun_id_gte,omitempty"`

	// iscsi lun id in
	IscsiLunIDIn []string `json:"iscsi_lun_id_in,omitempty"`

	// iscsi lun id lt
	IscsiLunIDLt *string `json:"iscsi_lun_id_lt,omitempty"`

	// iscsi lun id lte
	IscsiLunIDLte *string `json:"iscsi_lun_id_lte,omitempty"`

	// iscsi lun id not
	IscsiLunIDNot *string `json:"iscsi_lun_id_not,omitempty"`

	// iscsi lun id not contains
	IscsiLunIDNotContains *string `json:"iscsi_lun_id_not_contains,omitempty"`

	// iscsi lun id not ends with
	IscsiLunIDNotEndsWith *string `json:"iscsi_lun_id_not_ends_with,omitempty"`

	// iscsi lun id not in
	IscsiLunIDNotIn []string `json:"iscsi_lun_id_not_in,omitempty"`

	// iscsi lun id not starts with
	IscsiLunIDNotStartsWith *string `json:"iscsi_lun_id_not_starts_with,omitempty"`

	// iscsi lun id starts with
	IscsiLunIDStartsWith *string `json:"iscsi_lun_id_starts_with,omitempty"`

	// iscsi port
	IscsiPort *int32 `json:"iscsi_port,omitempty"`

	// iscsi port gt
	IscsiPortGt *int32 `json:"iscsi_port_gt,omitempty"`

	// iscsi port gte
	IscsiPortGte *int32 `json:"iscsi_port_gte,omitempty"`

	// iscsi port in
	IscsiPortIn []int32 `json:"iscsi_port_in,omitempty"`

	// iscsi port lt
	IscsiPortLt *int32 `json:"iscsi_port_lt,omitempty"`

	// iscsi port lte
	IscsiPortLte *int32 `json:"iscsi_port_lte,omitempty"`

	// iscsi port not
	IscsiPortNot *int32 `json:"iscsi_port_not,omitempty"`

	// iscsi port not in
	IscsiPortNotIn []int32 `json:"iscsi_port_not_in,omitempty"`

	// iscsi target iqn
	IscsiTargetIqn *string `json:"iscsi_target_iqn,omitempty"`

	// iscsi target iqn contains
	IscsiTargetIqnContains *string `json:"iscsi_target_iqn_contains,omitempty"`

	// iscsi target iqn ends with
	IscsiTargetIqnEndsWith *string `json:"iscsi_target_iqn_ends_with,omitempty"`

	// iscsi target iqn gt
	IscsiTargetIqnGt *string `json:"iscsi_target_iqn_gt,omitempty"`

	// iscsi target iqn gte
	IscsiTargetIqnGte *string `json:"iscsi_target_iqn_gte,omitempty"`

	// iscsi target iqn in
	IscsiTargetIqnIn []string `json:"iscsi_target_iqn_in,omitempty"`

	// iscsi target iqn lt
	IscsiTargetIqnLt *string `json:"iscsi_target_iqn_lt,omitempty"`

	// iscsi target iqn lte
	IscsiTargetIqnLte *string `json:"iscsi_target_iqn_lte,omitempty"`

	// iscsi target iqn not
	IscsiTargetIqnNot *string `json:"iscsi_target_iqn_not,omitempty"`

	// iscsi target iqn not contains
	IscsiTargetIqnNotContains *string `json:"iscsi_target_iqn_not_contains,omitempty"`

	// iscsi target iqn not ends with
	IscsiTargetIqnNotEndsWith *string `json:"iscsi_target_iqn_not_ends_with,omitempty"`

	// iscsi target iqn not in
	IscsiTargetIqnNotIn []string `json:"iscsi_target_iqn_not_in,omitempty"`

	// iscsi target iqn not starts with
	IscsiTargetIqnNotStartsWith *string `json:"iscsi_target_iqn_not_starts_with,omitempty"`

	// iscsi target iqn starts with
	IscsiTargetIqnStartsWith *string `json:"iscsi_target_iqn_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nfs path
	NfsPath *string `json:"nfs_path,omitempty"`

	// nfs path contains
	NfsPathContains *string `json:"nfs_path_contains,omitempty"`

	// nfs path ends with
	NfsPathEndsWith *string `json:"nfs_path_ends_with,omitempty"`

	// nfs path gt
	NfsPathGt *string `json:"nfs_path_gt,omitempty"`

	// nfs path gte
	NfsPathGte *string `json:"nfs_path_gte,omitempty"`

	// nfs path in
	NfsPathIn []string `json:"nfs_path_in,omitempty"`

	// nfs path lt
	NfsPathLt *string `json:"nfs_path_lt,omitempty"`

	// nfs path lte
	NfsPathLte *string `json:"nfs_path_lte,omitempty"`

	// nfs path not
	NfsPathNot *string `json:"nfs_path_not,omitempty"`

	// nfs path not contains
	NfsPathNotContains *string `json:"nfs_path_not_contains,omitempty"`

	// nfs path not ends with
	NfsPathNotEndsWith *string `json:"nfs_path_not_ends_with,omitempty"`

	// nfs path not in
	NfsPathNotIn []string `json:"nfs_path_not_in,omitempty"`

	// nfs path not starts with
	NfsPathNotStartsWith *string `json:"nfs_path_not_starts_with,omitempty"`

	// nfs path starts with
	NfsPathStartsWith *string `json:"nfs_path_starts_with,omitempty"`

	// nfs server
	NfsServer *string `json:"nfs_server,omitempty"`

	// nfs server contains
	NfsServerContains *string `json:"nfs_server_contains,omitempty"`

	// nfs server ends with
	NfsServerEndsWith *string `json:"nfs_server_ends_with,omitempty"`

	// nfs server gt
	NfsServerGt *string `json:"nfs_server_gt,omitempty"`

	// nfs server gte
	NfsServerGte *string `json:"nfs_server_gte,omitempty"`

	// nfs server in
	NfsServerIn []string `json:"nfs_server_in,omitempty"`

	// nfs server lt
	NfsServerLt *string `json:"nfs_server_lt,omitempty"`

	// nfs server lte
	NfsServerLte *string `json:"nfs_server_lte,omitempty"`

	// nfs server not
	NfsServerNot *string `json:"nfs_server_not,omitempty"`

	// nfs server not contains
	NfsServerNotContains *string `json:"nfs_server_not_contains,omitempty"`

	// nfs server not ends with
	NfsServerNotEndsWith *string `json:"nfs_server_not_ends_with,omitempty"`

	// nfs server not in
	NfsServerNotIn []string `json:"nfs_server_not_in,omitempty"`

	// nfs server not starts with
	NfsServerNotStartsWith *string `json:"nfs_server_not_starts_with,omitempty"`

	// nfs server starts with
	NfsServerStartsWith *string `json:"nfs_server_starts_with,omitempty"`

	// status
	Status *BackupStoreStatus `json:"status,omitempty"`

	// status in
	StatusIn []BackupStoreStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *BackupStoreStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupStoreStatus `json:"status_not_in,omitempty"`

	// total capacity
	TotalCapacity *int64 `json:"total_capacity,omitempty"`

	// total capacity gt
	TotalCapacityGt *int64 `json:"total_capacity_gt,omitempty"`

	// total capacity gte
	TotalCapacityGte *int64 `json:"total_capacity_gte,omitempty"`

	// total capacity in
	TotalCapacityIn []int64 `json:"total_capacity_in,omitempty"`

	// total capacity lt
	TotalCapacityLt *int64 `json:"total_capacity_lt,omitempty"`

	// total capacity lte
	TotalCapacityLte *int64 `json:"total_capacity_lte,omitempty"`

	// total capacity not
	TotalCapacityNot *int64 `json:"total_capacity_not,omitempty"`

	// total capacity not in
	TotalCapacityNotIn []int64 `json:"total_capacity_not_in,omitempty"`

	// type
	Type *BackupStoreType `json:"type,omitempty"`

	// type in
	TypeIn []BackupStoreType `json:"type_in,omitempty"`

	// type not
	TypeNot *BackupStoreType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupStoreType `json:"type_not_in,omitempty"`

	// update timestamp
	UpdateTimestamp *string `json:"update_timestamp,omitempty"`

	// update timestamp contains
	UpdateTimestampContains *string `json:"update_timestamp_contains,omitempty"`

	// update timestamp ends with
	UpdateTimestampEndsWith *string `json:"update_timestamp_ends_with,omitempty"`

	// update timestamp gt
	UpdateTimestampGt *string `json:"update_timestamp_gt,omitempty"`

	// update timestamp gte
	UpdateTimestampGte *string `json:"update_timestamp_gte,omitempty"`

	// update timestamp in
	UpdateTimestampIn []string `json:"update_timestamp_in,omitempty"`

	// update timestamp lt
	UpdateTimestampLt *string `json:"update_timestamp_lt,omitempty"`

	// update timestamp lte
	UpdateTimestampLte *string `json:"update_timestamp_lte,omitempty"`

	// update timestamp not
	UpdateTimestampNot *string `json:"update_timestamp_not,omitempty"`

	// update timestamp not contains
	UpdateTimestampNotContains *string `json:"update_timestamp_not_contains,omitempty"`

	// update timestamp not ends with
	UpdateTimestampNotEndsWith *string `json:"update_timestamp_not_ends_with,omitempty"`

	// update timestamp not in
	UpdateTimestampNotIn []string `json:"update_timestamp_not_in,omitempty"`

	// update timestamp not starts with
	UpdateTimestampNotStartsWith *string `json:"update_timestamp_not_starts_with,omitempty"`

	// update timestamp starts with
	UpdateTimestampStartsWith *string `json:"update_timestamp_starts_with,omitempty"`

	// used data space
	UsedDataSpace *int64 `json:"used_data_space,omitempty"`

	// used data space gt
	UsedDataSpaceGt *int64 `json:"used_data_space_gt,omitempty"`

	// used data space gte
	UsedDataSpaceGte *int64 `json:"used_data_space_gte,omitempty"`

	// used data space in
	UsedDataSpaceIn []int64 `json:"used_data_space_in,omitempty"`

	// used data space lt
	UsedDataSpaceLt *int64 `json:"used_data_space_lt,omitempty"`

	// used data space lte
	UsedDataSpaceLte *int64 `json:"used_data_space_lte,omitempty"`

	// used data space not
	UsedDataSpaceNot *int64 `json:"used_data_space_not,omitempty"`

	// used data space not in
	UsedDataSpaceNotIn []int64 `json:"used_data_space_not_in,omitempty"`

	// used data space usage
	UsedDataSpaceUsage *float64 `json:"used_data_space_usage,omitempty"`

	// used data space usage gt
	UsedDataSpaceUsageGt *float64 `json:"used_data_space_usage_gt,omitempty"`

	// used data space usage gte
	UsedDataSpaceUsageGte *float64 `json:"used_data_space_usage_gte,omitempty"`

	// used data space usage in
	UsedDataSpaceUsageIn []float64 `json:"used_data_space_usage_in,omitempty"`

	// used data space usage lt
	UsedDataSpaceUsageLt *float64 `json:"used_data_space_usage_lt,omitempty"`

	// used data space usage lte
	UsedDataSpaceUsageLte *float64 `json:"used_data_space_usage_lte,omitempty"`

	// used data space usage not
	UsedDataSpaceUsageNot *float64 `json:"used_data_space_usage_not,omitempty"`

	// used data space usage not in
	UsedDataSpaceUsageNotIn []float64 `json:"used_data_space_usage_not_in,omitempty"`

	// valid data space
	ValidDataSpace *int64 `json:"valid_data_space,omitempty"`

	// valid data space gt
	ValidDataSpaceGt *int64 `json:"valid_data_space_gt,omitempty"`

	// valid data space gte
	ValidDataSpaceGte *int64 `json:"valid_data_space_gte,omitempty"`

	// valid data space in
	ValidDataSpaceIn []int64 `json:"valid_data_space_in,omitempty"`

	// valid data space lt
	ValidDataSpaceLt *int64 `json:"valid_data_space_lt,omitempty"`

	// valid data space lte
	ValidDataSpaceLte *int64 `json:"valid_data_space_lte,omitempty"`

	// valid data space not
	ValidDataSpaceNot *int64 `json:"valid_data_space_not,omitempty"`

	// valid data space not in
	ValidDataSpaceNotIn []int64 `json:"valid_data_space_not_in,omitempty"`

	MarshalOpts *BackupStoreRepositoryWhereInputMarshalOpts `json:"-"`
}

type BackupStoreRepositoryWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	BackupPlansEvery_Explicit_Null_When_Empty bool

	BackupPlansNone_Explicit_Null_When_Empty bool

	BackupPlansSome_Explicit_Null_When_Empty bool

	BackupRestorePointsEvery_Explicit_Null_When_Empty bool

	BackupRestorePointsNone_Explicit_Null_When_Empty bool

	BackupRestorePointsSome_Explicit_Null_When_Empty bool

	BackupService_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ErrorCode_Explicit_Null_When_Empty bool

	ErrorCodeContains_Explicit_Null_When_Empty bool

	ErrorCodeEndsWith_Explicit_Null_When_Empty bool

	ErrorCodeGt_Explicit_Null_When_Empty bool

	ErrorCodeGte_Explicit_Null_When_Empty bool

	ErrorCodeIn_Explicit_Null_When_Empty bool

	ErrorCodeLt_Explicit_Null_When_Empty bool

	ErrorCodeLte_Explicit_Null_When_Empty bool

	ErrorCodeNot_Explicit_Null_When_Empty bool

	ErrorCodeNotContains_Explicit_Null_When_Empty bool

	ErrorCodeNotEndsWith_Explicit_Null_When_Empty bool

	ErrorCodeNotIn_Explicit_Null_When_Empty bool

	ErrorCodeNotStartsWith_Explicit_Null_When_Empty bool

	ErrorCodeStartsWith_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IscsiChapName_Explicit_Null_When_Empty bool

	IscsiChapNameContains_Explicit_Null_When_Empty bool

	IscsiChapNameEndsWith_Explicit_Null_When_Empty bool

	IscsiChapNameGt_Explicit_Null_When_Empty bool

	IscsiChapNameGte_Explicit_Null_When_Empty bool

	IscsiChapNameIn_Explicit_Null_When_Empty bool

	IscsiChapNameLt_Explicit_Null_When_Empty bool

	IscsiChapNameLte_Explicit_Null_When_Empty bool

	IscsiChapNameNot_Explicit_Null_When_Empty bool

	IscsiChapNameNotContains_Explicit_Null_When_Empty bool

	IscsiChapNameNotEndsWith_Explicit_Null_When_Empty bool

	IscsiChapNameNotIn_Explicit_Null_When_Empty bool

	IscsiChapNameNotStartsWith_Explicit_Null_When_Empty bool

	IscsiChapNameStartsWith_Explicit_Null_When_Empty bool

	IscsiChapSecret_Explicit_Null_When_Empty bool

	IscsiChapSecretContains_Explicit_Null_When_Empty bool

	IscsiChapSecretEndsWith_Explicit_Null_When_Empty bool

	IscsiChapSecretGt_Explicit_Null_When_Empty bool

	IscsiChapSecretGte_Explicit_Null_When_Empty bool

	IscsiChapSecretIn_Explicit_Null_When_Empty bool

	IscsiChapSecretLt_Explicit_Null_When_Empty bool

	IscsiChapSecretLte_Explicit_Null_When_Empty bool

	IscsiChapSecretNot_Explicit_Null_When_Empty bool

	IscsiChapSecretNotContains_Explicit_Null_When_Empty bool

	IscsiChapSecretNotEndsWith_Explicit_Null_When_Empty bool

	IscsiChapSecretNotIn_Explicit_Null_When_Empty bool

	IscsiChapSecretNotStartsWith_Explicit_Null_When_Empty bool

	IscsiChapSecretStartsWith_Explicit_Null_When_Empty bool

	IscsiIP_Explicit_Null_When_Empty bool

	IscsiIPContains_Explicit_Null_When_Empty bool

	IscsiIPEndsWith_Explicit_Null_When_Empty bool

	IscsiIPGt_Explicit_Null_When_Empty bool

	IscsiIPGte_Explicit_Null_When_Empty bool

	IscsiIPIn_Explicit_Null_When_Empty bool

	IscsiIPLt_Explicit_Null_When_Empty bool

	IscsiIPLte_Explicit_Null_When_Empty bool

	IscsiIPNot_Explicit_Null_When_Empty bool

	IscsiIPNotContains_Explicit_Null_When_Empty bool

	IscsiIPNotEndsWith_Explicit_Null_When_Empty bool

	IscsiIPNotIn_Explicit_Null_When_Empty bool

	IscsiIPNotStartsWith_Explicit_Null_When_Empty bool

	IscsiIPStartsWith_Explicit_Null_When_Empty bool

	IscsiLunID_Explicit_Null_When_Empty bool

	IscsiLunIDContains_Explicit_Null_When_Empty bool

	IscsiLunIDEndsWith_Explicit_Null_When_Empty bool

	IscsiLunIDGt_Explicit_Null_When_Empty bool

	IscsiLunIDGte_Explicit_Null_When_Empty bool

	IscsiLunIDIn_Explicit_Null_When_Empty bool

	IscsiLunIDLt_Explicit_Null_When_Empty bool

	IscsiLunIDLte_Explicit_Null_When_Empty bool

	IscsiLunIDNot_Explicit_Null_When_Empty bool

	IscsiLunIDNotContains_Explicit_Null_When_Empty bool

	IscsiLunIDNotEndsWith_Explicit_Null_When_Empty bool

	IscsiLunIDNotIn_Explicit_Null_When_Empty bool

	IscsiLunIDNotStartsWith_Explicit_Null_When_Empty bool

	IscsiLunIDStartsWith_Explicit_Null_When_Empty bool

	IscsiPort_Explicit_Null_When_Empty bool

	IscsiPortGt_Explicit_Null_When_Empty bool

	IscsiPortGte_Explicit_Null_When_Empty bool

	IscsiPortIn_Explicit_Null_When_Empty bool

	IscsiPortLt_Explicit_Null_When_Empty bool

	IscsiPortLte_Explicit_Null_When_Empty bool

	IscsiPortNot_Explicit_Null_When_Empty bool

	IscsiPortNotIn_Explicit_Null_When_Empty bool

	IscsiTargetIqn_Explicit_Null_When_Empty bool

	IscsiTargetIqnContains_Explicit_Null_When_Empty bool

	IscsiTargetIqnEndsWith_Explicit_Null_When_Empty bool

	IscsiTargetIqnGt_Explicit_Null_When_Empty bool

	IscsiTargetIqnGte_Explicit_Null_When_Empty bool

	IscsiTargetIqnIn_Explicit_Null_When_Empty bool

	IscsiTargetIqnLt_Explicit_Null_When_Empty bool

	IscsiTargetIqnLte_Explicit_Null_When_Empty bool

	IscsiTargetIqnNot_Explicit_Null_When_Empty bool

	IscsiTargetIqnNotContains_Explicit_Null_When_Empty bool

	IscsiTargetIqnNotEndsWith_Explicit_Null_When_Empty bool

	IscsiTargetIqnNotIn_Explicit_Null_When_Empty bool

	IscsiTargetIqnNotStartsWith_Explicit_Null_When_Empty bool

	IscsiTargetIqnStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NfsPath_Explicit_Null_When_Empty bool

	NfsPathContains_Explicit_Null_When_Empty bool

	NfsPathEndsWith_Explicit_Null_When_Empty bool

	NfsPathGt_Explicit_Null_When_Empty bool

	NfsPathGte_Explicit_Null_When_Empty bool

	NfsPathIn_Explicit_Null_When_Empty bool

	NfsPathLt_Explicit_Null_When_Empty bool

	NfsPathLte_Explicit_Null_When_Empty bool

	NfsPathNot_Explicit_Null_When_Empty bool

	NfsPathNotContains_Explicit_Null_When_Empty bool

	NfsPathNotEndsWith_Explicit_Null_When_Empty bool

	NfsPathNotIn_Explicit_Null_When_Empty bool

	NfsPathNotStartsWith_Explicit_Null_When_Empty bool

	NfsPathStartsWith_Explicit_Null_When_Empty bool

	NfsServer_Explicit_Null_When_Empty bool

	NfsServerContains_Explicit_Null_When_Empty bool

	NfsServerEndsWith_Explicit_Null_When_Empty bool

	NfsServerGt_Explicit_Null_When_Empty bool

	NfsServerGte_Explicit_Null_When_Empty bool

	NfsServerIn_Explicit_Null_When_Empty bool

	NfsServerLt_Explicit_Null_When_Empty bool

	NfsServerLte_Explicit_Null_When_Empty bool

	NfsServerNot_Explicit_Null_When_Empty bool

	NfsServerNotContains_Explicit_Null_When_Empty bool

	NfsServerNotEndsWith_Explicit_Null_When_Empty bool

	NfsServerNotIn_Explicit_Null_When_Empty bool

	NfsServerNotStartsWith_Explicit_Null_When_Empty bool

	NfsServerStartsWith_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	TotalCapacity_Explicit_Null_When_Empty bool

	TotalCapacityGt_Explicit_Null_When_Empty bool

	TotalCapacityGte_Explicit_Null_When_Empty bool

	TotalCapacityIn_Explicit_Null_When_Empty bool

	TotalCapacityLt_Explicit_Null_When_Empty bool

	TotalCapacityLte_Explicit_Null_When_Empty bool

	TotalCapacityNot_Explicit_Null_When_Empty bool

	TotalCapacityNotIn_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	UpdateTimestamp_Explicit_Null_When_Empty bool

	UpdateTimestampContains_Explicit_Null_When_Empty bool

	UpdateTimestampEndsWith_Explicit_Null_When_Empty bool

	UpdateTimestampGt_Explicit_Null_When_Empty bool

	UpdateTimestampGte_Explicit_Null_When_Empty bool

	UpdateTimestampIn_Explicit_Null_When_Empty bool

	UpdateTimestampLt_Explicit_Null_When_Empty bool

	UpdateTimestampLte_Explicit_Null_When_Empty bool

	UpdateTimestampNot_Explicit_Null_When_Empty bool

	UpdateTimestampNotContains_Explicit_Null_When_Empty bool

	UpdateTimestampNotEndsWith_Explicit_Null_When_Empty bool

	UpdateTimestampNotIn_Explicit_Null_When_Empty bool

	UpdateTimestampNotStartsWith_Explicit_Null_When_Empty bool

	UpdateTimestampStartsWith_Explicit_Null_When_Empty bool

	UsedDataSpace_Explicit_Null_When_Empty bool

	UsedDataSpaceGt_Explicit_Null_When_Empty bool

	UsedDataSpaceGte_Explicit_Null_When_Empty bool

	UsedDataSpaceIn_Explicit_Null_When_Empty bool

	UsedDataSpaceLt_Explicit_Null_When_Empty bool

	UsedDataSpaceLte_Explicit_Null_When_Empty bool

	UsedDataSpaceNot_Explicit_Null_When_Empty bool

	UsedDataSpaceNotIn_Explicit_Null_When_Empty bool

	UsedDataSpaceUsage_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageGt_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageGte_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageIn_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageLt_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageLte_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageNot_Explicit_Null_When_Empty bool

	UsedDataSpaceUsageNotIn_Explicit_Null_When_Empty bool

	ValidDataSpace_Explicit_Null_When_Empty bool

	ValidDataSpaceGt_Explicit_Null_When_Empty bool

	ValidDataSpaceGte_Explicit_Null_When_Empty bool

	ValidDataSpaceIn_Explicit_Null_When_Empty bool

	ValidDataSpaceLt_Explicit_Null_When_Empty bool

	ValidDataSpaceLte_Explicit_Null_When_Empty bool

	ValidDataSpaceNot_Explicit_Null_When_Empty bool

	ValidDataSpaceNotIn_Explicit_Null_When_Empty bool
}

func (m BackupStoreRepositoryWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_plans_every
	if m.BackupPlansEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_every\":")
		bytes, err := swag.WriteJSON(m.BackupPlansEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlansEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_every\":null")
		first = false
	}

	// handle nullable field backup_plans_none
	if m.BackupPlansNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_none\":")
		bytes, err := swag.WriteJSON(m.BackupPlansNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlansNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_none\":null")
		first = false
	}

	// handle nullable field backup_plans_some
	if m.BackupPlansSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_some\":")
		bytes, err := swag.WriteJSON(m.BackupPlansSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlansSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plans_some\":null")
		first = false
	}

	// handle nullable field backup_restore_points_every
	if m.BackupRestorePointsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_every\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_every\":null")
		first = false
	}

	// handle nullable field backup_restore_points_none
	if m.BackupRestorePointsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_none\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_none\":null")
		first = false
	}

	// handle nullable field backup_restore_points_some
	if m.BackupRestorePointsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_some\":")
		bytes, err := swag.WriteJSON(m.BackupRestorePointsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestorePointsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_points_some\":null")
		first = false
	}

	// handle nullable field backup_service
	if m.BackupService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":")
		bytes, err := swag.WriteJSON(m.BackupService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_service\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field error_code
	if m.ErrorCode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code\":")
		bytes, err := swag.WriteJSON(m.ErrorCode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code\":null")
		first = false
	}

	// handle nullable field error_code_contains
	if m.ErrorCodeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_contains\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_contains\":null")
		first = false
	}

	// handle nullable field error_code_ends_with
	if m.ErrorCodeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_ends_with\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_ends_with\":null")
		first = false
	}

	// handle nullable field error_code_gt
	if m.ErrorCodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_gt\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_gt\":null")
		first = false
	}

	// handle nullable field error_code_gte
	if m.ErrorCodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_gte\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_gte\":null")
		first = false
	}

	// handle non nullable field error_code_in with omitempty
	if !swag.IsZero(m.ErrorCodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_in\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field error_code_lt
	if m.ErrorCodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_lt\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_lt\":null")
		first = false
	}

	// handle nullable field error_code_lte
	if m.ErrorCodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_lte\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_lte\":null")
		first = false
	}

	// handle nullable field error_code_not
	if m.ErrorCodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not\":null")
		first = false
	}

	// handle nullable field error_code_not_contains
	if m.ErrorCodeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_contains\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_contains\":null")
		first = false
	}

	// handle nullable field error_code_not_ends_with
	if m.ErrorCodeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_ends_with\":null")
		first = false
	}

	// handle non nullable field error_code_not_in with omitempty
	if !swag.IsZero(m.ErrorCodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_in\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field error_code_not_starts_with
	if m.ErrorCodeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_not_starts_with\":null")
		first = false
	}

	// handle nullable field error_code_starts_with
	if m.ErrorCodeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_starts_with\":")
		bytes, err := swag.WriteJSON(m.ErrorCodeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ErrorCodeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"error_code_starts_with\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name
	if m.IscsiChapName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name\":")
		bytes, err := swag.WriteJSON(m.IscsiChapName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_contains
	if m.IscsiChapNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_contains\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_ends_with
	if m.IscsiChapNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_ends_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_gt
	if m.IscsiChapNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_gt\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_gte
	if m.IscsiChapNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_chap_name_in with omitempty
	if !swag.IsZero(m.IscsiChapNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_in\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_chap_name_lt
	if m.IscsiChapNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_lt\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_lte
	if m.IscsiChapNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_lte\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_not
	if m.IscsiChapNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_not_contains
	if m.IscsiChapNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_contains\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_not_ends_with
	if m.IscsiChapNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field iscsi_chap_name_not_in with omitempty
	if !swag.IsZero(m.IscsiChapNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_chap_name_not_starts_with
	if m.IscsiChapNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_name_starts_with
	if m.IscsiChapNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_name_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret
	if m.IscsiChapSecret != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecret)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecret_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_contains
	if m.IscsiChapSecretContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_contains\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_ends_with
	if m.IscsiChapSecretEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_ends_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_gt
	if m.IscsiChapSecretGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_gt\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_gte
	if m.IscsiChapSecretGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_chap_secret_in with omitempty
	if !swag.IsZero(m.IscsiChapSecretIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_in\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_chap_secret_lt
	if m.IscsiChapSecretLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_lt\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_lte
	if m.IscsiChapSecretLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_lte\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_not
	if m.IscsiChapSecretNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_not_contains
	if m.IscsiChapSecretNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_contains\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_not_ends_with
	if m.IscsiChapSecretNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_ends_with\":null")
		first = false
	}

	// handle non nullable field iscsi_chap_secret_not_in with omitempty
	if !swag.IsZero(m.IscsiChapSecretNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_chap_secret_not_starts_with
	if m.IscsiChapSecretNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_not_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_chap_secret_starts_with
	if m.IscsiChapSecretStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiChapSecretStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiChapSecretStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_chap_secret_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_ip
	if m.IscsiIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip\":")
		bytes, err := swag.WriteJSON(m.IscsiIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip\":null")
		first = false
	}

	// handle nullable field iscsi_ip_contains
	if m.IscsiIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_contains\":null")
		first = false
	}

	// handle nullable field iscsi_ip_ends_with
	if m.IscsiIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_ends_with\":null")
		first = false
	}

	// handle nullable field iscsi_ip_gt
	if m.IscsiIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_gt\":null")
		first = false
	}

	// handle nullable field iscsi_ip_gte
	if m.IscsiIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_ip_in with omitempty
	if !swag.IsZero(m.IscsiIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_in\":")
		bytes, err := swag.WriteJSON(m.IscsiIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_ip_lt
	if m.IscsiIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_lt\":null")
		first = false
	}

	// handle nullable field iscsi_ip_lte
	if m.IscsiIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_lte\":null")
		first = false
	}

	// handle nullable field iscsi_ip_not
	if m.IscsiIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not\":")
		bytes, err := swag.WriteJSON(m.IscsiIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not\":null")
		first = false
	}

	// handle nullable field iscsi_ip_not_contains
	if m.IscsiIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_contains\":null")
		first = false
	}

	// handle nullable field iscsi_ip_not_ends_with
	if m.IscsiIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field iscsi_ip_not_in with omitempty
	if !swag.IsZero(m.IscsiIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_ip_not_starts_with
	if m.IscsiIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_ip_starts_with
	if m.IscsiIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_ip_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id
	if m.IscsiLunID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id\":")
		bytes, err := swag.WriteJSON(m.IscsiLunID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_contains
	if m.IscsiLunIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_contains\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_ends_with
	if m.IscsiLunIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_ends_with\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_gt
	if m.IscsiLunIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_gt\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_gte
	if m.IscsiLunIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_lun_id_in with omitempty
	if !swag.IsZero(m.IscsiLunIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_in\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_lun_id_lt
	if m.IscsiLunIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_lt\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_lte
	if m.IscsiLunIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_lte\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_not
	if m.IscsiLunIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_not_contains
	if m.IscsiLunIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_contains\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_not_ends_with
	if m.IscsiLunIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field iscsi_lun_id_not_in with omitempty
	if !swag.IsZero(m.IscsiLunIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_lun_id_not_starts_with
	if m.IscsiLunIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_lun_id_starts_with
	if m.IscsiLunIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiLunIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLunIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun_id_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_port
	if m.IscsiPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port\":")
		bytes, err := swag.WriteJSON(m.IscsiPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port\":null")
		first = false
	}

	// handle nullable field iscsi_port_gt
	if m.IscsiPortGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiPortGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPortGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_gt\":null")
		first = false
	}

	// handle nullable field iscsi_port_gte
	if m.IscsiPortGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiPortGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPortGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_port_in with omitempty
	if !swag.IsZero(m.IscsiPortIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_in\":")
		bytes, err := swag.WriteJSON(m.IscsiPortIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_port_lt
	if m.IscsiPortLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiPortLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPortLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_lt\":null")
		first = false
	}

	// handle nullable field iscsi_port_lte
	if m.IscsiPortLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiPortLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPortLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_lte\":null")
		first = false
	}

	// handle nullable field iscsi_port_not
	if m.IscsiPortNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_not\":")
		bytes, err := swag.WriteJSON(m.IscsiPortNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiPortNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_not\":null")
		first = false
	}

	// handle non nullable field iscsi_port_not_in with omitempty
	if !swag.IsZero(m.IscsiPortNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_port_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiPortNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_target_iqn
	if m.IscsiTargetIqn != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqn_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_contains
	if m.IscsiTargetIqnContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_contains\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_ends_with
	if m.IscsiTargetIqnEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_ends_with\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_gt
	if m.IscsiTargetIqnGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_gt\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_gt\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_gte
	if m.IscsiTargetIqnGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_gte\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_gte\":null")
		first = false
	}

	// handle non nullable field iscsi_target_iqn_in with omitempty
	if !swag.IsZero(m.IscsiTargetIqnIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_in\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_target_iqn_lt
	if m.IscsiTargetIqnLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_lt\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_lt\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_lte
	if m.IscsiTargetIqnLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_lte\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_lte\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_not
	if m.IscsiTargetIqnNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_not_contains
	if m.IscsiTargetIqnNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_contains\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_contains\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_not_ends_with
	if m.IscsiTargetIqnNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_ends_with\":null")
		first = false
	}

	// handle non nullable field iscsi_target_iqn_not_in with omitempty
	if !swag.IsZero(m.IscsiTargetIqnNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_in\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field iscsi_target_iqn_not_starts_with
	if m.IscsiTargetIqnNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_not_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_target_iqn_starts_with
	if m.IscsiTargetIqnStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_starts_with\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetIqnStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetIqnStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_iqn_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field nfs_path
	if m.NfsPath != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path\":")
		bytes, err := swag.WriteJSON(m.NfsPath)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPath_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path\":null")
		first = false
	}

	// handle nullable field nfs_path_contains
	if m.NfsPathContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_contains\":")
		bytes, err := swag.WriteJSON(m.NfsPathContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_contains\":null")
		first = false
	}

	// handle nullable field nfs_path_ends_with
	if m.NfsPathEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_ends_with\":")
		bytes, err := swag.WriteJSON(m.NfsPathEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_ends_with\":null")
		first = false
	}

	// handle nullable field nfs_path_gt
	if m.NfsPathGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_gt\":")
		bytes, err := swag.WriteJSON(m.NfsPathGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_gt\":null")
		first = false
	}

	// handle nullable field nfs_path_gte
	if m.NfsPathGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_gte\":")
		bytes, err := swag.WriteJSON(m.NfsPathGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_gte\":null")
		first = false
	}

	// handle non nullable field nfs_path_in with omitempty
	if !swag.IsZero(m.NfsPathIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_in\":")
		bytes, err := swag.WriteJSON(m.NfsPathIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_path_lt
	if m.NfsPathLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_lt\":")
		bytes, err := swag.WriteJSON(m.NfsPathLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_lt\":null")
		first = false
	}

	// handle nullable field nfs_path_lte
	if m.NfsPathLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_lte\":")
		bytes, err := swag.WriteJSON(m.NfsPathLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_lte\":null")
		first = false
	}

	// handle nullable field nfs_path_not
	if m.NfsPathNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not\":")
		bytes, err := swag.WriteJSON(m.NfsPathNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not\":null")
		first = false
	}

	// handle nullable field nfs_path_not_contains
	if m.NfsPathNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_contains\":")
		bytes, err := swag.WriteJSON(m.NfsPathNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_contains\":null")
		first = false
	}

	// handle nullable field nfs_path_not_ends_with
	if m.NfsPathNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NfsPathNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_ends_with\":null")
		first = false
	}

	// handle non nullable field nfs_path_not_in with omitempty
	if !swag.IsZero(m.NfsPathNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_in\":")
		bytes, err := swag.WriteJSON(m.NfsPathNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_path_not_starts_with
	if m.NfsPathNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NfsPathNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_not_starts_with\":null")
		first = false
	}

	// handle nullable field nfs_path_starts_with
	if m.NfsPathStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_starts_with\":")
		bytes, err := swag.WriteJSON(m.NfsPathStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsPathStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_path_starts_with\":null")
		first = false
	}

	// handle nullable field nfs_server
	if m.NfsServer != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server\":")
		bytes, err := swag.WriteJSON(m.NfsServer)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServer_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server\":null")
		first = false
	}

	// handle nullable field nfs_server_contains
	if m.NfsServerContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_contains\":")
		bytes, err := swag.WriteJSON(m.NfsServerContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_contains\":null")
		first = false
	}

	// handle nullable field nfs_server_ends_with
	if m.NfsServerEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_ends_with\":")
		bytes, err := swag.WriteJSON(m.NfsServerEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_ends_with\":null")
		first = false
	}

	// handle nullable field nfs_server_gt
	if m.NfsServerGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_gt\":")
		bytes, err := swag.WriteJSON(m.NfsServerGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_gt\":null")
		first = false
	}

	// handle nullable field nfs_server_gte
	if m.NfsServerGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_gte\":")
		bytes, err := swag.WriteJSON(m.NfsServerGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_gte\":null")
		first = false
	}

	// handle non nullable field nfs_server_in with omitempty
	if !swag.IsZero(m.NfsServerIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_in\":")
		bytes, err := swag.WriteJSON(m.NfsServerIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_server_lt
	if m.NfsServerLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_lt\":")
		bytes, err := swag.WriteJSON(m.NfsServerLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_lt\":null")
		first = false
	}

	// handle nullable field nfs_server_lte
	if m.NfsServerLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_lte\":")
		bytes, err := swag.WriteJSON(m.NfsServerLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_lte\":null")
		first = false
	}

	// handle nullable field nfs_server_not
	if m.NfsServerNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not\":")
		bytes, err := swag.WriteJSON(m.NfsServerNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not\":null")
		first = false
	}

	// handle nullable field nfs_server_not_contains
	if m.NfsServerNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_contains\":")
		bytes, err := swag.WriteJSON(m.NfsServerNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_contains\":null")
		first = false
	}

	// handle nullable field nfs_server_not_ends_with
	if m.NfsServerNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NfsServerNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_ends_with\":null")
		first = false
	}

	// handle non nullable field nfs_server_not_in with omitempty
	if !swag.IsZero(m.NfsServerNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_in\":")
		bytes, err := swag.WriteJSON(m.NfsServerNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field nfs_server_not_starts_with
	if m.NfsServerNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NfsServerNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_not_starts_with\":null")
		first = false
	}

	// handle nullable field nfs_server_starts_with
	if m.NfsServerStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_starts_with\":")
		bytes, err := swag.WriteJSON(m.NfsServerStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NfsServerStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nfs_server_starts_with\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_capacity
	if m.TotalCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity\":")
		bytes, err := swag.WriteJSON(m.TotalCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity\":null")
		first = false
	}

	// handle nullable field total_capacity_gt
	if m.TotalCapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_gt\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_gt\":null")
		first = false
	}

	// handle nullable field total_capacity_gte
	if m.TotalCapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_gte\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_gte\":null")
		first = false
	}

	// handle non nullable field total_capacity_in with omitempty
	if !swag.IsZero(m.TotalCapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_in\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_capacity_lt
	if m.TotalCapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_lt\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_lt\":null")
		first = false
	}

	// handle nullable field total_capacity_lte
	if m.TotalCapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_lte\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_lte\":null")
		first = false
	}

	// handle nullable field total_capacity_not
	if m.TotalCapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_not\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_not\":null")
		first = false
	}

	// handle non nullable field total_capacity_not_in with omitempty
	if !swag.IsZero(m.TotalCapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalCapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field update_timestamp
	if m.UpdateTimestamp != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestamp)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestamp_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp\":null")
		first = false
	}

	// handle nullable field update_timestamp_contains
	if m.UpdateTimestampContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_contains\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_contains\":null")
		first = false
	}

	// handle nullable field update_timestamp_ends_with
	if m.UpdateTimestampEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_ends_with\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_ends_with\":null")
		first = false
	}

	// handle nullable field update_timestamp_gt
	if m.UpdateTimestampGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_gt\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_gt\":null")
		first = false
	}

	// handle nullable field update_timestamp_gte
	if m.UpdateTimestampGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_gte\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_gte\":null")
		first = false
	}

	// handle non nullable field update_timestamp_in with omitempty
	if !swag.IsZero(m.UpdateTimestampIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_in\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field update_timestamp_lt
	if m.UpdateTimestampLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_lt\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_lt\":null")
		first = false
	}

	// handle nullable field update_timestamp_lte
	if m.UpdateTimestampLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_lte\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_lte\":null")
		first = false
	}

	// handle nullable field update_timestamp_not
	if m.UpdateTimestampNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not\":null")
		first = false
	}

	// handle nullable field update_timestamp_not_contains
	if m.UpdateTimestampNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_contains\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_contains\":null")
		first = false
	}

	// handle nullable field update_timestamp_not_ends_with
	if m.UpdateTimestampNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_ends_with\":null")
		first = false
	}

	// handle non nullable field update_timestamp_not_in with omitempty
	if !swag.IsZero(m.UpdateTimestampNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field update_timestamp_not_starts_with
	if m.UpdateTimestampNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_not_starts_with\":null")
		first = false
	}

	// handle nullable field update_timestamp_starts_with
	if m.UpdateTimestampStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_starts_with\":")
		bytes, err := swag.WriteJSON(m.UpdateTimestampStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdateTimestampStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"update_timestamp_starts_with\":null")
		first = false
	}

	// handle nullable field used_data_space
	if m.UsedDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space\":null")
		first = false
	}

	// handle nullable field used_data_space_gt
	if m.UsedDataSpaceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gt\":null")
		first = false
	}

	// handle nullable field used_data_space_gte
	if m.UsedDataSpaceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_gte\":null")
		first = false
	}

	// handle non nullable field used_data_space_in with omitempty
	if !swag.IsZero(m.UsedDataSpaceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_data_space_lt
	if m.UsedDataSpaceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lt\":null")
		first = false
	}

	// handle nullable field used_data_space_lte
	if m.UsedDataSpaceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_lte\":null")
		first = false
	}

	// handle nullable field used_data_space_not
	if m.UsedDataSpaceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not\":null")
		first = false
	}

	// handle non nullable field used_data_space_not_in with omitempty
	if !swag.IsZero(m.UsedDataSpaceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_data_space_usage
	if m.UsedDataSpaceUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage\":null")
		first = false
	}

	// handle nullable field used_data_space_usage_gt
	if m.UsedDataSpaceUsageGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_gt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsageGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_gt\":null")
		first = false
	}

	// handle nullable field used_data_space_usage_gte
	if m.UsedDataSpaceUsageGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_gte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsageGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_gte\":null")
		first = false
	}

	// handle non nullable field used_data_space_usage_in with omitempty
	if !swag.IsZero(m.UsedDataSpaceUsageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field used_data_space_usage_lt
	if m.UsedDataSpaceUsageLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_lt\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsageLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_lt\":null")
		first = false
	}

	// handle nullable field used_data_space_usage_lte
	if m.UsedDataSpaceUsageLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_lte\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsageLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_lte\":null")
		first = false
	}

	// handle nullable field used_data_space_usage_not
	if m.UsedDataSpaceUsageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_not\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsedDataSpaceUsageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_not\":null")
		first = false
	}

	// handle non nullable field used_data_space_usage_not_in with omitempty
	if !swag.IsZero(m.UsedDataSpaceUsageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"used_data_space_usage_not_in\":")
		bytes, err := swag.WriteJSON(m.UsedDataSpaceUsageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_data_space
	if m.ValidDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space\":null")
		first = false
	}

	// handle nullable field valid_data_space_gt
	if m.ValidDataSpaceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_gt\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpaceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_gt\":null")
		first = false
	}

	// handle nullable field valid_data_space_gte
	if m.ValidDataSpaceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_gte\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpaceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_gte\":null")
		first = false
	}

	// handle non nullable field valid_data_space_in with omitempty
	if !swag.IsZero(m.ValidDataSpaceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_in\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_data_space_lt
	if m.ValidDataSpaceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_lt\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpaceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_lt\":null")
		first = false
	}

	// handle nullable field valid_data_space_lte
	if m.ValidDataSpaceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_lte\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpaceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_lte\":null")
		first = false
	}

	// handle nullable field valid_data_space_not
	if m.ValidDataSpaceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_not\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidDataSpaceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_not\":null")
		first = false
	}

	// handle non nullable field valid_data_space_not_in with omitempty
	if !swag.IsZero(m.ValidDataSpaceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_data_space_not_in\":")
		bytes, err := swag.WriteJSON(m.ValidDataSpaceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup store repository where input
func (m *BackupStoreRepositoryWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansEvery) { // not required
		return nil
	}

	if m.BackupPlansEvery != nil {
		if err := m.BackupPlansEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansNone) { // not required
		return nil
	}

	if m.BackupPlansNone != nil {
		if err := m.BackupPlansNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansSome) { // not required
		return nil
	}

	if m.BackupPlansSome != nil {
		if err := m.BackupPlansSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsEvery) { // not required
		return nil
	}

	if m.BackupRestorePointsEvery != nil {
		if err := m.BackupRestorePointsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsNone) { // not required
		return nil
	}

	if m.BackupRestorePointsNone != nil {
		if err := m.BackupRestorePointsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsSome) { // not required
		return nil
	}

	if m.BackupRestorePointsSome != nil {
		if err := m.BackupRestorePointsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupService(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupService) { // not required
		return nil
	}

	if m.BackupService != nil {
		if err := m.BackupService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this backup store repository where input based on the context it is used
func (m *BackupStoreRepositoryWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlansEvery != nil {
		if err := m.BackupPlansEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlansNone != nil {
		if err := m.BackupPlansNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlansSome != nil {
		if err := m.BackupPlansSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plans_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsEvery != nil {
		if err := m.BackupRestorePointsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsNone != nil {
		if err := m.BackupRestorePointsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestorePointsSome != nil {
		if err := m.BackupRestorePointsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_points_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_points_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupService(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupService != nil {
		if err := m.BackupService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_service")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStoreRepositoryWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStoreRepositoryWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupStoreRepositoryWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
