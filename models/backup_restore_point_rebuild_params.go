// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupRestorePointRebuildParams backup restore point rebuild params
//
// swagger:model BackupRestorePointRebuildParams
type BackupRestorePointRebuildParams struct {

	// data
	// Required: true
	Data *BackupRestorePointRebuildParamsData `json:"data"`

	// where
	// Required: true
	Where *BackupRestorePointWhereInput `json:"where"`

	MarshalOpts *BackupRestorePointRebuildParamsMarshalOpts `json:"-"`
}

type BackupRestorePointRebuildParamsMarshalOpts struct {
	Data_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m BackupRestorePointRebuildParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field data
	if m.Data != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Data_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup restore point rebuild params
func (m *BackupRestorePointRebuildParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointRebuildParams) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointRebuildParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup restore point rebuild params based on the context it is used
func (m *BackupRestorePointRebuildParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointRebuildParams) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointRebuildParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRestorePointRebuildParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRestorePointRebuildParams) UnmarshalBinary(b []byte) error {
	var res BackupRestorePointRebuildParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupRestorePointRebuildParamsData backup restore point rebuild params data
//
// swagger:model BackupRestorePointRebuildParamsData
type BackupRestorePointRebuildParamsData struct {

	// rebuild name
	// Required: true
	RebuildName *string `json:"rebuild_name"`

	// rebuild network mapping
	// Required: true
	RebuildNetworkMapping []*BackupRestoreExecutionNetworkMapping `json:"rebuild_network_mapping"`

	// rebuild target cluster id
	// Required: true
	RebuildTargetClusterID *string `json:"rebuild_target_cluster_id"`

	// rebuild target host id
	// Required: true
	RebuildTargetHostID *string `json:"rebuild_target_host_id"`

	// startup after restore
	// Required: true
	StartupAfterRestore *bool `json:"startup_after_restore"`

	MarshalOpts *BackupRestorePointRebuildParamsDataMarshalOpts `json:"-"`
}

type BackupRestorePointRebuildParamsDataMarshalOpts struct {
	RebuildName_Explicit_Null_When_Empty bool

	RebuildNetworkMapping_Explicit_Null_When_Empty bool

	RebuildTargetClusterID_Explicit_Null_When_Empty bool

	RebuildTargetHostID_Explicit_Null_When_Empty bool

	StartupAfterRestore_Explicit_Null_When_Empty bool
}

func (m BackupRestorePointRebuildParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field rebuild_name
	if m.RebuildName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_name\":")
		bytes, err := swag.WriteJSON(m.RebuildName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RebuildName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_name\":null")
		first = false
	}

	// handle non nullable field rebuild_network_mapping without omitempty
	{
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_network_mapping\":")
		bytes, err := swag.WriteJSON(m.RebuildNetworkMapping)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field rebuild_target_cluster_id
	if m.RebuildTargetClusterID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_target_cluster_id\":")
		bytes, err := swag.WriteJSON(m.RebuildTargetClusterID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RebuildTargetClusterID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_target_cluster_id\":null")
		first = false
	}

	// handle nullable field rebuild_target_host_id
	if m.RebuildTargetHostID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_target_host_id\":")
		bytes, err := swag.WriteJSON(m.RebuildTargetHostID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RebuildTargetHostID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rebuild_target_host_id\":null")
		first = false
	}

	// handle nullable field startup_after_restore
	if m.StartupAfterRestore != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"startup_after_restore\":")
		bytes, err := swag.WriteJSON(m.StartupAfterRestore)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartupAfterRestore_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"startup_after_restore\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup restore point rebuild params data
func (m *BackupRestorePointRebuildParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRebuildName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebuildNetworkMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebuildTargetClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebuildTargetHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartupAfterRestore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointRebuildParamsData) validateRebuildName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"rebuild_name", "body", m.RebuildName); err != nil {
		return err
	}

	return nil
}

func (m *BackupRestorePointRebuildParamsData) validateRebuildNetworkMapping(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"rebuild_network_mapping", "body", m.RebuildNetworkMapping); err != nil {
		return err
	}

	for i := 0; i < len(m.RebuildNetworkMapping); i++ {
		if swag.IsZero(m.RebuildNetworkMapping[i]) { // not required
			continue
		}

		if m.RebuildNetworkMapping[i] != nil {
			if err := m.RebuildNetworkMapping[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "rebuild_network_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "rebuild_network_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointRebuildParamsData) validateRebuildTargetClusterID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"rebuild_target_cluster_id", "body", m.RebuildTargetClusterID); err != nil {
		return err
	}

	return nil
}

func (m *BackupRestorePointRebuildParamsData) validateRebuildTargetHostID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"rebuild_target_host_id", "body", m.RebuildTargetHostID); err != nil {
		return err
	}

	return nil
}

func (m *BackupRestorePointRebuildParamsData) validateStartupAfterRestore(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"startup_after_restore", "body", m.StartupAfterRestore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup restore point rebuild params data based on the context it is used
func (m *BackupRestorePointRebuildParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRebuildNetworkMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointRebuildParamsData) contextValidateRebuildNetworkMapping(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RebuildNetworkMapping); i++ {

		if m.RebuildNetworkMapping[i] != nil {
			if err := m.RebuildNetworkMapping[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "rebuild_network_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "rebuild_network_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRestorePointRebuildParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRestorePointRebuildParamsData) UnmarshalBinary(b []byte) error {
	var res BackupRestorePointRebuildParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
