// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudNatGatewayUpdationParams virtual private cloud nat gateway updation params
//
// swagger:model VirtualPrivateCloudNatGatewayUpdationParams
type VirtualPrivateCloudNatGatewayUpdationParams struct {

	// data
	// Required: true
	Data *VirtualPrivateCloudNatGatewayUpdationParamsData `json:"data"`

	// where
	// Required: true
	Where *VirtualPrivateCloudNatGatewayWhereInput `json:"where"`

	MarshalOpts *VirtualPrivateCloudNatGatewayUpdationParamsMarshalOpts `json:"-"`
}

type VirtualPrivateCloudNatGatewayUpdationParamsMarshalOpts struct {
	Data_Explicit_Null_When_Empty bool

	Where_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudNatGatewayUpdationParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field data
	if m.Data != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":")
		bytes, err := swag.WriteJSON(m.Data)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Data_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data\":null")
		first = false
	}

	// handle nullable field where
	if m.Where != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":")
		bytes, err := swag.WriteJSON(m.Where)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Where_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"where\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud nat gateway updation params
func (m *VirtualPrivateCloudNatGatewayUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParams) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParams) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual private cloud nat gateway updation params based on the context it is used
func (m *VirtualPrivateCloudNatGatewayUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParams) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParams) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudNatGatewayUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudNatGatewayUpdationParams) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudNatGatewayUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VirtualPrivateCloudNatGatewayUpdationParamsData virtual private cloud nat gateway updation params data
//
// swagger:model VirtualPrivateCloudNatGatewayUpdationParamsData
type VirtualPrivateCloudNatGatewayUpdationParamsData struct {

	// dnat rules
	DnatRules []*VirtualPrivateCloudDnatRuleParams `json:"dnat_rules,omitempty"`

	// enable dnat
	EnableDnat *bool `json:"enable_dnat,omitempty"`

	// enable snat
	EnableSnat *bool `json:"enable_snat,omitempty"`

	// external ip
	ExternalIP *string `json:"external_ip,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	MarshalOpts *VirtualPrivateCloudNatGatewayUpdationParamsDataMarshalOpts `json:"-"`
}

type VirtualPrivateCloudNatGatewayUpdationParamsDataMarshalOpts struct {
	DnatRules_Explicit_Null_When_Empty bool

	EnableDnat_Explicit_Null_When_Empty bool

	EnableSnat_Explicit_Null_When_Empty bool

	ExternalIP_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudNatGatewayUpdationParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field dnat_rules with omitempty
	if !swag.IsZero(m.DnatRules) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dnat_rules\":")
		bytes, err := swag.WriteJSON(m.DnatRules)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field enable_dnat
	if m.EnableDnat != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_dnat\":")
		bytes, err := swag.WriteJSON(m.EnableDnat)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableDnat_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_dnat\":null")
		first = false
	}

	// handle nullable field enable_snat
	if m.EnableSnat != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_snat\":")
		bytes, err := swag.WriteJSON(m.EnableSnat)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EnableSnat_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enable_snat\":null")
		first = false
	}

	// handle nullable field external_ip
	if m.ExternalIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_ip\":")
		bytes, err := swag.WriteJSON(m.ExternalIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_ip\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud nat gateway updation params data
func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDnatRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) validateDnatRules(formats strfmt.Registry) error {
	if swag.IsZero(m.DnatRules) { // not required
		return nil
	}

	for i := 0; i < len(m.DnatRules); i++ {
		if swag.IsZero(m.DnatRules[i]) { // not required
			continue
		}

		if m.DnatRules[i] != nil {
			if err := m.DnatRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "dnat_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "dnat_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this virtual private cloud nat gateway updation params data based on the context it is used
func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDnatRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) contextValidateDnatRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DnatRules); i++ {

		if m.DnatRules[i] != nil {
			if err := m.DnatRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "dnat_rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "dnat_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudNatGatewayUpdationParamsData) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudNatGatewayUpdationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
