// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplicationRestorePointWhereInput replication restore point where input
//
// swagger:model ReplicationRestorePointWhereInput
type ReplicationRestorePointWhereInput struct {

	// a n d
	AND []*ReplicationRestorePointWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ReplicationRestorePointWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ReplicationRestorePointWhereInput `json:"OR,omitempty"`

	// cluster local id
	ClusterLocalID *string `json:"cluster_local_id,omitempty"`

	// cluster local id contains
	ClusterLocalIDContains *string `json:"cluster_local_id_contains,omitempty"`

	// cluster local id ends with
	ClusterLocalIDEndsWith *string `json:"cluster_local_id_ends_with,omitempty"`

	// cluster local id gt
	ClusterLocalIDGt *string `json:"cluster_local_id_gt,omitempty"`

	// cluster local id gte
	ClusterLocalIDGte *string `json:"cluster_local_id_gte,omitempty"`

	// cluster local id in
	ClusterLocalIDIn []string `json:"cluster_local_id_in,omitempty"`

	// cluster local id lt
	ClusterLocalIDLt *string `json:"cluster_local_id_lt,omitempty"`

	// cluster local id lte
	ClusterLocalIDLte *string `json:"cluster_local_id_lte,omitempty"`

	// cluster local id not
	ClusterLocalIDNot *string `json:"cluster_local_id_not,omitempty"`

	// cluster local id not contains
	ClusterLocalIDNotContains *string `json:"cluster_local_id_not_contains,omitempty"`

	// cluster local id not ends with
	ClusterLocalIDNotEndsWith *string `json:"cluster_local_id_not_ends_with,omitempty"`

	// cluster local id not in
	ClusterLocalIDNotIn []string `json:"cluster_local_id_not_in,omitempty"`

	// cluster local id not starts with
	ClusterLocalIDNotStartsWith *string `json:"cluster_local_id_not_starts_with,omitempty"`

	// cluster local id starts with
	ClusterLocalIDStartsWith *string `json:"cluster_local_id_starts_with,omitempty"`

	// creation
	Creation *BackupRestorePointCreation `json:"creation,omitempty"`

	// creation in
	CreationIn []BackupRestorePointCreation `json:"creation_in,omitempty"`

	// creation not
	CreationNot *BackupRestorePointCreation `json:"creation_not,omitempty"`

	// creation not in
	CreationNotIn []BackupRestorePointCreation `json:"creation_not_in,omitempty"`

	// dedup
	Dedup *BackupDedupMode `json:"dedup,omitempty"`

	// dedup in
	DedupIn []BackupDedupMode `json:"dedup_in,omitempty"`

	// dedup not
	DedupNot *BackupDedupMode `json:"dedup_not,omitempty"`

	// dedup not in
	DedupNotIn []BackupDedupMode `json:"dedup_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// failover executions every
	FailoverExecutionsEvery *FailoverExecutionWhereInput `json:"failover_executions_every,omitempty"`

	// failover executions none
	FailoverExecutionsNone *FailoverExecutionWhereInput `json:"failover_executions_none,omitempty"`

	// failover executions some
	FailoverExecutionsSome *FailoverExecutionWhereInput `json:"failover_executions_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iscsi lun
	IscsiLun *IscsiLunWhereInput `json:"iscsi_lun,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// parent restore point
	ParentRestorePoint *string `json:"parent_restore_point,omitempty"`

	// parent restore point contains
	ParentRestorePointContains *string `json:"parent_restore_point_contains,omitempty"`

	// parent restore point ends with
	ParentRestorePointEndsWith *string `json:"parent_restore_point_ends_with,omitempty"`

	// parent restore point gt
	ParentRestorePointGt *string `json:"parent_restore_point_gt,omitempty"`

	// parent restore point gte
	ParentRestorePointGte *string `json:"parent_restore_point_gte,omitempty"`

	// parent restore point in
	ParentRestorePointIn []string `json:"parent_restore_point_in,omitempty"`

	// parent restore point lt
	ParentRestorePointLt *string `json:"parent_restore_point_lt,omitempty"`

	// parent restore point lte
	ParentRestorePointLte *string `json:"parent_restore_point_lte,omitempty"`

	// parent restore point not
	ParentRestorePointNot *string `json:"parent_restore_point_not,omitempty"`

	// parent restore point not contains
	ParentRestorePointNotContains *string `json:"parent_restore_point_not_contains,omitempty"`

	// parent restore point not ends with
	ParentRestorePointNotEndsWith *string `json:"parent_restore_point_not_ends_with,omitempty"`

	// parent restore point not in
	ParentRestorePointNotIn []string `json:"parent_restore_point_not_in,omitempty"`

	// parent restore point not starts with
	ParentRestorePointNotStartsWith *string `json:"parent_restore_point_not_starts_with,omitempty"`

	// parent restore point starts with
	ParentRestorePointStartsWith *string `json:"parent_restore_point_starts_with,omitempty"`

	// replica vm
	ReplicaVM *ReplicaVMWhereInput `json:"replica_vm,omitempty"`

	// replication plan
	ReplicationPlan *ReplicationPlanWhereInput `json:"replication_plan,omitempty"`

	// replication service
	ReplicationService *ReplicationServiceWhereInput `json:"replication_service,omitempty"`

	// replication target execution
	ReplicationTargetExecution *ReplicationTargetExecutionWhereInput `json:"replication_target_execution,omitempty"`

	// resource version
	ResourceVersion *int32 `json:"resource_version,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// slice
	Slice *string `json:"slice,omitempty"`

	// slice contains
	SliceContains *string `json:"slice_contains,omitempty"`

	// slice ends with
	SliceEndsWith *string `json:"slice_ends_with,omitempty"`

	// slice gt
	SliceGt *string `json:"slice_gt,omitempty"`

	// slice gte
	SliceGte *string `json:"slice_gte,omitempty"`

	// slice in
	SliceIn []string `json:"slice_in,omitempty"`

	// slice lt
	SliceLt *string `json:"slice_lt,omitempty"`

	// slice lte
	SliceLte *string `json:"slice_lte,omitempty"`

	// slice not
	SliceNot *string `json:"slice_not,omitempty"`

	// slice not contains
	SliceNotContains *string `json:"slice_not_contains,omitempty"`

	// slice not ends with
	SliceNotEndsWith *string `json:"slice_not_ends_with,omitempty"`

	// slice not in
	SliceNotIn []string `json:"slice_not_in,omitempty"`

	// slice not starts with
	SliceNotStartsWith *string `json:"slice_not_starts_with,omitempty"`

	// slice starts with
	SliceStartsWith *string `json:"slice_starts_with,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// snapshot consistent type in
	SnapshotConsistentTypeIn []ConsistentType `json:"snapshot_consistent_type_in,omitempty"`

	// snapshot consistent type not
	SnapshotConsistentTypeNot *ConsistentType `json:"snapshot_consistent_type_not,omitempty"`

	// snapshot consistent type not in
	SnapshotConsistentTypeNotIn []ConsistentType `json:"snapshot_consistent_type_not_in,omitempty"`

	// tower deploy id
	TowerDeployID *string `json:"tower_deploy_id,omitempty"`

	// tower deploy id contains
	TowerDeployIDContains *string `json:"tower_deploy_id_contains,omitempty"`

	// tower deploy id ends with
	TowerDeployIDEndsWith *string `json:"tower_deploy_id_ends_with,omitempty"`

	// tower deploy id gt
	TowerDeployIDGt *string `json:"tower_deploy_id_gt,omitempty"`

	// tower deploy id gte
	TowerDeployIDGte *string `json:"tower_deploy_id_gte,omitempty"`

	// tower deploy id in
	TowerDeployIDIn []string `json:"tower_deploy_id_in,omitempty"`

	// tower deploy id lt
	TowerDeployIDLt *string `json:"tower_deploy_id_lt,omitempty"`

	// tower deploy id lte
	TowerDeployIDLte *string `json:"tower_deploy_id_lte,omitempty"`

	// tower deploy id not
	TowerDeployIDNot *string `json:"tower_deploy_id_not,omitempty"`

	// tower deploy id not contains
	TowerDeployIDNotContains *string `json:"tower_deploy_id_not_contains,omitempty"`

	// tower deploy id not ends with
	TowerDeployIDNotEndsWith *string `json:"tower_deploy_id_not_ends_with,omitempty"`

	// tower deploy id not in
	TowerDeployIDNotIn []string `json:"tower_deploy_id_not_in,omitempty"`

	// tower deploy id not starts with
	TowerDeployIDNotStartsWith *string `json:"tower_deploy_id_not_starts_with,omitempty"`

	// tower deploy id starts with
	TowerDeployIDStartsWith *string `json:"tower_deploy_id_starts_with,omitempty"`

	// type
	Type *BackupRestorePointType `json:"type,omitempty"`

	// type in
	TypeIn []BackupRestorePointType `json:"type_in,omitempty"`

	// type not
	TypeNot *BackupRestorePointType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupRestorePointType `json:"type_not_in,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	// vm local id
	VMLocalID *string `json:"vm_local_id,omitempty"`

	// vm local id contains
	VMLocalIDContains *string `json:"vm_local_id_contains,omitempty"`

	// vm local id ends with
	VMLocalIDEndsWith *string `json:"vm_local_id_ends_with,omitempty"`

	// vm local id gt
	VMLocalIDGt *string `json:"vm_local_id_gt,omitempty"`

	// vm local id gte
	VMLocalIDGte *string `json:"vm_local_id_gte,omitempty"`

	// vm local id in
	VMLocalIDIn []string `json:"vm_local_id_in,omitempty"`

	// vm local id lt
	VMLocalIDLt *string `json:"vm_local_id_lt,omitempty"`

	// vm local id lte
	VMLocalIDLte *string `json:"vm_local_id_lte,omitempty"`

	// vm local id not
	VMLocalIDNot *string `json:"vm_local_id_not,omitempty"`

	// vm local id not contains
	VMLocalIDNotContains *string `json:"vm_local_id_not_contains,omitempty"`

	// vm local id not ends with
	VMLocalIDNotEndsWith *string `json:"vm_local_id_not_ends_with,omitempty"`

	// vm local id not in
	VMLocalIDNotIn []string `json:"vm_local_id_not_in,omitempty"`

	// vm local id not starts with
	VMLocalIDNotStartsWith *string `json:"vm_local_id_not_starts_with,omitempty"`

	// vm local id starts with
	VMLocalIDStartsWith *string `json:"vm_local_id_starts_with,omitempty"`

	// vm name
	VMName *string `json:"vm_name,omitempty"`

	// vm name contains
	VMNameContains *string `json:"vm_name_contains,omitempty"`

	// vm name ends with
	VMNameEndsWith *string `json:"vm_name_ends_with,omitempty"`

	// vm name gt
	VMNameGt *string `json:"vm_name_gt,omitempty"`

	// vm name gte
	VMNameGte *string `json:"vm_name_gte,omitempty"`

	// vm name in
	VMNameIn []string `json:"vm_name_in,omitempty"`

	// vm name lt
	VMNameLt *string `json:"vm_name_lt,omitempty"`

	// vm name lte
	VMNameLte *string `json:"vm_name_lte,omitempty"`

	// vm name not
	VMNameNot *string `json:"vm_name_not,omitempty"`

	// vm name not contains
	VMNameNotContains *string `json:"vm_name_not_contains,omitempty"`

	// vm name not ends with
	VMNameNotEndsWith *string `json:"vm_name_not_ends_with,omitempty"`

	// vm name not in
	VMNameNotIn []string `json:"vm_name_not_in,omitempty"`

	// vm name not starts with
	VMNameNotStartsWith *string `json:"vm_name_not_starts_with,omitempty"`

	// vm name starts with
	VMNameStartsWith *string `json:"vm_name_starts_with,omitempty"`

	MarshalOpts *ReplicationRestorePointWhereInputMarshalOpts `json:"-"`
}

type ReplicationRestorePointWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	ClusterLocalID_Explicit_Null_When_Empty bool

	ClusterLocalIDContains_Explicit_Null_When_Empty bool

	ClusterLocalIDEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDGt_Explicit_Null_When_Empty bool

	ClusterLocalIDGte_Explicit_Null_When_Empty bool

	ClusterLocalIDIn_Explicit_Null_When_Empty bool

	ClusterLocalIDLt_Explicit_Null_When_Empty bool

	ClusterLocalIDLte_Explicit_Null_When_Empty bool

	ClusterLocalIDNot_Explicit_Null_When_Empty bool

	ClusterLocalIDNotContains_Explicit_Null_When_Empty bool

	ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDNotIn_Explicit_Null_When_Empty bool

	ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDStartsWith_Explicit_Null_When_Empty bool

	Creation_Explicit_Null_When_Empty bool

	CreationIn_Explicit_Null_When_Empty bool

	CreationNot_Explicit_Null_When_Empty bool

	CreationNotIn_Explicit_Null_When_Empty bool

	Dedup_Explicit_Null_When_Empty bool

	DedupIn_Explicit_Null_When_Empty bool

	DedupNot_Explicit_Null_When_Empty bool

	DedupNotIn_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	FailoverExecutionsEvery_Explicit_Null_When_Empty bool

	FailoverExecutionsNone_Explicit_Null_When_Empty bool

	FailoverExecutionsSome_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	IscsiLun_Explicit_Null_When_Empty bool

	LocalCreatedAt_Explicit_Null_When_Empty bool

	LocalCreatedAtGt_Explicit_Null_When_Empty bool

	LocalCreatedAtGte_Explicit_Null_When_Empty bool

	LocalCreatedAtIn_Explicit_Null_When_Empty bool

	LocalCreatedAtLt_Explicit_Null_When_Empty bool

	LocalCreatedAtLte_Explicit_Null_When_Empty bool

	LocalCreatedAtNot_Explicit_Null_When_Empty bool

	LocalCreatedAtNotIn_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	ParentRestorePoint_Explicit_Null_When_Empty bool

	ParentRestorePointContains_Explicit_Null_When_Empty bool

	ParentRestorePointEndsWith_Explicit_Null_When_Empty bool

	ParentRestorePointGt_Explicit_Null_When_Empty bool

	ParentRestorePointGte_Explicit_Null_When_Empty bool

	ParentRestorePointIn_Explicit_Null_When_Empty bool

	ParentRestorePointLt_Explicit_Null_When_Empty bool

	ParentRestorePointLte_Explicit_Null_When_Empty bool

	ParentRestorePointNot_Explicit_Null_When_Empty bool

	ParentRestorePointNotContains_Explicit_Null_When_Empty bool

	ParentRestorePointNotEndsWith_Explicit_Null_When_Empty bool

	ParentRestorePointNotIn_Explicit_Null_When_Empty bool

	ParentRestorePointNotStartsWith_Explicit_Null_When_Empty bool

	ParentRestorePointStartsWith_Explicit_Null_When_Empty bool

	ReplicaVM_Explicit_Null_When_Empty bool

	ReplicationPlan_Explicit_Null_When_Empty bool

	ReplicationService_Explicit_Null_When_Empty bool

	ReplicationTargetExecution_Explicit_Null_When_Empty bool

	ResourceVersion_Explicit_Null_When_Empty bool

	ResourceVersionGt_Explicit_Null_When_Empty bool

	ResourceVersionGte_Explicit_Null_When_Empty bool

	ResourceVersionIn_Explicit_Null_When_Empty bool

	ResourceVersionLt_Explicit_Null_When_Empty bool

	ResourceVersionLte_Explicit_Null_When_Empty bool

	ResourceVersionNot_Explicit_Null_When_Empty bool

	ResourceVersionNotIn_Explicit_Null_When_Empty bool

	Slice_Explicit_Null_When_Empty bool

	SliceContains_Explicit_Null_When_Empty bool

	SliceEndsWith_Explicit_Null_When_Empty bool

	SliceGt_Explicit_Null_When_Empty bool

	SliceGte_Explicit_Null_When_Empty bool

	SliceIn_Explicit_Null_When_Empty bool

	SliceLt_Explicit_Null_When_Empty bool

	SliceLte_Explicit_Null_When_Empty bool

	SliceNot_Explicit_Null_When_Empty bool

	SliceNotContains_Explicit_Null_When_Empty bool

	SliceNotEndsWith_Explicit_Null_When_Empty bool

	SliceNotIn_Explicit_Null_When_Empty bool

	SliceNotStartsWith_Explicit_Null_When_Empty bool

	SliceStartsWith_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeIn_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNot_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNotIn_Explicit_Null_When_Empty bool

	TowerDeployID_Explicit_Null_When_Empty bool

	TowerDeployIDContains_Explicit_Null_When_Empty bool

	TowerDeployIDEndsWith_Explicit_Null_When_Empty bool

	TowerDeployIDGt_Explicit_Null_When_Empty bool

	TowerDeployIDGte_Explicit_Null_When_Empty bool

	TowerDeployIDIn_Explicit_Null_When_Empty bool

	TowerDeployIDLt_Explicit_Null_When_Empty bool

	TowerDeployIDLte_Explicit_Null_When_Empty bool

	TowerDeployIDNot_Explicit_Null_When_Empty bool

	TowerDeployIDNotContains_Explicit_Null_When_Empty bool

	TowerDeployIDNotEndsWith_Explicit_Null_When_Empty bool

	TowerDeployIDNotIn_Explicit_Null_When_Empty bool

	TowerDeployIDNotStartsWith_Explicit_Null_When_Empty bool

	TowerDeployIDStartsWith_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool

	VMLocalID_Explicit_Null_When_Empty bool

	VMLocalIDContains_Explicit_Null_When_Empty bool

	VMLocalIDEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDGt_Explicit_Null_When_Empty bool

	VMLocalIDGte_Explicit_Null_When_Empty bool

	VMLocalIDIn_Explicit_Null_When_Empty bool

	VMLocalIDLt_Explicit_Null_When_Empty bool

	VMLocalIDLte_Explicit_Null_When_Empty bool

	VMLocalIDNot_Explicit_Null_When_Empty bool

	VMLocalIDNotContains_Explicit_Null_When_Empty bool

	VMLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDNotIn_Explicit_Null_When_Empty bool

	VMLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	VMLocalIDStartsWith_Explicit_Null_When_Empty bool

	VMName_Explicit_Null_When_Empty bool

	VMNameContains_Explicit_Null_When_Empty bool

	VMNameEndsWith_Explicit_Null_When_Empty bool

	VMNameGt_Explicit_Null_When_Empty bool

	VMNameGte_Explicit_Null_When_Empty bool

	VMNameIn_Explicit_Null_When_Empty bool

	VMNameLt_Explicit_Null_When_Empty bool

	VMNameLte_Explicit_Null_When_Empty bool

	VMNameNot_Explicit_Null_When_Empty bool

	VMNameNotContains_Explicit_Null_When_Empty bool

	VMNameNotEndsWith_Explicit_Null_When_Empty bool

	VMNameNotIn_Explicit_Null_When_Empty bool

	VMNameNotStartsWith_Explicit_Null_When_Empty bool

	VMNameStartsWith_Explicit_Null_When_Empty bool
}

func (m ReplicationRestorePointWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field cluster_local_id_contains
	if m.ClusterLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_ends_with
	if m.ClusterLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gt
	if m.ClusterLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gte
	if m.ClusterLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_lt
	if m.ClusterLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_lte
	if m.ClusterLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not
	if m.ClusterLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_contains
	if m.ClusterLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_ends_with
	if m.ClusterLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_not_in with omitempty
	if !swag.IsZero(m.ClusterLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_not_starts_with
	if m.ClusterLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_starts_with
	if m.ClusterLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field creation
	if m.Creation != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation\":")
		bytes, err := swag.WriteJSON(m.Creation)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Creation_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation\":null")
		first = false
	}

	// handle non nullable field creation_in with omitempty
	if !swag.IsZero(m.CreationIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_in\":")
		bytes, err := swag.WriteJSON(m.CreationIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field creation_not
	if m.CreationNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not\":")
		bytes, err := swag.WriteJSON(m.CreationNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreationNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not\":null")
		first = false
	}

	// handle non nullable field creation_not_in with omitempty
	if !swag.IsZero(m.CreationNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not_in\":")
		bytes, err := swag.WriteJSON(m.CreationNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field dedup
	if m.Dedup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup\":")
		bytes, err := swag.WriteJSON(m.Dedup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Dedup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup\":null")
		first = false
	}

	// handle non nullable field dedup_in with omitempty
	if !swag.IsZero(m.DedupIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup_in\":")
		bytes, err := swag.WriteJSON(m.DedupIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field dedup_not
	if m.DedupNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup_not\":")
		bytes, err := swag.WriteJSON(m.DedupNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DedupNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup_not\":null")
		first = false
	}

	// handle non nullable field dedup_not_in with omitempty
	if !swag.IsZero(m.DedupNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"dedup_not_in\":")
		bytes, err := swag.WriteJSON(m.DedupNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failover_executions_every
	if m.FailoverExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":null")
		first = false
	}

	// handle nullable field failover_executions_none
	if m.FailoverExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":null")
		first = false
	}

	// handle nullable field failover_executions_some
	if m.FailoverExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field iscsi_lun
	if m.IscsiLun != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":")
		bytes, err := swag.WriteJSON(m.IscsiLun)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLun_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":null")
		first = false
	}

	// handle nullable field local_created_at
	if m.LocalCreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":null")
		first = false
	}

	// handle nullable field local_created_at_gt
	if m.LocalCreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gt\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gt\":null")
		first = false
	}

	// handle nullable field local_created_at_gte
	if m.LocalCreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gte\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gte\":null")
		first = false
	}

	// handle non nullable field local_created_at_in with omitempty
	if !swag.IsZero(m.LocalCreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_in\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_created_at_lt
	if m.LocalCreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lt\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lt\":null")
		first = false
	}

	// handle nullable field local_created_at_lte
	if m.LocalCreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lte\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lte\":null")
		first = false
	}

	// handle nullable field local_created_at_not
	if m.LocalCreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not\":null")
		first = false
	}

	// handle non nullable field local_created_at_not_in with omitempty
	if !swag.IsZero(m.LocalCreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field parent_restore_point
	if m.ParentRestorePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point\":null")
		first = false
	}

	// handle nullable field parent_restore_point_contains
	if m.ParentRestorePointContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_contains\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_contains\":null")
		first = false
	}

	// handle nullable field parent_restore_point_ends_with
	if m.ParentRestorePointEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_ends_with\":null")
		first = false
	}

	// handle nullable field parent_restore_point_gt
	if m.ParentRestorePointGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gt\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gt\":null")
		first = false
	}

	// handle nullable field parent_restore_point_gte
	if m.ParentRestorePointGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gte\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gte\":null")
		first = false
	}

	// handle non nullable field parent_restore_point_in with omitempty
	if !swag.IsZero(m.ParentRestorePointIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_in\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_restore_point_lt
	if m.ParentRestorePointLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lt\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lt\":null")
		first = false
	}

	// handle nullable field parent_restore_point_lte
	if m.ParentRestorePointLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lte\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lte\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not
	if m.ParentRestorePointNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not_contains
	if m.ParentRestorePointNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_contains\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_contains\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not_ends_with
	if m.ParentRestorePointNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_ends_with\":null")
		first = false
	}

	// handle non nullable field parent_restore_point_not_in with omitempty
	if !swag.IsZero(m.ParentRestorePointNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_in\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_restore_point_not_starts_with
	if m.ParentRestorePointNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_starts_with\":null")
		first = false
	}

	// handle nullable field parent_restore_point_starts_with
	if m.ParentRestorePointStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_starts_with\":null")
		first = false
	}

	// handle nullable field replica_vm
	if m.ReplicaVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vm\":")
		bytes, err := swag.WriteJSON(m.ReplicaVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vm\":null")
		first = false
	}

	// handle nullable field replication_plan
	if m.ReplicationPlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":null")
		first = false
	}

	// handle nullable field replication_service
	if m.ReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":")
		bytes, err := swag.WriteJSON(m.ReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":null")
		first = false
	}

	// handle nullable field replication_target_execution
	if m.ReplicationTargetExecution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_execution\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationTargetExecution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_execution\":null")
		first = false
	}

	// handle nullable field resource_version
	if m.ResourceVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":")
		bytes, err := swag.WriteJSON(m.ResourceVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":null")
		first = false
	}

	// handle nullable field resource_version_gt
	if m.ResourceVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":null")
		first = false
	}

	// handle nullable field resource_version_gte
	if m.ResourceVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":null")
		first = false
	}

	// handle non nullable field resource_version_in with omitempty
	if !swag.IsZero(m.ResourceVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_version_lt
	if m.ResourceVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":null")
		first = false
	}

	// handle nullable field resource_version_lte
	if m.ResourceVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":null")
		first = false
	}

	// handle nullable field resource_version_not
	if m.ResourceVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":null")
		first = false
	}

	// handle non nullable field resource_version_not_in with omitempty
	if !swag.IsZero(m.ResourceVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice
	if m.Slice != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice\":")
		bytes, err := swag.WriteJSON(m.Slice)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Slice_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice\":null")
		first = false
	}

	// handle nullable field slice_contains
	if m.SliceContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_contains\":")
		bytes, err := swag.WriteJSON(m.SliceContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_contains\":null")
		first = false
	}

	// handle nullable field slice_ends_with
	if m.SliceEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_ends_with\":")
		bytes, err := swag.WriteJSON(m.SliceEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_ends_with\":null")
		first = false
	}

	// handle nullable field slice_gt
	if m.SliceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gt\":")
		bytes, err := swag.WriteJSON(m.SliceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gt\":null")
		first = false
	}

	// handle nullable field slice_gte
	if m.SliceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gte\":")
		bytes, err := swag.WriteJSON(m.SliceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gte\":null")
		first = false
	}

	// handle non nullable field slice_in with omitempty
	if !swag.IsZero(m.SliceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_in\":")
		bytes, err := swag.WriteJSON(m.SliceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice_lt
	if m.SliceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lt\":")
		bytes, err := swag.WriteJSON(m.SliceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lt\":null")
		first = false
	}

	// handle nullable field slice_lte
	if m.SliceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lte\":")
		bytes, err := swag.WriteJSON(m.SliceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lte\":null")
		first = false
	}

	// handle nullable field slice_not
	if m.SliceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not\":")
		bytes, err := swag.WriteJSON(m.SliceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not\":null")
		first = false
	}

	// handle nullable field slice_not_contains
	if m.SliceNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_contains\":")
		bytes, err := swag.WriteJSON(m.SliceNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_contains\":null")
		first = false
	}

	// handle nullable field slice_not_ends_with
	if m.SliceNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SliceNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_ends_with\":null")
		first = false
	}

	// handle non nullable field slice_not_in with omitempty
	if !swag.IsZero(m.SliceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_in\":")
		bytes, err := swag.WriteJSON(m.SliceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice_not_starts_with
	if m.SliceNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SliceNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_starts_with\":null")
		first = false
	}

	// handle nullable field slice_starts_with
	if m.SliceStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_starts_with\":")
		bytes, err := swag.WriteJSON(m.SliceStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_starts_with\":null")
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type_not
	if m.SnapshotConsistentTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_not_in with omitempty
	if !swag.IsZero(m.SnapshotConsistentTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field tower_deploy_id
	if m.TowerDeployID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id\":")
		bytes, err := swag.WriteJSON(m.TowerDeployID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_contains
	if m.TowerDeployIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_contains\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_contains\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_ends_with
	if m.TowerDeployIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_ends_with\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_gt
	if m.TowerDeployIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_gt\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_gt\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_gte
	if m.TowerDeployIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_gte\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_gte\":null")
		first = false
	}

	// handle non nullable field tower_deploy_id_in with omitempty
	if !swag.IsZero(m.TowerDeployIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_in\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field tower_deploy_id_lt
	if m.TowerDeployIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_lt\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_lt\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_lte
	if m.TowerDeployIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_lte\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_lte\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_not
	if m.TowerDeployIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_not_contains
	if m.TowerDeployIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_contains\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_not_ends_with
	if m.TowerDeployIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field tower_deploy_id_not_in with omitempty
	if !swag.IsZero(m.TowerDeployIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_in\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field tower_deploy_id_not_starts_with
	if m.TowerDeployIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field tower_deploy_id_starts_with
	if m.TowerDeployIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.TowerDeployIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TowerDeployIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"tower_deploy_id_starts_with\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	// handle nullable field vm_local_id
	if m.VMLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":")
		bytes, err := swag.WriteJSON(m.VMLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":null")
		first = false
	}

	// handle nullable field vm_local_id_contains
	if m.VMLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_ends_with
	if m.VMLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_gt
	if m.VMLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":null")
		first = false
	}

	// handle nullable field vm_local_id_gte
	if m.VMLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":null")
		first = false
	}

	// handle non nullable field vm_local_id_in with omitempty
	if !swag.IsZero(m.VMLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_lt
	if m.VMLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":null")
		first = false
	}

	// handle nullable field vm_local_id_lte
	if m.VMLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":null")
		first = false
	}

	// handle nullable field vm_local_id_not
	if m.VMLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_contains
	if m.VMLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_ends_with
	if m.VMLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_local_id_not_in with omitempty
	if !swag.IsZero(m.VMLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_not_starts_with
	if m.VMLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_starts_with
	if m.VMLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name
	if m.VMName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":")
		bytes, err := swag.WriteJSON(m.VMName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":null")
		first = false
	}

	// handle nullable field vm_name_contains
	if m.VMNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":null")
		first = false
	}

	// handle nullable field vm_name_ends_with
	if m.VMNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":null")
		first = false
	}

	// handle nullable field vm_name_gt
	if m.VMNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":")
		bytes, err := swag.WriteJSON(m.VMNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":null")
		first = false
	}

	// handle nullable field vm_name_gte
	if m.VMNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":")
		bytes, err := swag.WriteJSON(m.VMNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":null")
		first = false
	}

	// handle non nullable field vm_name_in with omitempty
	if !swag.IsZero(m.VMNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_in\":")
		bytes, err := swag.WriteJSON(m.VMNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_lt
	if m.VMNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":")
		bytes, err := swag.WriteJSON(m.VMNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":null")
		first = false
	}

	// handle nullable field vm_name_lte
	if m.VMNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":")
		bytes, err := swag.WriteJSON(m.VMNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":null")
		first = false
	}

	// handle nullable field vm_name_not
	if m.VMNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":")
		bytes, err := swag.WriteJSON(m.VMNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":null")
		first = false
	}

	// handle nullable field vm_name_not_contains
	if m.VMNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":null")
		first = false
	}

	// handle nullable field vm_name_not_ends_with
	if m.VMNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_name_not_in with omitempty
	if !swag.IsZero(m.VMNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_in\":")
		bytes, err := swag.WriteJSON(m.VMNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_not_starts_with
	if m.VMNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name_starts_with
	if m.VMNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replication restore point where input
func (m *ReplicationRestorePointWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedupIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedupNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedupNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationRestorePointWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateCreation(formats strfmt.Registry) error {
	if swag.IsZero(m.Creation) { // not required
		return nil
	}

	if m.Creation != nil {
		if err := m.Creation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateCreationIn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationIn) { // not required
		return nil
	}

	for i := 0; i < len(m.CreationIn); i++ {

		if err := m.CreationIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateCreationNot(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationNot) { // not required
		return nil
	}

	if m.CreationNot != nil {
		if err := m.CreationNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateCreationNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.CreationNotIn); i++ {

		if err := m.CreationNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateDedup(formats strfmt.Registry) error {
	if swag.IsZero(m.Dedup) { // not required
		return nil
	}

	if m.Dedup != nil {
		if err := m.Dedup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateDedupIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DedupIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DedupIn); i++ {

		if err := m.DedupIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateDedupNot(formats strfmt.Registry) error {
	if swag.IsZero(m.DedupNot) { // not required
		return nil
	}

	if m.DedupNot != nil {
		if err := m.DedupNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateDedupNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DedupNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DedupNotIn); i++ {

		if err := m.DedupNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateFailoverExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsEvery) { // not required
		return nil
	}

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateFailoverExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsNone) { // not required
		return nil
	}

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateFailoverExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsSome) { // not required
		return nil
	}

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateIscsiLun(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLun) { // not required
		return nil
	}

	if m.IscsiLun != nil {
		if err := m.IscsiLun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateReplicaVM(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVM) { // not required
		return nil
	}

	if m.ReplicaVM != nil {
		if err := m.ReplicaVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateReplicationPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlan) { // not required
		return nil
	}

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateReplicationService(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationService) { // not required
		return nil
	}

	if m.ReplicationService != nil {
		if err := m.ReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateReplicationTargetExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecution) { // not required
		return nil
	}

	if m.ReplicationTargetExecution != nil {
		if err := m.ReplicationTargetExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_execution")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateSnapshotConsistentTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateSnapshotConsistentTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNot) { // not required
		return nil
	}

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateSnapshotConsistentTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replication restore point where input based on the context it is used
func (m *ReplicationRestorePointWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedupIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedupNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDedupNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateCreation(ctx context.Context, formats strfmt.Registry) error {

	if m.Creation != nil {
		if err := m.Creation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateCreationIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreationIn); i++ {

		if err := m.CreationIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateCreationNot(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationNot != nil {
		if err := m.CreationNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateCreationNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreationNotIn); i++ {

		if err := m.CreationNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateDedup(ctx context.Context, formats strfmt.Registry) error {

	if m.Dedup != nil {
		if err := m.Dedup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateDedupIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DedupIn); i++ {

		if err := m.DedupIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateDedupNot(ctx context.Context, formats strfmt.Registry) error {

	if m.DedupNot != nil {
		if err := m.DedupNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateDedupNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DedupNotIn); i++ {

		if err := m.DedupNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dedup_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dedup_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateFailoverExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateFailoverExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateFailoverExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateIscsiLun(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLun != nil {
		if err := m.IscsiLun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateReplicaVM(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVM != nil {
		if err := m.ReplicaVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateReplicationPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationService != nil {
		if err := m.ReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateReplicationTargetExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationTargetExecution != nil {
		if err := m.ReplicationTargetExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_target_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_target_execution")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateSnapshotConsistentTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateSnapshotConsistentTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateSnapshotConsistentTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ReplicationRestorePointWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicationRestorePointWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicationRestorePointWhereInput) UnmarshalBinary(b []byte) error {
	var res ReplicationRestorePointWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
