// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualPrivateCloudDnatRuleParams virtual private cloud dnat rule params
//
// swagger:model VirtualPrivateCloudDnatRuleParams
type VirtualPrivateCloudDnatRuleParams struct {

	// port
	// Required: true
	Port *int32 `json:"port"`

	// target ip
	// Required: true
	TargetIP *string `json:"target_ip"`

	// target port
	// Required: true
	TargetPort *int32 `json:"target_port"`

	MarshalOpts *VirtualPrivateCloudDnatRuleParamsMarshalOpts `json:"-"`
}

type VirtualPrivateCloudDnatRuleParamsMarshalOpts struct {
	Port_Explicit_Null_When_Empty bool

	TargetIP_Explicit_Null_When_Empty bool

	TargetPort_Explicit_Null_When_Empty bool
}

func (m VirtualPrivateCloudDnatRuleParams) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field port
	if m.Port != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"port\":")
		bytes, err := swag.WriteJSON(m.Port)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Port_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"port\":null")
		first = false
	}

	// handle nullable field target_ip
	if m.TargetIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_ip\":")
		bytes, err := swag.WriteJSON(m.TargetIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_ip\":null")
		first = false
	}

	// handle nullable field target_port
	if m.TargetPort != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_port\":")
		bytes, err := swag.WriteJSON(m.TargetPort)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetPort_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"target_port\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this virtual private cloud dnat rule params
func (m *VirtualPrivateCloudDnatRuleParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualPrivateCloudDnatRuleParams) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudDnatRuleParams) validateTargetIP(formats strfmt.Registry) error {

	if err := validate.Required("target_ip", "body", m.TargetIP); err != nil {
		return err
	}

	return nil
}

func (m *VirtualPrivateCloudDnatRuleParams) validateTargetPort(formats strfmt.Registry) error {

	if err := validate.Required("target_port", "body", m.TargetPort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this virtual private cloud dnat rule params based on context it is used
func (m *VirtualPrivateCloudDnatRuleParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualPrivateCloudDnatRuleParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualPrivateCloudDnatRuleParams) UnmarshalBinary(b []byte) error {
	var res VirtualPrivateCloudDnatRuleParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
