// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NestedDiskFailureInformation nested disk failure information
//
// swagger:model NestedDiskFailureInformation
type NestedDiskFailureInformation struct {

	// chunk checksum error
	ChunkChecksumError *bool `json:"chunk_checksum_error,omitempty"`

	// chunk errflag
	ChunkErrflag *bool `json:"chunk_errflag,omitempty"`

	// chunk io error
	ChunkIoError *bool `json:"chunk_io_error,omitempty"`

	// chunk warnflag
	ChunkWarnflag *bool `json:"chunk_warnflag,omitempty"`

	// iostat latency
	IostatLatency *bool `json:"iostat_latency,omitempty"`

	// iostat latency ms
	IostatLatencyMs *int64 `json:"iostat_latency_ms,omitempty"`

	// smart check
	SmartCheck *bool `json:"smart_check,omitempty"`

	MarshalOpts *NestedDiskFailureInformationMarshalOpts `json:"-"`
}

type NestedDiskFailureInformationMarshalOpts struct {
	ChunkChecksumError_Explicit_Null_When_Empty bool

	ChunkErrflag_Explicit_Null_When_Empty bool

	ChunkIoError_Explicit_Null_When_Empty bool

	ChunkWarnflag_Explicit_Null_When_Empty bool

	IostatLatency_Explicit_Null_When_Empty bool

	IostatLatencyMs_Explicit_Null_When_Empty bool

	SmartCheck_Explicit_Null_When_Empty bool
}

func (m NestedDiskFailureInformation) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field chunk_checksum_error
	if m.ChunkChecksumError != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_checksum_error\":")
		bytes, err := swag.WriteJSON(m.ChunkChecksumError)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkChecksumError_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_checksum_error\":null")
		first = false
	}

	// handle nullable field chunk_errflag
	if m.ChunkErrflag != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_errflag\":")
		bytes, err := swag.WriteJSON(m.ChunkErrflag)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkErrflag_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_errflag\":null")
		first = false
	}

	// handle nullable field chunk_io_error
	if m.ChunkIoError != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_io_error\":")
		bytes, err := swag.WriteJSON(m.ChunkIoError)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkIoError_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_io_error\":null")
		first = false
	}

	// handle nullable field chunk_warnflag
	if m.ChunkWarnflag != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_warnflag\":")
		bytes, err := swag.WriteJSON(m.ChunkWarnflag)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ChunkWarnflag_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"chunk_warnflag\":null")
		first = false
	}

	// handle nullable field iostat_latency
	if m.IostatLatency != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iostat_latency\":")
		bytes, err := swag.WriteJSON(m.IostatLatency)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IostatLatency_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iostat_latency\":null")
		first = false
	}

	// handle nullable field iostat_latency_ms
	if m.IostatLatencyMs != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iostat_latency_ms\":")
		bytes, err := swag.WriteJSON(m.IostatLatencyMs)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IostatLatencyMs_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iostat_latency_ms\":null")
		first = false
	}

	// handle nullable field smart_check
	if m.SmartCheck != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smart_check\":")
		bytes, err := swag.WriteJSON(m.SmartCheck)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SmartCheck_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"smart_check\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested disk failure information
func (m *NestedDiskFailureInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this nested disk failure information based on context it is used
func (m *NestedDiskFailureInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedDiskFailureInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedDiskFailureInformation) UnmarshalBinary(b []byte) error {
	var res NestedDiskFailureInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
