// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterImageWhereInput cluster image where input
//
// swagger:model ClusterImageWhereInput
type ClusterImageWhereInput struct {

	// a n d
	AND []*ClusterImageWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ClusterImageWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ClusterImageWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// meta name
	MetaName *string `json:"meta_name,omitempty"`

	// meta name contains
	MetaNameContains *string `json:"meta_name_contains,omitempty"`

	// meta name ends with
	MetaNameEndsWith *string `json:"meta_name_ends_with,omitempty"`

	// meta name gt
	MetaNameGt *string `json:"meta_name_gt,omitempty"`

	// meta name gte
	MetaNameGte *string `json:"meta_name_gte,omitempty"`

	// meta name in
	MetaNameIn []string `json:"meta_name_in,omitempty"`

	// meta name lt
	MetaNameLt *string `json:"meta_name_lt,omitempty"`

	// meta name lte
	MetaNameLte *string `json:"meta_name_lte,omitempty"`

	// meta name not
	MetaNameNot *string `json:"meta_name_not,omitempty"`

	// meta name not contains
	MetaNameNotContains *string `json:"meta_name_not_contains,omitempty"`

	// meta name not ends with
	MetaNameNotEndsWith *string `json:"meta_name_not_ends_with,omitempty"`

	// meta name not in
	MetaNameNotIn []string `json:"meta_name_not_in,omitempty"`

	// meta name not starts with
	MetaNameNotStartsWith *string `json:"meta_name_not_starts_with,omitempty"`

	// meta name starts with
	MetaNameStartsWith *string `json:"meta_name_starts_with,omitempty"`

	// meta size
	MetaSize *int64 `json:"meta_size,omitempty"`

	// meta size gt
	MetaSizeGt *int64 `json:"meta_size_gt,omitempty"`

	// meta size gte
	MetaSizeGte *int64 `json:"meta_size_gte,omitempty"`

	// meta size in
	MetaSizeIn []int64 `json:"meta_size_in,omitempty"`

	// meta size lt
	MetaSizeLt *int64 `json:"meta_size_lt,omitempty"`

	// meta size lte
	MetaSizeLte *int64 `json:"meta_size_lte,omitempty"`

	// meta size not
	MetaSizeNot *int64 `json:"meta_size_not,omitempty"`

	// meta size not in
	MetaSizeNotIn []int64 `json:"meta_size_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// upgrade tool version
	UpgradeToolVersion *string `json:"upgrade_tool_version,omitempty"`

	// upgrade tool version contains
	UpgradeToolVersionContains *string `json:"upgrade_tool_version_contains,omitempty"`

	// upgrade tool version ends with
	UpgradeToolVersionEndsWith *string `json:"upgrade_tool_version_ends_with,omitempty"`

	// upgrade tool version gt
	UpgradeToolVersionGt *string `json:"upgrade_tool_version_gt,omitempty"`

	// upgrade tool version gte
	UpgradeToolVersionGte *string `json:"upgrade_tool_version_gte,omitempty"`

	// upgrade tool version in
	UpgradeToolVersionIn []string `json:"upgrade_tool_version_in,omitempty"`

	// upgrade tool version lt
	UpgradeToolVersionLt *string `json:"upgrade_tool_version_lt,omitempty"`

	// upgrade tool version lte
	UpgradeToolVersionLte *string `json:"upgrade_tool_version_lte,omitempty"`

	// upgrade tool version not
	UpgradeToolVersionNot *string `json:"upgrade_tool_version_not,omitempty"`

	// upgrade tool version not contains
	UpgradeToolVersionNotContains *string `json:"upgrade_tool_version_not_contains,omitempty"`

	// upgrade tool version not ends with
	UpgradeToolVersionNotEndsWith *string `json:"upgrade_tool_version_not_ends_with,omitempty"`

	// upgrade tool version not in
	UpgradeToolVersionNotIn []string `json:"upgrade_tool_version_not_in,omitempty"`

	// upgrade tool version not starts with
	UpgradeToolVersionNotStartsWith *string `json:"upgrade_tool_version_not_starts_with,omitempty"`

	// upgrade tool version starts with
	UpgradeToolVersionStartsWith *string `json:"upgrade_tool_version_starts_with,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version semantic gt
	VersionSemanticGt *string `json:"version_semantic_gt,omitempty"`

	// version semantic gte
	VersionSemanticGte *string `json:"version_semantic_gte,omitempty"`

	// version semantic lt
	VersionSemanticLt *string `json:"version_semantic_lt,omitempty"`

	// version semantic lte
	VersionSemanticLte *string `json:"version_semantic_lte,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	// zbs version
	ZbsVersion *string `json:"zbs_version,omitempty"`

	// zbs version contains
	ZbsVersionContains *string `json:"zbs_version_contains,omitempty"`

	// zbs version ends with
	ZbsVersionEndsWith *string `json:"zbs_version_ends_with,omitempty"`

	// zbs version gt
	ZbsVersionGt *string `json:"zbs_version_gt,omitempty"`

	// zbs version gte
	ZbsVersionGte *string `json:"zbs_version_gte,omitempty"`

	// zbs version in
	ZbsVersionIn []string `json:"zbs_version_in,omitempty"`

	// zbs version lt
	ZbsVersionLt *string `json:"zbs_version_lt,omitempty"`

	// zbs version lte
	ZbsVersionLte *string `json:"zbs_version_lte,omitempty"`

	// zbs version not
	ZbsVersionNot *string `json:"zbs_version_not,omitempty"`

	// zbs version not contains
	ZbsVersionNotContains *string `json:"zbs_version_not_contains,omitempty"`

	// zbs version not ends with
	ZbsVersionNotEndsWith *string `json:"zbs_version_not_ends_with,omitempty"`

	// zbs version not in
	ZbsVersionNotIn []string `json:"zbs_version_not_in,omitempty"`

	// zbs version not starts with
	ZbsVersionNotStartsWith *string `json:"zbs_version_not_starts_with,omitempty"`

	// zbs version starts with
	ZbsVersionStartsWith *string `json:"zbs_version_starts_with,omitempty"`

	MarshalOpts *ClusterImageWhereInputMarshalOpts `json:"-"`
}

type ClusterImageWhereInputMarshalOpts struct {
	Cluster_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	MetaName_Explicit_Null_When_Empty bool

	MetaNameContains_Explicit_Null_When_Empty bool

	MetaNameEndsWith_Explicit_Null_When_Empty bool

	MetaNameGt_Explicit_Null_When_Empty bool

	MetaNameGte_Explicit_Null_When_Empty bool

	MetaNameLt_Explicit_Null_When_Empty bool

	MetaNameLte_Explicit_Null_When_Empty bool

	MetaNameNot_Explicit_Null_When_Empty bool

	MetaNameNotContains_Explicit_Null_When_Empty bool

	MetaNameNotEndsWith_Explicit_Null_When_Empty bool

	MetaNameNotStartsWith_Explicit_Null_When_Empty bool

	MetaNameStartsWith_Explicit_Null_When_Empty bool

	MetaSize_Explicit_Null_When_Empty bool

	MetaSizeGt_Explicit_Null_When_Empty bool

	MetaSizeGte_Explicit_Null_When_Empty bool

	MetaSizeLt_Explicit_Null_When_Empty bool

	MetaSizeLte_Explicit_Null_When_Empty bool

	MetaSizeNot_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SizeGt_Explicit_Null_When_Empty bool

	SizeGte_Explicit_Null_When_Empty bool

	SizeLt_Explicit_Null_When_Empty bool

	SizeLte_Explicit_Null_When_Empty bool

	SizeNot_Explicit_Null_When_Empty bool

	UpgradeToolVersion_Explicit_Null_When_Empty bool

	UpgradeToolVersionContains_Explicit_Null_When_Empty bool

	UpgradeToolVersionEndsWith_Explicit_Null_When_Empty bool

	UpgradeToolVersionGt_Explicit_Null_When_Empty bool

	UpgradeToolVersionGte_Explicit_Null_When_Empty bool

	UpgradeToolVersionLt_Explicit_Null_When_Empty bool

	UpgradeToolVersionLte_Explicit_Null_When_Empty bool

	UpgradeToolVersionNot_Explicit_Null_When_Empty bool

	UpgradeToolVersionNotContains_Explicit_Null_When_Empty bool

	UpgradeToolVersionNotEndsWith_Explicit_Null_When_Empty bool

	UpgradeToolVersionNotStartsWith_Explicit_Null_When_Empty bool

	UpgradeToolVersionStartsWith_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VersionContains_Explicit_Null_When_Empty bool

	VersionEndsWith_Explicit_Null_When_Empty bool

	VersionGt_Explicit_Null_When_Empty bool

	VersionGte_Explicit_Null_When_Empty bool

	VersionLt_Explicit_Null_When_Empty bool

	VersionLte_Explicit_Null_When_Empty bool

	VersionNot_Explicit_Null_When_Empty bool

	VersionNotContains_Explicit_Null_When_Empty bool

	VersionNotEndsWith_Explicit_Null_When_Empty bool

	VersionNotStartsWith_Explicit_Null_When_Empty bool

	VersionSemanticGt_Explicit_Null_When_Empty bool

	VersionSemanticGte_Explicit_Null_When_Empty bool

	VersionSemanticLt_Explicit_Null_When_Empty bool

	VersionSemanticLte_Explicit_Null_When_Empty bool

	VersionStartsWith_Explicit_Null_When_Empty bool

	ZbsVersion_Explicit_Null_When_Empty bool

	ZbsVersionContains_Explicit_Null_When_Empty bool

	ZbsVersionEndsWith_Explicit_Null_When_Empty bool

	ZbsVersionGt_Explicit_Null_When_Empty bool

	ZbsVersionGte_Explicit_Null_When_Empty bool

	ZbsVersionLt_Explicit_Null_When_Empty bool

	ZbsVersionLte_Explicit_Null_When_Empty bool

	ZbsVersionNot_Explicit_Null_When_Empty bool

	ZbsVersionNotContains_Explicit_Null_When_Empty bool

	ZbsVersionNotEndsWith_Explicit_Null_When_Empty bool

	ZbsVersionNotStartsWith_Explicit_Null_When_Empty bool

	ZbsVersionStartsWith_Explicit_Null_When_Empty bool
}

func (m ClusterImageWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field meta_name
	if m.MetaName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name\":")
		bytes, err := swag.WriteJSON(m.MetaName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name\":null")
		first = false
	}

	// handle nullable field meta_name_contains
	if m.MetaNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_contains\":")
		bytes, err := swag.WriteJSON(m.MetaNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_contains\":null")
		first = false
	}

	// handle nullable field meta_name_ends_with
	if m.MetaNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.MetaNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_ends_with\":null")
		first = false
	}

	// handle nullable field meta_name_gt
	if m.MetaNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_gt\":")
		bytes, err := swag.WriteJSON(m.MetaNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_gt\":null")
		first = false
	}

	// handle nullable field meta_name_gte
	if m.MetaNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_gte\":")
		bytes, err := swag.WriteJSON(m.MetaNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_gte\":null")
		first = false
	}

	// handle non nullable field meta_name_in with omitempty
	if swag.IsZero(m.MetaNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_in\":")
		bytes, err := swag.WriteJSON(m.MetaNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field meta_name_lt
	if m.MetaNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_lt\":")
		bytes, err := swag.WriteJSON(m.MetaNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_lt\":null")
		first = false
	}

	// handle nullable field meta_name_lte
	if m.MetaNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_lte\":")
		bytes, err := swag.WriteJSON(m.MetaNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_lte\":null")
		first = false
	}

	// handle nullable field meta_name_not
	if m.MetaNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not\":")
		bytes, err := swag.WriteJSON(m.MetaNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not\":null")
		first = false
	}

	// handle nullable field meta_name_not_contains
	if m.MetaNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.MetaNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_contains\":null")
		first = false
	}

	// handle nullable field meta_name_not_ends_with
	if m.MetaNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.MetaNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field meta_name_not_in with omitempty
	if swag.IsZero(m.MetaNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_in\":")
		bytes, err := swag.WriteJSON(m.MetaNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field meta_name_not_starts_with
	if m.MetaNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.MetaNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field meta_name_starts_with
	if m.MetaNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.MetaNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_name_starts_with\":null")
		first = false
	}

	// handle nullable field meta_size
	if m.MetaSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size\":")
		bytes, err := swag.WriteJSON(m.MetaSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size\":null")
		first = false
	}

	// handle nullable field meta_size_gt
	if m.MetaSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_gt\":")
		bytes, err := swag.WriteJSON(m.MetaSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_gt\":null")
		first = false
	}

	// handle nullable field meta_size_gte
	if m.MetaSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_gte\":")
		bytes, err := swag.WriteJSON(m.MetaSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_gte\":null")
		first = false
	}

	// handle non nullable field meta_size_in with omitempty
	if swag.IsZero(m.MetaSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_in\":")
		bytes, err := swag.WriteJSON(m.MetaSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field meta_size_lt
	if m.MetaSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_lt\":")
		bytes, err := swag.WriteJSON(m.MetaSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_lt\":null")
		first = false
	}

	// handle nullable field meta_size_lte
	if m.MetaSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_lte\":")
		bytes, err := swag.WriteJSON(m.MetaSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_lte\":null")
		first = false
	}

	// handle nullable field meta_size_not
	if m.MetaSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_not\":")
		bytes, err := swag.WriteJSON(m.MetaSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MetaSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_not\":null")
		first = false
	}

	// handle non nullable field meta_size_not_in with omitempty
	if swag.IsZero(m.MetaSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"meta_size_not_in\":")
		bytes, err := swag.WriteJSON(m.MetaSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_gt
	if m.SizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":")
		bytes, err := swag.WriteJSON(m.SizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":null")
		first = false
	}

	// handle nullable field size_gte
	if m.SizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":")
		bytes, err := swag.WriteJSON(m.SizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":null")
		first = false
	}

	// handle non nullable field size_in with omitempty
	if swag.IsZero(m.SizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_in\":")
		bytes, err := swag.WriteJSON(m.SizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size_lt
	if m.SizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":")
		bytes, err := swag.WriteJSON(m.SizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":null")
		first = false
	}

	// handle nullable field size_lte
	if m.SizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":")
		bytes, err := swag.WriteJSON(m.SizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":null")
		first = false
	}

	// handle nullable field size_not
	if m.SizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":")
		bytes, err := swag.WriteJSON(m.SizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":null")
		first = false
	}

	// handle non nullable field size_not_in with omitempty
	if swag.IsZero(m.SizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not_in\":")
		bytes, err := swag.WriteJSON(m.SizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field upgrade_tool_version
	if m.UpgradeToolVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_contains
	if m.UpgradeToolVersionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_contains\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_contains\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_ends_with
	if m.UpgradeToolVersionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_ends_with\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_ends_with\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_gt
	if m.UpgradeToolVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_gt\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_gt\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_gte
	if m.UpgradeToolVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_gte\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_gte\":null")
		first = false
	}

	// handle non nullable field upgrade_tool_version_in with omitempty
	if swag.IsZero(m.UpgradeToolVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_in\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field upgrade_tool_version_lt
	if m.UpgradeToolVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_lt\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_lt\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_lte
	if m.UpgradeToolVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_lte\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_lte\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_not
	if m.UpgradeToolVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_not_contains
	if m.UpgradeToolVersionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_contains\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_contains\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_not_ends_with
	if m.UpgradeToolVersionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_ends_with\":null")
		first = false
	}

	// handle non nullable field upgrade_tool_version_not_in with omitempty
	if swag.IsZero(m.UpgradeToolVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_in\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field upgrade_tool_version_not_starts_with
	if m.UpgradeToolVersionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_not_starts_with\":null")
		first = false
	}

	// handle nullable field upgrade_tool_version_starts_with
	if m.UpgradeToolVersionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_starts_with\":")
		bytes, err := swag.WriteJSON(m.UpgradeToolVersionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpgradeToolVersionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"upgrade_tool_version_starts_with\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field version_contains
	if m.VersionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":")
		bytes, err := swag.WriteJSON(m.VersionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_contains\":null")
		first = false
	}

	// handle nullable field version_ends_with
	if m.VersionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_ends_with\":null")
		first = false
	}

	// handle nullable field version_gt
	if m.VersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":")
		bytes, err := swag.WriteJSON(m.VersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gt\":null")
		first = false
	}

	// handle nullable field version_gte
	if m.VersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":")
		bytes, err := swag.WriteJSON(m.VersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_gte\":null")
		first = false
	}

	// handle non nullable field version_in with omitempty
	if swag.IsZero(m.VersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_in\":")
		bytes, err := swag.WriteJSON(m.VersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_lt
	if m.VersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":")
		bytes, err := swag.WriteJSON(m.VersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lt\":null")
		first = false
	}

	// handle nullable field version_lte
	if m.VersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":")
		bytes, err := swag.WriteJSON(m.VersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_lte\":null")
		first = false
	}

	// handle nullable field version_not
	if m.VersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":")
		bytes, err := swag.WriteJSON(m.VersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not\":null")
		first = false
	}

	// handle nullable field version_not_contains
	if m.VersionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":")
		bytes, err := swag.WriteJSON(m.VersionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_contains\":null")
		first = false
	}

	// handle nullable field version_not_ends_with
	if m.VersionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_ends_with\":null")
		first = false
	}

	// handle non nullable field version_not_in with omitempty
	if swag.IsZero(m.VersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_in\":")
		bytes, err := swag.WriteJSON(m.VersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field version_not_starts_with
	if m.VersionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_not_starts_with\":null")
		first = false
	}

	// handle nullable field version_semantic_gt
	if m.VersionSemanticGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_gt\":")
		bytes, err := swag.WriteJSON(m.VersionSemanticGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionSemanticGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_gt\":null")
		first = false
	}

	// handle nullable field version_semantic_gte
	if m.VersionSemanticGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_gte\":")
		bytes, err := swag.WriteJSON(m.VersionSemanticGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionSemanticGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_gte\":null")
		first = false
	}

	// handle nullable field version_semantic_lt
	if m.VersionSemanticLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_lt\":")
		bytes, err := swag.WriteJSON(m.VersionSemanticLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionSemanticLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_lt\":null")
		first = false
	}

	// handle nullable field version_semantic_lte
	if m.VersionSemanticLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_lte\":")
		bytes, err := swag.WriteJSON(m.VersionSemanticLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionSemanticLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_semantic_lte\":null")
		first = false
	}

	// handle nullable field version_starts_with
	if m.VersionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":")
		bytes, err := swag.WriteJSON(m.VersionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VersionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version_starts_with\":null")
		first = false
	}

	// handle nullable field zbs_version
	if m.ZbsVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version\":")
		bytes, err := swag.WriteJSON(m.ZbsVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version\":null")
		first = false
	}

	// handle nullable field zbs_version_contains
	if m.ZbsVersionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_contains\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_contains\":null")
		first = false
	}

	// handle nullable field zbs_version_ends_with
	if m.ZbsVersionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_ends_with\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_ends_with\":null")
		first = false
	}

	// handle nullable field zbs_version_gt
	if m.ZbsVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_gt\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_gt\":null")
		first = false
	}

	// handle nullable field zbs_version_gte
	if m.ZbsVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_gte\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_gte\":null")
		first = false
	}

	// handle non nullable field zbs_version_in with omitempty
	if swag.IsZero(m.ZbsVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_in\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field zbs_version_lt
	if m.ZbsVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_lt\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_lt\":null")
		first = false
	}

	// handle nullable field zbs_version_lte
	if m.ZbsVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_lte\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_lte\":null")
		first = false
	}

	// handle nullable field zbs_version_not
	if m.ZbsVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not\":null")
		first = false
	}

	// handle nullable field zbs_version_not_contains
	if m.ZbsVersionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_contains\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_contains\":null")
		first = false
	}

	// handle nullable field zbs_version_not_ends_with
	if m.ZbsVersionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_ends_with\":null")
		first = false
	}

	// handle non nullable field zbs_version_not_in with omitempty
	if swag.IsZero(m.ZbsVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_in\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field zbs_version_not_starts_with
	if m.ZbsVersionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_not_starts_with\":null")
		first = false
	}

	// handle nullable field zbs_version_starts_with
	if m.ZbsVersionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_starts_with\":")
		bytes, err := swag.WriteJSON(m.ZbsVersionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVersionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_version_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cluster image where input
func (m *ClusterImageWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterImageWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this cluster image where input based on the context it is used
func (m *ClusterImageWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterImageWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterImageWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterImageWhereInput) UnmarshalBinary(b []byte) error {
	var res ClusterImageWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
