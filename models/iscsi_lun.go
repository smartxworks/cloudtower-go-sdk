// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IscsiLun iscsi lun
//
// swagger:model IscsiLun
type IscsiLun struct {

	// allowed initiators
	// Required: true
	AllowedInitiators *string `json:"allowed_initiators"`

	// assigned size
	// Required: true
	AssignedSize *int64 `json:"assigned_size"`

	// bps
	// Required: true
	Bps *int64 `json:"bps"`

	// bps max
	// Required: true
	BpsMax *int64 `json:"bps_max"`

	// bps max length
	// Required: true
	BpsMaxLength *int64 `json:"bps_max_length"`

	// bps rd
	// Required: true
	BpsRd *int64 `json:"bps_rd"`

	// bps rd max
	// Required: true
	BpsRdMax *int64 `json:"bps_rd_max"`

	// bps rd max length
	// Required: true
	BpsRdMaxLength *int64 `json:"bps_rd_max_length"`

	// bps wr
	// Required: true
	BpsWr *int64 `json:"bps_wr"`

	// bps wr max
	// Required: true
	BpsWrMax *int64 `json:"bps_wr_max"`

	// bps wr max length
	// Required: true
	BpsWrMaxLength *int64 `json:"bps_wr_max_length"`

	// consistency group
	ConsistencyGroup *NestedConsistencyGroup `json:"consistency_group,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// io size
	// Required: true
	IoSize *int64 `json:"io_size"`

	// iops
	// Required: true
	Iops *int64 `json:"iops"`

	// iops max
	// Required: true
	IopsMax *int64 `json:"iops_max"`

	// iops max length
	// Required: true
	IopsMaxLength *int64 `json:"iops_max_length"`

	// iops rd
	// Required: true
	IopsRd *int64 `json:"iops_rd"`

	// iops rd max
	// Required: true
	IopsRdMax *int64 `json:"iops_rd_max"`

	// iops rd max length
	// Required: true
	IopsRdMaxLength *int64 `json:"iops_rd_max_length"`

	// iops wr
	// Required: true
	IopsWr *int64 `json:"iops_wr"`

	// iops wr max
	// Required: true
	IopsWrMax *int64 `json:"iops_wr_max"`

	// iops wr max length
	// Required: true
	IopsWrMaxLength *int64 `json:"iops_wr_max_length"`

	// iscsi target
	// Required: true
	IscsiTarget *NestedIscsiTarget `json:"iscsi_target"`

	// labels
	Labels []*NestedLabel `json:"labels,omitempty"`

	// local created at
	// Required: true
	LocalCreatedAt *string `json:"local_created_at"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// lun id
	// Required: true
	LunID *int32 `json:"lun_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replica num
	// Required: true
	ReplicaNum *int32 `json:"replica_num"`

	// shared size
	// Required: true
	SharedSize *int64 `json:"shared_size"`

	// snapshot num
	// Required: true
	SnapshotNum *int32 `json:"snapshot_num"`

	// stripe num
	// Required: true
	StripeNum *int32 `json:"stripe_num"`

	// stripe size
	// Required: true
	StripeSize *int64 `json:"stripe_size"`

	// thin provision
	// Required: true
	ThinProvision *bool `json:"thin_provision"`

	// unique logical size
	UniqueLogicalSize *float64 `json:"unique_logical_size,omitempty"`

	// unique size
	// Required: true
	UniqueSize *int64 `json:"unique_size"`

	// zbs volume id
	// Required: true
	ZbsVolumeID *string `json:"zbs_volume_id"`

	MarshalOpts *IscsiLunMarshalOpts `json:"-"`
}

type IscsiLunMarshalOpts struct {
	AllowedInitiators_Explicit_Null_When_Empty bool

	AssignedSize_Explicit_Null_When_Empty bool

	Bps_Explicit_Null_When_Empty bool

	BpsMax_Explicit_Null_When_Empty bool

	BpsMaxLength_Explicit_Null_When_Empty bool

	BpsRd_Explicit_Null_When_Empty bool

	BpsRdMax_Explicit_Null_When_Empty bool

	BpsRdMaxLength_Explicit_Null_When_Empty bool

	BpsWr_Explicit_Null_When_Empty bool

	BpsWrMax_Explicit_Null_When_Empty bool

	BpsWrMaxLength_Explicit_Null_When_Empty bool

	ConsistencyGroup_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IoSize_Explicit_Null_When_Empty bool

	Iops_Explicit_Null_When_Empty bool

	IopsMax_Explicit_Null_When_Empty bool

	IopsMaxLength_Explicit_Null_When_Empty bool

	IopsRd_Explicit_Null_When_Empty bool

	IopsRdMax_Explicit_Null_When_Empty bool

	IopsRdMaxLength_Explicit_Null_When_Empty bool

	IopsWr_Explicit_Null_When_Empty bool

	IopsWrMax_Explicit_Null_When_Empty bool

	IopsWrMaxLength_Explicit_Null_When_Empty bool

	IscsiTarget_Explicit_Null_When_Empty bool

	LocalCreatedAt_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LunID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool

	SharedSize_Explicit_Null_When_Empty bool

	SnapshotNum_Explicit_Null_When_Empty bool

	StripeNum_Explicit_Null_When_Empty bool

	StripeSize_Explicit_Null_When_Empty bool

	ThinProvision_Explicit_Null_When_Empty bool

	UniqueLogicalSize_Explicit_Null_When_Empty bool

	UniqueSize_Explicit_Null_When_Empty bool

	ZbsVolumeID_Explicit_Null_When_Empty bool
}

func (m IscsiLun) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field allowed_initiators
	if m.AllowedInitiators != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"allowed_initiators\":")
		bytes, err := swag.WriteJSON(m.AllowedInitiators)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AllowedInitiators_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"allowed_initiators\":null")
		first = false
	}

	// handle nullable field assigned_size
	if m.AssignedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":")
		bytes, err := swag.WriteJSON(m.AssignedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":null")
		first = false
	}

	// handle nullable field bps
	if m.Bps != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":")
		bytes, err := swag.WriteJSON(m.Bps)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Bps_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps\":null")
		first = false
	}

	// handle nullable field bps_max
	if m.BpsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":")
		bytes, err := swag.WriteJSON(m.BpsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max\":null")
		first = false
	}

	// handle nullable field bps_max_length
	if m.BpsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_max_length\":null")
		first = false
	}

	// handle nullable field bps_rd
	if m.BpsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":")
		bytes, err := swag.WriteJSON(m.BpsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd\":null")
		first = false
	}

	// handle nullable field bps_rd_max
	if m.BpsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":")
		bytes, err := swag.WriteJSON(m.BpsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max\":null")
		first = false
	}

	// handle nullable field bps_rd_max_length
	if m.BpsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_rd_max_length\":null")
		first = false
	}

	// handle nullable field bps_wr
	if m.BpsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":")
		bytes, err := swag.WriteJSON(m.BpsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr\":null")
		first = false
	}

	// handle nullable field bps_wr_max
	if m.BpsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":")
		bytes, err := swag.WriteJSON(m.BpsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max\":null")
		first = false
	}

	// handle nullable field bps_wr_max_length
	if m.BpsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.BpsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BpsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"bps_wr_max_length\":null")
		first = false
	}

	// handle nullable field consistency_group
	if m.ConsistencyGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group\":")
		bytes, err := swag.WriteJSON(m.ConsistencyGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ConsistencyGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"consistency_group\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field io_size
	if m.IoSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":")
		bytes, err := swag.WriteJSON(m.IoSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IoSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"io_size\":null")
		first = false
	}

	// handle nullable field iops
	if m.Iops != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":")
		bytes, err := swag.WriteJSON(m.Iops)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Iops_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops\":null")
		first = false
	}

	// handle nullable field iops_max
	if m.IopsMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":")
		bytes, err := swag.WriteJSON(m.IopsMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max\":null")
		first = false
	}

	// handle nullable field iops_max_length
	if m.IopsMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_max_length\":null")
		first = false
	}

	// handle nullable field iops_rd
	if m.IopsRd != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":")
		bytes, err := swag.WriteJSON(m.IopsRd)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRd_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd\":null")
		first = false
	}

	// handle nullable field iops_rd_max
	if m.IopsRdMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":")
		bytes, err := swag.WriteJSON(m.IopsRdMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max\":null")
		first = false
	}

	// handle nullable field iops_rd_max_length
	if m.IopsRdMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsRdMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsRdMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_rd_max_length\":null")
		first = false
	}

	// handle nullable field iops_wr
	if m.IopsWr != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":")
		bytes, err := swag.WriteJSON(m.IopsWr)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWr_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr\":null")
		first = false
	}

	// handle nullable field iops_wr_max
	if m.IopsWrMax != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":")
		bytes, err := swag.WriteJSON(m.IopsWrMax)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMax_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max\":null")
		first = false
	}

	// handle nullable field iops_wr_max_length
	if m.IopsWrMaxLength != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":")
		bytes, err := swag.WriteJSON(m.IopsWrMaxLength)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IopsWrMaxLength_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iops_wr_max_length\":null")
		first = false
	}

	// handle nullable field iscsi_target
	if m.IscsiTarget != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target\":")
		bytes, err := swag.WriteJSON(m.IscsiTarget)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTarget_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target\":null")
		first = false
	}

	// handle non nullable field labels with omitempty
	if swag.IsZero(m.Labels) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels\":")
		bytes, err := swag.WriteJSON(m.Labels)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_created_at
	if m.LocalCreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field lun_id
	if m.LunID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lun_id\":")
		bytes, err := swag.WriteJSON(m.LunID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LunID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lun_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}

	// handle nullable field shared_size
	if m.SharedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size\":")
		bytes, err := swag.WriteJSON(m.SharedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SharedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"shared_size\":null")
		first = false
	}

	// handle nullable field snapshot_num
	if m.SnapshotNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num\":")
		bytes, err := swag.WriteJSON(m.SnapshotNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_num\":null")
		first = false
	}

	// handle nullable field stripe_num
	if m.StripeNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":")
		bytes, err := swag.WriteJSON(m.StripeNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_num\":null")
		first = false
	}

	// handle nullable field stripe_size
	if m.StripeSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":")
		bytes, err := swag.WriteJSON(m.StripeSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StripeSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"stripe_size\":null")
		first = false
	}

	// handle nullable field thin_provision
	if m.ThinProvision != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":")
		bytes, err := swag.WriteJSON(m.ThinProvision)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ThinProvision_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"thin_provision\":null")
		first = false
	}

	// handle nullable field unique_logical_size
	if m.UniqueLogicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size\":")
		bytes, err := swag.WriteJSON(m.UniqueLogicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueLogicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_logical_size\":null")
		first = false
	}

	// handle nullable field unique_size
	if m.UniqueSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size\":")
		bytes, err := swag.WriteJSON(m.UniqueSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UniqueSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"unique_size\":null")
		first = false
	}

	// handle nullable field zbs_volume_id
	if m.ZbsVolumeID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_volume_id\":")
		bytes, err := swag.WriteJSON(m.ZbsVolumeID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ZbsVolumeID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"zbs_volume_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this iscsi lun
func (m *IscsiLun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedInitiators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsRd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsRdMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsRdMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsWr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsWrMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBpsWrMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsRd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsRdMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsRdMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsWr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsWrMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIopsWrMaxLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStripeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThinProvision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZbsVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiLun) validateAllowedInitiators(formats strfmt.Registry) error {

	if err := validate.Required("allowed_initiators", "body", m.AllowedInitiators); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateAssignedSize(formats strfmt.Registry) error {

	if err := validate.Required("assigned_size", "body", m.AssignedSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBps(formats strfmt.Registry) error {

	if err := validate.Required("bps", "body", m.Bps); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsMax(formats strfmt.Registry) error {

	if err := validate.Required("bps_max", "body", m.BpsMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("bps_max_length", "body", m.BpsMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsRd(formats strfmt.Registry) error {

	if err := validate.Required("bps_rd", "body", m.BpsRd); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsRdMax(formats strfmt.Registry) error {

	if err := validate.Required("bps_rd_max", "body", m.BpsRdMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsRdMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("bps_rd_max_length", "body", m.BpsRdMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsWr(formats strfmt.Registry) error {

	if err := validate.Required("bps_wr", "body", m.BpsWr); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsWrMax(formats strfmt.Registry) error {

	if err := validate.Required("bps_wr_max", "body", m.BpsWrMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateBpsWrMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("bps_wr_max_length", "body", m.BpsWrMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateConsistencyGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroup) { // not required
		return nil
	}

	if m.ConsistencyGroup != nil {
		if err := m.ConsistencyGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistency_group")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIoSize(formats strfmt.Registry) error {

	if err := validate.Required("io_size", "body", m.IoSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIops(formats strfmt.Registry) error {

	if err := validate.Required("iops", "body", m.Iops); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsMax(formats strfmt.Registry) error {

	if err := validate.Required("iops_max", "body", m.IopsMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("iops_max_length", "body", m.IopsMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsRd(formats strfmt.Registry) error {

	if err := validate.Required("iops_rd", "body", m.IopsRd); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsRdMax(formats strfmt.Registry) error {

	if err := validate.Required("iops_rd_max", "body", m.IopsRdMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsRdMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("iops_rd_max_length", "body", m.IopsRdMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsWr(formats strfmt.Registry) error {

	if err := validate.Required("iops_wr", "body", m.IopsWr); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsWrMax(formats strfmt.Registry) error {

	if err := validate.Required("iops_wr_max", "body", m.IopsWrMax); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIopsWrMaxLength(formats strfmt.Registry) error {

	if err := validate.Required("iops_wr_max_length", "body", m.IopsWrMaxLength); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateIscsiTarget(formats strfmt.Registry) error {

	if err := validate.Required("iscsi_target", "body", m.IscsiTarget); err != nil {
		return err
	}

	if m.IscsiTarget != nil {
		if err := m.IscsiTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_target")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IscsiLun) validateLocalCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_created_at", "body", m.LocalCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateLunID(formats strfmt.Registry) error {

	if err := validate.Required("lun_id", "body", m.LunID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateReplicaNum(formats strfmt.Registry) error {

	if err := validate.Required("replica_num", "body", m.ReplicaNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateSharedSize(formats strfmt.Registry) error {

	if err := validate.Required("shared_size", "body", m.SharedSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateSnapshotNum(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_num", "body", m.SnapshotNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateStripeNum(formats strfmt.Registry) error {

	if err := validate.Required("stripe_num", "body", m.StripeNum); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateStripeSize(formats strfmt.Registry) error {

	if err := validate.Required("stripe_size", "body", m.StripeSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateThinProvision(formats strfmt.Registry) error {

	if err := validate.Required("thin_provision", "body", m.ThinProvision); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateUniqueSize(formats strfmt.Registry) error {

	if err := validate.Required("unique_size", "body", m.UniqueSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLun) validateZbsVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("zbs_volume_id", "body", m.ZbsVolumeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this iscsi lun based on the context it is used
func (m *IscsiLun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsistencyGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiLun) contextValidateConsistencyGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroup != nil {
		if err := m.ConsistencyGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistency_group")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) contextValidateIscsiTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiTarget != nil {
		if err := m.IscsiTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_target")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLun) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiLun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiLun) UnmarshalBinary(b []byte) error {
	var res IscsiLun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
