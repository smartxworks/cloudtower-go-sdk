// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedExecutePlan nested execute plan
//
// swagger:model NestedExecutePlan
type NestedExecutePlan struct {

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// id
	// Required: true
	ID *string `json:"id"`

	// period
	// Required: true
	Period *string `json:"period"`

	// retain
	// Required: true
	Retain *int32 `json:"retain"`

	// start at
	// Required: true
	StartAt *string `json:"start_at"`

	MarshalOpts *NestedExecutePlanMarshalOpts `json:"-"`
}

type NestedExecutePlanMarshalOpts struct {
	Enabled_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Period_Explicit_Null_When_Empty bool

	Retain_Explicit_Null_When_Empty bool

	StartAt_Explicit_Null_When_Empty bool
}

func (m NestedExecutePlan) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field enabled
	if m.Enabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":")
		bytes, err := swag.WriteJSON(m.Enabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Enabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"enabled\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field period
	if m.Period != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":")
		bytes, err := swag.WriteJSON(m.Period)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Period_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"period\":null")
		first = false
	}

	// handle nullable field retain
	if m.Retain != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retain\":")
		bytes, err := swag.WriteJSON(m.Retain)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Retain_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"retain\":null")
		first = false
	}

	// handle nullable field start_at
	if m.StartAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"start_at\":")
		bytes, err := swag.WriteJSON(m.StartAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StartAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"start_at\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested execute plan
func (m *NestedExecutePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedExecutePlan) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *NestedExecutePlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NestedExecutePlan) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	return nil
}

func (m *NestedExecutePlan) validateRetain(formats strfmt.Registry) error {

	if err := validate.Required("retain", "body", m.Retain); err != nil {
		return err
	}

	return nil
}

func (m *NestedExecutePlan) validateStartAt(formats strfmt.Registry) error {

	if err := validate.Required("start_at", "body", m.StartAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested execute plan based on context it is used
func (m *NestedExecutePlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedExecutePlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedExecutePlan) UnmarshalBinary(b []byte) error {
	var res NestedExecutePlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
