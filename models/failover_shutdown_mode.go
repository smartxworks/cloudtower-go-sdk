// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FailoverShutdownMode failover shutdown mode
//
// swagger:model FailoverShutdownMode
type FailoverShutdownMode string

func NewFailoverShutdownMode(value FailoverShutdownMode) *FailoverShutdownMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FailoverShutdownMode.
func (m FailoverShutdownMode) Pointer() *FailoverShutdownMode {
	return &m
}

const (

	// FailoverShutdownModeNONE captures enum value "NONE"
	FailoverShutdownModeNONE FailoverShutdownMode = "NONE"

	// FailoverShutdownModePOWEROFF captures enum value "POWEROFF"
	FailoverShutdownModePOWEROFF FailoverShutdownMode = "POWEROFF"

	// FailoverShutdownModeSHUTDOWN captures enum value "SHUTDOWN"
	FailoverShutdownModeSHUTDOWN FailoverShutdownMode = "SHUTDOWN"

	// FailoverShutdownModeSHUTDOWNWITHPOWEROFF captures enum value "SHUTDOWNWITHPOWEROFF"
	FailoverShutdownModeSHUTDOWNWITHPOWEROFF FailoverShutdownMode = "SHUTDOWNWITHPOWEROFF"
)

// for schema
var failoverShutdownModeEnum []interface{}

func init() {
	var res []FailoverShutdownMode
	if err := json.Unmarshal([]byte(`["NONE","POWEROFF","SHUTDOWN","SHUTDOWNWITHPOWEROFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failoverShutdownModeEnum = append(failoverShutdownModeEnum, v)
	}
}

func (m FailoverShutdownMode) validateFailoverShutdownModeEnum(path, location string, value FailoverShutdownMode) error {
	if err := validate.EnumCase(path, location, value, failoverShutdownModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this failover shutdown mode
func (m FailoverShutdownMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFailoverShutdownModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this failover shutdown mode based on context it is used
func (m FailoverShutdownMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
