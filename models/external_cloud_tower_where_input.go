// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExternalCloudTowerWhereInput external cloud tower where input
//
// swagger:model ExternalCloudTowerWhereInput
type ExternalCloudTowerWhereInput struct {

	// a n d
	AND []*ExternalCloudTowerWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ExternalCloudTowerWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ExternalCloudTowerWhereInput `json:"OR,omitempty"`

	// api key
	APIKey *string `json:"api_key,omitempty"`

	// api key contains
	APIKeyContains *string `json:"api_key_contains,omitempty"`

	// api key ends with
	APIKeyEndsWith *string `json:"api_key_ends_with,omitempty"`

	// api key gt
	APIKeyGt *string `json:"api_key_gt,omitempty"`

	// api key gte
	APIKeyGte *string `json:"api_key_gte,omitempty"`

	// api key in
	APIKeyIn []string `json:"api_key_in,omitempty"`

	// api key lt
	APIKeyLt *string `json:"api_key_lt,omitempty"`

	// api key lte
	APIKeyLte *string `json:"api_key_lte,omitempty"`

	// api key not
	APIKeyNot *string `json:"api_key_not,omitempty"`

	// api key not contains
	APIKeyNotContains *string `json:"api_key_not_contains,omitempty"`

	// api key not ends with
	APIKeyNotEndsWith *string `json:"api_key_not_ends_with,omitempty"`

	// api key not in
	APIKeyNotIn []string `json:"api_key_not_in,omitempty"`

	// api key not starts with
	APIKeyNotStartsWith *string `json:"api_key_not_starts_with,omitempty"`

	// api key starts with
	APIKeyStartsWith *string `json:"api_key_starts_with,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// deploy id
	DeployID *string `json:"deploy_id,omitempty"`

	// deploy id contains
	DeployIDContains *string `json:"deploy_id_contains,omitempty"`

	// deploy id ends with
	DeployIDEndsWith *string `json:"deploy_id_ends_with,omitempty"`

	// deploy id gt
	DeployIDGt *string `json:"deploy_id_gt,omitempty"`

	// deploy id gte
	DeployIDGte *string `json:"deploy_id_gte,omitempty"`

	// deploy id in
	DeployIDIn []string `json:"deploy_id_in,omitempty"`

	// deploy id lt
	DeployIDLt *string `json:"deploy_id_lt,omitempty"`

	// deploy id lte
	DeployIDLte *string `json:"deploy_id_lte,omitempty"`

	// deploy id not
	DeployIDNot *string `json:"deploy_id_not,omitempty"`

	// deploy id not contains
	DeployIDNotContains *string `json:"deploy_id_not_contains,omitempty"`

	// deploy id not ends with
	DeployIDNotEndsWith *string `json:"deploy_id_not_ends_with,omitempty"`

	// deploy id not in
	DeployIDNotIn []string `json:"deploy_id_not_in,omitempty"`

	// deploy id not starts with
	DeployIDNotStartsWith *string `json:"deploy_id_not_starts_with,omitempty"`

	// deploy id starts with
	DeployIDStartsWith *string `json:"deploy_id_starts_with,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// endpoint
	Endpoint *string `json:"endpoint,omitempty"`

	// endpoint contains
	EndpointContains *string `json:"endpoint_contains,omitempty"`

	// endpoint ends with
	EndpointEndsWith *string `json:"endpoint_ends_with,omitempty"`

	// endpoint gt
	EndpointGt *string `json:"endpoint_gt,omitempty"`

	// endpoint gte
	EndpointGte *string `json:"endpoint_gte,omitempty"`

	// endpoint in
	EndpointIn []string `json:"endpoint_in,omitempty"`

	// endpoint lt
	EndpointLt *string `json:"endpoint_lt,omitempty"`

	// endpoint lte
	EndpointLte *string `json:"endpoint_lte,omitempty"`

	// endpoint not
	EndpointNot *string `json:"endpoint_not,omitempty"`

	// endpoint not contains
	EndpointNotContains *string `json:"endpoint_not_contains,omitempty"`

	// endpoint not ends with
	EndpointNotEndsWith *string `json:"endpoint_not_ends_with,omitempty"`

	// endpoint not in
	EndpointNotIn []string `json:"endpoint_not_in,omitempty"`

	// endpoint not starts with
	EndpointNotStartsWith *string `json:"endpoint_not_starts_with,omitempty"`

	// endpoint starts with
	EndpointStartsWith *string `json:"endpoint_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// failback executions every
	FailbackExecutionsEvery *FailbackExecutionWhereInput `json:"failback_executions_every,omitempty"`

	// failback executions none
	FailbackExecutionsNone *FailbackExecutionWhereInput `json:"failback_executions_none,omitempty"`

	// failback executions some
	FailbackExecutionsSome *FailbackExecutionWhereInput `json:"failback_executions_some,omitempty"`

	// failover executions every
	FailoverExecutionsEvery *FailoverExecutionWhereInput `json:"failover_executions_every,omitempty"`

	// failover executions none
	FailoverExecutionsNone *FailoverExecutionWhereInput `json:"failover_executions_none,omitempty"`

	// failover executions some
	FailoverExecutionsSome *FailoverExecutionWhereInput `json:"failover_executions_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// permanent failover executions every
	PermanentFailoverExecutionsEvery *PermanentFailoverExecutionWhereInput `json:"permanent_failover_executions_every,omitempty"`

	// permanent failover executions none
	PermanentFailoverExecutionsNone *PermanentFailoverExecutionWhereInput `json:"permanent_failover_executions_none,omitempty"`

	// permanent failover executions some
	PermanentFailoverExecutionsSome *PermanentFailoverExecutionWhereInput `json:"permanent_failover_executions_some,omitempty"`

	// replica vms every
	ReplicaVmsEvery *ReplicaVMWhereInput `json:"replica_vms_every,omitempty"`

	// replica vms none
	ReplicaVmsNone *ReplicaVMWhereInput `json:"replica_vms_none,omitempty"`

	// replica vms some
	ReplicaVmsSome *ReplicaVMWhereInput `json:"replica_vms_some,omitempty"`

	// replication plans every
	ReplicationPlansEvery *ReplicationPlanWhereInput `json:"replication_plans_every,omitempty"`

	// replication plans none
	ReplicationPlansNone *ReplicationPlanWhereInput `json:"replication_plans_none,omitempty"`

	// replication plans some
	ReplicationPlansSome *ReplicationPlanWhereInput `json:"replication_plans_some,omitempty"`

	// status
	Status *ExternalCloudTowerStatus `json:"status,omitempty"`

	// status in
	StatusIn []ExternalCloudTowerStatus `json:"status_in,omitempty"`

	// status not
	StatusNot *ExternalCloudTowerStatus `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []ExternalCloudTowerStatus `json:"status_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	// use api key
	UseAPIKey *APIKeyWhereInput `json:"use_api_key,omitempty"`

	MarshalOpts *ExternalCloudTowerWhereInputMarshalOpts `json:"-"`
}

type ExternalCloudTowerWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	APIKey_Explicit_Null_When_Empty bool

	APIKeyContains_Explicit_Null_When_Empty bool

	APIKeyEndsWith_Explicit_Null_When_Empty bool

	APIKeyGt_Explicit_Null_When_Empty bool

	APIKeyGte_Explicit_Null_When_Empty bool

	APIKeyIn_Explicit_Null_When_Empty bool

	APIKeyLt_Explicit_Null_When_Empty bool

	APIKeyLte_Explicit_Null_When_Empty bool

	APIKeyNot_Explicit_Null_When_Empty bool

	APIKeyNotContains_Explicit_Null_When_Empty bool

	APIKeyNotEndsWith_Explicit_Null_When_Empty bool

	APIKeyNotIn_Explicit_Null_When_Empty bool

	APIKeyNotStartsWith_Explicit_Null_When_Empty bool

	APIKeyStartsWith_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	DeployID_Explicit_Null_When_Empty bool

	DeployIDContains_Explicit_Null_When_Empty bool

	DeployIDEndsWith_Explicit_Null_When_Empty bool

	DeployIDGt_Explicit_Null_When_Empty bool

	DeployIDGte_Explicit_Null_When_Empty bool

	DeployIDIn_Explicit_Null_When_Empty bool

	DeployIDLt_Explicit_Null_When_Empty bool

	DeployIDLte_Explicit_Null_When_Empty bool

	DeployIDNot_Explicit_Null_When_Empty bool

	DeployIDNotContains_Explicit_Null_When_Empty bool

	DeployIDNotEndsWith_Explicit_Null_When_Empty bool

	DeployIDNotIn_Explicit_Null_When_Empty bool

	DeployIDNotStartsWith_Explicit_Null_When_Empty bool

	DeployIDStartsWith_Explicit_Null_When_Empty bool

	Description_Explicit_Null_When_Empty bool

	DescriptionContains_Explicit_Null_When_Empty bool

	DescriptionEndsWith_Explicit_Null_When_Empty bool

	DescriptionGt_Explicit_Null_When_Empty bool

	DescriptionGte_Explicit_Null_When_Empty bool

	DescriptionIn_Explicit_Null_When_Empty bool

	DescriptionLt_Explicit_Null_When_Empty bool

	DescriptionLte_Explicit_Null_When_Empty bool

	DescriptionNot_Explicit_Null_When_Empty bool

	DescriptionNotContains_Explicit_Null_When_Empty bool

	DescriptionNotEndsWith_Explicit_Null_When_Empty bool

	DescriptionNotIn_Explicit_Null_When_Empty bool

	DescriptionNotStartsWith_Explicit_Null_When_Empty bool

	DescriptionStartsWith_Explicit_Null_When_Empty bool

	Endpoint_Explicit_Null_When_Empty bool

	EndpointContains_Explicit_Null_When_Empty bool

	EndpointEndsWith_Explicit_Null_When_Empty bool

	EndpointGt_Explicit_Null_When_Empty bool

	EndpointGte_Explicit_Null_When_Empty bool

	EndpointIn_Explicit_Null_When_Empty bool

	EndpointLt_Explicit_Null_When_Empty bool

	EndpointLte_Explicit_Null_When_Empty bool

	EndpointNot_Explicit_Null_When_Empty bool

	EndpointNotContains_Explicit_Null_When_Empty bool

	EndpointNotEndsWith_Explicit_Null_When_Empty bool

	EndpointNotIn_Explicit_Null_When_Empty bool

	EndpointNotStartsWith_Explicit_Null_When_Empty bool

	EndpointStartsWith_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	FailbackExecutionsEvery_Explicit_Null_When_Empty bool

	FailbackExecutionsNone_Explicit_Null_When_Empty bool

	FailbackExecutionsSome_Explicit_Null_When_Empty bool

	FailoverExecutionsEvery_Explicit_Null_When_Empty bool

	FailoverExecutionsNone_Explicit_Null_When_Empty bool

	FailoverExecutionsSome_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionsEvery_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionsNone_Explicit_Null_When_Empty bool

	PermanentFailoverExecutionsSome_Explicit_Null_When_Empty bool

	ReplicaVmsEvery_Explicit_Null_When_Empty bool

	ReplicaVmsNone_Explicit_Null_When_Empty bool

	ReplicaVmsSome_Explicit_Null_When_Empty bool

	ReplicationPlansEvery_Explicit_Null_When_Empty bool

	ReplicationPlansNone_Explicit_Null_When_Empty bool

	ReplicationPlansSome_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	StatusIn_Explicit_Null_When_Empty bool

	StatusNot_Explicit_Null_When_Empty bool

	StatusNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool

	UseAPIKey_Explicit_Null_When_Empty bool
}

func (m ExternalCloudTowerWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field api_key
	if m.APIKey != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key\":")
		bytes, err := swag.WriteJSON(m.APIKey)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKey_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key\":null")
		first = false
	}

	// handle nullable field api_key_contains
	if m.APIKeyContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_contains\":")
		bytes, err := swag.WriteJSON(m.APIKeyContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_contains\":null")
		first = false
	}

	// handle nullable field api_key_ends_with
	if m.APIKeyEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_ends_with\":")
		bytes, err := swag.WriteJSON(m.APIKeyEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_ends_with\":null")
		first = false
	}

	// handle nullable field api_key_gt
	if m.APIKeyGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_gt\":")
		bytes, err := swag.WriteJSON(m.APIKeyGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_gt\":null")
		first = false
	}

	// handle nullable field api_key_gte
	if m.APIKeyGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_gte\":")
		bytes, err := swag.WriteJSON(m.APIKeyGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_gte\":null")
		first = false
	}

	// handle non nullable field api_key_in with omitempty
	if !swag.IsZero(m.APIKeyIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_in\":")
		bytes, err := swag.WriteJSON(m.APIKeyIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field api_key_lt
	if m.APIKeyLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_lt\":")
		bytes, err := swag.WriteJSON(m.APIKeyLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_lt\":null")
		first = false
	}

	// handle nullable field api_key_lte
	if m.APIKeyLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_lte\":")
		bytes, err := swag.WriteJSON(m.APIKeyLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_lte\":null")
		first = false
	}

	// handle nullable field api_key_not
	if m.APIKeyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not\":")
		bytes, err := swag.WriteJSON(m.APIKeyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not\":null")
		first = false
	}

	// handle nullable field api_key_not_contains
	if m.APIKeyNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_contains\":")
		bytes, err := swag.WriteJSON(m.APIKeyNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_contains\":null")
		first = false
	}

	// handle nullable field api_key_not_ends_with
	if m.APIKeyNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.APIKeyNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_ends_with\":null")
		first = false
	}

	// handle non nullable field api_key_not_in with omitempty
	if !swag.IsZero(m.APIKeyNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_in\":")
		bytes, err := swag.WriteJSON(m.APIKeyNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field api_key_not_starts_with
	if m.APIKeyNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.APIKeyNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_not_starts_with\":null")
		first = false
	}

	// handle nullable field api_key_starts_with
	if m.APIKeyStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_starts_with\":")
		bytes, err := swag.WriteJSON(m.APIKeyStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.APIKeyStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"api_key_starts_with\":null")
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field deploy_id
	if m.DeployID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id\":")
		bytes, err := swag.WriteJSON(m.DeployID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id\":null")
		first = false
	}

	// handle nullable field deploy_id_contains
	if m.DeployIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_contains\":")
		bytes, err := swag.WriteJSON(m.DeployIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_contains\":null")
		first = false
	}

	// handle nullable field deploy_id_ends_with
	if m.DeployIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeployIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_ends_with\":null")
		first = false
	}

	// handle nullable field deploy_id_gt
	if m.DeployIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_gt\":")
		bytes, err := swag.WriteJSON(m.DeployIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_gt\":null")
		first = false
	}

	// handle nullable field deploy_id_gte
	if m.DeployIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_gte\":")
		bytes, err := swag.WriteJSON(m.DeployIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_gte\":null")
		first = false
	}

	// handle non nullable field deploy_id_in with omitempty
	if !swag.IsZero(m.DeployIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_in\":")
		bytes, err := swag.WriteJSON(m.DeployIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field deploy_id_lt
	if m.DeployIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_lt\":")
		bytes, err := swag.WriteJSON(m.DeployIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_lt\":null")
		first = false
	}

	// handle nullable field deploy_id_lte
	if m.DeployIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_lte\":")
		bytes, err := swag.WriteJSON(m.DeployIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_lte\":null")
		first = false
	}

	// handle nullable field deploy_id_not
	if m.DeployIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not\":")
		bytes, err := swag.WriteJSON(m.DeployIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not\":null")
		first = false
	}

	// handle nullable field deploy_id_not_contains
	if m.DeployIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.DeployIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_contains\":null")
		first = false
	}

	// handle nullable field deploy_id_not_ends_with
	if m.DeployIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DeployIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field deploy_id_not_in with omitempty
	if !swag.IsZero(m.DeployIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_in\":")
		bytes, err := swag.WriteJSON(m.DeployIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field deploy_id_not_starts_with
	if m.DeployIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeployIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field deploy_id_starts_with
	if m.DeployIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.DeployIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DeployIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"deploy_id_starts_with\":null")
		first = false
	}

	// handle nullable field description
	if m.Description != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":")
		bytes, err := swag.WriteJSON(m.Description)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Description_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description\":null")
		first = false
	}

	// handle nullable field description_contains
	if m.DescriptionContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_contains\":null")
		first = false
	}

	// handle nullable field description_ends_with
	if m.DescriptionEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_ends_with\":null")
		first = false
	}

	// handle nullable field description_gt
	if m.DescriptionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":")
		bytes, err := swag.WriteJSON(m.DescriptionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gt\":null")
		first = false
	}

	// handle nullable field description_gte
	if m.DescriptionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":")
		bytes, err := swag.WriteJSON(m.DescriptionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_gte\":null")
		first = false
	}

	// handle non nullable field description_in with omitempty
	if !swag.IsZero(m.DescriptionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_lt
	if m.DescriptionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":")
		bytes, err := swag.WriteJSON(m.DescriptionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lt\":null")
		first = false
	}

	// handle nullable field description_lte
	if m.DescriptionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":")
		bytes, err := swag.WriteJSON(m.DescriptionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_lte\":null")
		first = false
	}

	// handle nullable field description_not
	if m.DescriptionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":")
		bytes, err := swag.WriteJSON(m.DescriptionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not\":null")
		first = false
	}

	// handle nullable field description_not_contains
	if m.DescriptionNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_contains\":null")
		first = false
	}

	// handle nullable field description_not_ends_with
	if m.DescriptionNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_ends_with\":null")
		first = false
	}

	// handle non nullable field description_not_in with omitempty
	if !swag.IsZero(m.DescriptionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_in\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field description_not_starts_with
	if m.DescriptionNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_not_starts_with\":null")
		first = false
	}

	// handle nullable field description_starts_with
	if m.DescriptionStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":")
		bytes, err := swag.WriteJSON(m.DescriptionStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DescriptionStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"description_starts_with\":null")
		first = false
	}

	// handle nullable field endpoint
	if m.Endpoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint\":")
		bytes, err := swag.WriteJSON(m.Endpoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Endpoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint\":null")
		first = false
	}

	// handle nullable field endpoint_contains
	if m.EndpointContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_contains\":")
		bytes, err := swag.WriteJSON(m.EndpointContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_contains\":null")
		first = false
	}

	// handle nullable field endpoint_ends_with
	if m.EndpointEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_ends_with\":")
		bytes, err := swag.WriteJSON(m.EndpointEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_ends_with\":null")
		first = false
	}

	// handle nullable field endpoint_gt
	if m.EndpointGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_gt\":")
		bytes, err := swag.WriteJSON(m.EndpointGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_gt\":null")
		first = false
	}

	// handle nullable field endpoint_gte
	if m.EndpointGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_gte\":")
		bytes, err := swag.WriteJSON(m.EndpointGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_gte\":null")
		first = false
	}

	// handle non nullable field endpoint_in with omitempty
	if !swag.IsZero(m.EndpointIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_in\":")
		bytes, err := swag.WriteJSON(m.EndpointIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field endpoint_lt
	if m.EndpointLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_lt\":")
		bytes, err := swag.WriteJSON(m.EndpointLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_lt\":null")
		first = false
	}

	// handle nullable field endpoint_lte
	if m.EndpointLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_lte\":")
		bytes, err := swag.WriteJSON(m.EndpointLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_lte\":null")
		first = false
	}

	// handle nullable field endpoint_not
	if m.EndpointNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not\":")
		bytes, err := swag.WriteJSON(m.EndpointNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not\":null")
		first = false
	}

	// handle nullable field endpoint_not_contains
	if m.EndpointNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_contains\":")
		bytes, err := swag.WriteJSON(m.EndpointNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_contains\":null")
		first = false
	}

	// handle nullable field endpoint_not_ends_with
	if m.EndpointNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.EndpointNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_ends_with\":null")
		first = false
	}

	// handle non nullable field endpoint_not_in with omitempty
	if !swag.IsZero(m.EndpointNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_in\":")
		bytes, err := swag.WriteJSON(m.EndpointNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field endpoint_not_starts_with
	if m.EndpointNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.EndpointNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_not_starts_with\":null")
		first = false
	}

	// handle nullable field endpoint_starts_with
	if m.EndpointStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_starts_with\":")
		bytes, err := swag.WriteJSON(m.EndpointStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EndpointStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"endpoint_starts_with\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field failback_executions_every
	if m.FailbackExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_every\":")
		bytes, err := swag.WriteJSON(m.FailbackExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailbackExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_every\":null")
		first = false
	}

	// handle nullable field failback_executions_none
	if m.FailbackExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_none\":")
		bytes, err := swag.WriteJSON(m.FailbackExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailbackExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_none\":null")
		first = false
	}

	// handle nullable field failback_executions_some
	if m.FailbackExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_some\":")
		bytes, err := swag.WriteJSON(m.FailbackExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailbackExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failback_executions_some\":null")
		first = false
	}

	// handle nullable field failover_executions_every
	if m.FailoverExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_every\":null")
		first = false
	}

	// handle nullable field failover_executions_none
	if m.FailoverExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_none\":null")
		first = false
	}

	// handle nullable field failover_executions_some
	if m.FailoverExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":")
		bytes, err := swag.WriteJSON(m.FailoverExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_executions_some\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field permanent_failover_executions_every
	if m.PermanentFailoverExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_every\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_every\":null")
		first = false
	}

	// handle nullable field permanent_failover_executions_none
	if m.PermanentFailoverExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_none\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_none\":null")
		first = false
	}

	// handle nullable field permanent_failover_executions_some
	if m.PermanentFailoverExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_some\":")
		bytes, err := swag.WriteJSON(m.PermanentFailoverExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PermanentFailoverExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"permanent_failover_executions_some\":null")
		first = false
	}

	// handle nullable field replica_vms_every
	if m.ReplicaVmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_every\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_every\":null")
		first = false
	}

	// handle nullable field replica_vms_none
	if m.ReplicaVmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_none\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_none\":null")
		first = false
	}

	// handle nullable field replica_vms_some
	if m.ReplicaVmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_some\":")
		bytes, err := swag.WriteJSON(m.ReplicaVmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaVmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_vms_some\":null")
		first = false
	}

	// handle nullable field replication_plans_every
	if m.ReplicationPlansEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_every\":null")
		first = false
	}

	// handle nullable field replication_plans_none
	if m.ReplicationPlansNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_none\":null")
		first = false
	}

	// handle nullable field replication_plans_some
	if m.ReplicationPlansSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlansSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlansSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plans_some\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle non nullable field status_in with omitempty
	if !swag.IsZero(m.StatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_in\":")
		bytes, err := swag.WriteJSON(m.StatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field status_not
	if m.StatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":")
		bytes, err := swag.WriteJSON(m.StatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not\":null")
		first = false
	}

	// handle non nullable field status_not_in with omitempty
	if !swag.IsZero(m.StatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status_not_in\":")
		bytes, err := swag.WriteJSON(m.StatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field use_api_key
	if m.UseAPIKey != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"use_api_key\":")
		bytes, err := swag.WriteJSON(m.UseAPIKey)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UseAPIKey_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"use_api_key\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this external cloud tower where input
func (m *ExternalCloudTowerWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailbackExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailbackExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailbackExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermanentFailoverExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlansSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalCloudTowerWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailbackExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.FailbackExecutionsEvery) { // not required
		return nil
	}

	if m.FailbackExecutionsEvery != nil {
		if err := m.FailbackExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailbackExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.FailbackExecutionsNone) { // not required
		return nil
	}

	if m.FailbackExecutionsNone != nil {
		if err := m.FailbackExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailbackExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.FailbackExecutionsSome) { // not required
		return nil
	}

	if m.FailbackExecutionsSome != nil {
		if err := m.FailbackExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailoverExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsEvery) { // not required
		return nil
	}

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailoverExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsNone) { // not required
		return nil
	}

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateFailoverExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverExecutionsSome) { // not required
		return nil
	}

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validatePermanentFailoverExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionsEvery) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionsEvery != nil {
		if err := m.PermanentFailoverExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validatePermanentFailoverExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionsNone) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionsNone != nil {
		if err := m.PermanentFailoverExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validatePermanentFailoverExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.PermanentFailoverExecutionsSome) { // not required
		return nil
	}

	if m.PermanentFailoverExecutionsSome != nil {
		if err := m.PermanentFailoverExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicaVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsEvery) { // not required
		return nil
	}

	if m.ReplicaVmsEvery != nil {
		if err := m.ReplicaVmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicaVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsNone) { // not required
		return nil
	}

	if m.ReplicaVmsNone != nil {
		if err := m.ReplicaVmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicaVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaVmsSome) { // not required
		return nil
	}

	if m.ReplicaVmsSome != nil {
		if err := m.ReplicaVmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicationPlansEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansEvery) { // not required
		return nil
	}

	if m.ReplicationPlansEvery != nil {
		if err := m.ReplicationPlansEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicationPlansNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansNone) { // not required
		return nil
	}

	if m.ReplicationPlansNone != nil {
		if err := m.ReplicationPlansNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateReplicationPlansSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlansSome) { // not required
		return nil
	}

	if m.ReplicationPlansSome != nil {
		if err := m.ReplicationPlansSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	if m.StatusNot != nil {
		if err := m.StatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) validateUseAPIKey(formats strfmt.Registry) error {
	if swag.IsZero(m.UseAPIKey) { // not required
		return nil
	}

	if m.UseAPIKey != nil {
		if err := m.UseAPIKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("use_api_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("use_api_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this external cloud tower where input based on the context it is used
func (m *ExternalCloudTowerWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailbackExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailbackExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailbackExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermanentFailoverExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicaVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlansSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUseAPIKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailbackExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.FailbackExecutionsEvery != nil {
		if err := m.FailbackExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailbackExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.FailbackExecutionsNone != nil {
		if err := m.FailbackExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailbackExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.FailbackExecutionsSome != nil {
		if err := m.FailbackExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failback_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailoverExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsEvery != nil {
		if err := m.FailoverExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailoverExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsNone != nil {
		if err := m.FailoverExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateFailoverExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverExecutionsSome != nil {
		if err := m.FailoverExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidatePermanentFailoverExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionsEvery != nil {
		if err := m.PermanentFailoverExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidatePermanentFailoverExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionsNone != nil {
		if err := m.PermanentFailoverExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidatePermanentFailoverExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.PermanentFailoverExecutionsSome != nil {
		if err := m.PermanentFailoverExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permanent_failover_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permanent_failover_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicaVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsEvery != nil {
		if err := m.ReplicaVmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicaVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsNone != nil {
		if err := m.ReplicaVmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicaVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicaVmsSome != nil {
		if err := m.ReplicaVmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replica_vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replica_vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicationPlansEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansEvery != nil {
		if err := m.ReplicationPlansEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_every")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicationPlansNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansNone != nil {
		if err := m.ReplicationPlansNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_none")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateReplicationPlansSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlansSome != nil {
		if err := m.ReplicationPlansSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plans_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plans_some")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusNot != nil {
		if err := m.StatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ExternalCloudTowerWhereInput) contextValidateUseAPIKey(ctx context.Context, formats strfmt.Registry) error {

	if m.UseAPIKey != nil {
		if err := m.UseAPIKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("use_api_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("use_api_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalCloudTowerWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalCloudTowerWhereInput) UnmarshalBinary(b []byte) error {
	var res ExternalCloudTowerWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
