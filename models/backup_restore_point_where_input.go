// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupRestorePointWhereInput backup restore point where input
//
// swagger:model BackupRestorePointWhereInput
type BackupRestorePointWhereInput struct {

	// a n d
	AND []*BackupRestorePointWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupRestorePointWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupRestorePointWhereInput `json:"OR,omitempty"`

	// backup plan
	BackupPlan *BackupPlanWhereInput `json:"backup_plan,omitempty"`

	// backup restore executions every
	BackupRestoreExecutionsEvery *BackupRestoreExecutionWhereInput `json:"backup_restore_executions_every,omitempty"`

	// backup restore executions none
	BackupRestoreExecutionsNone *BackupRestoreExecutionWhereInput `json:"backup_restore_executions_none,omitempty"`

	// backup restore executions some
	BackupRestoreExecutionsSome *BackupRestoreExecutionWhereInput `json:"backup_restore_executions_some,omitempty"`

	// backup target execution
	BackupTargetExecution *BackupTargetExecutionWhereInput `json:"backup_target_execution,omitempty"`

	// cluster local id
	ClusterLocalID *string `json:"cluster_local_id,omitempty"`

	// cluster local id contains
	ClusterLocalIDContains *string `json:"cluster_local_id_contains,omitempty"`

	// cluster local id ends with
	ClusterLocalIDEndsWith *string `json:"cluster_local_id_ends_with,omitempty"`

	// cluster local id gt
	ClusterLocalIDGt *string `json:"cluster_local_id_gt,omitempty"`

	// cluster local id gte
	ClusterLocalIDGte *string `json:"cluster_local_id_gte,omitempty"`

	// cluster local id in
	ClusterLocalIDIn []string `json:"cluster_local_id_in,omitempty"`

	// cluster local id lt
	ClusterLocalIDLt *string `json:"cluster_local_id_lt,omitempty"`

	// cluster local id lte
	ClusterLocalIDLte *string `json:"cluster_local_id_lte,omitempty"`

	// cluster local id not
	ClusterLocalIDNot *string `json:"cluster_local_id_not,omitempty"`

	// cluster local id not contains
	ClusterLocalIDNotContains *string `json:"cluster_local_id_not_contains,omitempty"`

	// cluster local id not ends with
	ClusterLocalIDNotEndsWith *string `json:"cluster_local_id_not_ends_with,omitempty"`

	// cluster local id not in
	ClusterLocalIDNotIn []string `json:"cluster_local_id_not_in,omitempty"`

	// cluster local id not starts with
	ClusterLocalIDNotStartsWith *string `json:"cluster_local_id_not_starts_with,omitempty"`

	// cluster local id starts with
	ClusterLocalIDStartsWith *string `json:"cluster_local_id_starts_with,omitempty"`

	// compressed
	Compressed *bool `json:"compressed,omitempty"`

	// compressed not
	CompressedNot *bool `json:"compressed_not,omitempty"`

	// compression ratio
	CompressionRatio *float64 `json:"compression_ratio,omitempty"`

	// compression ratio gt
	CompressionRatioGt *float64 `json:"compression_ratio_gt,omitempty"`

	// compression ratio gte
	CompressionRatioGte *float64 `json:"compression_ratio_gte,omitempty"`

	// compression ratio in
	CompressionRatioIn []float64 `json:"compression_ratio_in,omitempty"`

	// compression ratio lt
	CompressionRatioLt *float64 `json:"compression_ratio_lt,omitempty"`

	// compression ratio lte
	CompressionRatioLte *float64 `json:"compression_ratio_lte,omitempty"`

	// compression ratio not
	CompressionRatioNot *float64 `json:"compression_ratio_not,omitempty"`

	// compression ratio not in
	CompressionRatioNotIn []float64 `json:"compression_ratio_not_in,omitempty"`

	// creation
	Creation *BackupRestorePointCreation `json:"creation,omitempty"`

	// creation in
	CreationIn []BackupRestorePointCreation `json:"creation_in,omitempty"`

	// creation not
	CreationNot *BackupRestorePointCreation `json:"creation_not,omitempty"`

	// creation not in
	CreationNotIn []BackupRestorePointCreation `json:"creation_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// logical size
	LogicalSize *int64 `json:"logical_size,omitempty"`

	// logical size gt
	LogicalSizeGt *int64 `json:"logical_size_gt,omitempty"`

	// logical size gte
	LogicalSizeGte *int64 `json:"logical_size_gte,omitempty"`

	// logical size in
	LogicalSizeIn []int64 `json:"logical_size_in,omitempty"`

	// logical size lt
	LogicalSizeLt *int64 `json:"logical_size_lt,omitempty"`

	// logical size lte
	LogicalSizeLte *int64 `json:"logical_size_lte,omitempty"`

	// logical size not
	LogicalSizeNot *int64 `json:"logical_size_not,omitempty"`

	// logical size not in
	LogicalSizeNotIn []int64 `json:"logical_size_not_in,omitempty"`

	// parent restore point
	ParentRestorePoint *string `json:"parent_restore_point,omitempty"`

	// parent restore point contains
	ParentRestorePointContains *string `json:"parent_restore_point_contains,omitempty"`

	// parent restore point ends with
	ParentRestorePointEndsWith *string `json:"parent_restore_point_ends_with,omitempty"`

	// parent restore point gt
	ParentRestorePointGt *string `json:"parent_restore_point_gt,omitempty"`

	// parent restore point gte
	ParentRestorePointGte *string `json:"parent_restore_point_gte,omitempty"`

	// parent restore point in
	ParentRestorePointIn []string `json:"parent_restore_point_in,omitempty"`

	// parent restore point lt
	ParentRestorePointLt *string `json:"parent_restore_point_lt,omitempty"`

	// parent restore point lte
	ParentRestorePointLte *string `json:"parent_restore_point_lte,omitempty"`

	// parent restore point not
	ParentRestorePointNot *string `json:"parent_restore_point_not,omitempty"`

	// parent restore point not contains
	ParentRestorePointNotContains *string `json:"parent_restore_point_not_contains,omitempty"`

	// parent restore point not ends with
	ParentRestorePointNotEndsWith *string `json:"parent_restore_point_not_ends_with,omitempty"`

	// parent restore point not in
	ParentRestorePointNotIn []string `json:"parent_restore_point_not_in,omitempty"`

	// parent restore point not starts with
	ParentRestorePointNotStartsWith *string `json:"parent_restore_point_not_starts_with,omitempty"`

	// parent restore point starts with
	ParentRestorePointStartsWith *string `json:"parent_restore_point_starts_with,omitempty"`

	// physical size
	PhysicalSize *int64 `json:"physical_size,omitempty"`

	// physical size gt
	PhysicalSizeGt *int64 `json:"physical_size_gt,omitempty"`

	// physical size gte
	PhysicalSizeGte *int64 `json:"physical_size_gte,omitempty"`

	// physical size in
	PhysicalSizeIn []int64 `json:"physical_size_in,omitempty"`

	// physical size lt
	PhysicalSizeLt *int64 `json:"physical_size_lt,omitempty"`

	// physical size lte
	PhysicalSizeLte *int64 `json:"physical_size_lte,omitempty"`

	// physical size not
	PhysicalSizeNot *int64 `json:"physical_size_not,omitempty"`

	// physical size not in
	PhysicalSizeNotIn []int64 `json:"physical_size_not_in,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// slice
	Slice *string `json:"slice,omitempty"`

	// slice contains
	SliceContains *string `json:"slice_contains,omitempty"`

	// slice ends with
	SliceEndsWith *string `json:"slice_ends_with,omitempty"`

	// slice gt
	SliceGt *string `json:"slice_gt,omitempty"`

	// slice gte
	SliceGte *string `json:"slice_gte,omitempty"`

	// slice in
	SliceIn []string `json:"slice_in,omitempty"`

	// slice lt
	SliceLt *string `json:"slice_lt,omitempty"`

	// slice lte
	SliceLte *string `json:"slice_lte,omitempty"`

	// slice not
	SliceNot *string `json:"slice_not,omitempty"`

	// slice not contains
	SliceNotContains *string `json:"slice_not_contains,omitempty"`

	// slice not ends with
	SliceNotEndsWith *string `json:"slice_not_ends_with,omitempty"`

	// slice not in
	SliceNotIn []string `json:"slice_not_in,omitempty"`

	// slice not starts with
	SliceNotStartsWith *string `json:"slice_not_starts_with,omitempty"`

	// slice starts with
	SliceStartsWith *string `json:"slice_starts_with,omitempty"`

	// snapshot consistent type
	SnapshotConsistentType *ConsistentType `json:"snapshot_consistent_type,omitempty"`

	// snapshot consistent type in
	SnapshotConsistentTypeIn []ConsistentType `json:"snapshot_consistent_type_in,omitempty"`

	// snapshot consistent type not
	SnapshotConsistentTypeNot *ConsistentType `json:"snapshot_consistent_type_not,omitempty"`

	// snapshot consistent type not in
	SnapshotConsistentTypeNotIn []ConsistentType `json:"snapshot_consistent_type_not_in,omitempty"`

	// type
	Type *BackupRestorePointType `json:"type,omitempty"`

	// type in
	TypeIn []BackupRestorePointType `json:"type_in,omitempty"`

	// type not
	TypeNot *BackupRestorePointType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupRestorePointType `json:"type_not_in,omitempty"`

	// valid capacity
	ValidCapacity *int64 `json:"valid_capacity,omitempty"`

	// valid capacity gt
	ValidCapacityGt *int64 `json:"valid_capacity_gt,omitempty"`

	// valid capacity gte
	ValidCapacityGte *int64 `json:"valid_capacity_gte,omitempty"`

	// valid capacity in
	ValidCapacityIn []int64 `json:"valid_capacity_in,omitempty"`

	// valid capacity lt
	ValidCapacityLt *int64 `json:"valid_capacity_lt,omitempty"`

	// valid capacity lte
	ValidCapacityLte *int64 `json:"valid_capacity_lte,omitempty"`

	// valid capacity not
	ValidCapacityNot *int64 `json:"valid_capacity_not,omitempty"`

	// valid capacity not in
	ValidCapacityNotIn []int64 `json:"valid_capacity_not_in,omitempty"`

	// valid size
	ValidSize *int64 `json:"valid_size,omitempty"`

	// valid size gt
	ValidSizeGt *int64 `json:"valid_size_gt,omitempty"`

	// valid size gte
	ValidSizeGte *int64 `json:"valid_size_gte,omitempty"`

	// valid size in
	ValidSizeIn []int64 `json:"valid_size_in,omitempty"`

	// valid size lt
	ValidSizeLt *int64 `json:"valid_size_lt,omitempty"`

	// valid size lte
	ValidSizeLte *int64 `json:"valid_size_lte,omitempty"`

	// valid size not
	ValidSizeNot *int64 `json:"valid_size_not,omitempty"`

	// valid size not in
	ValidSizeNotIn []int64 `json:"valid_size_not_in,omitempty"`

	// vm
	VM *VMWhereInput `json:"vm,omitempty"`

	// vm local id
	VMLocalID *string `json:"vm_local_id,omitempty"`

	// vm local id contains
	VMLocalIDContains *string `json:"vm_local_id_contains,omitempty"`

	// vm local id ends with
	VMLocalIDEndsWith *string `json:"vm_local_id_ends_with,omitempty"`

	// vm local id gt
	VMLocalIDGt *string `json:"vm_local_id_gt,omitempty"`

	// vm local id gte
	VMLocalIDGte *string `json:"vm_local_id_gte,omitempty"`

	// vm local id in
	VMLocalIDIn []string `json:"vm_local_id_in,omitempty"`

	// vm local id lt
	VMLocalIDLt *string `json:"vm_local_id_lt,omitempty"`

	// vm local id lte
	VMLocalIDLte *string `json:"vm_local_id_lte,omitempty"`

	// vm local id not
	VMLocalIDNot *string `json:"vm_local_id_not,omitempty"`

	// vm local id not contains
	VMLocalIDNotContains *string `json:"vm_local_id_not_contains,omitempty"`

	// vm local id not ends with
	VMLocalIDNotEndsWith *string `json:"vm_local_id_not_ends_with,omitempty"`

	// vm local id not in
	VMLocalIDNotIn []string `json:"vm_local_id_not_in,omitempty"`

	// vm local id not starts with
	VMLocalIDNotStartsWith *string `json:"vm_local_id_not_starts_with,omitempty"`

	// vm local id starts with
	VMLocalIDStartsWith *string `json:"vm_local_id_starts_with,omitempty"`

	// vm name
	VMName *string `json:"vm_name,omitempty"`

	// vm name contains
	VMNameContains *string `json:"vm_name_contains,omitempty"`

	// vm name ends with
	VMNameEndsWith *string `json:"vm_name_ends_with,omitempty"`

	// vm name gt
	VMNameGt *string `json:"vm_name_gt,omitempty"`

	// vm name gte
	VMNameGte *string `json:"vm_name_gte,omitempty"`

	// vm name in
	VMNameIn []string `json:"vm_name_in,omitempty"`

	// vm name lt
	VMNameLt *string `json:"vm_name_lt,omitempty"`

	// vm name lte
	VMNameLte *string `json:"vm_name_lte,omitempty"`

	// vm name not
	VMNameNot *string `json:"vm_name_not,omitempty"`

	// vm name not contains
	VMNameNotContains *string `json:"vm_name_not_contains,omitempty"`

	// vm name not ends with
	VMNameNotEndsWith *string `json:"vm_name_not_ends_with,omitempty"`

	// vm name not in
	VMNameNotIn []string `json:"vm_name_not_in,omitempty"`

	// vm name not starts with
	VMNameNotStartsWith *string `json:"vm_name_not_starts_with,omitempty"`

	// vm name starts with
	VMNameStartsWith *string `json:"vm_name_starts_with,omitempty"`

	MarshalOpts *BackupRestorePointWhereInputMarshalOpts `json:"-"`
}

type BackupRestorePointWhereInputMarshalOpts struct {
	BackupPlan_Explicit_Null_When_Empty bool

	BackupRestoreExecutionsEvery_Explicit_Null_When_Empty bool

	BackupRestoreExecutionsNone_Explicit_Null_When_Empty bool

	BackupRestoreExecutionsSome_Explicit_Null_When_Empty bool

	BackupTargetExecution_Explicit_Null_When_Empty bool

	ClusterLocalID_Explicit_Null_When_Empty bool

	ClusterLocalIDContains_Explicit_Null_When_Empty bool

	ClusterLocalIDEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDGt_Explicit_Null_When_Empty bool

	ClusterLocalIDGte_Explicit_Null_When_Empty bool

	ClusterLocalIDLt_Explicit_Null_When_Empty bool

	ClusterLocalIDLte_Explicit_Null_When_Empty bool

	ClusterLocalIDNot_Explicit_Null_When_Empty bool

	ClusterLocalIDNotContains_Explicit_Null_When_Empty bool

	ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	ClusterLocalIDStartsWith_Explicit_Null_When_Empty bool

	Compressed_Explicit_Null_When_Empty bool

	CompressedNot_Explicit_Null_When_Empty bool

	CompressionRatio_Explicit_Null_When_Empty bool

	CompressionRatioGt_Explicit_Null_When_Empty bool

	CompressionRatioGte_Explicit_Null_When_Empty bool

	CompressionRatioLt_Explicit_Null_When_Empty bool

	CompressionRatioLte_Explicit_Null_When_Empty bool

	CompressionRatioNot_Explicit_Null_When_Empty bool

	Creation_Explicit_Null_When_Empty bool

	CreationNot_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalCreatedAt_Explicit_Null_When_Empty bool

	LocalCreatedAtGt_Explicit_Null_When_Empty bool

	LocalCreatedAtGte_Explicit_Null_When_Empty bool

	LocalCreatedAtLt_Explicit_Null_When_Empty bool

	LocalCreatedAtLte_Explicit_Null_When_Empty bool

	LocalCreatedAtNot_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	LogicalSize_Explicit_Null_When_Empty bool

	LogicalSizeGt_Explicit_Null_When_Empty bool

	LogicalSizeGte_Explicit_Null_When_Empty bool

	LogicalSizeLt_Explicit_Null_When_Empty bool

	LogicalSizeLte_Explicit_Null_When_Empty bool

	LogicalSizeNot_Explicit_Null_When_Empty bool

	ParentRestorePoint_Explicit_Null_When_Empty bool

	ParentRestorePointContains_Explicit_Null_When_Empty bool

	ParentRestorePointEndsWith_Explicit_Null_When_Empty bool

	ParentRestorePointGt_Explicit_Null_When_Empty bool

	ParentRestorePointGte_Explicit_Null_When_Empty bool

	ParentRestorePointLt_Explicit_Null_When_Empty bool

	ParentRestorePointLte_Explicit_Null_When_Empty bool

	ParentRestorePointNot_Explicit_Null_When_Empty bool

	ParentRestorePointNotContains_Explicit_Null_When_Empty bool

	ParentRestorePointNotEndsWith_Explicit_Null_When_Empty bool

	ParentRestorePointNotStartsWith_Explicit_Null_When_Empty bool

	ParentRestorePointStartsWith_Explicit_Null_When_Empty bool

	PhysicalSize_Explicit_Null_When_Empty bool

	PhysicalSizeGt_Explicit_Null_When_Empty bool

	PhysicalSizeGte_Explicit_Null_When_Empty bool

	PhysicalSizeLt_Explicit_Null_When_Empty bool

	PhysicalSizeLte_Explicit_Null_When_Empty bool

	PhysicalSizeNot_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SizeGt_Explicit_Null_When_Empty bool

	SizeGte_Explicit_Null_When_Empty bool

	SizeLt_Explicit_Null_When_Empty bool

	SizeLte_Explicit_Null_When_Empty bool

	SizeNot_Explicit_Null_When_Empty bool

	Slice_Explicit_Null_When_Empty bool

	SliceContains_Explicit_Null_When_Empty bool

	SliceEndsWith_Explicit_Null_When_Empty bool

	SliceGt_Explicit_Null_When_Empty bool

	SliceGte_Explicit_Null_When_Empty bool

	SliceLt_Explicit_Null_When_Empty bool

	SliceLte_Explicit_Null_When_Empty bool

	SliceNot_Explicit_Null_When_Empty bool

	SliceNotContains_Explicit_Null_When_Empty bool

	SliceNotEndsWith_Explicit_Null_When_Empty bool

	SliceNotStartsWith_Explicit_Null_When_Empty bool

	SliceStartsWith_Explicit_Null_When_Empty bool

	SnapshotConsistentType_Explicit_Null_When_Empty bool

	SnapshotConsistentTypeNot_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	ValidCapacity_Explicit_Null_When_Empty bool

	ValidCapacityGt_Explicit_Null_When_Empty bool

	ValidCapacityGte_Explicit_Null_When_Empty bool

	ValidCapacityLt_Explicit_Null_When_Empty bool

	ValidCapacityLte_Explicit_Null_When_Empty bool

	ValidCapacityNot_Explicit_Null_When_Empty bool

	ValidSize_Explicit_Null_When_Empty bool

	ValidSizeGt_Explicit_Null_When_Empty bool

	ValidSizeGte_Explicit_Null_When_Empty bool

	ValidSizeLt_Explicit_Null_When_Empty bool

	ValidSizeLte_Explicit_Null_When_Empty bool

	ValidSizeNot_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool

	VMLocalID_Explicit_Null_When_Empty bool

	VMLocalIDContains_Explicit_Null_When_Empty bool

	VMLocalIDEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDGt_Explicit_Null_When_Empty bool

	VMLocalIDGte_Explicit_Null_When_Empty bool

	VMLocalIDLt_Explicit_Null_When_Empty bool

	VMLocalIDLte_Explicit_Null_When_Empty bool

	VMLocalIDNot_Explicit_Null_When_Empty bool

	VMLocalIDNotContains_Explicit_Null_When_Empty bool

	VMLocalIDNotEndsWith_Explicit_Null_When_Empty bool

	VMLocalIDNotStartsWith_Explicit_Null_When_Empty bool

	VMLocalIDStartsWith_Explicit_Null_When_Empty bool

	VMName_Explicit_Null_When_Empty bool

	VMNameContains_Explicit_Null_When_Empty bool

	VMNameEndsWith_Explicit_Null_When_Empty bool

	VMNameGt_Explicit_Null_When_Empty bool

	VMNameGte_Explicit_Null_When_Empty bool

	VMNameLt_Explicit_Null_When_Empty bool

	VMNameLte_Explicit_Null_When_Empty bool

	VMNameNot_Explicit_Null_When_Empty bool

	VMNameNotContains_Explicit_Null_When_Empty bool

	VMNameNotEndsWith_Explicit_Null_When_Empty bool

	VMNameNotStartsWith_Explicit_Null_When_Empty bool

	VMNameStartsWith_Explicit_Null_When_Empty bool
}

func (m BackupRestorePointWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field backup_plan
	if m.BackupPlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan\":")
		bytes, err := swag.WriteJSON(m.BackupPlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupPlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_plan\":null")
		first = false
	}

	// handle nullable field backup_restore_executions_every
	if m.BackupRestoreExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_every\":")
		bytes, err := swag.WriteJSON(m.BackupRestoreExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestoreExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_every\":null")
		first = false
	}

	// handle nullable field backup_restore_executions_none
	if m.BackupRestoreExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_none\":")
		bytes, err := swag.WriteJSON(m.BackupRestoreExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestoreExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_none\":null")
		first = false
	}

	// handle nullable field backup_restore_executions_some
	if m.BackupRestoreExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_some\":")
		bytes, err := swag.WriteJSON(m.BackupRestoreExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupRestoreExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_restore_executions_some\":null")
		first = false
	}

	// handle nullable field backup_target_execution
	if m.BackupTargetExecution != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_target_execution\":")
		bytes, err := swag.WriteJSON(m.BackupTargetExecution)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BackupTargetExecution_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"backup_target_execution\":null")
		first = false
	}

	// handle nullable field cluster_local_id
	if m.ClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id\":null")
		first = false
	}

	// handle nullable field cluster_local_id_contains
	if m.ClusterLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_ends_with
	if m.ClusterLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gt
	if m.ClusterLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_gte
	if m.ClusterLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_gte\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_in with omitempty
	if swag.IsZero(m.ClusterLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_lt
	if m.ClusterLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lt\":null")
		first = false
	}

	// handle nullable field cluster_local_id_lte
	if m.ClusterLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_lte\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not
	if m.ClusterLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_contains
	if m.ClusterLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field cluster_local_id_not_ends_with
	if m.ClusterLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field cluster_local_id_not_in with omitempty
	if swag.IsZero(m.ClusterLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster_local_id_not_starts_with
	if m.ClusterLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field cluster_local_id_starts_with
	if m.ClusterLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.ClusterLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field compressed
	if m.Compressed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compressed\":")
		bytes, err := swag.WriteJSON(m.Compressed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Compressed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compressed\":null")
		first = false
	}

	// handle nullable field compressed_not
	if m.CompressedNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compressed_not\":")
		bytes, err := swag.WriteJSON(m.CompressedNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressedNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compressed_not\":null")
		first = false
	}

	// handle nullable field compression_ratio
	if m.CompressionRatio != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":")
		bytes, err := swag.WriteJSON(m.CompressionRatio)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatio_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio\":null")
		first = false
	}

	// handle nullable field compression_ratio_gt
	if m.CompressionRatioGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gt\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gt\":null")
		first = false
	}

	// handle nullable field compression_ratio_gte
	if m.CompressionRatioGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gte\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_gte\":null")
		first = false
	}

	// handle non nullable field compression_ratio_in with omitempty
	if swag.IsZero(m.CompressionRatioIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_in\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field compression_ratio_lt
	if m.CompressionRatioLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lt\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lt\":null")
		first = false
	}

	// handle nullable field compression_ratio_lte
	if m.CompressionRatioLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lte\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_lte\":null")
		first = false
	}

	// handle nullable field compression_ratio_not
	if m.CompressionRatioNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CompressionRatioNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not\":null")
		first = false
	}

	// handle non nullable field compression_ratio_not_in with omitempty
	if swag.IsZero(m.CompressionRatioNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"compression_ratio_not_in\":")
		bytes, err := swag.WriteJSON(m.CompressionRatioNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field creation
	if m.Creation != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation\":")
		bytes, err := swag.WriteJSON(m.Creation)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Creation_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation\":null")
		first = false
	}

	// handle non nullable field creation_in with omitempty
	if swag.IsZero(m.CreationIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_in\":")
		bytes, err := swag.WriteJSON(m.CreationIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field creation_not
	if m.CreationNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not\":")
		bytes, err := swag.WriteJSON(m.CreationNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreationNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not\":null")
		first = false
	}

	// handle non nullable field creation_not_in with omitempty
	if swag.IsZero(m.CreationNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"creation_not_in\":")
		bytes, err := swag.WriteJSON(m.CreationNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_created_at
	if m.LocalCreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at\":null")
		first = false
	}

	// handle nullable field local_created_at_gt
	if m.LocalCreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gt\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gt\":null")
		first = false
	}

	// handle nullable field local_created_at_gte
	if m.LocalCreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gte\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_gte\":null")
		first = false
	}

	// handle non nullable field local_created_at_in with omitempty
	if swag.IsZero(m.LocalCreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_in\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_created_at_lt
	if m.LocalCreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lt\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lt\":null")
		first = false
	}

	// handle nullable field local_created_at_lte
	if m.LocalCreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lte\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_lte\":null")
		first = false
	}

	// handle nullable field local_created_at_not
	if m.LocalCreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalCreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not\":null")
		first = false
	}

	// handle non nullable field local_created_at_not_in with omitempty
	if swag.IsZero(m.LocalCreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_created_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalCreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field logical_size
	if m.LogicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":")
		bytes, err := swag.WriteJSON(m.LogicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size\":null")
		first = false
	}

	// handle nullable field logical_size_gt
	if m.LogicalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gt\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gt\":null")
		first = false
	}

	// handle nullable field logical_size_gte
	if m.LogicalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gte\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_gte\":null")
		first = false
	}

	// handle non nullable field logical_size_in with omitempty
	if swag.IsZero(m.LogicalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_in\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field logical_size_lt
	if m.LogicalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lt\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lt\":null")
		first = false
	}

	// handle nullable field logical_size_lte
	if m.LogicalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lte\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_lte\":null")
		first = false
	}

	// handle nullable field logical_size_not
	if m.LogicalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LogicalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not\":null")
		first = false
	}

	// handle non nullable field logical_size_not_in with omitempty
	if swag.IsZero(m.LogicalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"logical_size_not_in\":")
		bytes, err := swag.WriteJSON(m.LogicalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_restore_point
	if m.ParentRestorePoint != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePoint)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePoint_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point\":null")
		first = false
	}

	// handle nullable field parent_restore_point_contains
	if m.ParentRestorePointContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_contains\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_contains\":null")
		first = false
	}

	// handle nullable field parent_restore_point_ends_with
	if m.ParentRestorePointEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_ends_with\":null")
		first = false
	}

	// handle nullable field parent_restore_point_gt
	if m.ParentRestorePointGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gt\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gt\":null")
		first = false
	}

	// handle nullable field parent_restore_point_gte
	if m.ParentRestorePointGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gte\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_gte\":null")
		first = false
	}

	// handle non nullable field parent_restore_point_in with omitempty
	if swag.IsZero(m.ParentRestorePointIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_in\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_restore_point_lt
	if m.ParentRestorePointLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lt\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lt\":null")
		first = false
	}

	// handle nullable field parent_restore_point_lte
	if m.ParentRestorePointLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lte\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_lte\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not
	if m.ParentRestorePointNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not_contains
	if m.ParentRestorePointNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_contains\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_contains\":null")
		first = false
	}

	// handle nullable field parent_restore_point_not_ends_with
	if m.ParentRestorePointNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_ends_with\":null")
		first = false
	}

	// handle non nullable field parent_restore_point_not_in with omitempty
	if swag.IsZero(m.ParentRestorePointNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_in\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field parent_restore_point_not_starts_with
	if m.ParentRestorePointNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_not_starts_with\":null")
		first = false
	}

	// handle nullable field parent_restore_point_starts_with
	if m.ParentRestorePointStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_starts_with\":")
		bytes, err := swag.WriteJSON(m.ParentRestorePointStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ParentRestorePointStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"parent_restore_point_starts_with\":null")
		first = false
	}

	// handle nullable field physical_size
	if m.PhysicalSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":")
		bytes, err := swag.WriteJSON(m.PhysicalSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size\":null")
		first = false
	}

	// handle nullable field physical_size_gt
	if m.PhysicalSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gt\":null")
		first = false
	}

	// handle nullable field physical_size_gte
	if m.PhysicalSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_gte\":null")
		first = false
	}

	// handle non nullable field physical_size_in with omitempty
	if swag.IsZero(m.PhysicalSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field physical_size_lt
	if m.PhysicalSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lt\":null")
		first = false
	}

	// handle nullable field physical_size_lte
	if m.PhysicalSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_lte\":null")
		first = false
	}

	// handle nullable field physical_size_not
	if m.PhysicalSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not\":null")
		first = false
	}

	// handle non nullable field physical_size_not_in with omitempty
	if swag.IsZero(m.PhysicalSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_size_not_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_gt
	if m.SizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":")
		bytes, err := swag.WriteJSON(m.SizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":null")
		first = false
	}

	// handle nullable field size_gte
	if m.SizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":")
		bytes, err := swag.WriteJSON(m.SizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":null")
		first = false
	}

	// handle non nullable field size_in with omitempty
	if swag.IsZero(m.SizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_in\":")
		bytes, err := swag.WriteJSON(m.SizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size_lt
	if m.SizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":")
		bytes, err := swag.WriteJSON(m.SizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":null")
		first = false
	}

	// handle nullable field size_lte
	if m.SizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":")
		bytes, err := swag.WriteJSON(m.SizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":null")
		first = false
	}

	// handle nullable field size_not
	if m.SizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":")
		bytes, err := swag.WriteJSON(m.SizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":null")
		first = false
	}

	// handle non nullable field size_not_in with omitempty
	if swag.IsZero(m.SizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not_in\":")
		bytes, err := swag.WriteJSON(m.SizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice
	if m.Slice != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice\":")
		bytes, err := swag.WriteJSON(m.Slice)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Slice_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice\":null")
		first = false
	}

	// handle nullable field slice_contains
	if m.SliceContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_contains\":")
		bytes, err := swag.WriteJSON(m.SliceContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_contains\":null")
		first = false
	}

	// handle nullable field slice_ends_with
	if m.SliceEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_ends_with\":")
		bytes, err := swag.WriteJSON(m.SliceEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_ends_with\":null")
		first = false
	}

	// handle nullable field slice_gt
	if m.SliceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gt\":")
		bytes, err := swag.WriteJSON(m.SliceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gt\":null")
		first = false
	}

	// handle nullable field slice_gte
	if m.SliceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gte\":")
		bytes, err := swag.WriteJSON(m.SliceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_gte\":null")
		first = false
	}

	// handle non nullable field slice_in with omitempty
	if swag.IsZero(m.SliceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_in\":")
		bytes, err := swag.WriteJSON(m.SliceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice_lt
	if m.SliceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lt\":")
		bytes, err := swag.WriteJSON(m.SliceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lt\":null")
		first = false
	}

	// handle nullable field slice_lte
	if m.SliceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lte\":")
		bytes, err := swag.WriteJSON(m.SliceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_lte\":null")
		first = false
	}

	// handle nullable field slice_not
	if m.SliceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not\":")
		bytes, err := swag.WriteJSON(m.SliceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not\":null")
		first = false
	}

	// handle nullable field slice_not_contains
	if m.SliceNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_contains\":")
		bytes, err := swag.WriteJSON(m.SliceNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_contains\":null")
		first = false
	}

	// handle nullable field slice_not_ends_with
	if m.SliceNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SliceNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_ends_with\":null")
		first = false
	}

	// handle non nullable field slice_not_in with omitempty
	if swag.IsZero(m.SliceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_in\":")
		bytes, err := swag.WriteJSON(m.SliceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field slice_not_starts_with
	if m.SliceNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SliceNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_not_starts_with\":null")
		first = false
	}

	// handle nullable field slice_starts_with
	if m.SliceStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_starts_with\":")
		bytes, err := swag.WriteJSON(m.SliceStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SliceStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"slice_starts_with\":null")
		first = false
	}

	// handle nullable field snapshot_consistent_type
	if m.SnapshotConsistentType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_in with omitempty
	if swag.IsZero(m.SnapshotConsistentTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field snapshot_consistent_type_not
	if m.SnapshotConsistentTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SnapshotConsistentTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not\":null")
		first = false
	}

	// handle non nullable field snapshot_consistent_type_not_in with omitempty
	if swag.IsZero(m.SnapshotConsistentTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"snapshot_consistent_type_not_in\":")
		bytes, err := swag.WriteJSON(m.SnapshotConsistentTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_capacity
	if m.ValidCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity\":")
		bytes, err := swag.WriteJSON(m.ValidCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity\":null")
		first = false
	}

	// handle nullable field valid_capacity_gt
	if m.ValidCapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_gt\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_gt\":null")
		first = false
	}

	// handle nullable field valid_capacity_gte
	if m.ValidCapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_gte\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_gte\":null")
		first = false
	}

	// handle non nullable field valid_capacity_in with omitempty
	if swag.IsZero(m.ValidCapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_in\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_capacity_lt
	if m.ValidCapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_lt\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_lt\":null")
		first = false
	}

	// handle nullable field valid_capacity_lte
	if m.ValidCapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_lte\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_lte\":null")
		first = false
	}

	// handle nullable field valid_capacity_not
	if m.ValidCapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_not\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidCapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_not\":null")
		first = false
	}

	// handle non nullable field valid_capacity_not_in with omitempty
	if swag.IsZero(m.ValidCapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.ValidCapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size
	if m.ValidSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size\":")
		bytes, err := swag.WriteJSON(m.ValidSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size\":null")
		first = false
	}

	// handle nullable field valid_size_gt
	if m.ValidSizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_gt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_gt\":null")
		first = false
	}

	// handle nullable field valid_size_gte
	if m.ValidSizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_gte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_gte\":null")
		first = false
	}

	// handle non nullable field valid_size_in with omitempty
	if swag.IsZero(m.ValidSizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field valid_size_lt
	if m.ValidSizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_lt\":")
		bytes, err := swag.WriteJSON(m.ValidSizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_lt\":null")
		first = false
	}

	// handle nullable field valid_size_lte
	if m.ValidSizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_lte\":")
		bytes, err := swag.WriteJSON(m.ValidSizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_lte\":null")
		first = false
	}

	// handle nullable field valid_size_not
	if m.ValidSizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_not\":")
		bytes, err := swag.WriteJSON(m.ValidSizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ValidSizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_not\":null")
		first = false
	}

	// handle non nullable field valid_size_not_in with omitempty
	if swag.IsZero(m.ValidSizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"valid_size_not_in\":")
		bytes, err := swag.WriteJSON(m.ValidSizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	// handle nullable field vm_local_id
	if m.VMLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":")
		bytes, err := swag.WriteJSON(m.VMLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id\":null")
		first = false
	}

	// handle nullable field vm_local_id_contains
	if m.VMLocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_ends_with
	if m.VMLocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_ends_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_gt
	if m.VMLocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gt\":null")
		first = false
	}

	// handle nullable field vm_local_id_gte
	if m.VMLocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_gte\":null")
		first = false
	}

	// handle non nullable field vm_local_id_in with omitempty
	if swag.IsZero(m.VMLocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_lt
	if m.VMLocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lt\":null")
		first = false
	}

	// handle nullable field vm_local_id_lte
	if m.VMLocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_lte\":null")
		first = false
	}

	// handle nullable field vm_local_id_not
	if m.VMLocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_contains
	if m.VMLocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_contains\":null")
		first = false
	}

	// handle nullable field vm_local_id_not_ends_with
	if m.VMLocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_local_id_not_in with omitempty
	if swag.IsZero(m.VMLocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_local_id_not_starts_with
	if m.VMLocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_local_id_starts_with
	if m.VMLocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMLocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMLocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_local_id_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name
	if m.VMName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":")
		bytes, err := swag.WriteJSON(m.VMName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name\":null")
		first = false
	}

	// handle nullable field vm_name_contains
	if m.VMNameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_contains\":null")
		first = false
	}

	// handle nullable field vm_name_ends_with
	if m.VMNameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_ends_with\":null")
		first = false
	}

	// handle nullable field vm_name_gt
	if m.VMNameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":")
		bytes, err := swag.WriteJSON(m.VMNameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gt\":null")
		first = false
	}

	// handle nullable field vm_name_gte
	if m.VMNameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":")
		bytes, err := swag.WriteJSON(m.VMNameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_gte\":null")
		first = false
	}

	// handle non nullable field vm_name_in with omitempty
	if swag.IsZero(m.VMNameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_in\":")
		bytes, err := swag.WriteJSON(m.VMNameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_lt
	if m.VMNameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":")
		bytes, err := swag.WriteJSON(m.VMNameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lt\":null")
		first = false
	}

	// handle nullable field vm_name_lte
	if m.VMNameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":")
		bytes, err := swag.WriteJSON(m.VMNameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_lte\":null")
		first = false
	}

	// handle nullable field vm_name_not
	if m.VMNameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":")
		bytes, err := swag.WriteJSON(m.VMNameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not\":null")
		first = false
	}

	// handle nullable field vm_name_not_contains
	if m.VMNameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":")
		bytes, err := swag.WriteJSON(m.VMNameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_contains\":null")
		first = false
	}

	// handle nullable field vm_name_not_ends_with
	if m.VMNameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field vm_name_not_in with omitempty
	if swag.IsZero(m.VMNameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_in\":")
		bytes, err := swag.WriteJSON(m.VMNameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field vm_name_not_starts_with
	if m.VMNameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_not_starts_with\":null")
		first = false
	}

	// handle nullable field vm_name_starts_with
	if m.VMNameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":")
		bytes, err := swag.WriteJSON(m.VMNameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VMNameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm_name_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup restore point where input
func (m *BackupRestorePointWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestoreExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestoreExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestoreExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupTargetExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotConsistentTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateBackupPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlan) { // not required
		return nil
	}

	if m.BackupPlan != nil {
		if err := m.BackupPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateBackupRestoreExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestoreExecutionsEvery) { // not required
		return nil
	}

	if m.BackupRestoreExecutionsEvery != nil {
		if err := m.BackupRestoreExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateBackupRestoreExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestoreExecutionsNone) { // not required
		return nil
	}

	if m.BackupRestoreExecutionsNone != nil {
		if err := m.BackupRestoreExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateBackupRestoreExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestoreExecutionsSome) { // not required
		return nil
	}

	if m.BackupRestoreExecutionsSome != nil {
		if err := m.BackupRestoreExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateBackupTargetExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupTargetExecution) { // not required
		return nil
	}

	if m.BackupTargetExecution != nil {
		if err := m.BackupTargetExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_target_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_target_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateCreation(formats strfmt.Registry) error {
	if swag.IsZero(m.Creation) { // not required
		return nil
	}

	if m.Creation != nil {
		if err := m.Creation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateCreationIn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationIn) { // not required
		return nil
	}

	for i := 0; i < len(m.CreationIn); i++ {

		if err := m.CreationIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateCreationNot(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationNot) { // not required
		return nil
	}

	if m.CreationNot != nil {
		if err := m.CreationNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateCreationNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.CreationNotIn); i++ {

		if err := m.CreationNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateSnapshotConsistentType(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentType) { // not required
		return nil
	}

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateSnapshotConsistentTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateSnapshotConsistentTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNot) { // not required
		return nil
	}

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateSnapshotConsistentTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotConsistentTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup restore point where input based on the context it is used
func (m *BackupRestorePointWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestoreExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestoreExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestoreExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupTargetExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotConsistentTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateBackupPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupPlan != nil {
		if err := m.BackupPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_plan")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateBackupRestoreExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestoreExecutionsEvery != nil {
		if err := m.BackupRestoreExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateBackupRestoreExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestoreExecutionsNone != nil {
		if err := m.BackupRestoreExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateBackupRestoreExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRestoreExecutionsSome != nil {
		if err := m.BackupRestoreExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_restore_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_restore_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateBackupTargetExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupTargetExecution != nil {
		if err := m.BackupTargetExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_target_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup_target_execution")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateCreation(ctx context.Context, formats strfmt.Registry) error {

	if m.Creation != nil {
		if err := m.Creation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateCreationIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreationIn); i++ {

		if err := m.CreationIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateCreationNot(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationNot != nil {
		if err := m.CreationNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateCreationNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreationNotIn); i++ {

		if err := m.CreationNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateSnapshotConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentType != nil {
		if err := m.SnapshotConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateSnapshotConsistentTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeIn); i++ {

		if err := m.SnapshotConsistentTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateSnapshotConsistentTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotConsistentTypeNot != nil {
		if err := m.SnapshotConsistentTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateSnapshotConsistentTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SnapshotConsistentTypeNotIn); i++ {

		if err := m.SnapshotConsistentTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot_consistent_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupRestorePointWhereInput) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRestorePointWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRestorePointWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupRestorePointWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
