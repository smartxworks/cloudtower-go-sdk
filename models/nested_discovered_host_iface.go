// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedDiscoveredHostIface nested discovered host iface
//
// swagger:model NestedDiscoveredHostIface
type NestedDiscoveredHostIface struct {

	// ipv4
	IPV4 *string `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *string `json:"ipv6,omitempty"`

	// mac address
	// Required: true
	MacAddress *string `json:"mac_address"`

	// mtu
	// Required: true
	Mtu *int32 `json:"mtu"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pci slot name
	PciSlotName *string `json:"pci_slot_name,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// speed
	Speed *float64 `json:"speed,omitempty"`

	// up
	// Required: true
	Up *bool `json:"up"`

	MarshalOpts *NestedDiscoveredHostIfaceMarshalOpts `json:"-"`
}

type NestedDiscoveredHostIfaceMarshalOpts struct {
	IPV4_Explicit_Null_When_Empty bool

	IPV6_Explicit_Null_When_Empty bool

	MacAddress_Explicit_Null_When_Empty bool

	Mtu_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	PciSlotName_Explicit_Null_When_Empty bool

	RdmaEnabled_Explicit_Null_When_Empty bool

	Speed_Explicit_Null_When_Empty bool

	Up_Explicit_Null_When_Empty bool
}

func (m NestedDiscoveredHostIface) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field ipv4
	if m.IPV4 != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipv4\":")
		bytes, err := swag.WriteJSON(m.IPV4)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPV4_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipv4\":null")
		first = false
	}

	// handle nullable field ipv6
	if m.IPV6 != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipv6\":")
		bytes, err := swag.WriteJSON(m.IPV6)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPV6_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ipv6\":null")
		first = false
	}

	// handle nullable field mac_address
	if m.MacAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":")
		bytes, err := swag.WriteJSON(m.MacAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MacAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mac_address\":null")
		first = false
	}

	// handle nullable field mtu
	if m.Mtu != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":")
		bytes, err := swag.WriteJSON(m.Mtu)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mtu_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mtu\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field pci_slot_name
	if m.PciSlotName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pci_slot_name\":")
		bytes, err := swag.WriteJSON(m.PciSlotName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PciSlotName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pci_slot_name\":null")
		first = false
	}

	// handle nullable field rdma_enabled
	if m.RdmaEnabled != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":")
		bytes, err := swag.WriteJSON(m.RdmaEnabled)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RdmaEnabled_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"rdma_enabled\":null")
		first = false
	}

	// handle nullable field speed
	if m.Speed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed\":")
		bytes, err := swag.WriteJSON(m.Speed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Speed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"speed\":null")
		first = false
	}

	// handle nullable field up
	if m.Up != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up\":")
		bytes, err := swag.WriteJSON(m.Up)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Up_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"up\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested discovered host iface
func (m *NestedDiscoveredHostIface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedDiscoveredHostIface) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.Required("mac_address", "body", m.MacAddress); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateMtu(formats strfmt.Registry) error {

	if err := validate.Required("mtu", "body", m.Mtu); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateUp(formats strfmt.Registry) error {

	if err := validate.Required("up", "body", m.Up); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested discovered host iface based on context it is used
func (m *NestedDiscoveredHostIface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedDiscoveredHostIface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedDiscoveredHostIface) UnmarshalBinary(b []byte) error {
	var res NestedDiscoveredHostIface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
