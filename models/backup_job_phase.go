// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupJobPhase backup job phase
//
// swagger:model BackupJobPhase
type BackupJobPhase string

func NewBackupJobPhase(value BackupJobPhase) *BackupJobPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupJobPhase.
func (m BackupJobPhase) Pointer() *BackupJobPhase {
	return &m
}

const (

	// BackupJobPhaseABORTED captures enum value "ABORTED"
	BackupJobPhaseABORTED BackupJobPhase = "ABORTED"

	// BackupJobPhaseABORTING captures enum value "ABORTING"
	BackupJobPhaseABORTING BackupJobPhase = "ABORTING"

	// BackupJobPhaseFINALIZING captures enum value "FINALIZING"
	BackupJobPhaseFINALIZING BackupJobPhase = "FINALIZING"

	// BackupJobPhaseINITIALIZING captures enum value "INITIALIZING"
	BackupJobPhaseINITIALIZING BackupJobPhase = "INITIALIZING"

	// BackupJobPhasePAUSED captures enum value "PAUSED"
	BackupJobPhasePAUSED BackupJobPhase = "PAUSED"

	// BackupJobPhaseRUNNING captures enum value "RUNNING"
	BackupJobPhaseRUNNING BackupJobPhase = "RUNNING"

	// BackupJobPhaseSKIPPED captures enum value "SKIPPED"
	BackupJobPhaseSKIPPED BackupJobPhase = "SKIPPED"

	// BackupJobPhaseSUCCESS captures enum value "SUCCESS"
	BackupJobPhaseSUCCESS BackupJobPhase = "SUCCESS"
)

// for schema
var backupJobPhaseEnum []interface{}

func init() {
	var res []BackupJobPhase
	if err := json.Unmarshal([]byte(`["ABORTED","ABORTING","FINALIZING","INITIALIZING","PAUSED","RUNNING","SKIPPED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupJobPhaseEnum = append(backupJobPhaseEnum, v)
	}
}

func (m BackupJobPhase) validateBackupJobPhaseEnum(path, location string, value BackupJobPhase) error {
	if err := validate.EnumCase(path, location, value, backupJobPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup job phase
func (m BackupJobPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupJobPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup job phase based on context it is used
func (m BackupJobPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
