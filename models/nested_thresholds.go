// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NestedThresholds nested thresholds
//
// swagger:model NestedThresholds
type NestedThresholds struct {

	// quantile
	Quantile *int32 `json:"quantile,omitempty"`

	// severity
	Severity *SeverityEnum `json:"severity,omitempty"`

	// value
	Value *float64 `json:"value,omitempty"`

	MarshalOpts *NestedThresholdsMarshalOpts `json:"-"`
}

type NestedThresholdsMarshalOpts struct {
	Quantile_Explicit_Null_When_Empty bool

	Severity_Explicit_Null_When_Empty bool

	Value_Explicit_Null_When_Empty bool
}

func (m NestedThresholds) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field quantile
	if m.Quantile != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"quantile\":")
		bytes, err := swag.WriteJSON(m.Quantile)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Quantile_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"quantile\":null")
		first = false
	}

	// handle nullable field severity
	if m.Severity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"severity\":")
		bytes, err := swag.WriteJSON(m.Severity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Severity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"severity\":null")
		first = false
	}

	// handle nullable field value
	if m.Value != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":")
		bytes, err := swag.WriteJSON(m.Value)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Value_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"value\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested thresholds
func (m *NestedThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedThresholds) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if m.Severity != nil {
		if err := m.Severity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested thresholds based on the context it is used
func (m *NestedThresholds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedThresholds) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.Severity != nil {
		if err := m.Severity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedThresholds) UnmarshalBinary(b []byte) error {
	var res NestedThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
