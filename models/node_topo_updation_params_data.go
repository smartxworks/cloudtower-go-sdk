// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeTopoUpdationParamsData node topo updation params data
//
// swagger:model NodeTopoUpdationParamsData
type NodeTopoUpdationParamsData struct {

	// brick topo id
	BrickTopoID *string `json:"brick_topo_id,omitempty"`

	// cluster topo id
	ClusterTopoID *string `json:"cluster_topo_id,omitempty"`

	// position
	Position *Position `json:"position,omitempty"`

	MarshalOpts *NodeTopoUpdationParamsDataMarshalOpts `json:"-"`
}

type NodeTopoUpdationParamsDataMarshalOpts struct {
	BrickTopoID_Explicit_Null_When_Empty bool

	ClusterTopoID_Explicit_Null_When_Empty bool

	Position_Explicit_Null_When_Empty bool
}

func (m NodeTopoUpdationParamsData) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field brick_topo_id
	if m.BrickTopoID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"brick_topo_id\":")
		bytes, err := swag.WriteJSON(m.BrickTopoID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.BrickTopoID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"brick_topo_id\":null")
		first = false
	}

	// handle nullable field cluster_topo_id
	if m.ClusterTopoID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo_id\":")
		bytes, err := swag.WriteJSON(m.ClusterTopoID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClusterTopoID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster_topo_id\":null")
		first = false
	}

	// handle nullable field position
	if m.Position != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":")
		bytes, err := swag.WriteJSON(m.Position)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Position_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"position\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this node topo updation params data
func (m *NodeTopoUpdationParamsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsData) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node topo updation params data based on the context it is used
func (m *NodeTopoUpdationParamsData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsData) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeTopoUpdationParamsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeTopoUpdationParamsData) UnmarshalBinary(b []byte) error {
	var res NodeTopoUpdationParamsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
