// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedFrozenVlan nested frozen vlan
//
// swagger:model NestedFrozenVlan
type NestedFrozenVlan struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// network ids
	NetworkIds []string `json:"network_ids,omitempty"`

	// vds ovs
	// Required: true
	VdsOvs *string `json:"vds_ovs"`

	// vlan id
	// Required: true
	VlanID *int32 `json:"vlan_id"`

	// vlan local id
	// Required: true
	VlanLocalID *string `json:"vlan_local_id"`
}

// Validate validates this nested frozen vlan
func (m *NestedFrozenVlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsOvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanLocalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedFrozenVlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenVlan) validateVdsOvs(formats strfmt.Registry) error {

	if err := validate.Required("vds_ovs", "body", m.VdsOvs); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenVlan) validateVlanID(formats strfmt.Registry) error {

	if err := validate.Required("vlan_id", "body", m.VlanID); err != nil {
		return err
	}

	return nil
}

func (m *NestedFrozenVlan) validateVlanLocalID(formats strfmt.Registry) error {

	if err := validate.Required("vlan_local_id", "body", m.VlanLocalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested frozen vlan based on context it is used
func (m *NestedFrozenVlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedFrozenVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedFrozenVlan) UnmarshalBinary(b []byte) error {
	var res NestedFrozenVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
