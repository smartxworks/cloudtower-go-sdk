// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiskWhereInput disk where input
//
// swagger:model DiskWhereInput
type DiskWhereInput struct {

	// a n d
	AND []*DiskWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*DiskWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*DiskWhereInput `json:"OR,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// firmware
	Firmware *string `json:"firmware,omitempty"`

	// firmware contains
	FirmwareContains *string `json:"firmware_contains,omitempty"`

	// firmware ends with
	FirmwareEndsWith *string `json:"firmware_ends_with,omitempty"`

	// firmware gt
	FirmwareGt *string `json:"firmware_gt,omitempty"`

	// firmware gte
	FirmwareGte *string `json:"firmware_gte,omitempty"`

	// firmware in
	FirmwareIn []string `json:"firmware_in,omitempty"`

	// firmware lt
	FirmwareLt *string `json:"firmware_lt,omitempty"`

	// firmware lte
	FirmwareLte *string `json:"firmware_lte,omitempty"`

	// firmware not
	FirmwareNot *string `json:"firmware_not,omitempty"`

	// firmware not contains
	FirmwareNotContains *string `json:"firmware_not_contains,omitempty"`

	// firmware not ends with
	FirmwareNotEndsWith *string `json:"firmware_not_ends_with,omitempty"`

	// firmware not in
	FirmwareNotIn []string `json:"firmware_not_in,omitempty"`

	// firmware not starts with
	FirmwareNotStartsWith *string `json:"firmware_not_starts_with,omitempty"`

	// firmware starts with
	FirmwareStartsWith *string `json:"firmware_starts_with,omitempty"`

	// function
	Function *DiskFunction `json:"function,omitempty"`

	// function in
	FunctionIn []DiskFunction `json:"function_in,omitempty"`

	// function not
	FunctionNot *DiskFunction `json:"function_not,omitempty"`

	// function not in
	FunctionNotIn []DiskFunction `json:"function_not_in,omitempty"`

	// health status
	HealthStatus *DiskHealthStatus `json:"health_status,omitempty"`

	// health status in
	HealthStatusIn []DiskHealthStatus `json:"health_status_in,omitempty"`

	// health status not
	HealthStatusNot *DiskHealthStatus `json:"health_status_not,omitempty"`

	// health status not in
	HealthStatusNotIn []DiskHealthStatus `json:"health_status_not_in,omitempty"`

	// healthy
	Healthy *bool `json:"healthy,omitempty"`

	// healthy not
	HealthyNot *bool `json:"healthy_not,omitempty"`

	// host
	Host *HostWhereInput `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery *LabelWhereInput `json:"labels_every,omitempty"`

	// labels none
	LabelsNone *LabelWhereInput `json:"labels_none,omitempty"`

	// labels some
	LabelsSome *LabelWhereInput `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// mounted
	Mounted *bool `json:"mounted,omitempty"`

	// mounted not
	MountedNot *bool `json:"mounted_not,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// numa node
	NumaNode *int32 `json:"numa_node,omitempty"`

	// numa node gt
	NumaNodeGt *int32 `json:"numa_node_gt,omitempty"`

	// numa node gte
	NumaNodeGte *int32 `json:"numa_node_gte,omitempty"`

	// numa node in
	NumaNodeIn []int32 `json:"numa_node_in,omitempty"`

	// numa node lt
	NumaNodeLt *int32 `json:"numa_node_lt,omitempty"`

	// numa node lte
	NumaNodeLte *int32 `json:"numa_node_lte,omitempty"`

	// numa node not
	NumaNodeNot *int32 `json:"numa_node_not,omitempty"`

	// numa node not in
	NumaNodeNotIn []int32 `json:"numa_node_not_in,omitempty"`

	// offline
	Offline *bool `json:"offline,omitempty"`

	// offline not
	OfflineNot *bool `json:"offline_not,omitempty"`

	// path
	Path *string `json:"path,omitempty"`

	// path contains
	PathContains *string `json:"path_contains,omitempty"`

	// path ends with
	PathEndsWith *string `json:"path_ends_with,omitempty"`

	// path gt
	PathGt *string `json:"path_gt,omitempty"`

	// path gte
	PathGte *string `json:"path_gte,omitempty"`

	// path in
	PathIn []string `json:"path_in,omitempty"`

	// path lt
	PathLt *string `json:"path_lt,omitempty"`

	// path lte
	PathLte *string `json:"path_lte,omitempty"`

	// path not
	PathNot *string `json:"path_not,omitempty"`

	// path not contains
	PathNotContains *string `json:"path_not_contains,omitempty"`

	// path not ends with
	PathNotEndsWith *string `json:"path_not_ends_with,omitempty"`

	// path not in
	PathNotIn []string `json:"path_not_in,omitempty"`

	// path not starts with
	PathNotStartsWith *string `json:"path_not_starts_with,omitempty"`

	// path starts with
	PathStartsWith *string `json:"path_starts_with,omitempty"`

	// persistent memory type
	PersistentMemoryType *string `json:"persistent_memory_type,omitempty"`

	// persistent memory type contains
	PersistentMemoryTypeContains *string `json:"persistent_memory_type_contains,omitempty"`

	// persistent memory type ends with
	PersistentMemoryTypeEndsWith *string `json:"persistent_memory_type_ends_with,omitempty"`

	// persistent memory type gt
	PersistentMemoryTypeGt *string `json:"persistent_memory_type_gt,omitempty"`

	// persistent memory type gte
	PersistentMemoryTypeGte *string `json:"persistent_memory_type_gte,omitempty"`

	// persistent memory type in
	PersistentMemoryTypeIn []string `json:"persistent_memory_type_in,omitempty"`

	// persistent memory type lt
	PersistentMemoryTypeLt *string `json:"persistent_memory_type_lt,omitempty"`

	// persistent memory type lte
	PersistentMemoryTypeLte *string `json:"persistent_memory_type_lte,omitempty"`

	// persistent memory type not
	PersistentMemoryTypeNot *string `json:"persistent_memory_type_not,omitempty"`

	// persistent memory type not contains
	PersistentMemoryTypeNotContains *string `json:"persistent_memory_type_not_contains,omitempty"`

	// persistent memory type not ends with
	PersistentMemoryTypeNotEndsWith *string `json:"persistent_memory_type_not_ends_with,omitempty"`

	// persistent memory type not in
	PersistentMemoryTypeNotIn []string `json:"persistent_memory_type_not_in,omitempty"`

	// persistent memory type not starts with
	PersistentMemoryTypeNotStartsWith *string `json:"persistent_memory_type_not_starts_with,omitempty"`

	// persistent memory type starts with
	PersistentMemoryTypeStartsWith *string `json:"persistent_memory_type_starts_with,omitempty"`

	// physical slot on brick
	PhysicalSlotOnBrick *int32 `json:"physical_slot_on_brick,omitempty"`

	// physical slot on brick gt
	PhysicalSlotOnBrickGt *int32 `json:"physical_slot_on_brick_gt,omitempty"`

	// physical slot on brick gte
	PhysicalSlotOnBrickGte *int32 `json:"physical_slot_on_brick_gte,omitempty"`

	// physical slot on brick in
	PhysicalSlotOnBrickIn []int32 `json:"physical_slot_on_brick_in,omitempty"`

	// physical slot on brick lt
	PhysicalSlotOnBrickLt *int32 `json:"physical_slot_on_brick_lt,omitempty"`

	// physical slot on brick lte
	PhysicalSlotOnBrickLte *int32 `json:"physical_slot_on_brick_lte,omitempty"`

	// physical slot on brick not
	PhysicalSlotOnBrickNot *int32 `json:"physical_slot_on_brick_not,omitempty"`

	// physical slot on brick not in
	PhysicalSlotOnBrickNotIn []int32 `json:"physical_slot_on_brick_not_in,omitempty"`

	// pmem dimms every
	PmemDimmsEvery *PmemDimmWhereInput `json:"pmem_dimms_every,omitempty"`

	// pmem dimms none
	PmemDimmsNone *PmemDimmWhereInput `json:"pmem_dimms_none,omitempty"`

	// pmem dimms some
	PmemDimmsSome *PmemDimmWhereInput `json:"pmem_dimms_some,omitempty"`

	// recommended usage
	RecommendedUsage *DiskUsage `json:"recommended_usage,omitempty"`

	// recommended usage in
	RecommendedUsageIn []DiskUsage `json:"recommended_usage_in,omitempty"`

	// recommended usage not
	RecommendedUsageNot *DiskUsage `json:"recommended_usage_not,omitempty"`

	// recommended usage not in
	RecommendedUsageNotIn []DiskUsage `json:"recommended_usage_not_in,omitempty"`

	// remaining life percent
	RemainingLifePercent *int32 `json:"remaining_life_percent,omitempty"`

	// remaining life percent gt
	RemainingLifePercentGt *int32 `json:"remaining_life_percent_gt,omitempty"`

	// remaining life percent gte
	RemainingLifePercentGte *int32 `json:"remaining_life_percent_gte,omitempty"`

	// remaining life percent in
	RemainingLifePercentIn []int32 `json:"remaining_life_percent_in,omitempty"`

	// remaining life percent lt
	RemainingLifePercentLt *int32 `json:"remaining_life_percent_lt,omitempty"`

	// remaining life percent lte
	RemainingLifePercentLte *int32 `json:"remaining_life_percent_lte,omitempty"`

	// remaining life percent not
	RemainingLifePercentNot *int32 `json:"remaining_life_percent_not,omitempty"`

	// remaining life percent not in
	RemainingLifePercentNotIn []int32 `json:"remaining_life_percent_not_in,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// serial contains
	SerialContains *string `json:"serial_contains,omitempty"`

	// serial ends with
	SerialEndsWith *string `json:"serial_ends_with,omitempty"`

	// serial gt
	SerialGt *string `json:"serial_gt,omitempty"`

	// serial gte
	SerialGte *string `json:"serial_gte,omitempty"`

	// serial in
	SerialIn []string `json:"serial_in,omitempty"`

	// serial lt
	SerialLt *string `json:"serial_lt,omitempty"`

	// serial lte
	SerialLte *string `json:"serial_lte,omitempty"`

	// serial not
	SerialNot *string `json:"serial_not,omitempty"`

	// serial not contains
	SerialNotContains *string `json:"serial_not_contains,omitempty"`

	// serial not ends with
	SerialNotEndsWith *string `json:"serial_not_ends_with,omitempty"`

	// serial not in
	SerialNotIn []string `json:"serial_not_in,omitempty"`

	// serial not starts with
	SerialNotStartsWith *string `json:"serial_not_starts_with,omitempty"`

	// serial starts with
	SerialStartsWith *string `json:"serial_starts_with,omitempty"`

	// size
	Size *int64 `json:"size,omitempty"`

	// size gt
	SizeGt *int64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *int64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []int64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *int64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *int64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *int64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []int64 `json:"size_not_in,omitempty"`

	// type
	Type *DiskType `json:"type,omitempty"`

	// type in
	TypeIn []DiskType `json:"type_in,omitempty"`

	// type not
	TypeNot *DiskType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []DiskType `json:"type_not_in,omitempty"`

	// usage
	Usage *DiskUsage `json:"usage,omitempty"`

	// usage in
	UsageIn []DiskUsage `json:"usage_in,omitempty"`

	// usage not
	UsageNot *DiskUsage `json:"usage_not,omitempty"`

	// usage not in
	UsageNotIn []DiskUsage `json:"usage_not_in,omitempty"`

	// usage status
	UsageStatus *DiskUsageStatus `json:"usage_status,omitempty"`

	// usage status in
	UsageStatusIn []DiskUsageStatus `json:"usage_status_in,omitempty"`

	// usage status not
	UsageStatusNot *DiskUsageStatus `json:"usage_status_not,omitempty"`

	// usage status not in
	UsageStatusNotIn []DiskUsageStatus `json:"usage_status_not_in,omitempty"`

	MarshalOpts *DiskWhereInputMarshalOpts `json:"-"`
}

type DiskWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	Firmware_Explicit_Null_When_Empty bool

	FirmwareContains_Explicit_Null_When_Empty bool

	FirmwareEndsWith_Explicit_Null_When_Empty bool

	FirmwareGt_Explicit_Null_When_Empty bool

	FirmwareGte_Explicit_Null_When_Empty bool

	FirmwareIn_Explicit_Null_When_Empty bool

	FirmwareLt_Explicit_Null_When_Empty bool

	FirmwareLte_Explicit_Null_When_Empty bool

	FirmwareNot_Explicit_Null_When_Empty bool

	FirmwareNotContains_Explicit_Null_When_Empty bool

	FirmwareNotEndsWith_Explicit_Null_When_Empty bool

	FirmwareNotIn_Explicit_Null_When_Empty bool

	FirmwareNotStartsWith_Explicit_Null_When_Empty bool

	FirmwareStartsWith_Explicit_Null_When_Empty bool

	Function_Explicit_Null_When_Empty bool

	FunctionIn_Explicit_Null_When_Empty bool

	FunctionNot_Explicit_Null_When_Empty bool

	FunctionNotIn_Explicit_Null_When_Empty bool

	HealthStatus_Explicit_Null_When_Empty bool

	HealthStatusIn_Explicit_Null_When_Empty bool

	HealthStatusNot_Explicit_Null_When_Empty bool

	HealthStatusNotIn_Explicit_Null_When_Empty bool

	Healthy_Explicit_Null_When_Empty bool

	HealthyNot_Explicit_Null_When_Empty bool

	Host_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LabelsEvery_Explicit_Null_When_Empty bool

	LabelsNone_Explicit_Null_When_Empty bool

	LabelsSome_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	Model_Explicit_Null_When_Empty bool

	ModelContains_Explicit_Null_When_Empty bool

	ModelEndsWith_Explicit_Null_When_Empty bool

	ModelGt_Explicit_Null_When_Empty bool

	ModelGte_Explicit_Null_When_Empty bool

	ModelIn_Explicit_Null_When_Empty bool

	ModelLt_Explicit_Null_When_Empty bool

	ModelLte_Explicit_Null_When_Empty bool

	ModelNot_Explicit_Null_When_Empty bool

	ModelNotContains_Explicit_Null_When_Empty bool

	ModelNotEndsWith_Explicit_Null_When_Empty bool

	ModelNotIn_Explicit_Null_When_Empty bool

	ModelNotStartsWith_Explicit_Null_When_Empty bool

	ModelStartsWith_Explicit_Null_When_Empty bool

	Mounted_Explicit_Null_When_Empty bool

	MountedNot_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	NumaNode_Explicit_Null_When_Empty bool

	NumaNodeGt_Explicit_Null_When_Empty bool

	NumaNodeGte_Explicit_Null_When_Empty bool

	NumaNodeIn_Explicit_Null_When_Empty bool

	NumaNodeLt_Explicit_Null_When_Empty bool

	NumaNodeLte_Explicit_Null_When_Empty bool

	NumaNodeNot_Explicit_Null_When_Empty bool

	NumaNodeNotIn_Explicit_Null_When_Empty bool

	Offline_Explicit_Null_When_Empty bool

	OfflineNot_Explicit_Null_When_Empty bool

	Path_Explicit_Null_When_Empty bool

	PathContains_Explicit_Null_When_Empty bool

	PathEndsWith_Explicit_Null_When_Empty bool

	PathGt_Explicit_Null_When_Empty bool

	PathGte_Explicit_Null_When_Empty bool

	PathIn_Explicit_Null_When_Empty bool

	PathLt_Explicit_Null_When_Empty bool

	PathLte_Explicit_Null_When_Empty bool

	PathNot_Explicit_Null_When_Empty bool

	PathNotContains_Explicit_Null_When_Empty bool

	PathNotEndsWith_Explicit_Null_When_Empty bool

	PathNotIn_Explicit_Null_When_Empty bool

	PathNotStartsWith_Explicit_Null_When_Empty bool

	PathStartsWith_Explicit_Null_When_Empty bool

	PersistentMemoryType_Explicit_Null_When_Empty bool

	PersistentMemoryTypeContains_Explicit_Null_When_Empty bool

	PersistentMemoryTypeEndsWith_Explicit_Null_When_Empty bool

	PersistentMemoryTypeGt_Explicit_Null_When_Empty bool

	PersistentMemoryTypeGte_Explicit_Null_When_Empty bool

	PersistentMemoryTypeIn_Explicit_Null_When_Empty bool

	PersistentMemoryTypeLt_Explicit_Null_When_Empty bool

	PersistentMemoryTypeLte_Explicit_Null_When_Empty bool

	PersistentMemoryTypeNot_Explicit_Null_When_Empty bool

	PersistentMemoryTypeNotContains_Explicit_Null_When_Empty bool

	PersistentMemoryTypeNotEndsWith_Explicit_Null_When_Empty bool

	PersistentMemoryTypeNotIn_Explicit_Null_When_Empty bool

	PersistentMemoryTypeNotStartsWith_Explicit_Null_When_Empty bool

	PersistentMemoryTypeStartsWith_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrick_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickGt_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickGte_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickIn_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickLt_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickLte_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickNot_Explicit_Null_When_Empty bool

	PhysicalSlotOnBrickNotIn_Explicit_Null_When_Empty bool

	PmemDimmsEvery_Explicit_Null_When_Empty bool

	PmemDimmsNone_Explicit_Null_When_Empty bool

	PmemDimmsSome_Explicit_Null_When_Empty bool

	RecommendedUsage_Explicit_Null_When_Empty bool

	RecommendedUsageIn_Explicit_Null_When_Empty bool

	RecommendedUsageNot_Explicit_Null_When_Empty bool

	RecommendedUsageNotIn_Explicit_Null_When_Empty bool

	RemainingLifePercent_Explicit_Null_When_Empty bool

	RemainingLifePercentGt_Explicit_Null_When_Empty bool

	RemainingLifePercentGte_Explicit_Null_When_Empty bool

	RemainingLifePercentIn_Explicit_Null_When_Empty bool

	RemainingLifePercentLt_Explicit_Null_When_Empty bool

	RemainingLifePercentLte_Explicit_Null_When_Empty bool

	RemainingLifePercentNot_Explicit_Null_When_Empty bool

	RemainingLifePercentNotIn_Explicit_Null_When_Empty bool

	Serial_Explicit_Null_When_Empty bool

	SerialContains_Explicit_Null_When_Empty bool

	SerialEndsWith_Explicit_Null_When_Empty bool

	SerialGt_Explicit_Null_When_Empty bool

	SerialGte_Explicit_Null_When_Empty bool

	SerialIn_Explicit_Null_When_Empty bool

	SerialLt_Explicit_Null_When_Empty bool

	SerialLte_Explicit_Null_When_Empty bool

	SerialNot_Explicit_Null_When_Empty bool

	SerialNotContains_Explicit_Null_When_Empty bool

	SerialNotEndsWith_Explicit_Null_When_Empty bool

	SerialNotIn_Explicit_Null_When_Empty bool

	SerialNotStartsWith_Explicit_Null_When_Empty bool

	SerialStartsWith_Explicit_Null_When_Empty bool

	Size_Explicit_Null_When_Empty bool

	SizeGt_Explicit_Null_When_Empty bool

	SizeGte_Explicit_Null_When_Empty bool

	SizeIn_Explicit_Null_When_Empty bool

	SizeLt_Explicit_Null_When_Empty bool

	SizeLte_Explicit_Null_When_Empty bool

	SizeNot_Explicit_Null_When_Empty bool

	SizeNotIn_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	TypeIn_Explicit_Null_When_Empty bool

	TypeNot_Explicit_Null_When_Empty bool

	TypeNotIn_Explicit_Null_When_Empty bool

	Usage_Explicit_Null_When_Empty bool

	UsageIn_Explicit_Null_When_Empty bool

	UsageNot_Explicit_Null_When_Empty bool

	UsageNotIn_Explicit_Null_When_Empty bool

	UsageStatus_Explicit_Null_When_Empty bool

	UsageStatusIn_Explicit_Null_When_Empty bool

	UsageStatusNot_Explicit_Null_When_Empty bool

	UsageStatusNotIn_Explicit_Null_When_Empty bool
}

func (m DiskWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field firmware
	if m.Firmware != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware\":")
		bytes, err := swag.WriteJSON(m.Firmware)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Firmware_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware\":null")
		first = false
	}

	// handle nullable field firmware_contains
	if m.FirmwareContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_contains\":")
		bytes, err := swag.WriteJSON(m.FirmwareContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_contains\":null")
		first = false
	}

	// handle nullable field firmware_ends_with
	if m.FirmwareEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_ends_with\":")
		bytes, err := swag.WriteJSON(m.FirmwareEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_ends_with\":null")
		first = false
	}

	// handle nullable field firmware_gt
	if m.FirmwareGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_gt\":")
		bytes, err := swag.WriteJSON(m.FirmwareGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_gt\":null")
		first = false
	}

	// handle nullable field firmware_gte
	if m.FirmwareGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_gte\":")
		bytes, err := swag.WriteJSON(m.FirmwareGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_gte\":null")
		first = false
	}

	// handle non nullable field firmware_in with omitempty
	if !swag.IsZero(m.FirmwareIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_in\":")
		bytes, err := swag.WriteJSON(m.FirmwareIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field firmware_lt
	if m.FirmwareLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_lt\":")
		bytes, err := swag.WriteJSON(m.FirmwareLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_lt\":null")
		first = false
	}

	// handle nullable field firmware_lte
	if m.FirmwareLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_lte\":")
		bytes, err := swag.WriteJSON(m.FirmwareLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_lte\":null")
		first = false
	}

	// handle nullable field firmware_not
	if m.FirmwareNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not\":")
		bytes, err := swag.WriteJSON(m.FirmwareNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not\":null")
		first = false
	}

	// handle nullable field firmware_not_contains
	if m.FirmwareNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_contains\":")
		bytes, err := swag.WriteJSON(m.FirmwareNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_contains\":null")
		first = false
	}

	// handle nullable field firmware_not_ends_with
	if m.FirmwareNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.FirmwareNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_ends_with\":null")
		first = false
	}

	// handle non nullable field firmware_not_in with omitempty
	if !swag.IsZero(m.FirmwareNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_in\":")
		bytes, err := swag.WriteJSON(m.FirmwareNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field firmware_not_starts_with
	if m.FirmwareNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.FirmwareNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_not_starts_with\":null")
		first = false
	}

	// handle nullable field firmware_starts_with
	if m.FirmwareStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_starts_with\":")
		bytes, err := swag.WriteJSON(m.FirmwareStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FirmwareStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"firmware_starts_with\":null")
		first = false
	}

	// handle nullable field function
	if m.Function != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function\":")
		bytes, err := swag.WriteJSON(m.Function)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Function_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function\":null")
		first = false
	}

	// handle non nullable field function_in with omitempty
	if !swag.IsZero(m.FunctionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_in\":")
		bytes, err := swag.WriteJSON(m.FunctionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field function_not
	if m.FunctionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_not\":")
		bytes, err := swag.WriteJSON(m.FunctionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FunctionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_not\":null")
		first = false
	}

	// handle non nullable field function_not_in with omitempty
	if !swag.IsZero(m.FunctionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"function_not_in\":")
		bytes, err := swag.WriteJSON(m.FunctionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field health_status
	if m.HealthStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":")
		bytes, err := swag.WriteJSON(m.HealthStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status\":null")
		first = false
	}

	// handle non nullable field health_status_in with omitempty
	if !swag.IsZero(m.HealthStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_in\":")
		bytes, err := swag.WriteJSON(m.HealthStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field health_status_not
	if m.HealthStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not\":")
		bytes, err := swag.WriteJSON(m.HealthStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not\":null")
		first = false
	}

	// handle non nullable field health_status_not_in with omitempty
	if !swag.IsZero(m.HealthStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"health_status_not_in\":")
		bytes, err := swag.WriteJSON(m.HealthStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field healthy
	if m.Healthy != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"healthy\":")
		bytes, err := swag.WriteJSON(m.Healthy)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Healthy_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"healthy\":null")
		first = false
	}

	// handle nullable field healthy_not
	if m.HealthyNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"healthy_not\":")
		bytes, err := swag.WriteJSON(m.HealthyNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.HealthyNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"healthy_not\":null")
		first = false
	}

	// handle nullable field host
	if m.Host != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":")
		bytes, err := swag.WriteJSON(m.Host)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Host_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"host\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field labels_every
	if m.LabelsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":")
		bytes, err := swag.WriteJSON(m.LabelsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_every\":null")
		first = false
	}

	// handle nullable field labels_none
	if m.LabelsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":")
		bytes, err := swag.WriteJSON(m.LabelsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_none\":null")
		first = false
	}

	// handle nullable field labels_some
	if m.LabelsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":")
		bytes, err := swag.WriteJSON(m.LabelsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LabelsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"labels_some\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if !swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if !swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field model
	if m.Model != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":")
		bytes, err := swag.WriteJSON(m.Model)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Model_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model\":null")
		first = false
	}

	// handle nullable field model_contains
	if m.ModelContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":")
		bytes, err := swag.WriteJSON(m.ModelContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_contains\":null")
		first = false
	}

	// handle nullable field model_ends_with
	if m.ModelEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_ends_with\":null")
		first = false
	}

	// handle nullable field model_gt
	if m.ModelGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":")
		bytes, err := swag.WriteJSON(m.ModelGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gt\":null")
		first = false
	}

	// handle nullable field model_gte
	if m.ModelGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":")
		bytes, err := swag.WriteJSON(m.ModelGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_gte\":null")
		first = false
	}

	// handle non nullable field model_in with omitempty
	if !swag.IsZero(m.ModelIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_in\":")
		bytes, err := swag.WriteJSON(m.ModelIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_lt
	if m.ModelLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":")
		bytes, err := swag.WriteJSON(m.ModelLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lt\":null")
		first = false
	}

	// handle nullable field model_lte
	if m.ModelLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":")
		bytes, err := swag.WriteJSON(m.ModelLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_lte\":null")
		first = false
	}

	// handle nullable field model_not
	if m.ModelNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":")
		bytes, err := swag.WriteJSON(m.ModelNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not\":null")
		first = false
	}

	// handle nullable field model_not_contains
	if m.ModelNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":")
		bytes, err := swag.WriteJSON(m.ModelNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_contains\":null")
		first = false
	}

	// handle nullable field model_not_ends_with
	if m.ModelNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_ends_with\":null")
		first = false
	}

	// handle non nullable field model_not_in with omitempty
	if !swag.IsZero(m.ModelNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_in\":")
		bytes, err := swag.WriteJSON(m.ModelNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field model_not_starts_with
	if m.ModelNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_not_starts_with\":null")
		first = false
	}

	// handle nullable field model_starts_with
	if m.ModelStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":")
		bytes, err := swag.WriteJSON(m.ModelStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ModelStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"model_starts_with\":null")
		first = false
	}

	// handle nullable field mounted
	if m.Mounted != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mounted\":")
		bytes, err := swag.WriteJSON(m.Mounted)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Mounted_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mounted\":null")
		first = false
	}

	// handle nullable field mounted_not
	if m.MountedNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mounted_not\":")
		bytes, err := swag.WriteJSON(m.MountedNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.MountedNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"mounted_not\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if !swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if !swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field numa_node
	if m.NumaNode != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":")
		bytes, err := swag.WriteJSON(m.NumaNode)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNode_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node\":null")
		first = false
	}

	// handle nullable field numa_node_gt
	if m.NumaNodeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gt\":")
		bytes, err := swag.WriteJSON(m.NumaNodeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gt\":null")
		first = false
	}

	// handle nullable field numa_node_gte
	if m.NumaNodeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gte\":")
		bytes, err := swag.WriteJSON(m.NumaNodeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_gte\":null")
		first = false
	}

	// handle non nullable field numa_node_in with omitempty
	if !swag.IsZero(m.NumaNodeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_in\":")
		bytes, err := swag.WriteJSON(m.NumaNodeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field numa_node_lt
	if m.NumaNodeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lt\":")
		bytes, err := swag.WriteJSON(m.NumaNodeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lt\":null")
		first = false
	}

	// handle nullable field numa_node_lte
	if m.NumaNodeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lte\":")
		bytes, err := swag.WriteJSON(m.NumaNodeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_lte\":null")
		first = false
	}

	// handle nullable field numa_node_not
	if m.NumaNodeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not\":")
		bytes, err := swag.WriteJSON(m.NumaNodeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NumaNodeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not\":null")
		first = false
	}

	// handle non nullable field numa_node_not_in with omitempty
	if !swag.IsZero(m.NumaNodeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"numa_node_not_in\":")
		bytes, err := swag.WriteJSON(m.NumaNodeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field offline
	if m.Offline != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"offline\":")
		bytes, err := swag.WriteJSON(m.Offline)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Offline_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"offline\":null")
		first = false
	}

	// handle nullable field offline_not
	if m.OfflineNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"offline_not\":")
		bytes, err := swag.WriteJSON(m.OfflineNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OfflineNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"offline_not\":null")
		first = false
	}

	// handle nullable field path
	if m.Path != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":")
		bytes, err := swag.WriteJSON(m.Path)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Path_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path\":null")
		first = false
	}

	// handle nullable field path_contains
	if m.PathContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_contains\":")
		bytes, err := swag.WriteJSON(m.PathContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_contains\":null")
		first = false
	}

	// handle nullable field path_ends_with
	if m.PathEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_ends_with\":")
		bytes, err := swag.WriteJSON(m.PathEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_ends_with\":null")
		first = false
	}

	// handle nullable field path_gt
	if m.PathGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gt\":")
		bytes, err := swag.WriteJSON(m.PathGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gt\":null")
		first = false
	}

	// handle nullable field path_gte
	if m.PathGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gte\":")
		bytes, err := swag.WriteJSON(m.PathGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_gte\":null")
		first = false
	}

	// handle non nullable field path_in with omitempty
	if !swag.IsZero(m.PathIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_in\":")
		bytes, err := swag.WriteJSON(m.PathIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field path_lt
	if m.PathLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lt\":")
		bytes, err := swag.WriteJSON(m.PathLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lt\":null")
		first = false
	}

	// handle nullable field path_lte
	if m.PathLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lte\":")
		bytes, err := swag.WriteJSON(m.PathLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_lte\":null")
		first = false
	}

	// handle nullable field path_not
	if m.PathNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not\":")
		bytes, err := swag.WriteJSON(m.PathNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not\":null")
		first = false
	}

	// handle nullable field path_not_contains
	if m.PathNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_contains\":")
		bytes, err := swag.WriteJSON(m.PathNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_contains\":null")
		first = false
	}

	// handle nullable field path_not_ends_with
	if m.PathNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.PathNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_ends_with\":null")
		first = false
	}

	// handle non nullable field path_not_in with omitempty
	if !swag.IsZero(m.PathNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_in\":")
		bytes, err := swag.WriteJSON(m.PathNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field path_not_starts_with
	if m.PathNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.PathNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_not_starts_with\":null")
		first = false
	}

	// handle nullable field path_starts_with
	if m.PathStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_starts_with\":")
		bytes, err := swag.WriteJSON(m.PathStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PathStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"path_starts_with\":null")
		first = false
	}

	// handle nullable field persistent_memory_type
	if m.PersistentMemoryType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_contains
	if m.PersistentMemoryTypeContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_contains\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_contains\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_ends_with
	if m.PersistentMemoryTypeEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_ends_with\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_ends_with\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_gt
	if m.PersistentMemoryTypeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_gt\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_gt\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_gte
	if m.PersistentMemoryTypeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_gte\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_gte\":null")
		first = false
	}

	// handle non nullable field persistent_memory_type_in with omitempty
	if !swag.IsZero(m.PersistentMemoryTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_in\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field persistent_memory_type_lt
	if m.PersistentMemoryTypeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_lt\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_lt\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_lte
	if m.PersistentMemoryTypeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_lte\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_lte\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_not
	if m.PersistentMemoryTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_not_contains
	if m.PersistentMemoryTypeNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_contains\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_contains\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_not_ends_with
	if m.PersistentMemoryTypeNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_ends_with\":null")
		first = false
	}

	// handle non nullable field persistent_memory_type_not_in with omitempty
	if !swag.IsZero(m.PersistentMemoryTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_in\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field persistent_memory_type_not_starts_with
	if m.PersistentMemoryTypeNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_not_starts_with\":null")
		first = false
	}

	// handle nullable field persistent_memory_type_starts_with
	if m.PersistentMemoryTypeStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_starts_with\":")
		bytes, err := swag.WriteJSON(m.PersistentMemoryTypeStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PersistentMemoryTypeStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"persistent_memory_type_starts_with\":null")
		first = false
	}

	// handle nullable field physical_slot_on_brick
	if m.PhysicalSlotOnBrick != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrick)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrick_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick\":null")
		first = false
	}

	// handle nullable field physical_slot_on_brick_gt
	if m.PhysicalSlotOnBrickGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_gt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrickGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_gt\":null")
		first = false
	}

	// handle nullable field physical_slot_on_brick_gte
	if m.PhysicalSlotOnBrickGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_gte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrickGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_gte\":null")
		first = false
	}

	// handle non nullable field physical_slot_on_brick_in with omitempty
	if !swag.IsZero(m.PhysicalSlotOnBrickIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field physical_slot_on_brick_lt
	if m.PhysicalSlotOnBrickLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_lt\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrickLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_lt\":null")
		first = false
	}

	// handle nullable field physical_slot_on_brick_lte
	if m.PhysicalSlotOnBrickLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_lte\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrickLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_lte\":null")
		first = false
	}

	// handle nullable field physical_slot_on_brick_not
	if m.PhysicalSlotOnBrickNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_not\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PhysicalSlotOnBrickNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_not\":null")
		first = false
	}

	// handle non nullable field physical_slot_on_brick_not_in with omitempty
	if !swag.IsZero(m.PhysicalSlotOnBrickNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"physical_slot_on_brick_not_in\":")
		bytes, err := swag.WriteJSON(m.PhysicalSlotOnBrickNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field pmem_dimms_every
	if m.PmemDimmsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_every\":")
		bytes, err := swag.WriteJSON(m.PmemDimmsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PmemDimmsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_every\":null")
		first = false
	}

	// handle nullable field pmem_dimms_none
	if m.PmemDimmsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_none\":")
		bytes, err := swag.WriteJSON(m.PmemDimmsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PmemDimmsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_none\":null")
		first = false
	}

	// handle nullable field pmem_dimms_some
	if m.PmemDimmsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_some\":")
		bytes, err := swag.WriteJSON(m.PmemDimmsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PmemDimmsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"pmem_dimms_some\":null")
		first = false
	}

	// handle nullable field recommended_usage
	if m.RecommendedUsage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage\":")
		bytes, err := swag.WriteJSON(m.RecommendedUsage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RecommendedUsage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage\":null")
		first = false
	}

	// handle non nullable field recommended_usage_in with omitempty
	if !swag.IsZero(m.RecommendedUsageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage_in\":")
		bytes, err := swag.WriteJSON(m.RecommendedUsageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field recommended_usage_not
	if m.RecommendedUsageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage_not\":")
		bytes, err := swag.WriteJSON(m.RecommendedUsageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RecommendedUsageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage_not\":null")
		first = false
	}

	// handle non nullable field recommended_usage_not_in with omitempty
	if !swag.IsZero(m.RecommendedUsageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"recommended_usage_not_in\":")
		bytes, err := swag.WriteJSON(m.RecommendedUsageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field remaining_life_percent
	if m.RemainingLifePercent != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercent)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercent_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_gt
	if m.RemainingLifePercentGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gt\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gt\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_gte
	if m.RemainingLifePercentGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gte\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_gte\":null")
		first = false
	}

	// handle non nullable field remaining_life_percent_in with omitempty
	if !swag.IsZero(m.RemainingLifePercentIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_in\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field remaining_life_percent_lt
	if m.RemainingLifePercentLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lt\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lt\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_lte
	if m.RemainingLifePercentLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lte\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_lte\":null")
		first = false
	}

	// handle nullable field remaining_life_percent_not
	if m.RemainingLifePercentNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.RemainingLifePercentNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not\":null")
		first = false
	}

	// handle non nullable field remaining_life_percent_not_in with omitempty
	if !swag.IsZero(m.RemainingLifePercentNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"remaining_life_percent_not_in\":")
		bytes, err := swag.WriteJSON(m.RemainingLifePercentNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial
	if m.Serial != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":")
		bytes, err := swag.WriteJSON(m.Serial)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Serial_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial\":null")
		first = false
	}

	// handle nullable field serial_contains
	if m.SerialContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":")
		bytes, err := swag.WriteJSON(m.SerialContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_contains\":null")
		first = false
	}

	// handle nullable field serial_ends_with
	if m.SerialEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_ends_with\":null")
		first = false
	}

	// handle nullable field serial_gt
	if m.SerialGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":")
		bytes, err := swag.WriteJSON(m.SerialGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gt\":null")
		first = false
	}

	// handle nullable field serial_gte
	if m.SerialGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":")
		bytes, err := swag.WriteJSON(m.SerialGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_gte\":null")
		first = false
	}

	// handle non nullable field serial_in with omitempty
	if !swag.IsZero(m.SerialIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_in\":")
		bytes, err := swag.WriteJSON(m.SerialIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_lt
	if m.SerialLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":")
		bytes, err := swag.WriteJSON(m.SerialLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lt\":null")
		first = false
	}

	// handle nullable field serial_lte
	if m.SerialLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":")
		bytes, err := swag.WriteJSON(m.SerialLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_lte\":null")
		first = false
	}

	// handle nullable field serial_not
	if m.SerialNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":")
		bytes, err := swag.WriteJSON(m.SerialNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not\":null")
		first = false
	}

	// handle nullable field serial_not_contains
	if m.SerialNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":")
		bytes, err := swag.WriteJSON(m.SerialNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_contains\":null")
		first = false
	}

	// handle nullable field serial_not_ends_with
	if m.SerialNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_ends_with\":null")
		first = false
	}

	// handle non nullable field serial_not_in with omitempty
	if !swag.IsZero(m.SerialNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_in\":")
		bytes, err := swag.WriteJSON(m.SerialNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field serial_not_starts_with
	if m.SerialNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_not_starts_with\":null")
		first = false
	}

	// handle nullable field serial_starts_with
	if m.SerialStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":")
		bytes, err := swag.WriteJSON(m.SerialStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SerialStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"serial_starts_with\":null")
		first = false
	}

	// handle nullable field size
	if m.Size != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":")
		bytes, err := swag.WriteJSON(m.Size)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Size_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size\":null")
		first = false
	}

	// handle nullable field size_gt
	if m.SizeGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":")
		bytes, err := swag.WriteJSON(m.SizeGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gt\":null")
		first = false
	}

	// handle nullable field size_gte
	if m.SizeGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":")
		bytes, err := swag.WriteJSON(m.SizeGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_gte\":null")
		first = false
	}

	// handle non nullable field size_in with omitempty
	if !swag.IsZero(m.SizeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_in\":")
		bytes, err := swag.WriteJSON(m.SizeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field size_lt
	if m.SizeLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":")
		bytes, err := swag.WriteJSON(m.SizeLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lt\":null")
		first = false
	}

	// handle nullable field size_lte
	if m.SizeLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":")
		bytes, err := swag.WriteJSON(m.SizeLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_lte\":null")
		first = false
	}

	// handle nullable field size_not
	if m.SizeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":")
		bytes, err := swag.WriteJSON(m.SizeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SizeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not\":null")
		first = false
	}

	// handle non nullable field size_not_in with omitempty
	if !swag.IsZero(m.SizeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"size_not_in\":")
		bytes, err := swag.WriteJSON(m.SizeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle non nullable field type_in with omitempty
	if !swag.IsZero(m.TypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_in\":")
		bytes, err := swag.WriteJSON(m.TypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type_not
	if m.TypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":")
		bytes, err := swag.WriteJSON(m.TypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not\":null")
		first = false
	}

	// handle non nullable field type_not_in with omitempty
	if !swag.IsZero(m.TypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type_not_in\":")
		bytes, err := swag.WriteJSON(m.TypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage
	if m.Usage != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage\":")
		bytes, err := swag.WriteJSON(m.Usage)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Usage_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage\":null")
		first = false
	}

	// handle non nullable field usage_in with omitempty
	if !swag.IsZero(m.UsageIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_in\":")
		bytes, err := swag.WriteJSON(m.UsageIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage_not
	if m.UsageNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_not\":")
		bytes, err := swag.WriteJSON(m.UsageNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsageNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_not\":null")
		first = false
	}

	// handle non nullable field usage_not_in with omitempty
	if !swag.IsZero(m.UsageNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_not_in\":")
		bytes, err := swag.WriteJSON(m.UsageNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage_status
	if m.UsageStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status\":")
		bytes, err := swag.WriteJSON(m.UsageStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsageStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status\":null")
		first = false
	}

	// handle non nullable field usage_status_in with omitempty
	if !swag.IsZero(m.UsageStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status_in\":")
		bytes, err := swag.WriteJSON(m.UsageStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field usage_status_not
	if m.UsageStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status_not\":")
		bytes, err := swag.WriteJSON(m.UsageStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UsageStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status_not\":null")
		first = false
	}

	// handle non nullable field usage_status_not_in with omitempty
	if !swag.IsZero(m.UsageStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"usage_status_not_in\":")
		bytes, err := swag.WriteJSON(m.UsageStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this disk where input
func (m *DiskWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmemDimmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmemDimmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePmemDimmsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.Function) { // not required
		return nil
	}

	if m.Function != nil {
		if err := m.Function.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateFunctionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FunctionIn); i++ {

		if err := m.FunctionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateFunctionNot(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionNot) { // not required
		return nil
	}

	if m.FunctionNot != nil {
		if err := m.FunctionNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateFunctionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FunctionNotIn); i++ {

		if err := m.FunctionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if m.HealthStatus != nil {
		if err := m.HealthStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNot) { // not required
		return nil
	}

	if m.HealthStatusNot != nil {
		if err := m.HealthStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	if m.LabelsNone != nil {
		if err := m.LabelsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	if m.LabelsSome != nil {
		if err := m.LabelsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validatePmemDimmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.PmemDimmsEvery) { // not required
		return nil
	}

	if m.PmemDimmsEvery != nil {
		if err := m.PmemDimmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_every")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validatePmemDimmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.PmemDimmsNone) { // not required
		return nil
	}

	if m.PmemDimmsNone != nil {
		if err := m.PmemDimmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_none")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validatePmemDimmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.PmemDimmsSome) { // not required
		return nil
	}

	if m.PmemDimmsSome != nil {
		if err := m.PmemDimmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_some")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsage) { // not required
		return nil
	}

	if m.RecommendedUsage != nil {
		if err := m.RecommendedUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RecommendedUsageIn); i++ {

		if err := m.RecommendedUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsageNot) { // not required
		return nil
	}

	if m.RecommendedUsageNot != nil {
		if err := m.RecommendedUsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RecommendedUsageNotIn); i++ {

		if err := m.RecommendedUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageIn); i++ {

		if err := m.UsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageNot) { // not required
		return nil
	}

	if m.UsageNot != nil {
		if err := m.UsageNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageNotIn); i++ {

		if err := m.UsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatus) { // not required
		return nil
	}

	if m.UsageStatus != nil {
		if err := m.UsageStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageStatusIn); i++ {

		if err := m.UsageStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatusNot) { // not required
		return nil
	}

	if m.UsageStatusNot != nil {
		if err := m.UsageStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageStatusNotIn); i++ {

		if err := m.UsageStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this disk where input based on the context it is used
func (m *DiskWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePmemDimmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePmemDimmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePmemDimmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.Function != nil {
		if err := m.Function.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunctionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunctionIn); i++ {

		if err := m.FunctionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunctionNot(ctx context.Context, formats strfmt.Registry) error {

	if m.FunctionNot != nil {
		if err := m.FunctionNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunctionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunctionNotIn); i++ {

		if err := m.FunctionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthStatus != nil {
		if err := m.HealthStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthStatusNot != nil {
		if err := m.HealthStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {
		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsEvery != nil {
		if err := m.LabelsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_every")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsNone != nil {
		if err := m.LabelsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_none")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelsSome != nil {
		if err := m.LabelsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels_some")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidatePmemDimmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.PmemDimmsEvery != nil {
		if err := m.PmemDimmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_every")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidatePmemDimmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.PmemDimmsNone != nil {
		if err := m.PmemDimmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_none")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidatePmemDimmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.PmemDimmsSome != nil {
		if err := m.PmemDimmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pmem_dimms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pmem_dimms_some")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.RecommendedUsage != nil {
		if err := m.RecommendedUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecommendedUsageIn); i++ {

		if err := m.RecommendedUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.RecommendedUsageNot != nil {
		if err := m.RecommendedUsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecommendedUsageNotIn); i++ {

		if err := m.RecommendedUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.Usage != nil {
		if err := m.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageIn); i++ {

		if err := m.UsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageNot != nil {
		if err := m.UsageNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageNotIn); i++ {

		if err := m.UsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageStatus != nil {
		if err := m.UsageStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageStatusIn); i++ {

		if err := m.UsageStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageStatusNot != nil {
		if err := m.UsageStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageStatusNotIn); i++ {

		if err := m.UsageStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskWhereInput) UnmarshalBinary(b []byte) error {
	var res DiskWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
