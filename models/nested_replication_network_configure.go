// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedReplicationNetworkConfigure nested replication network configure
//
// swagger:model NestedReplicationNetworkConfigure
type NestedReplicationNetworkConfigure struct {

	// gateway
	Gateway *string `json:"gateway,omitempty"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// subnet mask
	SubnetMask *string `json:"subnet_mask,omitempty"`

	MarshalOpts *NestedReplicationNetworkConfigureMarshalOpts `json:"-"`
}

type NestedReplicationNetworkConfigureMarshalOpts struct {
	Gateway_Explicit_Null_When_Empty bool

	IP_Explicit_Null_When_Empty bool

	SubnetMask_Explicit_Null_When_Empty bool
}

func (m NestedReplicationNetworkConfigure) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field gateway
	if m.Gateway != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway\":")
		bytes, err := swag.WriteJSON(m.Gateway)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Gateway_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"gateway\":null")
		first = false
	}

	// handle nullable field ip
	if m.IP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip\":")
		bytes, err := swag.WriteJSON(m.IP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip\":null")
		first = false
	}

	// handle nullable field subnet_mask
	if m.SubnetMask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask\":")
		bytes, err := swag.WriteJSON(m.SubnetMask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SubnetMask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"subnet_mask\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested replication network configure
func (m *NestedReplicationNetworkConfigure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedReplicationNetworkConfigure) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested replication network configure based on context it is used
func (m *NestedReplicationNetworkConfigure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedReplicationNetworkConfigure) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedReplicationNetworkConfigure) UnmarshalBinary(b []byte) error {
	var res NestedReplicationNetworkConfigure
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
