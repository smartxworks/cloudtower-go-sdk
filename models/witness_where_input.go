// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WitnessWhereInput witness where input
//
// swagger:model WitnessWhereInput
type WitnessWhereInput struct {

	// a n d
	AND []*WitnessWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*WitnessWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*WitnessWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// cpu hz per core
	CPUHzPerCore *int64 `json:"cpu_hz_per_core,omitempty"`

	// cpu hz per core gt
	CPUHzPerCoreGt *int64 `json:"cpu_hz_per_core_gt,omitempty"`

	// cpu hz per core gte
	CPUHzPerCoreGte *int64 `json:"cpu_hz_per_core_gte,omitempty"`

	// cpu hz per core in
	CPUHzPerCoreIn []int64 `json:"cpu_hz_per_core_in,omitempty"`

	// cpu hz per core lt
	CPUHzPerCoreLt *int64 `json:"cpu_hz_per_core_lt,omitempty"`

	// cpu hz per core lte
	CPUHzPerCoreLte *int64 `json:"cpu_hz_per_core_lte,omitempty"`

	// cpu hz per core not
	CPUHzPerCoreNot *int64 `json:"cpu_hz_per_core_not,omitempty"`

	// cpu hz per core not in
	CPUHzPerCoreNotIn []int64 `json:"cpu_hz_per_core_not_in,omitempty"`

	// data ip
	DataIP *string `json:"data_ip,omitempty"`

	// data ip contains
	DataIPContains *string `json:"data_ip_contains,omitempty"`

	// data ip ends with
	DataIPEndsWith *string `json:"data_ip_ends_with,omitempty"`

	// data ip gt
	DataIPGt *string `json:"data_ip_gt,omitempty"`

	// data ip gte
	DataIPGte *string `json:"data_ip_gte,omitempty"`

	// data ip in
	DataIPIn []string `json:"data_ip_in,omitempty"`

	// data ip lt
	DataIPLt *string `json:"data_ip_lt,omitempty"`

	// data ip lte
	DataIPLte *string `json:"data_ip_lte,omitempty"`

	// data ip not
	DataIPNot *string `json:"data_ip_not,omitempty"`

	// data ip not contains
	DataIPNotContains *string `json:"data_ip_not_contains,omitempty"`

	// data ip not ends with
	DataIPNotEndsWith *string `json:"data_ip_not_ends_with,omitempty"`

	// data ip not in
	DataIPNotIn []string `json:"data_ip_not_in,omitempty"`

	// data ip not starts with
	DataIPNotStartsWith *string `json:"data_ip_not_starts_with,omitempty"`

	// data ip starts with
	DataIPStartsWith *string `json:"data_ip_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// management ip
	ManagementIP *string `json:"management_ip,omitempty"`

	// management ip contains
	ManagementIPContains *string `json:"management_ip_contains,omitempty"`

	// management ip ends with
	ManagementIPEndsWith *string `json:"management_ip_ends_with,omitempty"`

	// management ip gt
	ManagementIPGt *string `json:"management_ip_gt,omitempty"`

	// management ip gte
	ManagementIPGte *string `json:"management_ip_gte,omitempty"`

	// management ip in
	ManagementIPIn []string `json:"management_ip_in,omitempty"`

	// management ip lt
	ManagementIPLt *string `json:"management_ip_lt,omitempty"`

	// management ip lte
	ManagementIPLte *string `json:"management_ip_lte,omitempty"`

	// management ip not
	ManagementIPNot *string `json:"management_ip_not,omitempty"`

	// management ip not contains
	ManagementIPNotContains *string `json:"management_ip_not_contains,omitempty"`

	// management ip not ends with
	ManagementIPNotEndsWith *string `json:"management_ip_not_ends_with,omitempty"`

	// management ip not in
	ManagementIPNotIn []string `json:"management_ip_not_in,omitempty"`

	// management ip not starts with
	ManagementIPNotStartsWith *string `json:"management_ip_not_starts_with,omitempty"`

	// management ip starts with
	ManagementIPStartsWith *string `json:"management_ip_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// system data capacity
	SystemDataCapacity *int64 `json:"system_data_capacity,omitempty"`

	// system data capacity gt
	SystemDataCapacityGt *int64 `json:"system_data_capacity_gt,omitempty"`

	// system data capacity gte
	SystemDataCapacityGte *int64 `json:"system_data_capacity_gte,omitempty"`

	// system data capacity in
	SystemDataCapacityIn []int64 `json:"system_data_capacity_in,omitempty"`

	// system data capacity lt
	SystemDataCapacityLt *int64 `json:"system_data_capacity_lt,omitempty"`

	// system data capacity lte
	SystemDataCapacityLte *int64 `json:"system_data_capacity_lte,omitempty"`

	// system data capacity not
	SystemDataCapacityNot *int64 `json:"system_data_capacity_not,omitempty"`

	// system data capacity not in
	SystemDataCapacityNotIn []int64 `json:"system_data_capacity_not_in,omitempty"`

	// system used data space
	SystemUsedDataSpace *int64 `json:"system_used_data_space,omitempty"`

	// system used data space gt
	SystemUsedDataSpaceGt *int64 `json:"system_used_data_space_gt,omitempty"`

	// system used data space gte
	SystemUsedDataSpaceGte *int64 `json:"system_used_data_space_gte,omitempty"`

	// system used data space in
	SystemUsedDataSpaceIn []int64 `json:"system_used_data_space_in,omitempty"`

	// system used data space lt
	SystemUsedDataSpaceLt *int64 `json:"system_used_data_space_lt,omitempty"`

	// system used data space lte
	SystemUsedDataSpaceLte *int64 `json:"system_used_data_space_lte,omitempty"`

	// system used data space not
	SystemUsedDataSpaceNot *int64 `json:"system_used_data_space_not,omitempty"`

	// system used data space not in
	SystemUsedDataSpaceNotIn []int64 `json:"system_used_data_space_not_in,omitempty"`

	// total cpu cores
	TotalCPUCores *int32 `json:"total_cpu_cores,omitempty"`

	// total cpu cores gt
	TotalCPUCoresGt *int32 `json:"total_cpu_cores_gt,omitempty"`

	// total cpu cores gte
	TotalCPUCoresGte *int32 `json:"total_cpu_cores_gte,omitempty"`

	// total cpu cores in
	TotalCPUCoresIn []int32 `json:"total_cpu_cores_in,omitempty"`

	// total cpu cores lt
	TotalCPUCoresLt *int32 `json:"total_cpu_cores_lt,omitempty"`

	// total cpu cores lte
	TotalCPUCoresLte *int32 `json:"total_cpu_cores_lte,omitempty"`

	// total cpu cores not
	TotalCPUCoresNot *int32 `json:"total_cpu_cores_not,omitempty"`

	// total cpu cores not in
	TotalCPUCoresNotIn []int32 `json:"total_cpu_cores_not_in,omitempty"`

	// total cpu hz
	TotalCPUHz *int64 `json:"total_cpu_hz,omitempty"`

	// total cpu hz gt
	TotalCPUHzGt *int64 `json:"total_cpu_hz_gt,omitempty"`

	// total cpu hz gte
	TotalCPUHzGte *int64 `json:"total_cpu_hz_gte,omitempty"`

	// total cpu hz in
	TotalCPUHzIn []int64 `json:"total_cpu_hz_in,omitempty"`

	// total cpu hz lt
	TotalCPUHzLt *int64 `json:"total_cpu_hz_lt,omitempty"`

	// total cpu hz lte
	TotalCPUHzLte *int64 `json:"total_cpu_hz_lte,omitempty"`

	// total cpu hz not
	TotalCPUHzNot *int64 `json:"total_cpu_hz_not,omitempty"`

	// total cpu hz not in
	TotalCPUHzNotIn []int64 `json:"total_cpu_hz_not_in,omitempty"`

	// total memory bytes
	TotalMemoryBytes *int64 `json:"total_memory_bytes,omitempty"`

	// total memory bytes gt
	TotalMemoryBytesGt *int64 `json:"total_memory_bytes_gt,omitempty"`

	// total memory bytes gte
	TotalMemoryBytesGte *int64 `json:"total_memory_bytes_gte,omitempty"`

	// total memory bytes in
	TotalMemoryBytesIn []int64 `json:"total_memory_bytes_in,omitempty"`

	// total memory bytes lt
	TotalMemoryBytesLt *int64 `json:"total_memory_bytes_lt,omitempty"`

	// total memory bytes lte
	TotalMemoryBytesLte *int64 `json:"total_memory_bytes_lte,omitempty"`

	// total memory bytes not
	TotalMemoryBytesNot *int64 `json:"total_memory_bytes_not,omitempty"`

	// total memory bytes not in
	TotalMemoryBytesNotIn []int64 `json:"total_memory_bytes_not_in,omitempty"`

	MarshalOpts *WitnessWhereInputMarshalOpts `json:"-"`
}

type WitnessWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	Cluster_Explicit_Null_When_Empty bool

	CPUHzPerCore_Explicit_Null_When_Empty bool

	CPUHzPerCoreGt_Explicit_Null_When_Empty bool

	CPUHzPerCoreGte_Explicit_Null_When_Empty bool

	CPUHzPerCoreIn_Explicit_Null_When_Empty bool

	CPUHzPerCoreLt_Explicit_Null_When_Empty bool

	CPUHzPerCoreLte_Explicit_Null_When_Empty bool

	CPUHzPerCoreNot_Explicit_Null_When_Empty bool

	CPUHzPerCoreNotIn_Explicit_Null_When_Empty bool

	DataIP_Explicit_Null_When_Empty bool

	DataIPContains_Explicit_Null_When_Empty bool

	DataIPEndsWith_Explicit_Null_When_Empty bool

	DataIPGt_Explicit_Null_When_Empty bool

	DataIPGte_Explicit_Null_When_Empty bool

	DataIPIn_Explicit_Null_When_Empty bool

	DataIPLt_Explicit_Null_When_Empty bool

	DataIPLte_Explicit_Null_When_Empty bool

	DataIPNot_Explicit_Null_When_Empty bool

	DataIPNotContains_Explicit_Null_When_Empty bool

	DataIPNotEndsWith_Explicit_Null_When_Empty bool

	DataIPNotIn_Explicit_Null_When_Empty bool

	DataIPNotStartsWith_Explicit_Null_When_Empty bool

	DataIPStartsWith_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LocalID_Explicit_Null_When_Empty bool

	LocalIDContains_Explicit_Null_When_Empty bool

	LocalIDEndsWith_Explicit_Null_When_Empty bool

	LocalIDGt_Explicit_Null_When_Empty bool

	LocalIDGte_Explicit_Null_When_Empty bool

	LocalIDIn_Explicit_Null_When_Empty bool

	LocalIDLt_Explicit_Null_When_Empty bool

	LocalIDLte_Explicit_Null_When_Empty bool

	LocalIDNot_Explicit_Null_When_Empty bool

	LocalIDNotContains_Explicit_Null_When_Empty bool

	LocalIDNotEndsWith_Explicit_Null_When_Empty bool

	LocalIDNotIn_Explicit_Null_When_Empty bool

	LocalIDNotStartsWith_Explicit_Null_When_Empty bool

	LocalIDStartsWith_Explicit_Null_When_Empty bool

	ManagementIP_Explicit_Null_When_Empty bool

	ManagementIPContains_Explicit_Null_When_Empty bool

	ManagementIPEndsWith_Explicit_Null_When_Empty bool

	ManagementIPGt_Explicit_Null_When_Empty bool

	ManagementIPGte_Explicit_Null_When_Empty bool

	ManagementIPIn_Explicit_Null_When_Empty bool

	ManagementIPLt_Explicit_Null_When_Empty bool

	ManagementIPLte_Explicit_Null_When_Empty bool

	ManagementIPNot_Explicit_Null_When_Empty bool

	ManagementIPNotContains_Explicit_Null_When_Empty bool

	ManagementIPNotEndsWith_Explicit_Null_When_Empty bool

	ManagementIPNotIn_Explicit_Null_When_Empty bool

	ManagementIPNotStartsWith_Explicit_Null_When_Empty bool

	ManagementIPStartsWith_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	SystemDataCapacity_Explicit_Null_When_Empty bool

	SystemDataCapacityGt_Explicit_Null_When_Empty bool

	SystemDataCapacityGte_Explicit_Null_When_Empty bool

	SystemDataCapacityIn_Explicit_Null_When_Empty bool

	SystemDataCapacityLt_Explicit_Null_When_Empty bool

	SystemDataCapacityLte_Explicit_Null_When_Empty bool

	SystemDataCapacityNot_Explicit_Null_When_Empty bool

	SystemDataCapacityNotIn_Explicit_Null_When_Empty bool

	SystemUsedDataSpace_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceGt_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceGte_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceIn_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceLt_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceLte_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceNot_Explicit_Null_When_Empty bool

	SystemUsedDataSpaceNotIn_Explicit_Null_When_Empty bool

	TotalCPUCores_Explicit_Null_When_Empty bool

	TotalCPUCoresGt_Explicit_Null_When_Empty bool

	TotalCPUCoresGte_Explicit_Null_When_Empty bool

	TotalCPUCoresIn_Explicit_Null_When_Empty bool

	TotalCPUCoresLt_Explicit_Null_When_Empty bool

	TotalCPUCoresLte_Explicit_Null_When_Empty bool

	TotalCPUCoresNot_Explicit_Null_When_Empty bool

	TotalCPUCoresNotIn_Explicit_Null_When_Empty bool

	TotalCPUHz_Explicit_Null_When_Empty bool

	TotalCPUHzGt_Explicit_Null_When_Empty bool

	TotalCPUHzGte_Explicit_Null_When_Empty bool

	TotalCPUHzIn_Explicit_Null_When_Empty bool

	TotalCPUHzLt_Explicit_Null_When_Empty bool

	TotalCPUHzLte_Explicit_Null_When_Empty bool

	TotalCPUHzNot_Explicit_Null_When_Empty bool

	TotalCPUHzNotIn_Explicit_Null_When_Empty bool

	TotalMemoryBytes_Explicit_Null_When_Empty bool

	TotalMemoryBytesGt_Explicit_Null_When_Empty bool

	TotalMemoryBytesGte_Explicit_Null_When_Empty bool

	TotalMemoryBytesIn_Explicit_Null_When_Empty bool

	TotalMemoryBytesLt_Explicit_Null_When_Empty bool

	TotalMemoryBytesLte_Explicit_Null_When_Empty bool

	TotalMemoryBytesNot_Explicit_Null_When_Empty bool

	TotalMemoryBytesNotIn_Explicit_Null_When_Empty bool
}

func (m WitnessWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cluster
	if m.Cluster != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":")
		bytes, err := swag.WriteJSON(m.Cluster)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Cluster_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cluster\":null")
		first = false
	}

	// handle nullable field cpu_hz_per_core
	if m.CPUHzPerCore != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCore)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCore_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core\":null")
		first = false
	}

	// handle nullable field cpu_hz_per_core_gt
	if m.CPUHzPerCoreGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_gt\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCoreGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_gt\":null")
		first = false
	}

	// handle nullable field cpu_hz_per_core_gte
	if m.CPUHzPerCoreGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_gte\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCoreGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_gte\":null")
		first = false
	}

	// handle non nullable field cpu_hz_per_core_in with omitempty
	if swag.IsZero(m.CPUHzPerCoreIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_in\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field cpu_hz_per_core_lt
	if m.CPUHzPerCoreLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_lt\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCoreLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_lt\":null")
		first = false
	}

	// handle nullable field cpu_hz_per_core_lte
	if m.CPUHzPerCoreLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_lte\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCoreLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_lte\":null")
		first = false
	}

	// handle nullable field cpu_hz_per_core_not
	if m.CPUHzPerCoreNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_not\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CPUHzPerCoreNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_not\":null")
		first = false
	}

	// handle non nullable field cpu_hz_per_core_not_in with omitempty
	if swag.IsZero(m.CPUHzPerCoreNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"cpu_hz_per_core_not_in\":")
		bytes, err := swag.WriteJSON(m.CPUHzPerCoreNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field data_ip
	if m.DataIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip\":")
		bytes, err := swag.WriteJSON(m.DataIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip\":null")
		first = false
	}

	// handle nullable field data_ip_contains
	if m.DataIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_contains\":")
		bytes, err := swag.WriteJSON(m.DataIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_contains\":null")
		first = false
	}

	// handle nullable field data_ip_ends_with
	if m.DataIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.DataIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_ends_with\":null")
		first = false
	}

	// handle nullable field data_ip_gt
	if m.DataIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_gt\":")
		bytes, err := swag.WriteJSON(m.DataIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_gt\":null")
		first = false
	}

	// handle nullable field data_ip_gte
	if m.DataIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_gte\":")
		bytes, err := swag.WriteJSON(m.DataIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_gte\":null")
		first = false
	}

	// handle non nullable field data_ip_in with omitempty
	if swag.IsZero(m.DataIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_in\":")
		bytes, err := swag.WriteJSON(m.DataIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field data_ip_lt
	if m.DataIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_lt\":")
		bytes, err := swag.WriteJSON(m.DataIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_lt\":null")
		first = false
	}

	// handle nullable field data_ip_lte
	if m.DataIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_lte\":")
		bytes, err := swag.WriteJSON(m.DataIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_lte\":null")
		first = false
	}

	// handle nullable field data_ip_not
	if m.DataIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not\":")
		bytes, err := swag.WriteJSON(m.DataIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not\":null")
		first = false
	}

	// handle nullable field data_ip_not_contains
	if m.DataIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.DataIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_contains\":null")
		first = false
	}

	// handle nullable field data_ip_not_ends_with
	if m.DataIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.DataIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field data_ip_not_in with omitempty
	if swag.IsZero(m.DataIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.DataIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field data_ip_not_starts_with
	if m.DataIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.DataIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field data_ip_starts_with
	if m.DataIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.DataIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.DataIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"data_ip_starts_with\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field local_id
	if m.LocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":")
		bytes, err := swag.WriteJSON(m.LocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id\":null")
		first = false
	}

	// handle nullable field local_id_contains
	if m.LocalIDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_contains\":null")
		first = false
	}

	// handle nullable field local_id_ends_with
	if m.LocalIDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_ends_with\":null")
		first = false
	}

	// handle nullable field local_id_gt
	if m.LocalIDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":")
		bytes, err := swag.WriteJSON(m.LocalIDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gt\":null")
		first = false
	}

	// handle nullable field local_id_gte
	if m.LocalIDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":")
		bytes, err := swag.WriteJSON(m.LocalIDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_gte\":null")
		first = false
	}

	// handle non nullable field local_id_in with omitempty
	if swag.IsZero(m.LocalIDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_lt
	if m.LocalIDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":")
		bytes, err := swag.WriteJSON(m.LocalIDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lt\":null")
		first = false
	}

	// handle nullable field local_id_lte
	if m.LocalIDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":")
		bytes, err := swag.WriteJSON(m.LocalIDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_lte\":null")
		first = false
	}

	// handle nullable field local_id_not
	if m.LocalIDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":")
		bytes, err := swag.WriteJSON(m.LocalIDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not\":null")
		first = false
	}

	// handle nullable field local_id_not_contains
	if m.LocalIDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_contains\":null")
		first = false
	}

	// handle nullable field local_id_not_ends_with
	if m.LocalIDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field local_id_not_in with omitempty
	if swag.IsZero(m.LocalIDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_in\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field local_id_not_starts_with
	if m.LocalIDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_not_starts_with\":null")
		first = false
	}

	// handle nullable field local_id_starts_with
	if m.LocalIDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":")
		bytes, err := swag.WriteJSON(m.LocalIDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LocalIDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"local_id_starts_with\":null")
		first = false
	}

	// handle nullable field management_ip
	if m.ManagementIP != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip\":")
		bytes, err := swag.WriteJSON(m.ManagementIP)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIP_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip\":null")
		first = false
	}

	// handle nullable field management_ip_contains
	if m.ManagementIPContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_contains\":")
		bytes, err := swag.WriteJSON(m.ManagementIPContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_contains\":null")
		first = false
	}

	// handle nullable field management_ip_ends_with
	if m.ManagementIPEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_ends_with\":")
		bytes, err := swag.WriteJSON(m.ManagementIPEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_ends_with\":null")
		first = false
	}

	// handle nullable field management_ip_gt
	if m.ManagementIPGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_gt\":")
		bytes, err := swag.WriteJSON(m.ManagementIPGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_gt\":null")
		first = false
	}

	// handle nullable field management_ip_gte
	if m.ManagementIPGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_gte\":")
		bytes, err := swag.WriteJSON(m.ManagementIPGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_gte\":null")
		first = false
	}

	// handle non nullable field management_ip_in with omitempty
	if swag.IsZero(m.ManagementIPIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_in\":")
		bytes, err := swag.WriteJSON(m.ManagementIPIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field management_ip_lt
	if m.ManagementIPLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_lt\":")
		bytes, err := swag.WriteJSON(m.ManagementIPLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_lt\":null")
		first = false
	}

	// handle nullable field management_ip_lte
	if m.ManagementIPLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_lte\":")
		bytes, err := swag.WriteJSON(m.ManagementIPLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_lte\":null")
		first = false
	}

	// handle nullable field management_ip_not
	if m.ManagementIPNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not\":")
		bytes, err := swag.WriteJSON(m.ManagementIPNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not\":null")
		first = false
	}

	// handle nullable field management_ip_not_contains
	if m.ManagementIPNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_contains\":")
		bytes, err := swag.WriteJSON(m.ManagementIPNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_contains\":null")
		first = false
	}

	// handle nullable field management_ip_not_ends_with
	if m.ManagementIPNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.ManagementIPNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_ends_with\":null")
		first = false
	}

	// handle non nullable field management_ip_not_in with omitempty
	if swag.IsZero(m.ManagementIPNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_in\":")
		bytes, err := swag.WriteJSON(m.ManagementIPNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field management_ip_not_starts_with
	if m.ManagementIPNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.ManagementIPNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_not_starts_with\":null")
		first = false
	}

	// handle nullable field management_ip_starts_with
	if m.ManagementIPStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_starts_with\":")
		bytes, err := swag.WriteJSON(m.ManagementIPStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ManagementIPStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"management_ip_starts_with\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field system_data_capacity
	if m.SystemDataCapacity != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacity)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacity_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity\":null")
		first = false
	}

	// handle nullable field system_data_capacity_gt
	if m.SystemDataCapacityGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_gt\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacityGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_gt\":null")
		first = false
	}

	// handle nullable field system_data_capacity_gte
	if m.SystemDataCapacityGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_gte\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacityGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_gte\":null")
		first = false
	}

	// handle non nullable field system_data_capacity_in with omitempty
	if swag.IsZero(m.SystemDataCapacityIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_in\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field system_data_capacity_lt
	if m.SystemDataCapacityLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_lt\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacityLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_lt\":null")
		first = false
	}

	// handle nullable field system_data_capacity_lte
	if m.SystemDataCapacityLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_lte\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacityLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_lte\":null")
		first = false
	}

	// handle nullable field system_data_capacity_not
	if m.SystemDataCapacityNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_not\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemDataCapacityNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_not\":null")
		first = false
	}

	// handle non nullable field system_data_capacity_not_in with omitempty
	if swag.IsZero(m.SystemDataCapacityNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_data_capacity_not_in\":")
		bytes, err := swag.WriteJSON(m.SystemDataCapacityNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field system_used_data_space
	if m.SystemUsedDataSpace != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpace)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpace_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space\":null")
		first = false
	}

	// handle nullable field system_used_data_space_gt
	if m.SystemUsedDataSpaceGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_gt\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpaceGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_gt\":null")
		first = false
	}

	// handle nullable field system_used_data_space_gte
	if m.SystemUsedDataSpaceGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_gte\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpaceGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_gte\":null")
		first = false
	}

	// handle non nullable field system_used_data_space_in with omitempty
	if swag.IsZero(m.SystemUsedDataSpaceIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_in\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field system_used_data_space_lt
	if m.SystemUsedDataSpaceLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_lt\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpaceLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_lt\":null")
		first = false
	}

	// handle nullable field system_used_data_space_lte
	if m.SystemUsedDataSpaceLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_lte\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpaceLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_lte\":null")
		first = false
	}

	// handle nullable field system_used_data_space_not
	if m.SystemUsedDataSpaceNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_not\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SystemUsedDataSpaceNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_not\":null")
		first = false
	}

	// handle non nullable field system_used_data_space_not_in with omitempty
	if swag.IsZero(m.SystemUsedDataSpaceNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"system_used_data_space_not_in\":")
		bytes, err := swag.WriteJSON(m.SystemUsedDataSpaceNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_cores
	if m.TotalCPUCores != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCores)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCores_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores\":null")
		first = false
	}

	// handle nullable field total_cpu_cores_gt
	if m.TotalCPUCoresGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_gt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCoresGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_gt\":null")
		first = false
	}

	// handle nullable field total_cpu_cores_gte
	if m.TotalCPUCoresGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_gte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCoresGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_gte\":null")
		first = false
	}

	// handle non nullable field total_cpu_cores_in with omitempty
	if swag.IsZero(m.TotalCPUCoresIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_cores_lt
	if m.TotalCPUCoresLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_lt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCoresLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_lt\":null")
		first = false
	}

	// handle nullable field total_cpu_cores_lte
	if m.TotalCPUCoresLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_lte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCoresLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_lte\":null")
		first = false
	}

	// handle nullable field total_cpu_cores_not
	if m.TotalCPUCoresNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_not\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUCoresNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_not\":null")
		first = false
	}

	// handle non nullable field total_cpu_cores_not_in with omitempty
	if swag.IsZero(m.TotalCPUCoresNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_cores_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUCoresNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_hz
	if m.TotalCPUHz != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHz)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHz_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_gt
	if m.TotalCPUHzGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gt\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_gte
	if m.TotalCPUHzGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_gte\":null")
		first = false
	}

	// handle non nullable field total_cpu_hz_in with omitempty
	if swag.IsZero(m.TotalCPUHzIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_cpu_hz_lt
	if m.TotalCPUHzLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lt\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lt\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_lte
	if m.TotalCPUHzLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lte\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_lte\":null")
		first = false
	}

	// handle nullable field total_cpu_hz_not
	if m.TotalCPUHzNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalCPUHzNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not\":null")
		first = false
	}

	// handle non nullable field total_cpu_hz_not_in with omitempty
	if swag.IsZero(m.TotalCPUHzNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_cpu_hz_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalCPUHzNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_memory_bytes
	if m.TotalMemoryBytes != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytes_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_gt
	if m.TotalMemoryBytesGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gt\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gt\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_gte
	if m.TotalMemoryBytesGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gte\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_gte\":null")
		first = false
	}

	// handle non nullable field total_memory_bytes_in with omitempty
	if swag.IsZero(m.TotalMemoryBytesIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_in\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_memory_bytes_lt
	if m.TotalMemoryBytesLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lt\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lt\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_lte
	if m.TotalMemoryBytesLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lte\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_lte\":null")
		first = false
	}

	// handle nullable field total_memory_bytes_not
	if m.TotalMemoryBytesNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalMemoryBytesNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not\":null")
		first = false
	}

	// handle non nullable field total_memory_bytes_not_in with omitempty
	if swag.IsZero(m.TotalMemoryBytesNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_memory_bytes_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalMemoryBytesNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this witness where input
func (m *WitnessWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WitnessWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this witness where input based on the context it is used
func (m *WitnessWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WitnessWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WitnessWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WitnessWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WitnessWhereInput) UnmarshalBinary(b []byte) error {
	var res WitnessWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
