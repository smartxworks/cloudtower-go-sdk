// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplicaVM replica Vm
//
// swagger:model ReplicaVm
type ReplicaVM struct {

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// external cloudtower
	ExternalCloudtower *NestedExternalCloudTower `json:"external_cloudtower,omitempty"`

	// failover test object descriptor
	FailoverTestObjectDescriptor *NestedReplicationObjectDescriptor `json:"failover_test_object_descriptor,omitempty"`

	// failover test replica group
	FailoverTestReplicaGroup *string `json:"failover_test_replica_group,omitempty"`

	// failover test vm
	FailoverTestVM *NestedVM `json:"failover_test_vm,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// inbound
	Inbound *bool `json:"inbound,omitempty"`

	// iscsi lun
	IscsiLun *NestedIscsiLun `json:"iscsi_lun,omitempty"`

	// object descriptor
	ObjectDescriptor *NestedReplicationObjectDescriptor `json:"object_descriptor,omitempty"`

	// origin iscsi lun
	OriginIscsiLun *NestedIscsiLun `json:"origin_iscsi_lun,omitempty"`

	// origin object descriptor
	// Required: true
	OriginObjectDescriptor *NestedReplicationObjectDescriptor `json:"origin_object_descriptor"`

	// origin vm
	OriginVM *NestedVM `json:"origin_vm,omitempty"`

	// origin vm cluster local id
	OriginVMClusterLocalID *string `json:"origin_vm_cluster_local_id,omitempty"`

	// origin vm cluster name
	OriginVMClusterName *string `json:"origin_vm_cluster_name,omitempty"`

	// origin vm local id
	OriginVMLocalID *string `json:"origin_vm_local_id,omitempty"`

	// origin vm name
	OriginVMName *string `json:"origin_vm_name,omitempty"`

	// replica group
	ReplicaGroup *string `json:"replica_group,omitempty"`

	// replication group
	ReplicationGroup *string `json:"replication_group,omitempty"`

	// replication plan
	ReplicationPlan *NestedReplicationPlan `json:"replication_plan,omitempty"`

	// replication service
	// Required: true
	ReplicationService *NestedReplicationService `json:"replication_service"`

	// replication target executions
	ReplicationTargetExecutions []*NestedReplicationTargetExecution `json:"replication_target_executions,omitempty"`

	// restore points
	RestorePoints []*NestedReplicationRestorePoint `json:"restore_points,omitempty"`

	// state
	// Required: true
	State *ReplicaVMState `json:"state"`

	// targets deletable
	TargetsDeletable *bool `json:"targets_deletable,omitempty"`

	// type
	// Required: true
	Type *ReplicationObjectType `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`

	// vm
	VM *NestedVM `json:"vm,omitempty"`

	MarshalOpts *ReplicaVMMarshalOpts `json:"-"`
}

type ReplicaVMMarshalOpts struct {
	CreatedAt_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	FailoverTestObjectDescriptor_Explicit_Null_When_Empty bool

	FailoverTestReplicaGroup_Explicit_Null_When_Empty bool

	FailoverTestVM_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Inbound_Explicit_Null_When_Empty bool

	IscsiLun_Explicit_Null_When_Empty bool

	ObjectDescriptor_Explicit_Null_When_Empty bool

	OriginIscsiLun_Explicit_Null_When_Empty bool

	OriginObjectDescriptor_Explicit_Null_When_Empty bool

	OriginVM_Explicit_Null_When_Empty bool

	OriginVMClusterLocalID_Explicit_Null_When_Empty bool

	OriginVMClusterName_Explicit_Null_When_Empty bool

	OriginVMLocalID_Explicit_Null_When_Empty bool

	OriginVMName_Explicit_Null_When_Empty bool

	ReplicaGroup_Explicit_Null_When_Empty bool

	ReplicationGroup_Explicit_Null_When_Empty bool

	ReplicationPlan_Explicit_Null_When_Empty bool

	ReplicationService_Explicit_Null_When_Empty bool

	ReplicationTargetExecutions_Explicit_Null_When_Empty bool

	RestorePoints_Explicit_Null_When_Empty bool

	State_Explicit_Null_When_Empty bool

	TargetsDeletable_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	VM_Explicit_Null_When_Empty bool
}

func (m ReplicaVM) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field failover_test_object_descriptor
	if m.FailoverTestObjectDescriptor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_object_descriptor\":")
		bytes, err := swag.WriteJSON(m.FailoverTestObjectDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestObjectDescriptor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_object_descriptor\":null")
		first = false
	}

	// handle nullable field failover_test_replica_group
	if m.FailoverTestReplicaGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group\":")
		bytes, err := swag.WriteJSON(m.FailoverTestReplicaGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestReplicaGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_replica_group\":null")
		first = false
	}

	// handle nullable field failover_test_vm
	if m.FailoverTestVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_vm\":")
		bytes, err := swag.WriteJSON(m.FailoverTestVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FailoverTestVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"failover_test_vm\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field inbound
	if m.Inbound != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":")
		bytes, err := swag.WriteJSON(m.Inbound)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Inbound_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"inbound\":null")
		first = false
	}

	// handle nullable field iscsi_lun
	if m.IscsiLun != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":")
		bytes, err := swag.WriteJSON(m.IscsiLun)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiLun_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_lun\":null")
		first = false
	}

	// handle nullable field object_descriptor
	if m.ObjectDescriptor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"object_descriptor\":")
		bytes, err := swag.WriteJSON(m.ObjectDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ObjectDescriptor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"object_descriptor\":null")
		first = false
	}

	// handle nullable field origin_iscsi_lun
	if m.OriginIscsiLun != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_iscsi_lun\":")
		bytes, err := swag.WriteJSON(m.OriginIscsiLun)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginIscsiLun_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_iscsi_lun\":null")
		first = false
	}

	// handle nullable field origin_object_descriptor
	if m.OriginObjectDescriptor != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_object_descriptor\":")
		bytes, err := swag.WriteJSON(m.OriginObjectDescriptor)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginObjectDescriptor_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_object_descriptor\":null")
		first = false
	}

	// handle nullable field origin_vm
	if m.OriginVM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm\":")
		bytes, err := swag.WriteJSON(m.OriginVM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_local_id
	if m.OriginVMClusterLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_local_id\":null")
		first = false
	}

	// handle nullable field origin_vm_cluster_name
	if m.OriginVMClusterName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name\":")
		bytes, err := swag.WriteJSON(m.OriginVMClusterName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMClusterName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_cluster_name\":null")
		first = false
	}

	// handle nullable field origin_vm_local_id
	if m.OriginVMLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id\":")
		bytes, err := swag.WriteJSON(m.OriginVMLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_local_id\":null")
		first = false
	}

	// handle nullable field origin_vm_name
	if m.OriginVMName != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name\":")
		bytes, err := swag.WriteJSON(m.OriginVMName)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.OriginVMName_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"origin_vm_name\":null")
		first = false
	}

	// handle nullable field replica_group
	if m.ReplicaGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group\":")
		bytes, err := swag.WriteJSON(m.ReplicaGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_group\":null")
		first = false
	}

	// handle nullable field replication_group
	if m.ReplicationGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group\":")
		bytes, err := swag.WriteJSON(m.ReplicationGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_group\":null")
		first = false
	}

	// handle nullable field replication_plan
	if m.ReplicationPlan != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":")
		bytes, err := swag.WriteJSON(m.ReplicationPlan)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationPlan_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_plan\":null")
		first = false
	}

	// handle nullable field replication_service
	if m.ReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":")
		bytes, err := swag.WriteJSON(m.ReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":null")
		first = false
	}

	// handle non nullable field replication_target_executions with omitempty
	if !swag.IsZero(m.ReplicationTargetExecutions) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_target_executions\":")
		bytes, err := swag.WriteJSON(m.ReplicationTargetExecutions)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field restore_points with omitempty
	if !swag.IsZero(m.RestorePoints) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"restore_points\":")
		bytes, err := swag.WriteJSON(m.RestorePoints)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field state
	if m.State != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":")
		bytes, err := swag.WriteJSON(m.State)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.State_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":null")
		first = false
	}

	// handle nullable field targets_deletable
	if m.TargetsDeletable != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable\":")
		bytes, err := swag.WriteJSON(m.TargetsDeletable)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TargetsDeletable_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"targets_deletable\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field vm
	if m.VM != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":")
		bytes, err := swag.WriteJSON(m.VM)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VM_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vm\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this replica Vm
func (m *ReplicaVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverTestObjectDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverTestVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginIscsiLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginObjectDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTargetExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaVM) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaVM) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateFailoverTestObjectDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverTestObjectDescriptor) { // not required
		return nil
	}

	if m.FailoverTestObjectDescriptor != nil {
		if err := m.FailoverTestObjectDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateFailoverTestVM(formats strfmt.Registry) error {
	if swag.IsZero(m.FailoverTestVM) { // not required
		return nil
	}

	if m.FailoverTestVM != nil {
		if err := m.FailoverTestVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaVM) validateIscsiLun(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLun) { // not required
		return nil
	}

	if m.IscsiLun != nil {
		if err := m.IscsiLun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateObjectDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectDescriptor) { // not required
		return nil
	}

	if m.ObjectDescriptor != nil {
		if err := m.ObjectDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateOriginIscsiLun(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginIscsiLun) { // not required
		return nil
	}

	if m.OriginIscsiLun != nil {
		if err := m.OriginIscsiLun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateOriginObjectDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("origin_object_descriptor", "body", m.OriginObjectDescriptor); err != nil {
		return err
	}

	if m.OriginObjectDescriptor != nil {
		if err := m.OriginObjectDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateOriginVM(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginVM) { // not required
		return nil
	}

	if m.OriginVM != nil {
		if err := m.OriginVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateReplicationPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationPlan) { // not required
		return nil
	}

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateReplicationService(formats strfmt.Registry) error {

	if err := validate.Required("replication_service", "body", m.ReplicationService); err != nil {
		return err
	}

	if m.ReplicationService != nil {
		if err := m.ReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateReplicationTargetExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTargetExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicationTargetExecutions); i++ {
		if swag.IsZero(m.ReplicationTargetExecutions[i]) { // not required
			continue
		}

		if m.ReplicationTargetExecutions[i] != nil {
			if err := m.ReplicationTargetExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVM) validateRestorePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePoints) { // not required
		return nil
	}

	for i := 0; i < len(m.RestorePoints); i++ {
		if swag.IsZero(m.RestorePoints[i]) { // not required
			continue
		}

		if m.RestorePoints[i] != nil {
			if err := m.RestorePoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVM) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReplicaVM) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replica Vm based on the context it is used
func (m *ReplicaVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverTestObjectDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailoverTestVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginIscsiLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginObjectDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationTargetExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplicaVM) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateFailoverTestObjectDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverTestObjectDescriptor != nil {
		if err := m.FailoverTestObjectDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateFailoverTestVM(ctx context.Context, formats strfmt.Registry) error {

	if m.FailoverTestVM != nil {
		if err := m.FailoverTestVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failover_test_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failover_test_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateIscsiLun(ctx context.Context, formats strfmt.Registry) error {

	if m.IscsiLun != nil {
		if err := m.IscsiLun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateObjectDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectDescriptor != nil {
		if err := m.ObjectDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateOriginIscsiLun(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginIscsiLun != nil {
		if err := m.OriginIscsiLun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_iscsi_lun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_iscsi_lun")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateOriginObjectDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginObjectDescriptor != nil {
		if err := m.OriginObjectDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_object_descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_object_descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateOriginVM(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginVM != nil {
		if err := m.OriginVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin_vm")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateReplicationPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationPlan != nil {
		if err := m.ReplicationPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_plan")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationService != nil {
		if err := m.ReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateReplicationTargetExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicationTargetExecutions); i++ {

		if m.ReplicationTargetExecutions[i] != nil {
			if err := m.ReplicationTargetExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replication_target_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVM) contextValidateRestorePoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestorePoints); i++ {

		if m.RestorePoints[i] != nil {
			if err := m.RestorePoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restore_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restore_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReplicaVM) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ReplicaVM) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplicaVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplicaVM) UnmarshalBinary(b []byte) error {
	var res ReplicaVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
