// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IscsiLunCreationParams iscsi lun creation params
//
// swagger:model IscsiLunCreationParams
type IscsiLunCreationParams struct {

	// assigned size
	// Required: true
	AssignedSize *int64 `json:"assigned_size"`

	// assigned size unit
	AssignedSizeUnit *ByteUnit `json:"assigned_size_unit,omitempty"`

	// iscsi target id
	// Required: true
	IscsiTargetID *string `json:"iscsi_target_id"`

	// lun id
	LunID *int32 `json:"lun_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// replica num
	// Required: true
	ReplicaNum *int32 `json:"replica_num"`

	IscsiLunCommonParams

	MarshalOpts *IscsiLunCreationParamsMarshalOpts `json:"-"`
}

type IscsiLunCreationParamsMarshalOpts struct {
	AssignedSize_Explicit_Null_When_Empty bool

	AssignedSizeUnit_Explicit_Null_When_Empty bool

	IscsiTargetID_Explicit_Null_When_Empty bool

	LunID_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	ReplicaNum_Explicit_Null_When_Empty bool
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IscsiLunCreationParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AssignedSize *int64 `json:"assigned_size"`

		AssignedSizeUnit *ByteUnit `json:"assigned_size_unit,omitempty"`

		IscsiTargetID *string `json:"iscsi_target_id"`

		LunID *int32 `json:"lun_id,omitempty"`

		Name *string `json:"name"`

		ReplicaNum *int32 `json:"replica_num"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AssignedSize = dataAO0.AssignedSize

	m.AssignedSizeUnit = dataAO0.AssignedSizeUnit

	m.IscsiTargetID = dataAO0.IscsiTargetID

	m.LunID = dataAO0.LunID

	m.Name = dataAO0.Name

	m.ReplicaNum = dataAO0.ReplicaNum

	// AO1
	var aO1 IscsiLunCommonParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.IscsiLunCommonParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IscsiLunCreationParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var b bytes.Buffer
	b.WriteString("{")
	first := true

	// handle nullable field assigned_size
	if m.AssignedSize != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":")
		bytes, err := swag.WriteJSON(m.AssignedSize)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSize_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size\":null")
		first = false
	}

	// handle nullable field assigned_size_unit
	if m.AssignedSizeUnit != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_unit\":")
		bytes, err := swag.WriteJSON(m.AssignedSizeUnit)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.AssignedSizeUnit_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"assigned_size_unit\":null")
		first = false
	}

	// handle nullable field iscsi_target_id
	if m.IscsiTargetID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_id\":")
		bytes, err := swag.WriteJSON(m.IscsiTargetID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IscsiTargetID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"iscsi_target_id\":null")
		first = false
	}

	// handle nullable field lun_id
	if m.LunID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lun_id\":")
		bytes, err := swag.WriteJSON(m.LunID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LunID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"lun_id\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field replica_num
	if m.ReplicaNum != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":")
		bytes, err := swag.WriteJSON(m.ReplicaNum)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicaNum_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replica_num\":null")
		first = false
	}
	b.WriteString("}")
	_parts = append(_parts, b.Bytes())

	aO1, err := swag.WriteJSON(m.IscsiLunCommonParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iscsi lun creation params
func (m *IscsiLunCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaNum(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with IscsiLunCommonParams
	if err := m.IscsiLunCommonParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiLunCreationParams) validateAssignedSize(formats strfmt.Registry) error {

	if err := validate.Required("assigned_size", "body", m.AssignedSize); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLunCreationParams) validateAssignedSizeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedSizeUnit) { // not required
		return nil
	}

	if m.AssignedSizeUnit != nil {
		if err := m.AssignedSizeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_size_unit")
			}
			return err
		}
	}

	return nil
}

func (m *IscsiLunCreationParams) validateIscsiTargetID(formats strfmt.Registry) error {

	if err := validate.Required("iscsi_target_id", "body", m.IscsiTargetID); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLunCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IscsiLunCreationParams) validateReplicaNum(formats strfmt.Registry) error {

	if err := validate.Required("replica_num", "body", m.ReplicaNum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this iscsi lun creation params based on the context it is used
func (m *IscsiLunCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedSizeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with IscsiLunCommonParams
	if err := m.IscsiLunCommonParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IscsiLunCreationParams) contextValidateAssignedSizeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedSizeUnit != nil {
		if err := m.AssignedSizeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_size_unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_size_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IscsiLunCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IscsiLunCreationParams) UnmarshalBinary(b []byte) error {
	var res IscsiLunCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
