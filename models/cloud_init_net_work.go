// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudInitNetWork cloud init net work
//
// swagger:model CloudInitNetWork
type CloudInitNetWork struct {

	// ip address
	IPAddress *string `json:"ip_address,omitempty"`

	// netmask
	Netmask *string `json:"netmask,omitempty"`

	// nic index
	// Required: true
	NicIndex *int32 `json:"nic_index"`

	// routes
	Routes []*CloudInitNetWorkRoute `json:"routes,omitempty"`

	// type
	// Required: true
	Type *CloudInitNetworkTypeEnum `json:"type"`

	MarshalOpts *CloudInitNetWorkMarshalOpts `json:"-"`
}

type CloudInitNetWorkMarshalOpts struct {
	IPAddress_Explicit_Null_When_Empty bool

	Netmask_Explicit_Null_When_Empty bool

	NicIndex_Explicit_Null_When_Empty bool

	Routes_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool
}

func (m CloudInitNetWork) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field ip_address
	if m.IPAddress != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":")
		bytes, err := swag.WriteJSON(m.IPAddress)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IPAddress_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"ip_address\":null")
		first = false
	}

	// handle nullable field netmask
	if m.Netmask != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"netmask\":")
		bytes, err := swag.WriteJSON(m.Netmask)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Netmask_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"netmask\":null")
		first = false
	}

	// handle nullable field nic_index
	if m.NicIndex != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_index\":")
		bytes, err := swag.WriteJSON(m.NicIndex)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NicIndex_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"nic_index\":null")
		first = false
	}

	// handle non nullable field routes with omitempty
	if !swag.IsZero(m.Routes) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"routes\":")
		bytes, err := swag.WriteJSON(m.Routes)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this cloud init net work
func (m *CloudInitNetWork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNicIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudInitNetWork) validateNicIndex(formats strfmt.Registry) error {

	if err := validate.Required("nic_index", "body", m.NicIndex); err != nil {
		return err
	}

	return nil
}

func (m *CloudInitNetWork) validateRoutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudInitNetWork) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud init net work based on the context it is used
func (m *CloudInitNetWork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudInitNetWork) contextValidateRoutes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Routes); i++ {

		if m.Routes[i] != nil {
			if err := m.Routes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudInitNetWork) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudInitNetWork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudInitNetWork) UnmarshalBinary(b []byte) error {
	var res CloudInitNetWork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
