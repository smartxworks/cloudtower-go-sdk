// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EverouteCluster everoute cluster
//
// swagger:model EverouteCluster
type EverouteCluster struct {

	// agent elf clusters
	AgentElfClusters []*NestedCluster `json:"agent_elf_clusters,omitempty"`

	// agent elf vdses
	AgentElfVdses []*NestedVds `json:"agent_elf_vdses,omitempty"`

	// controller instances
	// Required: true
	ControllerInstances []*NestedEverouteControllerInstance `json:"controller_instances"`

	// controller template
	// Required: true
	ControllerTemplate *NestedEverouteControllerTemplate `json:"controller_template"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// global default action
	// Required: true
	GlobalDefaultAction *GlobalPolicyAction `json:"global_default_action"`

	// global whitelist
	GlobalWhitelist *NestedEverouteClusterWhitelist `json:"global_whitelist,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// installed
	Installed *bool `json:"installed,omitempty"`

	// load balancer service
	LoadBalancerService *NestedLoadBalancerService `json:"load_balancer_service,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// status
	Status *NestedEverouteClusterStatus `json:"status,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`

	// vpc service
	VpcService *NestedVirtualPrivateCloudService `json:"vpc_service,omitempty"`

	MarshalOpts *EverouteClusterMarshalOpts `json:"-"`
}

type EverouteClusterMarshalOpts struct {
	AgentElfClusters_Explicit_Null_When_Empty bool

	AgentElfVdses_Explicit_Null_When_Empty bool

	ControllerInstances_Explicit_Null_When_Empty bool

	ControllerTemplate_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	GlobalDefaultAction_Explicit_Null_When_Empty bool

	GlobalWhitelist_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	Installed_Explicit_Null_When_Empty bool

	LoadBalancerService_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	Phase_Explicit_Null_When_Empty bool

	Status_Explicit_Null_When_Empty bool

	Version_Explicit_Null_When_Empty bool

	VpcService_Explicit_Null_When_Empty bool
}

func (m EverouteCluster) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field agent_elf_clusters with omitempty
	if swag.IsZero(m.AgentElfClusters) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"agent_elf_clusters\":")
		bytes, err := swag.WriteJSON(m.AgentElfClusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field agent_elf_vdses with omitempty
	if swag.IsZero(m.AgentElfVdses) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"agent_elf_vdses\":")
		bytes, err := swag.WriteJSON(m.AgentElfVdses)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field controller_instances without omitempty
	if !first {
		b.WriteString(",")
	}
	b.WriteString("\"controller_instances\":")
	{
		bytes, err := swag.WriteJSON(m.ControllerInstances)
		if err != nil {
			return nil, err
		}
	}
	b.Write(bytes)
	first = false

	// handle nullable field controller_template
	if m.ControllerTemplate != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"controller_template\":")
		bytes, err := swag.WriteJSON(m.ControllerTemplate)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ControllerTemplate_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"controller_template\":null")
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle nullable field global_default_action
	if m.GlobalDefaultAction != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"global_default_action\":")
		bytes, err := swag.WriteJSON(m.GlobalDefaultAction)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GlobalDefaultAction_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"global_default_action\":null")
		first = false
	}

	// handle nullable field global_whitelist
	if m.GlobalWhitelist != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"global_whitelist\":")
		bytes, err := swag.WriteJSON(m.GlobalWhitelist)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.GlobalWhitelist_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"global_whitelist\":null")
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field installed
	if m.Installed != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"installed\":")
		bytes, err := swag.WriteJSON(m.Installed)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Installed_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"installed\":null")
		first = false
	}

	// handle nullable field load_balancer_service
	if m.LoadBalancerService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"load_balancer_service\":")
		bytes, err := swag.WriteJSON(m.LoadBalancerService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LoadBalancerService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"load_balancer_service\":null")
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field phase
	if m.Phase != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":")
		bytes, err := swag.WriteJSON(m.Phase)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Phase_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"phase\":null")
		first = false
	}

	// handle nullable field status
	if m.Status != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":")
		bytes, err := swag.WriteJSON(m.Status)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Status_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"status\":null")
		first = false
	}

	// handle nullable field version
	if m.Version != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":")
		bytes, err := swag.WriteJSON(m.Version)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Version_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"version\":null")
		first = false
	}

	// handle nullable field vpc_service
	if m.VpcService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":")
		bytes, err := swag.WriteJSON(m.VpcService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_service\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this everoute cluster
func (m *EverouteCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentElfClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentElfVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalDefaultAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancerService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EverouteCluster) validateAgentElfClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentElfClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentElfClusters); i++ {
		if swag.IsZero(m.AgentElfClusters[i]) { // not required
			continue
		}

		if m.AgentElfClusters[i] != nil {
			if err := m.AgentElfClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agent_elf_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agent_elf_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) validateAgentElfVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentElfVdses) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentElfVdses); i++ {
		if swag.IsZero(m.AgentElfVdses[i]) { // not required
			continue
		}

		if m.AgentElfVdses[i] != nil {
			if err := m.AgentElfVdses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agent_elf_vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agent_elf_vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) validateControllerInstances(formats strfmt.Registry) error {

	if err := validate.Required("controller_instances", "body", m.ControllerInstances); err != nil {
		return err
	}

	for i := 0; i < len(m.ControllerInstances); i++ {
		if swag.IsZero(m.ControllerInstances[i]) { // not required
			continue
		}

		if m.ControllerInstances[i] != nil {
			if err := m.ControllerInstances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controller_instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controller_instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) validateControllerTemplate(formats strfmt.Registry) error {

	if err := validate.Required("controller_template", "body", m.ControllerTemplate); err != nil {
		return err
	}

	if m.ControllerTemplate != nil {
		if err := m.ControllerTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controller_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controller_template")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateGlobalDefaultAction(formats strfmt.Registry) error {

	if err := validate.Required("global_default_action", "body", m.GlobalDefaultAction); err != nil {
		return err
	}

	if err := validate.Required("global_default_action", "body", m.GlobalDefaultAction); err != nil {
		return err
	}

	if m.GlobalDefaultAction != nil {
		if err := m.GlobalDefaultAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_default_action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_default_action")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateGlobalWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalWhitelist) { // not required
		return nil
	}

	if m.GlobalWhitelist != nil {
		if err := m.GlobalWhitelist.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_whitelist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_whitelist")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EverouteCluster) validateLoadBalancerService(formats strfmt.Registry) error {
	if swag.IsZero(m.LoadBalancerService) { // not required
		return nil
	}

	if m.LoadBalancerService != nil {
		if err := m.LoadBalancerService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load_balancer_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("load_balancer_service")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EverouteCluster) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *EverouteCluster) validateVpcService(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcService) { // not required
		return nil
	}

	if m.VpcService != nil {
		if err := m.VpcService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this everoute cluster based on the context it is used
func (m *EverouteCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentElfClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentElfVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllerTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalDefaultAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoadBalancerService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EverouteCluster) contextValidateAgentElfClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentElfClusters); i++ {

		if m.AgentElfClusters[i] != nil {
			if err := m.AgentElfClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agent_elf_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agent_elf_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) contextValidateAgentElfVdses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentElfVdses); i++ {

		if m.AgentElfVdses[i] != nil {
			if err := m.AgentElfVdses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agent_elf_vdses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agent_elf_vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) contextValidateControllerInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControllerInstances); i++ {

		if m.ControllerInstances[i] != nil {
			if err := m.ControllerInstances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controller_instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controller_instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EverouteCluster) contextValidateControllerTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerTemplate != nil {
		if err := m.ControllerTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controller_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controller_template")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateGlobalDefaultAction(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalDefaultAction != nil {
		if err := m.GlobalDefaultAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_default_action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_default_action")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateGlobalWhitelist(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalWhitelist != nil {
		if err := m.GlobalWhitelist.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_whitelist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_whitelist")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateLoadBalancerService(ctx context.Context, formats strfmt.Registry) error {

	if m.LoadBalancerService != nil {
		if err := m.LoadBalancerService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load_balancer_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("load_balancer_service")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *EverouteCluster) contextValidateVpcService(ctx context.Context, formats strfmt.Registry) error {

	if m.VpcService != nil {
		if err := m.VpcService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc_service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EverouteCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EverouteCluster) UnmarshalBinary(b []byte) error {
	var res EverouteCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
