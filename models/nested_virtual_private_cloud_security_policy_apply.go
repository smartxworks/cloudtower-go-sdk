// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedVirtualPrivateCloudSecurityPolicyApply nested virtual private cloud security policy apply
//
// swagger:model NestedVirtualPrivateCloudSecurityPolicyApply
type NestedVirtualPrivateCloudSecurityPolicyApply struct {

	// communicable
	// Required: true
	Communicable *bool `json:"communicable"`

	// security group
	SecurityGroup *NestedVirtualPrivateCloudSecurityGroup `json:"security_group,omitempty"`

	// security group id
	// Required: true
	SecurityGroupID *string `json:"security_group_id"`

	MarshalOpts *NestedVirtualPrivateCloudSecurityPolicyApplyMarshalOpts `json:"-"`
}

type NestedVirtualPrivateCloudSecurityPolicyApplyMarshalOpts struct {
	Communicable_Explicit_Null_When_Empty bool

	SecurityGroup_Explicit_Null_When_Empty bool

	SecurityGroupID_Explicit_Null_When_Empty bool
}

func (m NestedVirtualPrivateCloudSecurityPolicyApply) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field communicable
	if m.Communicable != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"communicable\":")
		bytes, err := swag.WriteJSON(m.Communicable)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Communicable_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"communicable\":null")
		first = false
	}

	// handle nullable field security_group
	if m.SecurityGroup != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_group\":")
		bytes, err := swag.WriteJSON(m.SecurityGroup)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityGroup_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_group\":null")
		first = false
	}

	// handle nullable field security_group_id
	if m.SecurityGroupID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_group_id\":")
		bytes, err := swag.WriteJSON(m.SecurityGroupID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SecurityGroupID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"security_group_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this nested virtual private cloud security policy apply
func (m *NestedVirtualPrivateCloudSecurityPolicyApply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunicable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedVirtualPrivateCloudSecurityPolicyApply) validateCommunicable(formats strfmt.Registry) error {

	if err := validate.Required("communicable", "body", m.Communicable); err != nil {
		return err
	}

	return nil
}

func (m *NestedVirtualPrivateCloudSecurityPolicyApply) validateSecurityGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityGroup) { // not required
		return nil
	}

	if m.SecurityGroup != nil {
		if err := m.SecurityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_group")
			}
			return err
		}
	}

	return nil
}

func (m *NestedVirtualPrivateCloudSecurityPolicyApply) validateSecurityGroupID(formats strfmt.Registry) error {

	if err := validate.Required("security_group_id", "body", m.SecurityGroupID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested virtual private cloud security policy apply based on the context it is used
func (m *NestedVirtualPrivateCloudSecurityPolicyApply) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedVirtualPrivateCloudSecurityPolicyApply) contextValidateSecurityGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityGroup != nil {
		if err := m.SecurityGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedVirtualPrivateCloudSecurityPolicyApply) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedVirtualPrivateCloudSecurityPolicyApply) UnmarshalBinary(b []byte) error {
	var res NestedVirtualPrivateCloudSecurityPolicyApply
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
