// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMExportFileType Vm export file type
//
// swagger:model VmExportFileType
type VMExportFileType string

func NewVMExportFileType(value VMExportFileType) *VMExportFileType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMExportFileType.
func (m VMExportFileType) Pointer() *VMExportFileType {
	return &m
}

const (

	// VMExportFileTypeOVF captures enum value "OVF"
	VMExportFileTypeOVF VMExportFileType = "OVF"

	// VMExportFileTypeQCOW2 captures enum value "QCOW2"
	VMExportFileTypeQCOW2 VMExportFileType = "QCOW2"

	// VMExportFileTypeRAW captures enum value "RAW"
	VMExportFileTypeRAW VMExportFileType = "RAW"

	// VMExportFileTypeVMDK captures enum value "VMDK"
	VMExportFileTypeVMDK VMExportFileType = "VMDK"
)

// for schema
var vmExportFileTypeEnum []interface{}

func init() {
	var res []VMExportFileType
	if err := json.Unmarshal([]byte(`["OVF","QCOW2","RAW","VMDK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmExportFileTypeEnum = append(vmExportFileTypeEnum, v)
	}
}

func (m VMExportFileType) validateVMExportFileTypeEnum(path, location string, value VMExportFileType) error {
	if err := validate.EnumCase(path, location, value, vmExportFileTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm export file type
func (m VMExportFileType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMExportFileTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm export file type based on context it is used
func (m VMExportFileType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
