// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FailbackExecutionWhereInput failback execution where input
//
// swagger:model FailbackExecutionWhereInput
type FailbackExecutionWhereInput struct {

	// a n d
	AND []*FailbackExecutionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*FailbackExecutionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*FailbackExecutionWhereInput `json:"OR,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// external cloudtower
	ExternalCloudtower *ExternalCloudTowerWhereInput `json:"external_cloudtower,omitempty"`

	// finished at
	FinishedAt *string `json:"finished_at,omitempty"`

	// finished at gt
	FinishedAtGt *string `json:"finished_at_gt,omitempty"`

	// finished at gte
	FinishedAtGte *string `json:"finished_at_gte,omitempty"`

	// finished at in
	FinishedAtIn []string `json:"finished_at_in,omitempty"`

	// finished at lt
	FinishedAtLt *string `json:"finished_at_lt,omitempty"`

	// finished at lte
	FinishedAtLte *string `json:"finished_at_lte,omitempty"`

	// finished at not
	FinishedAtNot *string `json:"finished_at_not,omitempty"`

	// finished at not in
	FinishedAtNotIn []string `json:"finished_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// replication failback target executions every
	ReplicationFailbackTargetExecutionsEvery *ReplicationFailbackTargetExecutionWhereInput `json:"replication_failback_target_executions_every,omitempty"`

	// replication failback target executions none
	ReplicationFailbackTargetExecutionsNone *ReplicationFailbackTargetExecutionWhereInput `json:"replication_failback_target_executions_none,omitempty"`

	// replication failback target executions some
	ReplicationFailbackTargetExecutionsSome *ReplicationFailbackTargetExecutionWhereInput `json:"replication_failback_target_executions_some,omitempty"`

	// replication service
	ReplicationService *ReplicationServiceWhereInput `json:"replication_service,omitempty"`

	// resource version
	ResourceVersion *int32 `json:"resource_version,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// state
	State *BackupExecutionState `json:"state,omitempty"`

	// state in
	StateIn []BackupExecutionState `json:"state_in,omitempty"`

	// state not
	StateNot *BackupExecutionState `json:"state_not,omitempty"`

	// state not in
	StateNotIn []BackupExecutionState `json:"state_not_in,omitempty"`

	// success job count
	SuccessJobCount *int32 `json:"success_job_count,omitempty"`

	// success job count gt
	SuccessJobCountGt *int32 `json:"success_job_count_gt,omitempty"`

	// success job count gte
	SuccessJobCountGte *int32 `json:"success_job_count_gte,omitempty"`

	// success job count in
	SuccessJobCountIn []int32 `json:"success_job_count_in,omitempty"`

	// success job count lt
	SuccessJobCountLt *int32 `json:"success_job_count_lt,omitempty"`

	// success job count lte
	SuccessJobCountLte *int32 `json:"success_job_count_lte,omitempty"`

	// success job count not
	SuccessJobCountNot *int32 `json:"success_job_count_not,omitempty"`

	// success job count not in
	SuccessJobCountNotIn []int32 `json:"success_job_count_not_in,omitempty"`

	// total job count
	TotalJobCount *int32 `json:"total_job_count,omitempty"`

	// total job count gt
	TotalJobCountGt *int32 `json:"total_job_count_gt,omitempty"`

	// total job count gte
	TotalJobCountGte *int32 `json:"total_job_count_gte,omitempty"`

	// total job count in
	TotalJobCountIn []int32 `json:"total_job_count_in,omitempty"`

	// total job count lt
	TotalJobCountLt *int32 `json:"total_job_count_lt,omitempty"`

	// total job count lte
	TotalJobCountLte *int32 `json:"total_job_count_lte,omitempty"`

	// total job count not
	TotalJobCountNot *int32 `json:"total_job_count_not,omitempty"`

	// total job count not in
	TotalJobCountNotIn []int32 `json:"total_job_count_not_in,omitempty"`

	// updated at
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// updated at gt
	UpdatedAtGt *string `json:"updatedAt_gt,omitempty"`

	// updated at gte
	UpdatedAtGte *string `json:"updatedAt_gte,omitempty"`

	// updated at in
	UpdatedAtIn []string `json:"updatedAt_in,omitempty"`

	// updated at lt
	UpdatedAtLt *string `json:"updatedAt_lt,omitempty"`

	// updated at lte
	UpdatedAtLte *string `json:"updatedAt_lte,omitempty"`

	// updated at not
	UpdatedAtNot *string `json:"updatedAt_not,omitempty"`

	// updated at not in
	UpdatedAtNotIn []string `json:"updatedAt_not_in,omitempty"`

	MarshalOpts *FailbackExecutionWhereInputMarshalOpts `json:"-"`
}

type FailbackExecutionWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	CreatedAt_Explicit_Null_When_Empty bool

	CreatedAtGt_Explicit_Null_When_Empty bool

	CreatedAtGte_Explicit_Null_When_Empty bool

	CreatedAtIn_Explicit_Null_When_Empty bool

	CreatedAtLt_Explicit_Null_When_Empty bool

	CreatedAtLte_Explicit_Null_When_Empty bool

	CreatedAtNot_Explicit_Null_When_Empty bool

	CreatedAtNotIn_Explicit_Null_When_Empty bool

	EntityAsyncStatus_Explicit_Null_When_Empty bool

	EntityAsyncStatusIn_Explicit_Null_When_Empty bool

	EntityAsyncStatusNot_Explicit_Null_When_Empty bool

	EntityAsyncStatusNotIn_Explicit_Null_When_Empty bool

	ExternalCloudtower_Explicit_Null_When_Empty bool

	FinishedAt_Explicit_Null_When_Empty bool

	FinishedAtGt_Explicit_Null_When_Empty bool

	FinishedAtGte_Explicit_Null_When_Empty bool

	FinishedAtIn_Explicit_Null_When_Empty bool

	FinishedAtLt_Explicit_Null_When_Empty bool

	FinishedAtLte_Explicit_Null_When_Empty bool

	FinishedAtNot_Explicit_Null_When_Empty bool

	FinishedAtNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	ReplicationFailbackTargetExecutionsEvery_Explicit_Null_When_Empty bool

	ReplicationFailbackTargetExecutionsNone_Explicit_Null_When_Empty bool

	ReplicationFailbackTargetExecutionsSome_Explicit_Null_When_Empty bool

	ReplicationService_Explicit_Null_When_Empty bool

	ResourceVersion_Explicit_Null_When_Empty bool

	ResourceVersionGt_Explicit_Null_When_Empty bool

	ResourceVersionGte_Explicit_Null_When_Empty bool

	ResourceVersionIn_Explicit_Null_When_Empty bool

	ResourceVersionLt_Explicit_Null_When_Empty bool

	ResourceVersionLte_Explicit_Null_When_Empty bool

	ResourceVersionNot_Explicit_Null_When_Empty bool

	ResourceVersionNotIn_Explicit_Null_When_Empty bool

	State_Explicit_Null_When_Empty bool

	StateIn_Explicit_Null_When_Empty bool

	StateNot_Explicit_Null_When_Empty bool

	StateNotIn_Explicit_Null_When_Empty bool

	SuccessJobCount_Explicit_Null_When_Empty bool

	SuccessJobCountGt_Explicit_Null_When_Empty bool

	SuccessJobCountGte_Explicit_Null_When_Empty bool

	SuccessJobCountIn_Explicit_Null_When_Empty bool

	SuccessJobCountLt_Explicit_Null_When_Empty bool

	SuccessJobCountLte_Explicit_Null_When_Empty bool

	SuccessJobCountNot_Explicit_Null_When_Empty bool

	SuccessJobCountNotIn_Explicit_Null_When_Empty bool

	TotalJobCount_Explicit_Null_When_Empty bool

	TotalJobCountGt_Explicit_Null_When_Empty bool

	TotalJobCountGte_Explicit_Null_When_Empty bool

	TotalJobCountIn_Explicit_Null_When_Empty bool

	TotalJobCountLt_Explicit_Null_When_Empty bool

	TotalJobCountLte_Explicit_Null_When_Empty bool

	TotalJobCountNot_Explicit_Null_When_Empty bool

	TotalJobCountNotIn_Explicit_Null_When_Empty bool

	UpdatedAt_Explicit_Null_When_Empty bool

	UpdatedAtGt_Explicit_Null_When_Empty bool

	UpdatedAtGte_Explicit_Null_When_Empty bool

	UpdatedAtIn_Explicit_Null_When_Empty bool

	UpdatedAtLt_Explicit_Null_When_Empty bool

	UpdatedAtLte_Explicit_Null_When_Empty bool

	UpdatedAtNot_Explicit_Null_When_Empty bool

	UpdatedAtNotIn_Explicit_Null_When_Empty bool
}

func (m FailbackExecutionWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if !swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if !swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if !swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt
	if m.CreatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":")
		bytes, err := swag.WriteJSON(m.CreatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt\":null")
		first = false
	}

	// handle nullable field createdAt_gt
	if m.CreatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gt\":null")
		first = false
	}

	// handle nullable field createdAt_gte
	if m.CreatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_gte\":null")
		first = false
	}

	// handle non nullable field createdAt_in with omitempty
	if !swag.IsZero(m.CreatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field createdAt_lt
	if m.CreatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lt\":null")
		first = false
	}

	// handle nullable field createdAt_lte
	if m.CreatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":")
		bytes, err := swag.WriteJSON(m.CreatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_lte\":null")
		first = false
	}

	// handle nullable field createdAt_not
	if m.CreatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.CreatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not\":null")
		first = false
	}

	// handle non nullable field createdAt_not_in with omitempty
	if !swag.IsZero(m.CreatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"createdAt_not_in\":")
		bytes, err := swag.WriteJSON(m.CreatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus
	if m.EntityAsyncStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entityAsyncStatus_not
	if m.EntityAsyncStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityAsyncStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not\":null")
		first = false
	}

	// handle non nullable field entityAsyncStatus_not_in with omitempty
	if !swag.IsZero(m.EntityAsyncStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entityAsyncStatus_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityAsyncStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field external_cloudtower
	if m.ExternalCloudtower != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":")
		bytes, err := swag.WriteJSON(m.ExternalCloudtower)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExternalCloudtower_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"external_cloudtower\":null")
		first = false
	}

	// handle nullable field finished_at
	if m.FinishedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":")
		bytes, err := swag.WriteJSON(m.FinishedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at\":null")
		first = false
	}

	// handle nullable field finished_at_gt
	if m.FinishedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gt\":null")
		first = false
	}

	// handle nullable field finished_at_gte
	if m.FinishedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_gte\":null")
		first = false
	}

	// handle non nullable field finished_at_in with omitempty
	if !swag.IsZero(m.FinishedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field finished_at_lt
	if m.FinishedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lt\":null")
		first = false
	}

	// handle nullable field finished_at_lte
	if m.FinishedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":")
		bytes, err := swag.WriteJSON(m.FinishedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_lte\":null")
		first = false
	}

	// handle nullable field finished_at_not
	if m.FinishedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FinishedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not\":null")
		first = false
	}

	// handle non nullable field finished_at_not_in with omitempty
	if !swag.IsZero(m.FinishedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"finished_at_not_in\":")
		bytes, err := swag.WriteJSON(m.FinishedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if !swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if !swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field replication_failback_target_executions_every
	if m.ReplicationFailbackTargetExecutionsEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_every\":")
		bytes, err := swag.WriteJSON(m.ReplicationFailbackTargetExecutionsEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationFailbackTargetExecutionsEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_every\":null")
		first = false
	}

	// handle nullable field replication_failback_target_executions_none
	if m.ReplicationFailbackTargetExecutionsNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_none\":")
		bytes, err := swag.WriteJSON(m.ReplicationFailbackTargetExecutionsNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationFailbackTargetExecutionsNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_none\":null")
		first = false
	}

	// handle nullable field replication_failback_target_executions_some
	if m.ReplicationFailbackTargetExecutionsSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_some\":")
		bytes, err := swag.WriteJSON(m.ReplicationFailbackTargetExecutionsSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationFailbackTargetExecutionsSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_failback_target_executions_some\":null")
		first = false
	}

	// handle nullable field replication_service
	if m.ReplicationService != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":")
		bytes, err := swag.WriteJSON(m.ReplicationService)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ReplicationService_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"replication_service\":null")
		first = false
	}

	// handle nullable field resource_version
	if m.ResourceVersion != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":")
		bytes, err := swag.WriteJSON(m.ResourceVersion)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersion_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version\":null")
		first = false
	}

	// handle nullable field resource_version_gt
	if m.ResourceVersionGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gt\":null")
		first = false
	}

	// handle nullable field resource_version_gte
	if m.ResourceVersionGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_gte\":null")
		first = false
	}

	// handle non nullable field resource_version_in with omitempty
	if !swag.IsZero(m.ResourceVersionIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field resource_version_lt
	if m.ResourceVersionLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lt\":null")
		first = false
	}

	// handle nullable field resource_version_lte
	if m.ResourceVersionLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_lte\":null")
		first = false
	}

	// handle nullable field resource_version_not
	if m.ResourceVersionNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ResourceVersionNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not\":null")
		first = false
	}

	// handle non nullable field resource_version_not_in with omitempty
	if !swag.IsZero(m.ResourceVersionNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"resource_version_not_in\":")
		bytes, err := swag.WriteJSON(m.ResourceVersionNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field state
	if m.State != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":")
		bytes, err := swag.WriteJSON(m.State)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.State_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state\":null")
		first = false
	}

	// handle non nullable field state_in with omitempty
	if !swag.IsZero(m.StateIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_in\":")
		bytes, err := swag.WriteJSON(m.StateIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field state_not
	if m.StateNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not\":")
		bytes, err := swag.WriteJSON(m.StateNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.StateNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not\":null")
		first = false
	}

	// handle non nullable field state_not_in with omitempty
	if !swag.IsZero(m.StateNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"state_not_in\":")
		bytes, err := swag.WriteJSON(m.StateNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field success_job_count
	if m.SuccessJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count\":null")
		first = false
	}

	// handle nullable field success_job_count_gt
	if m.SuccessJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_gt\":null")
		first = false
	}

	// handle nullable field success_job_count_gte
	if m.SuccessJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_gte\":null")
		first = false
	}

	// handle non nullable field success_job_count_in with omitempty
	if !swag.IsZero(m.SuccessJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_in\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field success_job_count_lt
	if m.SuccessJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_lt\":null")
		first = false
	}

	// handle nullable field success_job_count_lte
	if m.SuccessJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_lte\":null")
		first = false
	}

	// handle nullable field success_job_count_not
	if m.SuccessJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_not\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.SuccessJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_not\":null")
		first = false
	}

	// handle non nullable field success_job_count_not_in with omitempty
	if !swag.IsZero(m.SuccessJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"success_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.SuccessJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_job_count
	if m.TotalJobCount != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count\":")
		bytes, err := swag.WriteJSON(m.TotalJobCount)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCount_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count\":null")
		first = false
	}

	// handle nullable field total_job_count_gt
	if m.TotalJobCountGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_gt\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCountGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_gt\":null")
		first = false
	}

	// handle nullable field total_job_count_gte
	if m.TotalJobCountGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_gte\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCountGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_gte\":null")
		first = false
	}

	// handle non nullable field total_job_count_in with omitempty
	if !swag.IsZero(m.TotalJobCountIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_in\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field total_job_count_lt
	if m.TotalJobCountLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_lt\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCountLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_lt\":null")
		first = false
	}

	// handle nullable field total_job_count_lte
	if m.TotalJobCountLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_lte\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCountLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_lte\":null")
		first = false
	}

	// handle nullable field total_job_count_not
	if m.TotalJobCountNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_not\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.TotalJobCountNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_not\":null")
		first = false
	}

	// handle non nullable field total_job_count_not_in with omitempty
	if !swag.IsZero(m.TotalJobCountNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"total_job_count_not_in\":")
		bytes, err := swag.WriteJSON(m.TotalJobCountNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt
	if m.UpdatedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt\":null")
		first = false
	}

	// handle nullable field updatedAt_gt
	if m.UpdatedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gt\":null")
		first = false
	}

	// handle nullable field updatedAt_gte
	if m.UpdatedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_gte\":null")
		first = false
	}

	// handle non nullable field updatedAt_in with omitempty
	if !swag.IsZero(m.UpdatedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field updatedAt_lt
	if m.UpdatedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lt\":null")
		first = false
	}

	// handle nullable field updatedAt_lte
	if m.UpdatedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_lte\":null")
		first = false
	}

	// handle nullable field updatedAt_not
	if m.UpdatedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.UpdatedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not\":null")
		first = false
	}

	// handle non nullable field updatedAt_not_in with omitempty
	if !swag.IsZero(m.UpdatedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"updatedAt_not_in\":")
		bytes, err := swag.WriteJSON(m.UpdatedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this failback execution where input
func (m *FailbackExecutionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalCloudtower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationFailbackTargetExecutionsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationFailbackTargetExecutionsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationFailbackTargetExecutionsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailbackExecutionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateExternalCloudtower(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalCloudtower) { // not required
		return nil
	}

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateReplicationFailbackTargetExecutionsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationFailbackTargetExecutionsEvery) { // not required
		return nil
	}

	if m.ReplicationFailbackTargetExecutionsEvery != nil {
		if err := m.ReplicationFailbackTargetExecutionsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateReplicationFailbackTargetExecutionsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationFailbackTargetExecutionsNone) { // not required
		return nil
	}

	if m.ReplicationFailbackTargetExecutionsNone != nil {
		if err := m.ReplicationFailbackTargetExecutionsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateReplicationFailbackTargetExecutionsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationFailbackTargetExecutionsSome) { // not required
		return nil
	}

	if m.ReplicationFailbackTargetExecutionsSome != nil {
		if err := m.ReplicationFailbackTargetExecutionsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateReplicationService(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationService) { // not required
		return nil
	}

	if m.ReplicationService != nil {
		if err := m.ReplicationService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateStateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNot) { // not required
		return nil
	}

	if m.StateNot != nil {
		if err := m.StateNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) validateStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this failback execution where input based on the context it is used
func (m *FailbackExecutionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalCloudtower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationFailbackTargetExecutionsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationFailbackTargetExecutionsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationFailbackTargetExecutionsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicationService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateExternalCloudtower(ctx context.Context, formats strfmt.Registry) error {

	if m.ExternalCloudtower != nil {
		if err := m.ExternalCloudtower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_cloudtower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("external_cloudtower")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateReplicationFailbackTargetExecutionsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationFailbackTargetExecutionsEvery != nil {
		if err := m.ReplicationFailbackTargetExecutionsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_every")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateReplicationFailbackTargetExecutionsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationFailbackTargetExecutionsNone != nil {
		if err := m.ReplicationFailbackTargetExecutionsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_none")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateReplicationFailbackTargetExecutionsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationFailbackTargetExecutionsSome != nil {
		if err := m.ReplicationFailbackTargetExecutionsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_failback_target_executions_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_failback_target_executions_some")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateReplicationService(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplicationService != nil {
		if err := m.ReplicationService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication_service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replication_service")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateStateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.StateNot != nil {
		if err := m.StateNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not")
			}
			return err
		}
	}

	return nil
}

func (m *FailbackExecutionWhereInput) contextValidateStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailbackExecutionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailbackExecutionWhereInput) UnmarshalBinary(b []byte) error {
	var res FailbackExecutionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
