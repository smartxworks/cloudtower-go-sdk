// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EntityFilterWhereInput entity filter where input
//
// swagger:model EntityFilterWhereInput
type EntityFilterWhereInput struct {

	// a n d
	AND []*EntityFilterWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*EntityFilterWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*EntityFilterWhereInput `json:"OR,omitempty"`

	// apply to all clusters
	ApplyToAllClusters *bool `json:"apply_to_all_clusters,omitempty"`

	// apply to all clusters not
	ApplyToAllClustersNot *bool `json:"apply_to_all_clusters_not,omitempty"`

	// clusters every
	ClustersEvery *ClusterWhereInput `json:"clusters_every,omitempty"`

	// clusters none
	ClustersNone *ClusterWhereInput `json:"clusters_none,omitempty"`

	// clusters some
	ClustersSome *ClusterWhereInput `json:"clusters_some,omitempty"`

	// entity type
	EntityType *EntityType `json:"entity_type,omitempty"`

	// entity type in
	EntityTypeIn []EntityType `json:"entity_type_in,omitempty"`

	// entity type not
	EntityTypeNot *EntityType `json:"entity_type_not,omitempty"`

	// entity type not in
	EntityTypeNotIn []EntityType `json:"entity_type_not_in,omitempty"`

	// exec failed cluster every
	ExecFailedClusterEvery *ClusterWhereInput `json:"exec_failed_cluster_every,omitempty"`

	// exec failed cluster none
	ExecFailedClusterNone *ClusterWhereInput `json:"exec_failed_cluster_none,omitempty"`

	// exec failed cluster some
	ExecFailedClusterSome *ClusterWhereInput `json:"exec_failed_cluster_some,omitempty"`

	// filter status
	FilterStatus *FilterStatus `json:"filter_status,omitempty"`

	// filter status in
	FilterStatusIn []FilterStatus `json:"filter_status_in,omitempty"`

	// filter status not
	FilterStatusNot *FilterStatus `json:"filter_status_not,omitempty"`

	// filter status not in
	FilterStatusNotIn []FilterStatus `json:"filter_status_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last executed at gt
	LastExecutedAtGt *string `json:"last_executed_at_gt,omitempty"`

	// last executed at gte
	LastExecutedAtGte *string `json:"last_executed_at_gte,omitempty"`

	// last executed at in
	LastExecutedAtIn []string `json:"last_executed_at_in,omitempty"`

	// last executed at lt
	LastExecutedAtLt *string `json:"last_executed_at_lt,omitempty"`

	// last executed at lte
	LastExecutedAtLte *string `json:"last_executed_at_lte,omitempty"`

	// last executed at not
	LastExecutedAtNot *string `json:"last_executed_at_not,omitempty"`

	// last executed at not in
	LastExecutedAtNotIn []string `json:"last_executed_at_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// preset
	Preset *string `json:"preset,omitempty"`

	// preset contains
	PresetContains *string `json:"preset_contains,omitempty"`

	// preset ends with
	PresetEndsWith *string `json:"preset_ends_with,omitempty"`

	// preset gt
	PresetGt *string `json:"preset_gt,omitempty"`

	// preset gte
	PresetGte *string `json:"preset_gte,omitempty"`

	// preset in
	PresetIn []string `json:"preset_in,omitempty"`

	// preset lt
	PresetLt *string `json:"preset_lt,omitempty"`

	// preset lte
	PresetLte *string `json:"preset_lte,omitempty"`

	// preset not
	PresetNot *string `json:"preset_not,omitempty"`

	// preset not contains
	PresetNotContains *string `json:"preset_not_contains,omitempty"`

	// preset not ends with
	PresetNotEndsWith *string `json:"preset_not_ends_with,omitempty"`

	// preset not in
	PresetNotIn []string `json:"preset_not_in,omitempty"`

	// preset not starts with
	PresetNotStartsWith *string `json:"preset_not_starts_with,omitempty"`

	// preset starts with
	PresetStartsWith *string `json:"preset_starts_with,omitempty"`

	MarshalOpts *EntityFilterWhereInputMarshalOpts `json:"-"`
}

type EntityFilterWhereInputMarshalOpts struct {
	AND_Explicit_Null_When_Empty bool

	NOT_Explicit_Null_When_Empty bool

	OR_Explicit_Null_When_Empty bool

	ApplyToAllClusters_Explicit_Null_When_Empty bool

	ApplyToAllClustersNot_Explicit_Null_When_Empty bool

	ClustersEvery_Explicit_Null_When_Empty bool

	ClustersNone_Explicit_Null_When_Empty bool

	ClustersSome_Explicit_Null_When_Empty bool

	EntityType_Explicit_Null_When_Empty bool

	EntityTypeIn_Explicit_Null_When_Empty bool

	EntityTypeNot_Explicit_Null_When_Empty bool

	EntityTypeNotIn_Explicit_Null_When_Empty bool

	ExecFailedClusterEvery_Explicit_Null_When_Empty bool

	ExecFailedClusterNone_Explicit_Null_When_Empty bool

	ExecFailedClusterSome_Explicit_Null_When_Empty bool

	FilterStatus_Explicit_Null_When_Empty bool

	FilterStatusIn_Explicit_Null_When_Empty bool

	FilterStatusNot_Explicit_Null_When_Empty bool

	FilterStatusNotIn_Explicit_Null_When_Empty bool

	ID_Explicit_Null_When_Empty bool

	IDContains_Explicit_Null_When_Empty bool

	IDEndsWith_Explicit_Null_When_Empty bool

	IDGt_Explicit_Null_When_Empty bool

	IDGte_Explicit_Null_When_Empty bool

	IDIn_Explicit_Null_When_Empty bool

	IDLt_Explicit_Null_When_Empty bool

	IDLte_Explicit_Null_When_Empty bool

	IDNot_Explicit_Null_When_Empty bool

	IDNotContains_Explicit_Null_When_Empty bool

	IDNotEndsWith_Explicit_Null_When_Empty bool

	IDNotIn_Explicit_Null_When_Empty bool

	IDNotStartsWith_Explicit_Null_When_Empty bool

	IDStartsWith_Explicit_Null_When_Empty bool

	LastExecutedAt_Explicit_Null_When_Empty bool

	LastExecutedAtGt_Explicit_Null_When_Empty bool

	LastExecutedAtGte_Explicit_Null_When_Empty bool

	LastExecutedAtIn_Explicit_Null_When_Empty bool

	LastExecutedAtLt_Explicit_Null_When_Empty bool

	LastExecutedAtLte_Explicit_Null_When_Empty bool

	LastExecutedAtNot_Explicit_Null_When_Empty bool

	LastExecutedAtNotIn_Explicit_Null_When_Empty bool

	Name_Explicit_Null_When_Empty bool

	NameContains_Explicit_Null_When_Empty bool

	NameEndsWith_Explicit_Null_When_Empty bool

	NameGt_Explicit_Null_When_Empty bool

	NameGte_Explicit_Null_When_Empty bool

	NameIn_Explicit_Null_When_Empty bool

	NameLt_Explicit_Null_When_Empty bool

	NameLte_Explicit_Null_When_Empty bool

	NameNot_Explicit_Null_When_Empty bool

	NameNotContains_Explicit_Null_When_Empty bool

	NameNotEndsWith_Explicit_Null_When_Empty bool

	NameNotIn_Explicit_Null_When_Empty bool

	NameNotStartsWith_Explicit_Null_When_Empty bool

	NameStartsWith_Explicit_Null_When_Empty bool

	Preset_Explicit_Null_When_Empty bool

	PresetContains_Explicit_Null_When_Empty bool

	PresetEndsWith_Explicit_Null_When_Empty bool

	PresetGt_Explicit_Null_When_Empty bool

	PresetGte_Explicit_Null_When_Empty bool

	PresetIn_Explicit_Null_When_Empty bool

	PresetLt_Explicit_Null_When_Empty bool

	PresetLte_Explicit_Null_When_Empty bool

	PresetNot_Explicit_Null_When_Empty bool

	PresetNotContains_Explicit_Null_When_Empty bool

	PresetNotEndsWith_Explicit_Null_When_Empty bool

	PresetNotIn_Explicit_Null_When_Empty bool

	PresetNotStartsWith_Explicit_Null_When_Empty bool

	PresetStartsWith_Explicit_Null_When_Empty bool
}

func (m EntityFilterWhereInput) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle non nullable field AND with omitempty
	if swag.IsZero(m.AND) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"AND\":")
		bytes, err := swag.WriteJSON(m.AND)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field NOT with omitempty
	if swag.IsZero(m.NOT) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"NOT\":")
		bytes, err := swag.WriteJSON(m.NOT)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle non nullable field OR with omitempty
	if swag.IsZero(m.OR) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"OR\":")
		bytes, err := swag.WriteJSON(m.OR)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field apply_to_all_clusters
	if m.ApplyToAllClusters != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters\":")
		bytes, err := swag.WriteJSON(m.ApplyToAllClusters)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ApplyToAllClusters_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters\":null")
		first = false
	}

	// handle nullable field apply_to_all_clusters_not
	if m.ApplyToAllClustersNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters_not\":")
		bytes, err := swag.WriteJSON(m.ApplyToAllClustersNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ApplyToAllClustersNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"apply_to_all_clusters_not\":null")
		first = false
	}

	// handle nullable field clusters_every
	if m.ClustersEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":")
		bytes, err := swag.WriteJSON(m.ClustersEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_every\":null")
		first = false
	}

	// handle nullable field clusters_none
	if m.ClustersNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":")
		bytes, err := swag.WriteJSON(m.ClustersNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_none\":null")
		first = false
	}

	// handle nullable field clusters_some
	if m.ClustersSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":")
		bytes, err := swag.WriteJSON(m.ClustersSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ClustersSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"clusters_some\":null")
		first = false
	}

	// handle nullable field entity_type
	if m.EntityType != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type\":")
		bytes, err := swag.WriteJSON(m.EntityType)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityType_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type\":null")
		first = false
	}

	// handle non nullable field entity_type_in with omitempty
	if swag.IsZero(m.EntityTypeIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type_in\":")
		bytes, err := swag.WriteJSON(m.EntityTypeIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field entity_type_not
	if m.EntityTypeNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type_not\":")
		bytes, err := swag.WriteJSON(m.EntityTypeNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.EntityTypeNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type_not\":null")
		first = false
	}

	// handle non nullable field entity_type_not_in with omitempty
	if swag.IsZero(m.EntityTypeNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"entity_type_not_in\":")
		bytes, err := swag.WriteJSON(m.EntityTypeNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field exec_failed_cluster_every
	if m.ExecFailedClusterEvery != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_every\":")
		bytes, err := swag.WriteJSON(m.ExecFailedClusterEvery)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecFailedClusterEvery_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_every\":null")
		first = false
	}

	// handle nullable field exec_failed_cluster_none
	if m.ExecFailedClusterNone != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_none\":")
		bytes, err := swag.WriteJSON(m.ExecFailedClusterNone)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecFailedClusterNone_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_none\":null")
		first = false
	}

	// handle nullable field exec_failed_cluster_some
	if m.ExecFailedClusterSome != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_some\":")
		bytes, err := swag.WriteJSON(m.ExecFailedClusterSome)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ExecFailedClusterSome_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"exec_failed_cluster_some\":null")
		first = false
	}

	// handle nullable field filter_status
	if m.FilterStatus != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status\":")
		bytes, err := swag.WriteJSON(m.FilterStatus)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FilterStatus_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status\":null")
		first = false
	}

	// handle non nullable field filter_status_in with omitempty
	if swag.IsZero(m.FilterStatusIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status_in\":")
		bytes, err := swag.WriteJSON(m.FilterStatusIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field filter_status_not
	if m.FilterStatusNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status_not\":")
		bytes, err := swag.WriteJSON(m.FilterStatusNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.FilterStatusNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status_not\":null")
		first = false
	}

	// handle non nullable field filter_status_not_in with omitempty
	if swag.IsZero(m.FilterStatusNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"filter_status_not_in\":")
		bytes, err := swag.WriteJSON(m.FilterStatusNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id
	if m.ID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":")
		bytes, err := swag.WriteJSON(m.ID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.ID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id\":null")
		first = false
	}

	// handle nullable field id_contains
	if m.IDContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":")
		bytes, err := swag.WriteJSON(m.IDContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_contains\":null")
		first = false
	}

	// handle nullable field id_ends_with
	if m.IDEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_ends_with\":null")
		first = false
	}

	// handle nullable field id_gt
	if m.IDGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":")
		bytes, err := swag.WriteJSON(m.IDGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gt\":null")
		first = false
	}

	// handle nullable field id_gte
	if m.IDGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":")
		bytes, err := swag.WriteJSON(m.IDGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_gte\":null")
		first = false
	}

	// handle non nullable field id_in with omitempty
	if swag.IsZero(m.IDIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_in\":")
		bytes, err := swag.WriteJSON(m.IDIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_lt
	if m.IDLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":")
		bytes, err := swag.WriteJSON(m.IDLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lt\":null")
		first = false
	}

	// handle nullable field id_lte
	if m.IDLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":")
		bytes, err := swag.WriteJSON(m.IDLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_lte\":null")
		first = false
	}

	// handle nullable field id_not
	if m.IDNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":")
		bytes, err := swag.WriteJSON(m.IDNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not\":null")
		first = false
	}

	// handle nullable field id_not_contains
	if m.IDNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":")
		bytes, err := swag.WriteJSON(m.IDNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_contains\":null")
		first = false
	}

	// handle nullable field id_not_ends_with
	if m.IDNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.IDNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_ends_with\":null")
		first = false
	}

	// handle non nullable field id_not_in with omitempty
	if swag.IsZero(m.IDNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_in\":")
		bytes, err := swag.WriteJSON(m.IDNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field id_not_starts_with
	if m.IDNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_not_starts_with\":null")
		first = false
	}

	// handle nullable field id_starts_with
	if m.IDStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":")
		bytes, err := swag.WriteJSON(m.IDStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.IDStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"id_starts_with\":null")
		first = false
	}

	// handle nullable field last_executed_at
	if m.LastExecutedAt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at\":null")
		first = false
	}

	// handle nullable field last_executed_at_gt
	if m.LastExecutedAtGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gt\":null")
		first = false
	}

	// handle nullable field last_executed_at_gte
	if m.LastExecutedAtGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_gte\":null")
		first = false
	}

	// handle non nullable field last_executed_at_in with omitempty
	if swag.IsZero(m.LastExecutedAtIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field last_executed_at_lt
	if m.LastExecutedAtLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lt\":null")
		first = false
	}

	// handle nullable field last_executed_at_lte
	if m.LastExecutedAtLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_lte\":null")
		first = false
	}

	// handle nullable field last_executed_at_not
	if m.LastExecutedAtNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.LastExecutedAtNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not\":null")
		first = false
	}

	// handle non nullable field last_executed_at_not_in with omitempty
	if swag.IsZero(m.LastExecutedAtNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"last_executed_at_not_in\":")
		bytes, err := swag.WriteJSON(m.LastExecutedAtNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name
	if m.Name != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":")
		bytes, err := swag.WriteJSON(m.Name)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Name_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name\":null")
		first = false
	}

	// handle nullable field name_contains
	if m.NameContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":")
		bytes, err := swag.WriteJSON(m.NameContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_contains\":null")
		first = false
	}

	// handle nullable field name_ends_with
	if m.NameEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_ends_with\":null")
		first = false
	}

	// handle nullable field name_gt
	if m.NameGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":")
		bytes, err := swag.WriteJSON(m.NameGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gt\":null")
		first = false
	}

	// handle nullable field name_gte
	if m.NameGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":")
		bytes, err := swag.WriteJSON(m.NameGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_gte\":null")
		first = false
	}

	// handle non nullable field name_in with omitempty
	if swag.IsZero(m.NameIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_in\":")
		bytes, err := swag.WriteJSON(m.NameIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_lt
	if m.NameLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":")
		bytes, err := swag.WriteJSON(m.NameLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lt\":null")
		first = false
	}

	// handle nullable field name_lte
	if m.NameLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":")
		bytes, err := swag.WriteJSON(m.NameLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_lte\":null")
		first = false
	}

	// handle nullable field name_not
	if m.NameNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":")
		bytes, err := swag.WriteJSON(m.NameNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not\":null")
		first = false
	}

	// handle nullable field name_not_contains
	if m.NameNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":")
		bytes, err := swag.WriteJSON(m.NameNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_contains\":null")
		first = false
	}

	// handle nullable field name_not_ends_with
	if m.NameNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.NameNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_ends_with\":null")
		first = false
	}

	// handle non nullable field name_not_in with omitempty
	if swag.IsZero(m.NameNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_in\":")
		bytes, err := swag.WriteJSON(m.NameNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field name_not_starts_with
	if m.NameNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_not_starts_with\":null")
		first = false
	}

	// handle nullable field name_starts_with
	if m.NameStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":")
		bytes, err := swag.WriteJSON(m.NameStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.NameStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"name_starts_with\":null")
		first = false
	}

	// handle nullable field preset
	if m.Preset != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":")
		bytes, err := swag.WriteJSON(m.Preset)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Preset_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset\":null")
		first = false
	}

	// handle nullable field preset_contains
	if m.PresetContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_contains\":")
		bytes, err := swag.WriteJSON(m.PresetContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_contains\":null")
		first = false
	}

	// handle nullable field preset_ends_with
	if m.PresetEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_ends_with\":")
		bytes, err := swag.WriteJSON(m.PresetEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_ends_with\":null")
		first = false
	}

	// handle nullable field preset_gt
	if m.PresetGt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_gt\":")
		bytes, err := swag.WriteJSON(m.PresetGt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetGt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_gt\":null")
		first = false
	}

	// handle nullable field preset_gte
	if m.PresetGte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_gte\":")
		bytes, err := swag.WriteJSON(m.PresetGte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetGte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_gte\":null")
		first = false
	}

	// handle non nullable field preset_in with omitempty
	if swag.IsZero(m.PresetIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_in\":")
		bytes, err := swag.WriteJSON(m.PresetIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field preset_lt
	if m.PresetLt != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_lt\":")
		bytes, err := swag.WriteJSON(m.PresetLt)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetLt_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_lt\":null")
		first = false
	}

	// handle nullable field preset_lte
	if m.PresetLte != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_lte\":")
		bytes, err := swag.WriteJSON(m.PresetLte)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetLte_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_lte\":null")
		first = false
	}

	// handle nullable field preset_not
	if m.PresetNot != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not\":")
		bytes, err := swag.WriteJSON(m.PresetNot)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetNot_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not\":null")
		first = false
	}

	// handle nullable field preset_not_contains
	if m.PresetNotContains != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_contains\":")
		bytes, err := swag.WriteJSON(m.PresetNotContains)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetNotContains_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_contains\":null")
		first = false
	}

	// handle nullable field preset_not_ends_with
	if m.PresetNotEndsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_ends_with\":")
		bytes, err := swag.WriteJSON(m.PresetNotEndsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetNotEndsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_ends_with\":null")
		first = false
	}

	// handle non nullable field preset_not_in with omitempty
	if swag.IsZero(m.PresetNotIn) {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_in\":")
		bytes, err := swag.WriteJSON(m.PresetNotIn)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	}

	// handle nullable field preset_not_starts_with
	if m.PresetNotStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_starts_with\":")
		bytes, err := swag.WriteJSON(m.PresetNotStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetNotStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_not_starts_with\":null")
		first = false
	}

	// handle nullable field preset_starts_with
	if m.PresetStartsWith != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_starts_with\":")
		bytes, err := swag.WriteJSON(m.PresetStartsWith)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.PresetStartsWith_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"preset_starts_with\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this entity filter where input
func (m *EntityFilterWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecFailedClusterEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecFailedClusterNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecFailedClusterSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityFilterWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersEvery) { // not required
		return nil
	}

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersNone) { // not required
		return nil
	}

	if m.ClustersNone != nil {
		if err := m.ClustersNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersSome) { // not required
		return nil
	}

	if m.ClustersSome != nil {
		if err := m.ClustersSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	if m.EntityType != nil {
		if err := m.EntityType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateEntityTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityTypeIn); i++ {

		if err := m.EntityTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateEntityTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityTypeNot) { // not required
		return nil
	}

	if m.EntityTypeNot != nil {
		if err := m.EntityTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateEntityTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityTypeNotIn); i++ {

		if err := m.EntityTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateExecFailedClusterEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecFailedClusterEvery) { // not required
		return nil
	}

	if m.ExecFailedClusterEvery != nil {
		if err := m.ExecFailedClusterEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_every")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateExecFailedClusterNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecFailedClusterNone) { // not required
		return nil
	}

	if m.ExecFailedClusterNone != nil {
		if err := m.ExecFailedClusterNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_none")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateExecFailedClusterSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecFailedClusterSome) { // not required
		return nil
	}

	if m.ExecFailedClusterSome != nil {
		if err := m.ExecFailedClusterSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_some")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateFilterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterStatus) { // not required
		return nil
	}

	if m.FilterStatus != nil {
		if err := m.FilterStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateFilterStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterStatusIn); i++ {

		if err := m.FilterStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) validateFilterStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterStatusNot) { // not required
		return nil
	}

	if m.FilterStatusNot != nil {
		if err := m.FilterStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) validateFilterStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterStatusNotIn); i++ {

		if err := m.FilterStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this entity filter where input based on the context it is used
func (m *EntityFilterWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecFailedClusterEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecFailedClusterNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecFailedClusterSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityFilterWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersEvery != nil {
		if err := m.ClustersEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_every")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateClustersNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersNone != nil {
		if err := m.ClustersNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_none")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateClustersSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ClustersSome != nil {
		if err := m.ClustersSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusters_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusters_some")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateEntityType(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityType != nil {
		if err := m.EntityType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateEntityTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityTypeIn); i++ {

		if err := m.EntityTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateEntityTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityTypeNot != nil {
		if err := m.EntityTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateEntityTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityTypeNotIn); i++ {

		if err := m.EntityTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entity_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entity_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateExecFailedClusterEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecFailedClusterEvery != nil {
		if err := m.ExecFailedClusterEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_every")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateExecFailedClusterNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecFailedClusterNone != nil {
		if err := m.ExecFailedClusterNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_none")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateExecFailedClusterSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecFailedClusterSome != nil {
		if err := m.ExecFailedClusterSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exec_failed_cluster_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exec_failed_cluster_some")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateFilterStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterStatus != nil {
		if err := m.FilterStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateFilterStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilterStatusIn); i++ {

		if err := m.FilterStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateFilterStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterStatusNot != nil {
		if err := m.FilterStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_not")
			}
			return err
		}
	}

	return nil
}

func (m *EntityFilterWhereInput) contextValidateFilterStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FilterStatusNotIn); i++ {

		if err := m.FilterStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityFilterWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityFilterWhereInput) UnmarshalBinary(b []byte) error {
	var res EntityFilterWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
