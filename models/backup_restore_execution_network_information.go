// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupRestoreExecutionNetworkInformation backup restore execution network information
//
// swagger:model BackupRestoreExecutionNetworkInformation
type BackupRestoreExecutionNetworkInformation struct {

	// typename
	// Enum: [BackupRestoreExecutionNetworkInformation]
	Typename *string `json:"__typename,omitempty"`

	// type
	Type *VMNicType `json:"type,omitempty"`

	// vlan local id
	VlanLocalID *string `json:"vlan_local_id,omitempty"`

	// vpc local id
	VpcLocalID *string `json:"vpc_local_id,omitempty"`

	// vpc subnet local id
	VpcSubnetLocalID *string `json:"vpc_subnet_local_id,omitempty"`

	MarshalOpts *BackupRestoreExecutionNetworkInformationMarshalOpts `json:"-"`
}

type BackupRestoreExecutionNetworkInformationMarshalOpts struct {
	Typename_Explicit_Null_When_Empty bool

	Type_Explicit_Null_When_Empty bool

	VlanLocalID_Explicit_Null_When_Empty bool

	VpcLocalID_Explicit_Null_When_Empty bool

	VpcSubnetLocalID_Explicit_Null_When_Empty bool
}

func (m BackupRestoreExecutionNetworkInformation) MarshalJSON() ([]byte, error) {
	var b bytes.Buffer
	b.WriteString("{")

	first := true

	// handle nullable field __typename
	if m.Typename != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":")
		bytes, err := swag.WriteJSON(m.Typename)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Typename_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"__typename\":null")
		first = false
	}

	// handle nullable field type
	if m.Type != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":")
		bytes, err := swag.WriteJSON(m.Type)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.Type_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"type\":null")
		first = false
	}

	// handle nullable field vlan_local_id
	if m.VlanLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":")
		bytes, err := swag.WriteJSON(m.VlanLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VlanLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vlan_local_id\":null")
		first = false
	}

	// handle nullable field vpc_local_id
	if m.VpcLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_local_id\":")
		bytes, err := swag.WriteJSON(m.VpcLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_local_id\":null")
		first = false
	}

	// handle nullable field vpc_subnet_local_id
	if m.VpcSubnetLocalID != nil {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_subnet_local_id\":")
		bytes, err := swag.WriteJSON(m.VpcSubnetLocalID)
		if err != nil {
			return nil, err
		}
		b.Write(bytes)
		first = false
	} else if m.MarshalOpts != nil && m.MarshalOpts.VpcSubnetLocalID_Explicit_Null_When_Empty {
		if !first {
			b.WriteString(",")
		}
		b.WriteString("\"vpc_subnet_local_id\":null")
		first = false
	}

	b.WriteString("}")
	return b.Bytes(), nil
}

// Validate validates this backup restore execution network information
func (m *BackupRestoreExecutionNetworkInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backupRestoreExecutionNetworkInformationTypeTypenamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BackupRestoreExecutionNetworkInformation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRestoreExecutionNetworkInformationTypeTypenamePropEnum = append(backupRestoreExecutionNetworkInformationTypeTypenamePropEnum, v)
	}
}

const (

	// BackupRestoreExecutionNetworkInformationTypenameBackupRestoreExecutionNetworkInformation captures enum value "BackupRestoreExecutionNetworkInformation"
	BackupRestoreExecutionNetworkInformationTypenameBackupRestoreExecutionNetworkInformation string = "BackupRestoreExecutionNetworkInformation"
)

// prop value enum
func (m *BackupRestoreExecutionNetworkInformation) validateTypenameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupRestoreExecutionNetworkInformationTypeTypenamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupRestoreExecutionNetworkInformation) validateTypename(formats strfmt.Registry) error {
	if swag.IsZero(m.Typename) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypenameEnum("__typename", "body", *m.Typename); err != nil {
		return err
	}

	return nil
}

func (m *BackupRestoreExecutionNetworkInformation) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup restore execution network information based on the context it is used
func (m *BackupRestoreExecutionNetworkInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupRestoreExecutionNetworkInformation) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupRestoreExecutionNetworkInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupRestoreExecutionNetworkInformation) UnmarshalBinary(b []byte) error {
	var res BackupRestoreExecutionNetworkInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
